var $M.0: [ref]i8;

var $M.1: i64;

var $M.2: i32;

var $M.3: i8;

var $M.5: ref;

var $M.7: [ref]i8;

var $M.8: [ref]i8;

var $M.10: [ref]ref;

var $M.11: i8;

var $M.12: i32;

var $M.13: i32;

var $M.14: i8;

var $M.15: i32;

var $M.16: i32;

var $M.18: i32;

var $M.21: [ref]ref;

var $M.23: i32;

var $M.24: i8;

var $M.25: i8;

var $M.26: i32;

var $M.27: [ref]i32;

var $M.28: [ref]i32;

var $M.29: i32;

var $M.31: i32;

var $M.33: [ref]ref;

var $M.34: [ref]i32;

var $M.38: [ref]ref;

var $M.39: [ref]ref;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: [ref]ref;

var $M.46: [ref]ref;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]i64;

var $M.50: [ref]i64;

var $M.51: [ref]i32;

var $M.52: [ref]i64;

var $M.53: [ref]i32;

var $M.54: [ref]i32;

var $M.55: [ref]i64;

var $M.56: [ref]i64;

var $M.57: [ref]i8;

var $M.62: i32;

var $M.63: i32;

var $M.64: [ref]ref;

var $M.65: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]ref;

var $M.68: [ref]ref;

var $M.69: [ref]ref;

var $M.70: [ref]ref;

var $M.71: [ref]ref;

var $M.72: [ref]ref;

var $M.73: [ref]ref;

var $M.74: [ref]ref;

var $M.75: [ref]ref;

var $M.76: [ref]ref;

var $M.77: [ref]ref;

var $M.78: [ref]ref;

var $M.79: [ref]ref;

var $M.80: [ref]ref;

var $M.81: [ref]ref;

var $M.82: [ref]ref;

var $M.83: [ref]ref;

var $M.84: [ref]ref;

var $M.85: [ref]ref;

var $M.86: [ref]ref;

var $M.87: [ref]ref;

var $M.88: [ref]ref;

var $M.89: [ref]ref;

var $M.90: [ref]ref;

var $M.91: [ref]ref;

var $M.92: [ref]ref;

var $M.93: [ref]ref;

var $M.94: [ref]ref;

var $M.95: [ref]ref;

var $M.96: [ref]ref;

var $M.97: [ref]ref;

var $M.98: [ref]ref;

var $M.99: [ref]ref;

var $M.100: [ref]ref;

var $M.101: [ref]ref;

var $M.102: [ref]ref;

var $M.103: [ref]ref;

var $M.104: [ref]ref;

var $M.105: [ref]ref;

var $M.106: [ref]ref;

var $M.107: [ref]ref;

var $M.108: [ref]ref;

var $M.109: [ref]ref;

var $M.110: [ref]ref;

var $M.111: [ref]ref;

var $M.112: [ref]ref;

var $M.113: [ref]ref;

var $M.114: i32;

var $M.115: i32;

var $M.116: [ref]ref;

var $M.117: [ref]ref;

var $M.118: [ref]ref;

var $M.119: i32;

var $M.120: i32;

var $M.121: i32;

var $M.122: i32;

var $M.123: i32;

var $M.124: i32;

var $M.125: i32;

var $M.126: i32;

var $M.127: i32;

var $M.128: i16;

var $M.129: i32;

var $M.130: i32;

var $M.131: i32;

var $M.132: i32;

var $M.135: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $M.149: [ref]i8;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.160: [ref]i8;

var $M.161: [ref]i8;

var $M.162: [ref]i8;

var $M.163: [ref]i8;

var $M.164: [ref]i8;

var $M.165: [ref]i8;

var $M.166: [ref]i8;

var $M.167: [ref]i8;

var $M.168: [ref]i8;

var $M.169: [ref]i8;

var $M.170: [ref]i8;

var $M.171: [ref]i8;

var $M.172: [ref]i8;

var $M.173: [ref]i8;

var $M.174: [ref]i8;

var $M.175: [ref]i8;

var $M.176: [ref]i8;

var $M.177: [ref]i8;

var $M.178: [ref]i8;

var $M.292: [ref]i8;

var $M.293: [ref]i8;

var $M.294: [ref]i8;

var $M.295: [ref]i8;

var $M.296: [ref]i8;

var $M.297: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 1159478);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const __ksymtab_fw_core_add_descriptor: ref;

axiom __ksymtab_fw_core_add_descriptor == $sub.ref(0, 1040);

const {:count 23} __kstrtab_fw_core_add_descriptor: ref;

axiom __kstrtab_fw_core_add_descriptor == $sub.ref(0, 2087);

const ldv_linux_lib_idr_idr_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_resource_idr_of_client == $sub.ref(0, 3115);

const ldv_linux_lib_idr_idr_fw_device_idr: ref;

axiom ldv_linux_lib_idr_idr_fw_device_idr == $sub.ref(0, 4143);

const ldv_linux_kernel_sched_completion_completion_phy_config_done: ref;

axiom ldv_linux_kernel_sched_completion_completion_phy_config_done == $sub.ref(0, 5171);

const ldv_linux_kernel_sched_completion_completion_done_of_transaction_callback_data: ref;

axiom ldv_linux_kernel_sched_completion_completion_done_of_transaction_callback_data == $sub.ref(0, 6199);

const ldv_linux_kernel_sched_completion_completion_done_of_fw_card: ref;

axiom ldv_linux_kernel_sched_completion_completion_done_of_fw_card == $sub.ref(0, 7227);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 8255);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 9283);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 10311);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_fw_card: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_fw_card == $sub.ref(0, 11339);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_client: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_client == $sub.ref(0, 12367);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 13395);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 14423);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 15451);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 16479);

const ldv_linux_kernel_locking_spinlock_spin_address_handler_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_address_handler_list_lock == $sub.ref(0, 17507);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 18532);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 19560);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 20588);

const {:count 4} model_textual_descriptor: ref;

axiom model_textual_descriptor == $sub.ref(0, 21628);

const model_id_descriptor: ref;

axiom model_id_descriptor == $sub.ref(0, 22692);

const {:count 7} vendor_textual_descriptor: ref;

axiom vendor_textual_descriptor == $sub.ref(0, 23744);

const vendor_id_descriptor: ref;

axiom vendor_id_descriptor == $sub.ref(0, 24808);

const low_memory_region: ref;

axiom low_memory_region == $sub.ref(0, 25848);

const low_memory: ref;

axiom low_memory == $sub.ref(0, 26920);

const registers_region: ref;

axiom registers_region == $sub.ref(0, 27960);

const registers: ref;

axiom registers == $sub.ref(0, 29032);

const topology_map_region: ref;

axiom topology_map_region == $sub.ref(0, 30072);

const topology_map: ref;

axiom topology_map == $sub.ref(0, 31144);

const {:count 16} __kstrtab_fw_rcode_string: ref;

axiom __kstrtab_fw_rcode_string == $sub.ref(0, 32184);

const {:count 24} __kstrtab_fw_core_handle_response: ref;

axiom __kstrtab_fw_core_handle_response == $sub.ref(0, 33232);

const {:count 23} __kstrtab_fw_core_handle_request: ref;

axiom __kstrtab_fw_core_handle_request == $sub.ref(0, 34279);

const {:count 21} __kstrtab_fw_get_request_speed: ref;

axiom __kstrtab_fw_get_request_speed == $sub.ref(0, 35324);

const {:count 17} __kstrtab_fw_send_response: ref;

axiom __kstrtab_fw_send_response == $sub.ref(0, 36365);

const {:count 17} __kstrtab_fw_fill_response: ref;

axiom __kstrtab_fw_fill_response == $sub.ref(0, 37406);

const {:count 31} __kstrtab_fw_core_remove_address_handler: ref;

axiom __kstrtab_fw_core_remove_address_handler == $sub.ref(0, 38461);

const {:count 28} __kstrtab_fw_core_add_address_handler: ref;

axiom __kstrtab_fw_core_add_address_handler == $sub.ref(0, 39513);

const address_handler_list: ref;

axiom address_handler_list == $sub.ref(0, 40553);

const address_handler_list_lock: ref;

axiom address_handler_list_lock == $sub.ref(0, 41649);

const {:count 22} __kstrtab_fw_high_memory_region: ref;

axiom __kstrtab_fw_high_memory_region == $sub.ref(0, 42695);

const phy_config_done: ref;

axiom phy_config_done == $sub.ref(0, 43815);

const phy_config_packet: ref;

axiom phy_config_packet == $sub.ref(0, 44943);

const phy_config_mutex: ref;

axiom phy_config_mutex == $sub.ref(0, 46127);

const {:count 19} __kstrtab_fw_run_transaction: ref;

axiom __kstrtab_fw_run_transaction == $sub.ref(0, 47170);

const {:count 16} __kstrtab_fw_send_request: ref;

axiom __kstrtab_fw_send_request == $sub.ref(0, 48210);

const {:count 22} __kstrtab_fw_cancel_transaction: ref;

axiom __kstrtab_fw_cancel_transaction == $sub.ref(0, 49256);

const {:count 25} __kstrtab_fw_core_handle_bus_reset: ref;

axiom __kstrtab_fw_core_handle_bus_reset == $sub.ref(0, 50305);

const {:count 23} __kstrtab_fw_iso_resource_manage: ref;

axiom __kstrtab_fw_iso_resource_manage == $sub.ref(0, 51352);

const {:count 20} __kstrtab_fw_iso_context_stop: ref;

axiom __kstrtab_fw_iso_context_stop == $sub.ref(0, 52396);

const {:count 33} __kstrtab_fw_iso_context_flush_completions: ref;

axiom __kstrtab_fw_iso_context_flush_completions == $sub.ref(0, 53453);

const {:count 27} __kstrtab_fw_iso_context_queue_flush: ref;

axiom __kstrtab_fw_iso_context_queue_flush == $sub.ref(0, 54504);

const {:count 21} __kstrtab_fw_iso_context_queue: ref;

axiom __kstrtab_fw_iso_context_queue == $sub.ref(0, 55549);

const {:count 21} __kstrtab_fw_iso_context_start: ref;

axiom __kstrtab_fw_iso_context_start == $sub.ref(0, 56594);

const {:count 23} __kstrtab_fw_iso_context_destroy: ref;

axiom __kstrtab_fw_iso_context_destroy == $sub.ref(0, 57641);

const {:count 22} __kstrtab_fw_iso_context_create: ref;

axiom __kstrtab_fw_iso_context_create == $sub.ref(0, 58687);

const {:count 22} __kstrtab_fw_iso_buffer_destroy: ref;

axiom __kstrtab_fw_iso_buffer_destroy == $sub.ref(0, 59733);

const {:count 19} __kstrtab_fw_iso_buffer_init: ref;

axiom __kstrtab_fw_iso_buffer_init == $sub.ref(0, 60776);

const {:count 3} fw_unit_attributes: ref;

axiom fw_unit_attributes == $sub.ref(0, 61944);

const {:count 5} fw_device_attributes: ref;

axiom fw_device_attributes == $sub.ref(0, 63208);

const {:count 8} config_rom_attributes: ref;

axiom config_rom_attributes == $sub.ref(0, 64680);

const fw_device_type: ref;

axiom fw_device_type == $sub.ref(0, 65752);

const {:count 13} __kstrtab_fw_workqueue: ref;

axiom __kstrtab_fw_workqueue == $sub.ref(0, 66789);

const {:count 26} __kstrtab_fw_device_enable_phys_dma: ref;

axiom __kstrtab_fw_device_enable_phys_dma == $sub.ref(0, 67839);

const {:count 12} __kstrtab_fw_bus_type: ref;

axiom __kstrtab_fw_bus_type == $sub.ref(0, 68875);

const fw_unit_type: ref;

axiom fw_unit_type == $sub.ref(0, 69947);

const {:count 14} __kstrtab_fw_csr_string: ref;

axiom __kstrtab_fw_csr_string == $sub.ref(0, 70985);

const {:count 21} __kstrtab_fw_csr_iterator_next: ref;

axiom __kstrtab_fw_csr_iterator_next == $sub.ref(0, 72030);

const {:count 21} __kstrtab_fw_csr_iterator_init: ref;

axiom __kstrtab_fw_csr_iterator_init == $sub.ref(0, 73075);

const {:count 25} ioctl_handlers: ref;

axiom ioctl_handlers == $sub.ref(0, 74299);

const {:count 20} __kstrtab_fw_core_remove_card: ref;

axiom __kstrtab_fw_core_remove_card == $sub.ref(0, 75343);

const dummy_driver_template: ref;

axiom dummy_driver_template == $sub.ref(0, 76511);

const {:count 16} __kstrtab_fw_card_release: ref;

axiom __kstrtab_fw_card_release == $sub.ref(0, 77551);

const {:count 12} __kstrtab_fw_card_add: ref;

axiom __kstrtab_fw_card_add == $sub.ref(0, 78587);

const card_list: ref;

axiom card_list == $sub.ref(0, 79627);

const {:count 19} __kstrtab_fw_card_initialize: ref;

axiom __kstrtab_fw_card_initialize == $sub.ref(0, 80670);

const {:count 16} gap_count_table: ref;

axiom gap_count_table == $sub.ref(0, 81710);

const {:count 22} __kstrtab_fw_schedule_bus_reset: ref;

axiom __kstrtab_fw_schedule_bus_reset == $sub.ref(0, 82756);

const {:count 26} __kstrtab_fw_core_remove_descriptor: ref;

axiom __kstrtab_fw_core_remove_descriptor == $sub.ref(0, 83806);

const descriptor_list: ref;

axiom descriptor_list == $sub.ref(0, 84846);

const config_rom_length: ref;

axiom config_rom_length == $sub.ref(0, 85878);

const card_mutex: ref;

axiom card_mutex == $sub.ref(0, 87062);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_phy_config_mutex: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_phy_config_mutex == $sub.ref(0, 88087);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 89112);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 90137);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 91162);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_client_list_mutex_of_fw_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_client_list_mutex_of_fw_device == $sub.ref(0, 92187);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_card_mutex: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_card_mutex == $sub.ref(0, 93212);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 94240);

const ldv_thread_9: ref;

axiom ldv_thread_9 == $sub.ref(0, 95280);

const ldv_thread_8: ref;

axiom ldv_thread_8 == $sub.ref(0, 96320);

const ldv_thread_7: ref;

axiom ldv_thread_7 == $sub.ref(0, 97360);

const ldv_thread_6: ref;

axiom ldv_thread_6 == $sub.ref(0, 98400);

const ldv_thread_5: ref;

axiom ldv_thread_5 == $sub.ref(0, 99440);

const ldv_thread_4: ref;

axiom ldv_thread_4 == $sub.ref(0, 100480);

const ldv_thread_3: ref;

axiom ldv_thread_3 == $sub.ref(0, 101520);

const ldv_thread_22: ref;

axiom ldv_thread_22 == $sub.ref(0, 102560);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 103600);

const ldv_thread_17: ref;

axiom ldv_thread_17 == $sub.ref(0, 104640);

const ldv_thread_16: ref;

axiom ldv_thread_16 == $sub.ref(0, 105680);

const ldv_thread_15: ref;

axiom ldv_thread_15 == $sub.ref(0, 106720);

const ldv_thread_14: ref;

axiom ldv_thread_14 == $sub.ref(0, 107760);

const ldv_thread_13: ref;

axiom ldv_thread_13 == $sub.ref(0, 108800);

const ldv_thread_12: ref;

axiom ldv_thread_12 == $sub.ref(0, 109840);

const ldv_thread_11: ref;

axiom ldv_thread_11 == $sub.ref(0, 110880);

const ldv_thread_10: ref;

axiom ldv_thread_10 == $sub.ref(0, 111920);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 112960);

const fw_cdev_major: ref;

axiom fw_cdev_major == $sub.ref(0, 113988);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 115028);

const {:count 256} tmp_config_rom: ref;

axiom tmp_config_rom == $sub.ref(0, 117076);

const descriptor_count: ref;

axiom descriptor_count == $sub.ref(0, 118104);

const fw_workqueue: ref;

axiom fw_workqueue == $sub.ref(0, 119136);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 120164);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 121192);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 122220);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 123248);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 124276);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 125304);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 126332);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 127358);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 128386);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 129414);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 130442);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 131470);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 132498);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 133526);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 134554);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 135582);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 136610);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 137638);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 138666);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 139694);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 140722);

const __ksymtab_fw_rcode_string: ref;

axiom __ksymtab_fw_rcode_string == $sub.ref(0, 141762);

const __ksymtab_fw_core_handle_response: ref;

axiom __ksymtab_fw_core_handle_response == $sub.ref(0, 142802);

const __ksymtab_fw_core_handle_request: ref;

axiom __ksymtab_fw_core_handle_request == $sub.ref(0, 143842);

const __ksymtab_fw_get_request_speed: ref;

axiom __ksymtab_fw_get_request_speed == $sub.ref(0, 144882);

const __ksymtab_fw_send_response: ref;

axiom __ksymtab_fw_send_response == $sub.ref(0, 145922);

const __ksymtab_fw_fill_response: ref;

axiom __ksymtab_fw_fill_response == $sub.ref(0, 146962);

const __ksymtab_fw_core_remove_address_handler: ref;

axiom __ksymtab_fw_core_remove_address_handler == $sub.ref(0, 148002);

const __ksymtab_fw_core_add_address_handler: ref;

axiom __ksymtab_fw_core_add_address_handler == $sub.ref(0, 149042);

const __ksymtab_fw_high_memory_region: ref;

axiom __ksymtab_fw_high_memory_region == $sub.ref(0, 150082);

const fw_high_memory_region: ref;

axiom fw_high_memory_region == $sub.ref(0, 151122);

const __ksymtab_fw_run_transaction: ref;

axiom __ksymtab_fw_run_transaction == $sub.ref(0, 152162);

const __ksymtab_fw_send_request: ref;

axiom __ksymtab_fw_send_request == $sub.ref(0, 153202);

const __ksymtab_fw_cancel_transaction: ref;

axiom __ksymtab_fw_cancel_transaction == $sub.ref(0, 154242);

const __ksymtab_fw_core_handle_bus_reset: ref;

axiom __ksymtab_fw_core_handle_bus_reset == $sub.ref(0, 155282);

const __ksymtab_fw_iso_resource_manage: ref;

axiom __ksymtab_fw_iso_resource_manage == $sub.ref(0, 156322);

const __ksymtab_fw_iso_context_stop: ref;

axiom __ksymtab_fw_iso_context_stop == $sub.ref(0, 157362);

const __ksymtab_fw_iso_context_flush_completions: ref;

axiom __ksymtab_fw_iso_context_flush_completions == $sub.ref(0, 158402);

const __ksymtab_fw_iso_context_queue_flush: ref;

axiom __ksymtab_fw_iso_context_queue_flush == $sub.ref(0, 159442);

const __ksymtab_fw_iso_context_queue: ref;

axiom __ksymtab_fw_iso_context_queue == $sub.ref(0, 160482);

const __ksymtab_fw_iso_context_start: ref;

axiom __ksymtab_fw_iso_context_start == $sub.ref(0, 161522);

const __ksymtab_fw_iso_context_destroy: ref;

axiom __ksymtab_fw_iso_context_destroy == $sub.ref(0, 162562);

const __ksymtab_fw_iso_context_create: ref;

axiom __ksymtab_fw_iso_context_create == $sub.ref(0, 163602);

const __ksymtab_fw_iso_buffer_destroy: ref;

axiom __ksymtab_fw_iso_buffer_destroy == $sub.ref(0, 164642);

const __ksymtab_fw_iso_buffer_init: ref;

axiom __ksymtab_fw_iso_buffer_init == $sub.ref(0, 165682);

const __ksymtab_fw_workqueue: ref;

axiom __ksymtab_fw_workqueue == $sub.ref(0, 166722);

const fw_device_idr: ref;

axiom fw_device_idr == $sub.ref(0, 167858);

const fw_device_rwsem: ref;

axiom fw_device_rwsem == $sub.ref(0, 169042);

const __ksymtab_fw_device_enable_phys_dma: ref;

axiom __ksymtab_fw_device_enable_phys_dma == $sub.ref(0, 170082);

const __ksymtab_fw_bus_type: ref;

axiom __ksymtab_fw_bus_type == $sub.ref(0, 171122);

const fw_bus_type: ref;

axiom fw_bus_type == $sub.ref(0, 172306);

const __ksymtab_fw_csr_string: ref;

axiom __ksymtab_fw_csr_string == $sub.ref(0, 173346);

const __ksymtab_fw_csr_iterator_next: ref;

axiom __ksymtab_fw_csr_iterator_next == $sub.ref(0, 174386);

const __ksymtab_fw_csr_iterator_init: ref;

axiom __ksymtab_fw_csr_iterator_init == $sub.ref(0, 175426);

const fw_device_ops: ref;

axiom fw_device_ops == $sub.ref(0, 176690);

const __ksymtab_fw_core_remove_card: ref;

axiom __ksymtab_fw_core_remove_card == $sub.ref(0, 177730);

const __ksymtab_fw_card_release: ref;

axiom __ksymtab_fw_card_release == $sub.ref(0, 178770);

const __ksymtab_fw_card_add: ref;

axiom __ksymtab_fw_card_add == $sub.ref(0, 179810);

const __ksymtab_fw_card_initialize: ref;

axiom __ksymtab_fw_card_initialize == $sub.ref(0, 180850);

const __ksymtab_fw_schedule_bus_reset: ref;

axiom __ksymtab_fw_schedule_bus_reset == $sub.ref(0, 181890);

const __ksymtab_fw_core_remove_descriptor: ref;

axiom __ksymtab_fw_core_remove_descriptor == $sub.ref(0, 182930);

const {:count 29} .str.7: ref;

axiom .str.7 == $sub.ref(0, 183983);

const {:count 21} .str.36: ref;

axiom .str.36 == $sub.ref(0, 185028);

const {:count 22} .str.2: ref;

axiom .str.2 == $sub.ref(0, 186074);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 187124);

const {:count 27} .str.4: ref;

axiom .str.4 == $sub.ref(0, 188175);

const {:count 26} .str.5: ref;

axiom .str.5 == $sub.ref(0, 189225);

const {:count 27} .str.6: ref;

axiom .str.6 == $sub.ref(0, 190276);

const {:count 35} .str.37: ref;

axiom .str.37 == $sub.ref(0, 191335);

const {:count 17} .str.38: ref;

axiom .str.38 == $sub.ref(0, 192376);

const {:count 27} .str.39: ref;

axiom .str.39 == $sub.ref(0, 193427);

const {:count 52} .str.40: ref;

axiom .str.40 == $sub.ref(0, 194503);

const {:count 39} .str.41: ref;

axiom .str.41 == $sub.ref(0, 195566);

const {:count 9} .str.22: ref;

axiom .str.22 == $sub.ref(0, 196599);

const {:count 15} .str.23: ref;

axiom .str.23 == $sub.ref(0, 197638);

const {:count 11} .str.24: ref;

axiom .str.24 == $sub.ref(0, 198673);

const {:count 11} .str.25: ref;

axiom .str.25 == $sub.ref(0, 199708);

const {:count 14} .str.26: ref;

axiom .str.26 == $sub.ref(0, 200746);

const {:count 11} .str.27: ref;

axiom .str.27 == $sub.ref(0, 201781);

const {:count 8} .str.28: ref;

axiom .str.28 == $sub.ref(0, 202813);

const {:count 5} .str.29: ref;

axiom .str.29 == $sub.ref(0, 203842);

const {:count 10} .str.30: ref;

axiom .str.30 == $sub.ref(0, 204876);

const {:count 7} .str.31: ref;

axiom .str.31 == $sub.ref(0, 205907);

const {:count 8} .str.32: ref;

axiom .str.32 == $sub.ref(0, 206939);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 38} .str.42: ref;

axiom .str.42 == $sub.ref(0, 208001);

const {:count 25} .str.17: ref;

axiom .str.17 == $sub.ref(0, 209050);

const {:count 28} .str.16: ref;

axiom .str.16 == $sub.ref(0, 210102);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 211162);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 16} .str.19: ref;

axiom .str.19 == $sub.ref(0, 212202);

const {:count 23} .str.1: ref;

axiom .str.1 == $sub.ref(0, 213249);

const {:count 27} .str.12: ref;

axiom .str.12 == $sub.ref(0, 214300);

const {:count 25} .str.13: ref;

axiom .str.13 == $sub.ref(0, 215349);

const {:count 26} .str.14: ref;

axiom .str.14 == $sub.ref(0, 216399);

const {:count 21} .str.73: ref;

axiom .str.73 == $sub.ref(0, 217444);

const {:count 39} .str.74: ref;

axiom .str.74 == $sub.ref(0, 218507);

const {:count 6} .str.70: ref;

axiom .str.70 == $sub.ref(0, 219537);

const {:count 31} .str.54: ref;

axiom .str.54 == $sub.ref(0, 220592);

const {:count 38} .str.55: ref;

axiom .str.55 == $sub.ref(0, 221654);

const {:count 42} .str.56: ref;

axiom .str.56 == $sub.ref(0, 222720);

const .str: ref;

axiom .str == $sub.ref(0, 223767);

const {:count 53} .str.50: ref;

axiom .str.50 == $sub.ref(0, 224844);

const {:count 5} .str.51: ref;

axiom .str.51 == $sub.ref(0, 225873);

const {:count 22} .str.52: ref;

axiom .str.52 == $sub.ref(0, 226919);

const {:count 41} .str.53: ref;

axiom .str.53 == $sub.ref(0, 227984);

const {:count 24} .str.57: ref;

axiom .str.57 == $sub.ref(0, 229032);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 29} .str.43: ref;

axiom .str.43 == $sub.ref(0, 230085);

const {:count 41} .str.83: ref;

axiom .str.83 == $sub.ref(0, 231150);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 24} .str.47: ref;

axiom .str.47 == $sub.ref(0, 232198);

const {:count 14} .str.48: ref;

axiom .str.48 == $sub.ref(0, 233236);

const {:count 23} .str.49: ref;

axiom .str.49 == $sub.ref(0, 234283);

const {:count 9} .str.8: ref;

axiom .str.8 == $sub.ref(0, 235316);

const {:count 26} .str.9: ref;

axiom .str.9 == $sub.ref(0, 236366);

const {:count 16} .str.10: ref;

axiom .str.10 == $sub.ref(0, 237406);

const {:count 19} .str.11: ref;

axiom .str.11 == $sub.ref(0, 238449);

const {:count 23} .str.15: ref;

axiom .str.15 == $sub.ref(0, 239496);

const {:count 33} .str.89: ref;

axiom .str.89 == $sub.ref(0, 240553);

const {:count 32} .str.84: ref;

axiom .str.84 == $sub.ref(0, 241609);

const {:count 38} .str.85: ref;

axiom .str.85 == $sub.ref(0, 242671);

const {:count 26} .str.86: ref;

axiom .str.86 == $sub.ref(0, 243721);

const {:count 39} .str.87: ref;

axiom .str.87 == $sub.ref(0, 244784);

const {:count 56} .str.88: ref;

axiom .str.88 == $sub.ref(0, 245864);

const {:count 33} .str.20: ref;

axiom .str.20 == $sub.ref(0, 246921);

const {:count 51} .str.94: ref;

axiom .str.94 == $sub.ref(0, 247996);

const {:count 45} .str.21: ref;

axiom .str.21 == $sub.ref(0, 249065);

const {:count 21} .str.34: ref;

axiom .str.34 == $sub.ref(0, 250110);

const {:count 11} .str.35: ref;

axiom .str.35 == $sub.ref(0, 251145);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 34} .str.46: ref;

axiom .str.46 == $sub.ref(0, 252203);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 20} .str.44: ref;

axiom .str.44 == $sub.ref(0, 253247);

const {:count 21} .str.45: ref;

axiom .str.45 == $sub.ref(0, 254292);

const {:count 12} .str.82: ref;

axiom .str.82 == $sub.ref(0, 255328);

const {:count 36} .str.79: ref;

axiom .str.79 == $sub.ref(0, 256388);

const {:count 7} .str.58: ref;

axiom .str.58 == $sub.ref(0, 257419);

const {:count 17} .str.59: ref;

axiom .str.59 == $sub.ref(0, 258460);

const {:count 13} .str.60: ref;

axiom .str.60 == $sub.ref(0, 259497);

const {:count 8} .str.61: ref;

axiom .str.61 == $sub.ref(0, 260529);

const {:count 6} .str.62: ref;

axiom .str.62 == $sub.ref(0, 261559);

const {:count 12} .str.63: ref;

axiom .str.63 == $sub.ref(0, 262595);

const {:count 11} .str.64: ref;

axiom .str.64 == $sub.ref(0, 263630);

const {:count 22} .str.65: ref;

axiom .str.65 == $sub.ref(0, 264676);

const _ctype: ref;

axiom _ctype == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 2} .str.75: ref;

axiom .str.75 == $sub.ref(0, 265702);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 266734);

const {:count 11} .str.66: ref;

axiom .str.66 == $sub.ref(0, 267769);

const {:count 5} .str.67: ref;

axiom .str.67 == $sub.ref(0, 268798);

const {:count 9} .str.68: ref;

axiom .str.68 == $sub.ref(0, 269831);

const {:count 6} .str.69: ref;

axiom .str.69 == $sub.ref(0, 270861);

const {:count 15} .str.76: ref;

axiom .str.76 == $sub.ref(0, 271900);

const {:count 4} .str.78: ref;

axiom .str.78 == $sub.ref(0, 272928);

const {:count 12} .str.77: ref;

axiom .str.77 == $sub.ref(0, 273964);

const {:count 9} .str.71: ref;

axiom .str.71 == $sub.ref(0, 274997);

const {:count 10} .str.72: ref;

axiom .str.72 == $sub.ref(0, 276031);

const {:count 4} .str.80: ref;

axiom .str.80 == $sub.ref(0, 277059);

const {:count 27} .str.90: ref;

axiom .str.90 == $sub.ref(0, 278110);

const {:count 17} .str.91: ref;

axiom .str.91 == $sub.ref(0, 279151);

const {:count 28} .str.92: ref;

axiom .str.92 == $sub.ref(0, 280203);

const {:count 26} .str.93: ref;

axiom .str.93 == $sub.ref(0, 281253);

const {:count 11} .str.95: ref;

axiom .str.95 == $sub.ref(0, 282288);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const .str.33: ref;

axiom .str.33 == $sub.ref(0, 283313);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 284345);

const {:count 3} .str.1.206: ref;

axiom .str.1.206 == $sub.ref(0, 285372);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 286410);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 287438);

const fw_core_add_descriptor: ref;

axiom fw_core_add_descriptor == $sub.ref(0, 288470);

procedure fw_core_add_descriptor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.0, assertsPassed;



implementation fw_core_add_descriptor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i5: i64;
  var $i16: i64;
  var $i4: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i25: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $ult.i64(0, $i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i4, $i18);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} ldv_mutex_lock_96(card_mutex);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i21 := required_space($p0);
    call {:si_unique_call 3} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i22 := $M.1;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i21);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i64($i23, 256);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} list_add_tail($p26, descriptor_list);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i27 := required_space($p0);
    call {:si_unique_call 6} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i28, $i27);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.1 := $i29;
    call {:si_unique_call 7} {:cexpr "config_rom_length"} boogie_si_record_i64($i29);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i30 := $M.2;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $M.2 := $i31;
    call {:si_unique_call 8} {:cexpr "descriptor_count"} boogie_si_record_i32($i31);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} update_config_roms();
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} ldv_mutex_unlock_97(card_mutex);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i35 := $M.2;
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, 1);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.2 := $i36;
    call {:si_unique_call 10} {:cexpr "descriptor_count"} boogie_si_record_i32($i36);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 16);
    goto $bb15;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb11;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i5, $i16 := fw_core_add_descriptor_loop_$bb4($p0, $p1, $p6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i5, $i16);
    goto $bb4_last;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($i5, 4));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 16);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, 1);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i5, $i12);
    call {:si_unique_call 0} {:cexpr "i"} boogie_si_record_i64($i13);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p1);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i15 := $ult.i64($i13, $i14);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i4 := $i16;
    goto $bb3;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 289502);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_mutex_lock_96: ref;

axiom ldv_mutex_lock_96 == $sub.ref(0, 290534);

procedure ldv_mutex_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const required_space: ref;

axiom required_space == $sub.ref(0, 291566);

procedure required_space($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation required_space($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i6 := (if $i5 == 1 then 1 else 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i2, $i6);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 1);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 292598);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} __list_add($p0, $p3, $p1);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    return;
}



const update_config_roms: ref;

axiom update_config_roms == $sub.ref(0, 293630);

procedure update_config_roms();
  free requires assertsPassed;
  modifies $M.0;



implementation update_config_roms()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p6: ref;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, card_list);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 320), 1856));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 320), 1856)), $mul.ref(320, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, $p2i.ref.i64(card_list));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p6 := $p2;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $i11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p6, vslice_dummy_var_39 := update_config_roms_loop_$bb4($p7, $p8, $p9, $p10, $i11, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $p6, vslice_dummy_var_39);
    goto $bb4_last;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} generate_config_rom($p6, tmp_config_rom);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    call {:si_unique_call 15} vslice_dummy_var_39 := devirtbounce($p10, $p6, tmp_config_rom, $i11);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref($sub.ref(0, 320), 1856));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p16, $mul.ref($sub.ref(0, 320), 1856)), $mul.ref(320, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, $p2i.ref.i64(card_list));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $p6 := $p17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;
}



const ldv_mutex_unlock_97: ref;

axiom ldv_mutex_unlock_97 == $sub.ref(0, 294662);

procedure ldv_mutex_unlock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex == $sub.ref(0, 295694);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 18} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_card_mutex"} boogie_si_record_i8(0);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 296726);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 20} __VERIFIER_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const generate_config_rom: ref;

axiom generate_config_rom == $sub.ref(0, 297758);

procedure generate_config_rom($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation generate_config_rom($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i64;
  var $i66: i32;
  var $i67: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i75: i32;
  var $i76: i32;
  var $i41: i32;
  var $i42: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i91: i32;
  var $p105: ref;
  var $i106: i64;
  var $i107: i32;
  var $i108: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p86: ref;
  var $i87: i32;
  var $i116: i1;
  var $i118: i64;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i117: i32;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i1;
  var $i133: i1;
  var $i134: i32;
  var $i135: i64;
  var vslice_dummy_var_40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 1028);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 876163889);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(200, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    call {:si_unique_call 21} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(200, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(200, 1));
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(196, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i11 := $srem.i32($i4, 14);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 2);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 4);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(192, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 12);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $sub.i32(0, 268434944));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i20 := __fswab32($i19);
    call {:si_unique_call 23} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(184, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 32);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i32($i24);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i26 := __fswab32($i25);
    call {:si_unique_call 25} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(184, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i31 := __fswab32($i30);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i32($i31);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p1, $mul.ref(6, 4));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $sub.i32(0, 1065156596));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i34 := $M.2;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 7);
    call {:si_unique_call 28} {:cexpr "j"} boogie_si_record_i32($i35);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, descriptor_list);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i41, $i42 := 7, $i35;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i41, $sub.i32(0, 6));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i78 := $shl.i32($i77, 16);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i79 := __fswab32($i78);
    call {:si_unique_call 37} {:cexpr "tmp___6"} boogie_si_record_i32($i79);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, descriptor_list);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32(0, $i42);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i42);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i125 := $M.1;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i124, $i125);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    call {:si_unique_call 45} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i127);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i129 := $zext.i1.i32($i128);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i131 := ldv__builtin_expect($i130, 0);
    call {:si_unique_call 47} {:cexpr "tmp___8"} boogie_si_record_i64($i131);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i127, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i32($i133);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_40 := ldv__builtin_expect($i135, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i132 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} warn_slowpath_null(.str.7, 160);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i116 == 1;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i117 := 0;
    goto $bb31;

  $bb31:
    call $i118, $p119, $i120, $i121, $i122, $i123, $i117 := generate_config_rom_loop_$bb31($p1, $i42, $i118, $p119, $i120, $i121, $i122, $i123, $i117);
    goto $bb31_last;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i117);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p1, $mul.ref($i118, 4));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i120 := fw_compute_block_crc($p119);
    call {:si_unique_call 43} {:cexpr "length"} boogie_si_record_i32($i120);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i121 := $add.i32($i120, 1);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i117, $i121);
    call {:si_unique_call 44} {:cexpr "i"} boogie_si_record_i32($i122);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i122, $i42);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i123 == 1);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i117 := $i122;
    goto $bb33_dummy;

  $bb12:
    assume $i85 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p86, $i87 := $p81, $i41;
    goto $bb15;

  $bb15:
    call $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i91, $p105, $i106, $i107, $i108, $p110, $p111, $p112, $p113, $i114, $i115, $p86, $i87 := generate_config_rom_loop_$bb15($p1, $p88, $i89, $i90, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i91, $p105, $i106, $i107, $i108, $p110, $p111, $p112, $p113, $i114, $i115, $p86, $i87);
    goto $bb15_last;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p86, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i89 := $load.i64($M.0, $p88);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i90 := $ult.i64(0, $i89);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p86, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.0, $p105);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i64.i32($i106);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i87, $i107);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32($i108);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p86, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i115 == 1);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb25:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $p86, $i87 := $p111, $i108;
    goto $bb25_dummy;

  $bb17:
    assume $i90 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb20;

  $bb20:
    call $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i91 := generate_config_rom_loop_$bb20($p1, $p88, $p92, $p93, $i94, $p95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $i91, $p86, $i87);
    goto $bb20_last;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p86, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i91);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p93, $mul.ref($i94, 4));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} $i97 := __fswab32($i96);
    call {:si_unique_call 39} {:cexpr "tmp___7"} boogie_si_record_i32($i97);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i87, $i91);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p1, $mul.ref($i99, 4));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i97);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i91, 1);
    call {:si_unique_call 40} {:cexpr "k"} boogie_si_record_i32($i101);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i103 := $load.i64($M.0, $p88);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i104 := $ult.i64($i102, $i103);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i104 == 1);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i91 := $i101;
    goto $bb22_dummy;

  $bb1:
    assume $i40 == 1;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i43, $p44, $i45 := $i35, $p36, 7;
    goto $bb4;

  $bb4:
    call $p46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $p54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p69, $p70, $p71, $p72, $i73, $i74, $i43, $p44, $i45, $i75, $i76 := generate_config_rom_loop_$bb4($p1, $p46, $i47, $i48, $i49, $p50, $i51, $i52, $i53, $p54, $i55, $p56, $i57, $i58, $i59, $i60, $i61, $p62, $i63, $p64, $i65, $i66, $i67, $p69, $p70, $p71, $p72, $i73, $i74, $i43, $p44, $i45, $i75, $i76);
    goto $bb4_last;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i45;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i43, $i55);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i57, $i58);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $i60 := __fswab32($i59);
    call {:si_unique_call 33} {:cexpr "tmp___5"} boogie_si_record_i32($i60);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i55);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p1, $mul.ref($i61, 4));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i60);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i55, 1);
    call {:si_unique_call 34} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i65);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i43, $i66);
    call {:si_unique_call 35} {:cexpr "j"} boogie_si_record_i32($i67);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $i75, $i76 := $i63, $i67;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i75, $i76;
    goto $bb3;

  $bb9:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i43, $p44, $i45 := $i67, $p70, $i63;
    goto $bb9_dummy;

  $bb6:
    assume $i48 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i45, 1);
    call {:si_unique_call 29} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p44, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i52 := __fswab32($i51);
    call {:si_unique_call 31} {:cexpr "tmp___4"} boogie_si_record_i32($i52);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i45);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p1, $mul.ref($i53, 4));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i52);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i55 := $i49;
    goto $bb8;

  $bb33_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  $bb25_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_173;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 298790);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $i1 := llvm.bswap.i32($i0);
    call {:si_unique_call 52} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fw_compute_block_crc: ref;

axiom fw_compute_block_crc == $sub.ref(0, 299822);

procedure fw_compute_block_crc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_compute_block_crc($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i2 := __fswab32($i1);
    call {:si_unique_call 54} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i2, 16);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 255);
    call {:si_unique_call 55} {:cexpr "length"} boogie_si_record_i32($i4);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i4, 4);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} $i9 := crc_itu_t(0, $p6, $i8);
    call {:si_unique_call 57} {:cexpr "crc"} boogie_si_record_i16($i9);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $i11 := __fswab32($i10);
    call {:si_unique_call 59} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i11);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i13);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 300854);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 61} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 301886);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    return;
}



const crc_itu_t: ref;

axiom crc_itu_t == $sub.ref(0, 302918);

procedure crc_itu_t($i0: i16, $p1: ref, $i2: i64) returns ($r: i16);
  free requires assertsPassed;



implementation crc_itu_t($i0: i16, $p1: ref, $i2: i64) returns ($r: i16)
{
  var $i3: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 63} {:cexpr "crc_itu_t:arg:arg0"} boogie_si_record_i16($i0);
    call {:si_unique_call 64} {:cexpr "crc_itu_t:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 1} true;
    call {:si_unique_call 65} $i3 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 66} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i3);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const llvm.bswap.i32: ref;

axiom llvm.bswap.i32 == $sub.ref(0, 303950);

procedure llvm.bswap.i32($i0: i32) returns ($r: i32);



const __list_add: ref;

axiom __list_add == $sub.ref(0, 304982);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex == $sub.ref(0, 306014);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 68} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_card_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 307046);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 70} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_core_remove_descriptor: ref;

axiom fw_core_remove_descriptor == $sub.ref(0, 308078);

procedure fw_core_remove_descriptor($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.0, assertsPassed;



implementation fw_core_remove_descriptor($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} ldv_mutex_lock_98(card_mutex);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} list_del($p1);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i2 := required_space($p0);
    call {:si_unique_call 74} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, $i2);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.1 := $i4;
    call {:si_unique_call 75} {:cexpr "config_rom_length"} boogie_si_record_i64($i4);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i5 := $M.2;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $M.2 := $i6;
    call {:si_unique_call 76} {:cexpr "descriptor_count"} boogie_si_record_i32($i6);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} update_config_roms();
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ldv_mutex_unlock_99(card_mutex);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $i10 := $M.2;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.2 := $i11;
    call {:si_unique_call 77} {:cexpr "descriptor_count"} boogie_si_record_i32($i11);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_98: ref;

axiom ldv_mutex_lock_98 == $sub.ref(0, 309110);

procedure ldv_mutex_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 310142);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_99: ref;

axiom ldv_mutex_unlock_99 == $sub.ref(0, 311174);

procedure ldv_mutex_unlock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const fw_schedule_bus_reset: ref;

axiom fw_schedule_bus_reset == $sub.ref(0, 312206);

procedure fw_schedule_bus_reset($p0: ref, $i1: i1, $i2: i1);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_schedule_bus_reset($p0: ref, $i1: i1, $i2: i1)
{
  var $i3: i8;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var vslice_dummy_var_41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 82} {:cexpr "fw_schedule_bus_reset:arg:delayed"} boogie_si_record_i1($i1);
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 83} {:cexpr "fw_schedule_bus_reset:arg:short_reset"} boogie_si_record_i1($i2);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(576, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i5);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i7);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_41 := fw_card_get($p0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p9 := $M.5;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1));
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i3);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i12 := (if $i11 == 1 then 3 else 0);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i13 := queue_delayed_work($p9, $p10, $i12);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 86} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} fw_card_put($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const fw_card_get: ref;

axiom fw_card_get == $sub.ref(0, 313238);

procedure fw_card_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_card_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} kref_get($p1);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 314270);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i3 := queue_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 91} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fw_card_put: ref;

axiom fw_card_put == $sub.ref(0, 315302);

procedure fw_card_put($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_card_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} vslice_dummy_var_42 := kref_put($p1, fw_card_release);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const fw_card_release: ref;

axiom fw_card_release == $sub.ref(0, 316334);

procedure fw_card_release($p0: ref);
  free requires assertsPassed;



implementation fw_card_release($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 16), 1856)), $mul.ref(24, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} complete_($p3);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 317366);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 318398);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 97} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_43 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 103} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 104} devirtbounce.1($p2, $p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} warn_slowpath_null(.str.36, 71);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 319430);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i2 := ldv_linux_usb_dev_atomic_sub_and_test($i0, $p1);
    call {:si_unique_call 107} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_sub_and_test: ref;

axiom ldv_linux_usb_dev_atomic_sub_and_test == $sub.ref(0, 320462);

procedure ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} {:cexpr "ldv_linux_usb_dev_atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, $i0);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 321494);

procedure complete_($p0: ref);
  free requires assertsPassed;



implementation complete_($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 322526);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 109} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 110} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 111} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 112} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 323558);

procedure kref_get($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_44: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 114} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 115} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 117} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_44 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 118} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 120} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 123} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} warn_slowpath_null(.str.36, 47);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 324590);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i2 := ldv_linux_usb_dev_atomic_add_return($i0, $p1);
    call {:si_unique_call 127} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_linux_usb_dev_atomic_add_return: ref;

axiom ldv_linux_usb_dev_atomic_add_return == $sub.ref(0, 325622);

procedure ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} {:cexpr "ldv_linux_usb_dev_atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const fw_card_initialize: ref;

axiom fw_card_initialize == $sub.ref(0, 326654);

procedure fw_card_initialize($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16;



implementation fw_card_initialize($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $p52: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p74: ref;
  var $p77: ref;
  var $p79: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i64;
  var $p87: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $sub.i32(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i12 := atomic_add_return(1, $p3);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(316, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p2);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(128, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 0);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(168, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 2);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(172, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(176, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 16000);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(180, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 500);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(824, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 2147483617));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} kref_init($p24);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(24, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_init_completion_109($p25);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} INIT_LIST_HEAD($p26);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(336, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} INIT_LIST_HEAD($p27);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} vslice_dummy_var_45 := spinlock_check($p28);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} __raw_spin_lock_init($p32, .str.2, $p4);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} __init_work($p35, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 137438953408);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p6);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 145} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p40, $p41, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} lockdep_init_map($p44, .str.3, $p5, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} INIT_LIST_HEAD($p47);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, br_work);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(80, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} init_timer_key($p52, 2, .str.4, $p7);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, delayed_work_timer_fn);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(352, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, $i57);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(0, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __init_work($p62, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p63, 137438953408);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p9);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 150} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p67, $p68, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} lockdep_init_map($p71, .str.5, $p8, 0);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} INIT_LIST_HEAD($p74);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, bm_work);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(80, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} init_timer_key($p79, 2, .str.6, $p10);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, delayed_work_timer_fn);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p87, $i84);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 327686);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} atomic_set($p1, 1);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_completion_109: ref;

axiom ldv_init_completion_109 == $sub.ref(0, 328718);

procedure ldv_init_completion_109($p0: ref);
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_init_completion_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} ldv_linux_kernel_sched_completion_init_completion_done_of_fw_card();
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 329750);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 330782);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 331814);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 332846);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 333878);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 334910);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    return;
}



const br_work: ref;

axiom br_work == $sub.ref(0, 335942);

procedure br_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.11, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.12, $M.23, $M.31, assertsPassed, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.13, $M.43, $M.25, $M.14;



implementation br_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i1;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 352), 1856));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 352), 1856)), $mul.ref(160, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 352), 1856)), $mul.ref(124, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} fw_send_phy_config($p2, $sub.i32(0, 1), $i20, $sub.i32(0, 1));
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 352), 1856)), $mul.ref(576, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} vslice_dummy_var_46 := reset_bus($p2, $i23);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} fw_card_put($p2);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i6 := get_jiffies_64();
    call {:si_unique_call 159} {:cexpr "tmp___1"} boogie_si_record_i64($i6);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 352), 1856)), $mul.ref(160, 1));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64($i6, $i8);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i9, 500);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i11 := $slt.i64($i10, 0);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p12 := $M.5;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 352), 1856)), $mul.ref(352, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i14 := queue_delayed_work($p12, $p13, 500);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i8($i14);
    call {:si_unique_call 161} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} fw_card_put($p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 336974);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 338006);

procedure delayed_work_timer_fn($i0: i64);



const bm_work: ref;

axiom bm_work == $sub.ref(0, 339038);

procedure bm_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, $M.15, $M.1, $M.2, $M.13, $M.26, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.12, assertsPassed, $M.23, $M.31, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.43, $M.25, $M.14;



implementation bm_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i8;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i29: i1;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i43: i1;
  var $i54: i8;
  var $i55: i64;
  var $i56: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i57: i1;
  var $i68: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i8;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $i109: i1;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $i126: i1;
  var $i128: i32;
  var $i127: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $p135: ref;
  var $i136: i1;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $i147: i1;
  var $p148: ref;
  var $i149: i1;
  var $i150: i32;
  var $i146: i32;
  var $i108: i32;
  var $p151: ref;
  var $i152: i8;
  var $i153: i1;
  var $p154: ref;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i64;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i32;
  var $p163: ref;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i1;
  var $i174: i8;
  var $p175: ref;
  var $i176: i1;
  var $i178: i1;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $i183: i1;
  var vslice_dummy_var_47: ref;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 584), 1856));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} ldv_spin_lock_irq_100($p4);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(280, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(124, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 171} {:cexpr "generation"} boogie_si_record_i32($i11);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(288, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} vslice_dummy_var_47 := fw_node_get($p13);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 175} {:cexpr "root_device_is_running"} boogie_si_record_i8($i26);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p17);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i29 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i29);
    call {:si_unique_call 176} {:cexpr "root_device_is_cmc"} boogie_si_record_i8($i35);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(296, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i43 := 0;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i43);
    call {:si_unique_call 177} {:cexpr "irm_is_1394_1995_only"} boogie_si_record_i8($i54);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p40);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i57 := 0;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i8($i57);
    call {:si_unique_call 178} {:cexpr "keep_this_irm"} boogie_si_record_i8($i68);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    call {:si_unique_call 179} {:cexpr "root_id"} boogie_si_record_i32($i71);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(296, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    call {:si_unique_call 180} {:cexpr "irm_id"} boogie_si_record_i32($i76);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(280, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    call {:si_unique_call 181} {:cexpr "local_id"} boogie_si_record_i32($i81);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i82 := get_jiffies_64();
    call {:si_unique_call 183} {:cexpr "tmp___1"} boogie_si_record_i64($i82);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(160, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i85 := $sub.i64($i84, $i82);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i86 := $add.i64($i85, 32);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i87 := $slt.i64($i86, 0);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 184} {:cexpr "grace"} boogie_si_record_i32($i88);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(812, 1));
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i91 := is_next_generation($i11, $i90);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i92 := $zext.i1.i8($i91);
    call {:si_unique_call 186} {:cexpr "tmp___5"} boogie_si_record_i8($i92);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i8.i1($i92);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(812, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i99 := $ne.i32($i98, $i11);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(812, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, $i11);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(812, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i11);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p17);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i145 == 1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i8.i1($i26);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i147 == 1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} ldv_spin_unlock_irq_101($p148);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} fw_node_put($p13);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} fw_card_put($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb83:
    assume $i147 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i8.i1($i35);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150 := $i81;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i146 := $i150;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i108 := $i146;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(312, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.0, $p151);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i8.i1($i152);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i153 == 1);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(5, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i156 := $lshr.i8($i155, 4);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref($i158, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.8, $p159);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i161 := $sext.i8.i32($i160);
    call {:si_unique_call 207} {:cexpr "gap_count"} boogie_si_record_i32($i161);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i162 := $i161;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(808, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    call {:si_unique_call 208} {:cexpr "tmp___6"} boogie_si_record_i32($i164);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(808, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i166, 1);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(808, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, $i167);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i169 := $sle.i32($i164, 4);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i174 := 0;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} ldv_spin_unlock_irq_101($p175);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i8.i1($i174);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i178 := $trunc.i8.i1($i35);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i81, $i76);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb110:
    assume $i183 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} allocate_broadcast_channel($p3, $i11);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i178 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p179, 65536);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p180 := $bitcast.ref.ref($p1);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i181 := fw_run_transaction($p3, 0, $i71, $i11, 0, 281474708275204, $p180, 4);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 214} {:cexpr "rcode"} boogie_si_record_i32($i181);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 19);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i182 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i176 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} fw_notice.ref.ref.i32.i32($p3, .str.41, $i108, $i162);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} fw_send_phy_config($p3, $i108, $i11, $i162);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} vslice_dummy_var_48 := reset_bus($p3, 1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i169 == 1;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(308, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i172 := $ne.i32($i171, $i162);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i172 == 1);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i108, $i71);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb94;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i174 := 1;
    goto $bb100;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb96;

  $bb89:
    assume $i153 == 1;
    assume {:verifier.code 0} true;
    $i162 := 63;
    goto $bb91;

  $bb85:
    assume $i149 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $i150 := $i71;
    goto $bb87;

  $bb80:
    assume $i145 == 1;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i146 := $i81;
    goto $bb82;

  $bb77:
    assume $i141 == 1;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} ldv_spin_unlock_irq_101($p142);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} fw_schedule_bm_work($p3, 32);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i99 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i88, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb32;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(296, 1));
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(4, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 0);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i8.i1($i54);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, 1056964608);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i112 := __fswab32($i81);
    call {:si_unique_call 190} {:cexpr "tmp___2"} boogie_si_record_i32($i112);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} ldv_spin_unlock_irq_101($p114);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p1);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i116 := fw_run_transaction($p3, 18, $i76, $i11, 0, 281474708275740, $p115, 8);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 193} {:cexpr "rcode"} boogie_si_record_i32($i116);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 19);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i120 := __fswab32($i119);
    call {:si_unique_call 196} {:cexpr "tmp___3"} boogie_si_record_i32($i120);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} ldv_spin_lock_irq_100($p121);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i116, 0);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i122 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} ldv_spin_unlock_irq_101($p130);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i116, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i116, 16);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} ldv_spin_lock_irq_100($p135);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i116, 0);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb70:
    assume $i136 == 1;
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i8.i1($i68);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i137 == 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p138 := fw_rcode_string($i116);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} fw_notice.ref.ref.ref.i32($p3, .str.40, $p138, $i81);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i108 := $i81;
    goto $bb37;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i137 == 1;
    goto $bb72;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i134 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} fw_schedule_bm_work($p3, 32);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i131 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i120, 63);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb60;

  $bb61:
    assume $i132 == 1;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i81, $i76);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb63:
    assume $i133 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} allocate_broadcast_channel($p3, $i11);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i122 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(124, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i11, $i124);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb51;

  $bb52:
    assume $i125 == 1;
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i120, 63);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i126 == 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i128 := $or.i32($i120, 65472);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i127 := $i128;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(816, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p129, $i127);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i126 == 1;
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i127 := $i81;
    goto $bb56;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i117 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i109 == 1;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i8.i1($i68);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i110 == 1);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} fw_notice.ref.ref.ref.i32($p3, .str.37, .str.39, $i81);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i108 := $i81;
    goto $bb37;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb41;

  $bb35:
    assume $i107 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} fw_notice.ref.ref.ref.i32($p3, .str.37, .str.38, $i81);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i108 := $i81;
    goto $bb37;

  $bb24:
    assume $i93 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(820, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i8.i1($i95);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb26;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i57 := 0;
    assume {:branchcond $i61} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb21;

  $bb22:
    assume $i61 == 1;
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(3, 4));
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i66 := $lshr.i32($i65, 8);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 133);
    assume {:verifier.code 0} true;
    $i57 := $i67;
    goto $bb21;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i43 := 0;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb16;

  $bb17:
    assume $i47 == 1;
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(2, 4));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 240);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    assume {:verifier.code 0} true;
    $i43 := $i53;
    goto $bb16;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p17);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p30, $mul.ref(1644, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    assume {:verifier.code 0} true;
    $i29 := $i34;
    goto $bb13;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i21 := atomic_read($p20);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i32($i21);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb10;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 584), 1856)), $mul.ref(208, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} ldv_spin_unlock_irq_101($p9);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_irq_100: ref;

axiom ldv_spin_lock_irq_100 == $sub.ref(0, 340070);

procedure ldv_spin_lock_irq_100($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_lock_irq_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} spin_lock_irq($p0);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irq_101: ref;

axiom ldv_spin_unlock_irq_101 == $sub.ref(0, 341102);

procedure ldv_spin_unlock_irq_101($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_irq_101($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} spin_unlock_irq($p0);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const fw_node_get: ref;

axiom fw_node_get == $sub.ref(0, 342134);

procedure fw_node_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} atomic_inc($p1);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 343166);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_jiffies_64: ref;

axiom get_jiffies_64 == $sub.ref(0, 344198);

procedure get_jiffies_64() returns ($r: i64);
  free requires assertsPassed;



implementation get_jiffies_64() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i0 := $load.i64($M.0, jiffies);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const is_next_generation: ref;

axiom is_next_generation == $sub.ref(0, 345230);

procedure is_next_generation($i0: i32, $i1: i32) returns ($r: i1);
  free requires assertsPassed;



implementation is_next_generation($i0: i32, $i1: i32) returns ($r: i1)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "is_next_generation:arg:new_generation"} boogie_si_record_i32($i0);
    call {:si_unique_call 222} {:cexpr "is_next_generation:arg:old_generation"} boogie_si_record_i32($i1);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i3 := $xor.i32($i0, $i2);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 255);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fw_notice: ref;

axiom fw_notice == $sub.ref(0, 346262);

procedure fw_notice.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} ldv__builtin_va_start($p5);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p10 := dev_name($p9);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} vslice_dummy_var_49 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} ldv__builtin_va_end($p13);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_50: i32;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} ldv__builtin_va_start($p5);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p10 := dev_name($p9);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_50 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} ldv__builtin_va_end($p13);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_51: i32;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} ldv__builtin_va_start($p5);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p10 := dev_name($p9);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_51 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} ldv__builtin_va_end($p13);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_52: i32;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} ldv__builtin_va_start($p5);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $p10 := dev_name($p9);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_52 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} ldv__builtin_va_end($p13);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_53: i32;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} ldv__builtin_va_start($p5);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p10 := dev_name($p9);
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} vslice_dummy_var_53 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} ldv__builtin_va_end($p13);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_54: i32;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} ldv__builtin_va_start($p5);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p10 := dev_name($p9);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} vslice_dummy_var_54 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} ldv__builtin_va_end($p13);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_55: i32;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} ldv__builtin_va_start($p5);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $p10 := dev_name($p9);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_55 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv__builtin_va_end($p13);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_notice.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_notice.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_56: i32;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} ldv__builtin_va_start($p5);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p10 := dev_name($p9);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vslice_dummy_var_56 := printk.ref.ref.ref(.str.1, $p10, $p2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv__builtin_va_end($p13);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    return;
}



const fw_run_transaction: ref;

axiom fw_run_transaction == $sub.ref(0, 347294);

procedure fw_run_transaction($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_run_transaction($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i64, $p6: ref, $i7: i64) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p8 := $alloc($mul.ref(112, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p9 := $alloc($mul.ref(288, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 274} {:cexpr "fw_run_transaction:arg:tcode"} boogie_si_record_i32($i1);
    call {:si_unique_call 275} {:cexpr "fw_run_transaction:arg:destination_id"} boogie_si_record_i32($i2);
    call {:si_unique_call 276} {:cexpr "fw_run_transaction:arg:generation"} boogie_si_record_i32($i3);
    call {:si_unique_call 277} {:cexpr "fw_run_transaction:arg:speed"} boogie_si_record_i32($i4);
    call {:si_unique_call 278} {:cexpr "fw_run_transaction:arg:offset"} boogie_si_record_i64($i5);
    call {:si_unique_call 279} {:cexpr "fw_run_transaction:arg:length"} boogie_si_record_i64($i7);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} init_timer_on_stack_key($p11, 0, .str.17, $p10);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} ldv_init_completion_110($p12);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p8);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} fw_send_request($p0, $p9, $i1, $i2, $i3, $i4, $i5, $p6, $i7, transaction_callback, $p14);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} ldv_wait_for_completion_111($p15);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} destroy_timer_on_stack($p16);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const allocate_broadcast_channel: ref;

axiom allocate_broadcast_channel == $sub.ref(0, 348326);

procedure allocate_broadcast_channel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, assertsPassed, $M.13, $M.26, $M.1, $M.2, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation allocate_broadcast_channel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var vslice_dummy_var_57: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 287} {:cexpr "allocate_broadcast_channel:arg:generation"} boogie_si_record_i32($i1);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(823, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} fw_iso_resource_manage($p0, $i1, 2147483648, $p2, $p3, 1);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p2);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 31);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(823, 1));
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 1);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i1);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i12);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} vslice_dummy_var_57 := device_for_each_child($p11, $p13, fw_device_set_broadcast_channel);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} fw_notice.ref.ref($p0, .str.42);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fw_schedule_bm_work: ref;

axiom fw_schedule_bm_work == $sub.ref(0, 349358);

procedure fw_schedule_bm_work($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_schedule_bm_work($p0: ref, $i1: i64)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var vslice_dummy_var_58: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} {:cexpr "fw_schedule_bm_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} vslice_dummy_var_58 := fw_card_get($p0);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(584, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i4 := schedule_delayed_work($p3, $i1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 294} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} fw_card_put($p0);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const fw_rcode_string: ref;

axiom fw_rcode_string == $sub.ref(0, 350390);

procedure fw_rcode_string($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.10, $CurrAddr;



implementation fw_rcode_string($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $p1 := $alloc($mul.ref(168, $zext.i32.i64(1)));
    call {:si_unique_call 297} {:cexpr "fw_rcode_string:arg:rcode"} boogie_si_record_i32($i0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(0, 8));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p2, .str.22);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(1, 8));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p3, $0.ref);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(2, 8));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, $0.ref);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(3, 8));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p5, $0.ref);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(4, 8));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str.23);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(5, 8));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str.24);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(6, 8));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p8, .str.25);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(7, 8));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p9, .str.26);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(8, 8));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p10, $0.ref);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(9, 8));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p11, $0.ref);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(10, 8));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p12, $0.ref);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(11, 8));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p13, $0.ref);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(12, 8));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p14, $0.ref);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(13, 8));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p15, $0.ref);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(14, 8));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p16, $0.ref);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(15, 8));
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p17, $0.ref);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(16, 8));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p18, .str.27);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(17, 8));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p19, .str.28);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(18, 8));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p20, .str.29);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(19, 8));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p21, .str.30);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref(20, 8));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p22, .str.31);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i0, 20);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := .str.32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $r := $p32;
    return;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref($i24, 8));
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.10, $p25);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 168)), $mul.ref($i29, 8));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.10, $p30);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p32 := $p31;
    goto $bb6;
}



const fw_send_phy_config: ref;

axiom fw_send_phy_config == $sub.ref(0, 351422);

procedure fw_send_phy_config($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.11, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.12, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14;



implementation fw_send_phy_config($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_59: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "fw_send_phy_config:arg:node_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 299} {:cexpr "fw_send_phy_config:arg:generation"} boogie_si_record_i32($i2);
    call {:si_unique_call 300} {:cexpr "fw_send_phy_config:arg:gap_count"} boogie_si_record_i32($i3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i3;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 16);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i9, $i20);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i21, 4194304);
    call {:si_unique_call 305} {:cexpr "data"} boogie_si_record_i32($i22);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} ldv_mutex_lock_112___0(phy_config_mutex);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4)), $i22);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i23 := $xor.i32($i22, $sub.i32(0, 1));
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4)), $i23);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(4, 1)), $i2);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} reinit_completion(phy_config_done);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    call {:si_unique_call 308} devirtbounce.3($p27, $p0, phy_config_packet);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_59 := ldv_wait_for_completion_timeout_113(phy_config_done, 25);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} ldv_mutex_unlock_114(phy_config_mutex);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 144)), $mul.ref(8, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 302} $i15 := devirtbounce.2($p14, $p0, 1);
    call {:si_unique_call 303} {:cexpr "gap_count"} boogie_si_record_i32($i15);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i15, 63);
    call {:si_unique_call 304} {:cexpr "gap_count"} boogie_si_record_i32($i17);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 63);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $i17;
    goto $bb13;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 63);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 24);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i7 := $or.i32(0, $i6);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 8388608);
    call {:si_unique_call 301} {:cexpr "data"} boogie_si_record_i32($i8);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const reset_bus: ref;

axiom reset_bus == $sub.ref(0, 352454);

procedure reset_bus($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation reset_bus($p0: ref, $i1: i1) returns ($r: i32)
{
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 311} {:cexpr "reset_bus:arg:short_reset"} boogie_si_record_i1($i1);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i4 := (if $i3 == 1 then 5 else 1);
    call {:si_unique_call 312} {:cexpr "reg"} boogie_si_record_i32($i4);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 313} $i9 := devirtbounce.4($p8, $p0, $i4, 0, 64);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 314} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const fw_node_put: ref;

axiom fw_node_put == $sub.ref(0, 353486);

procedure fw_node_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_put($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 316} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} kfree($p4);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_dec_and_test: ref;

axiom atomic_dec_and_test == $sub.ref(0, 354518);

procedure atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i1 := ldv_linux_usb_dev_atomic_dec_and_test($p0);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 355550);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} free_($p0);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 356582);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 321} $free($p0);
    return;
}



const ldv_linux_usb_dev_atomic_dec_and_test: ref;

axiom ldv_linux_usb_dev_atomic_dec_and_test == $sub.ref(0, 357614);

procedure ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_dec_and_test($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32($i2, 1);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_mutex_lock_112___0: ref;

axiom ldv_mutex_lock_112___0 == $sub.ref(0, 358646);

procedure ldv_mutex_lock_112___0($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_mutex_lock_112___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_linux_kernel_locking_mutex_mutex_lock_phy_config_mutex($p0);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;
}



const reinit_completion: ref;

axiom reinit_completion == $sub.ref(0, 359678);

procedure reinit_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation reinit_completion($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 0);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    return;
}



const ldv_wait_for_completion_timeout_113: ref;

axiom ldv_wait_for_completion_timeout_113 == $sub.ref(0, 360710);

procedure ldv_wait_for_completion_timeout_113($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_wait_for_completion_timeout_113($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "ldv_wait_for_completion_timeout_113:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} ldv_linux_kernel_sched_completion_wait_for_completion_phy_config_done();
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i2 := wait_for_completion_timeout($p0, $i1);
    call {:si_unique_call 326} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_151:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_114: ref;

axiom ldv_mutex_unlock_114 == $sub.ref(0, 361742);

procedure ldv_mutex_unlock_114($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_mutex_unlock_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} ldv_linux_kernel_locking_mutex_mutex_unlock_phy_config_mutex($p0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_phy_config_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_phy_config_mutex == $sub.ref(0, 362774);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_phy_config_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_phy_config_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 329} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_phy_config_mutex"} boogie_si_record_i8(0);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_phy_config_done: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_phy_config_done == $sub.ref(0, 363806);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_phy_config_done();
  free requires assertsPassed;
  modifies $M.12, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_phy_config_done()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i0 := $M.12;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $M.12 := 2;
    call {:si_unique_call 331} {:cexpr "ldv_linux_kernel_sched_completion_completion_phy_config_done"} boogie_si_record_i32(2);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;
}



const wait_for_completion_timeout: ref;

axiom wait_for_completion_timeout == $sub.ref(0, 364838);

procedure wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation wait_for_completion_timeout($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 332} {:cexpr "wait_for_completion_timeout:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 1} true;
    call {:si_unique_call 333} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 334} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_assert_linux_kernel_sched_completion__wait_without_init: ref;

axiom ldv_assert_linux_kernel_sched_completion__wait_without_init == $sub.ref(0, 365870);

procedure ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_sched_completion__wait_without_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} {:cexpr "ldv_assert_linux_kernel_sched_completion__wait_without_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 336} __VERIFIER_error();
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_phy_config_mutex: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_phy_config_mutex == $sub.ref(0, 366902);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_phy_config_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.11, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_phy_config_mutex($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i1 := $M.11;
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 338} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_phy_config_mutex"} boogie_si_record_i8(1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 367934);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 341} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fw_iso_resource_manage: ref;

axiom fw_iso_resource_manage == $sub.ref(0, 368966);

procedure fw_iso_resource_manage($p0: ref, $i1: i32, $i2: i64, $p3: ref, $p4: ref, $i5: i1);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_iso_resource_manage($p0: ref, $i1: i32, $i2: i64, $p3: ref, $p4: ref, $i5: i1)
{
  var $i6: i8;
  var $i7: i32;
  var $i8: i64;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $p16: ref;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} {:cexpr "fw_iso_resource_manage:arg:generation"} boogie_si_record_i32($i1);
    call {:si_unique_call 343} {:cexpr "fw_iso_resource_manage:arg:channels_mask"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 344} {:cexpr "fw_iso_resource_manage:arg:allocate"} boogie_si_record_i1($i5);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i2);
    call {:si_unique_call 345} {:cexpr "channels_hi"} boogie_si_record_i32($i7);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i2, 32);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 346} {:cexpr "channels_lo"} boogie_si_record_i32($i9);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ldv_spin_lock_irq_100($p10);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(296, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    call {:si_unique_call 348} {:cexpr "irm_id"} boogie_si_record_i32($i15);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_spin_unlock_irq_101($p16);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i7, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i9, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i28 := $i20;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i28);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i6);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p4);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p4);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i6);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i36 := manage_bandwidth($p0, $i15, $i1, $i34, $i35);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 356} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i6);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i36, 0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb30;

  $bb31:
    assume $i39 == 1;
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i40 := $sge.i32($i28, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i36);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb33:
    assume $i40 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} deallocate_channel($p0, $i15, $i1, $i28);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i29 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i2, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, 0);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb15;

  $bb18:
    assume $i31 == 1;
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 0);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i6);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i24 := manage_channel($p0, $i15, $i1, $i9, 281474708275752, $i23);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 353} {:cexpr "c"} boogie_si_record_i32($i24);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i24, 0);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i27 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb12;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i24, 32);
    call {:si_unique_call 354} {:cexpr "c"} boogie_si_record_i32($i26);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb11;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i6);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i19 := manage_channel($p0, $i15, $i1, $i7, 281474708275748, $i18);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 351} {:cexpr "c"} boogie_si_record_i32($i19);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const fw_device_set_broadcast_channel: ref;

axiom fw_device_set_broadcast_channel == $sub.ref(0, 369998);

procedure fw_device_set_broadcast_channel($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_device_set_broadcast_channel($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i2 := is_fw_device($p0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 359} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p5 := fw_device($p0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p1);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} set_broadcast_channel($p5, $i7);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const device_for_each_child: ref;

axiom device_for_each_child == $sub.ref(0, 371030);

procedure device_for_each_child($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_for_each_child($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 362} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const is_fw_device: ref;

axiom is_fw_device == $sub.ref(0, 372062);

procedure is_fw_device($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_fw_device($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(320, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(fw_device_type));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fw_device: ref;

axiom fw_device == $sub.ref(0, 373094);

procedure fw_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 40), 2040));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const set_broadcast_channel: ref;

axiom set_broadcast_channel == $sub.ref(0, 374126);

procedure set_broadcast_channel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation set_broadcast_channel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $p39: ref;
  var $i40: i8;
  var $i41: i8;
  var $i42: i8;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var vslice_dummy_var_60: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 365} {:cexpr "set_broadcast_channel:arg:generation"} boogie_si_record_i32($i1);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(823, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(1644, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i8($i14, 1);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i16 := $and.i8($i15, 15);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 7);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(822, 2));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p43, $mul.ref(822, 2));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 256);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb27:
    assume $i47 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 520093888);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_60 := fw_run_transaction($p4, 0, $i49, $i1, $i51, 281474708275764, $p52, 4);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p2);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $i29 := fw_run_transaction($p4, 4, $i25, $i1, $i27, 281474708275764, $p28, 4);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 367} {:cexpr "rcode"} boogie_si_record_i32($i29);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i29, 7);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1653, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i41 := $and.i8($i40, $sub.i8(0, 4));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i42 := $or.i8($i41, 1);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i42);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p2);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 128);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1653, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i37 := $and.i8($i36, $sub.i8(0, 4));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i38 := $or.i8($i37, 2);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i38);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb6;
}



const manage_channel: ref;

axiom manage_channel == $sub.ref(0, 375158);

procedure manage_channel($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation manage_channel($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $i5: i1) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i36: i1;
  var $i37: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i35: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i58: i32;
  var $i59: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i60: i32;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 370} {:cexpr "manage_channel:arg:irm_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 371} {:cexpr "manage_channel:arg:generation"} boogie_si_record_i32($i2);
    call {:si_unique_call 372} {:cexpr "manage_channel:arg:channels_mask"} boogie_si_record_i32($i3);
    call {:si_unique_call 373} {:cexpr "manage_channel:arg:offset"} boogie_si_record_i64($i4);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i5);
    call {:si_unique_call 374} {:cexpr "manage_channel:arg:allocate"} boogie_si_record_i1($i5);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then $sub.i32(0, 1) else 0);
    call {:si_unique_call 375} {:cexpr "all"} boogie_si_record_i32($i9);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13 := 5, $sub.i32(0, 5), 0, $i9;
    goto $bb1;

  $bb1:
    call $i14, $i15, $i16, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p39, $i40, $i41, $i42, $p43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i35, $i52, $i53, $i54, $i55, $i56, $i57, $i17, $i18, $i19, $i20, $i58, $i59, $i10, $i11, $i12, $i13, $i60 := manage_channel_loop_$bb1($p0, $i1, $i2, $i3, $i4, $p6, $i9, $i14, $i15, $i16, $i21, $i22, $i23, $i24, $i25, $i26, $p27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p39, $i40, $i41, $i42, $p43, $i44, $p45, $i46, $p47, $i48, $i49, $i50, $i51, $i35, $i52, $i53, $i54, $i55, $i56, $i57, $i17, $i18, $i19, $i20, $i58, $i59, $i10, $i11, $i12, $i13, $i60);
    goto $bb1_last;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32(1, $i12);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i3, $i14);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(31, $i12);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i22 := $shl.i32(1, $i21);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i23 := __fswab32($i22);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i32($i23);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i24 := $xor.i32($i13, $i9);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, $i23);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i13);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i28 := $xor.i32($i13, $i23);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p6);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i31 := fw_run_transaction($p0, 18, $i1, $i2, 0, $i4, $p30, 8);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 380} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 19);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i33 := $i12;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i35 := $i13;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i10, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i55, $i56, $i57 := $i12, $sub.i32(0, 5), $i10;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20 := $i35, $i55, $i56, $i57;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i18, 1);
    call {:si_unique_call 376} {:cexpr "channel"} boogie_si_record_i32($i58);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i59 := $sle.i32($i58, 31);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i60 := $i19;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i38 := $i60;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb33:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13 := $i20, $i19, $i58, $i17;
    goto $bb33_dummy;

  $bb29:
    assume $i52 == 1;
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i10, 1);
    call {:si_unique_call 382} {:cexpr "retry"} boogie_si_record_i32($i53);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i12, 1);
    call {:si_unique_call 383} {:cexpr "channel"} boogie_si_record_i32($i54);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i55, $i56, $i57 := $i54, $sub.i32(0, 16), $i53;
    goto $bb31;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, $i13);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i42 := $i12;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    call {:si_unique_call 381} {:cexpr "old"} boogie_si_record_i32($i44);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i49 := $xor.i32($i46, $i48);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, $i23);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i35 := $i44;
    goto $bb18;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20 := $i44, $i12, $sub.i32(0, 16), $i10;
    goto $bb5;

  $bb23:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i38 := $i42;
    goto $bb22;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i7);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i37 := $i33;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb22;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32(0, 11);
    goto $bb21;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20 := $i13, $i12, $sub.i32(0, 16), $i10;
    goto $bb5;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19, $i20 := $i13, $i12, $i11, $i10;
    goto $bb5;

  $bb33_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;
}



const manage_bandwidth: ref;

axiom manage_bandwidth == $sub.ref(0, 376190);

procedure manage_bandwidth($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation manage_bandwidth($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i1) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i12: i32;
  var $i11: i32;
  var $i13: i1;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i23: i32;
  var $i14: i32;
  var $i31: i1;
  var $i32: i32;
  var $i34: i32;
  var $i33: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i44: i32;
  var $i50: i1;
  var $i51: i32;
  var $i53: i32;
  var $i52: i32;
  var $i54: i1;
  var $i55: i32;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i63: i32;
  var $i69: i1;
  var $i70: i32;
  var $i72: i32;
  var $i71: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i1;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i82: i32;
  var $i88: i1;
  var $i89: i32;
  var $i91: i32;
  var $i90: i32;
  var $i92: i1;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $i100: i1;
  var $p101: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var vslice_dummy_var_61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 385} {:cexpr "manage_bandwidth:arg:irm_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 386} {:cexpr "manage_bandwidth:arg:generation"} boogie_si_record_i32($i2);
    call {:si_unique_call 387} {:cexpr "manage_bandwidth:arg:bandwidth"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i4);
    call {:si_unique_call 388} {:cexpr "manage_bandwidth:arg:allocate"} boogie_si_record_i1($i4);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 4915 else 0);
    call {:si_unique_call 389} {:cexpr "old"} boogie_si_record_i32($i8);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i6);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i9 == 1);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i8, $i3);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i11, 4915);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i15 := __fswab32($i8);
    call {:si_unique_call 391} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i17 := __fswab32($i11);
    call {:si_unique_call 393} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p5);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i20 := fw_run_transaction($p0, 18, $i1, $i2, 0, 281474708275744, $p19, 8);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 395} {:cexpr "tmp___1"} boogie_si_record_i32($i20);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 19);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, 0);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $i8;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i6);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i31 == 1);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i23, $i3);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i33, 4915);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i36 := __fswab32($i23);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i38 := __fswab32($i33);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $i41 := fw_run_transaction($p0, 18, $i1, $i2, 0, 281474708275744, $p40, 8);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 19);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i41, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i44 := $i23;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i8.i1($i6);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i50 == 1);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i44, $i3);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i32($i52, 4915);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $i55 := __fswab32($i44);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i57 := __fswab32($i52);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p5);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i60 := fw_run_transaction($p0, 18, $i1, $i2, 0, 281474708275744, $p59, 8);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 19);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i60, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i63 := $i44;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i8.i1($i6);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i69 == 1);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i63, $i3);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i73 := $ugt.i32($i71, 4915);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i74 := __fswab32($i63);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i76 := __fswab32($i71);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, $i76);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p5);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i79 := fw_run_transaction($p0, 18, $i1, $i2, 0, 281474708275744, $p78, 8);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 19);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i79, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i82 := $i63;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i8.i1($i6);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i88 == 1);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i82, $i3);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i92 := $ugt.i32($i90, 4915);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} $i93 := __fswab32($i82);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i95 := __fswab32($i90);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i95);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p5);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i98 := fw_run_transaction($p0, 18, $i1, $i2, 0, 281474708275744, $p97, 8);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 19);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i98, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb93:
    assume $i100 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p5);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i102 := __be32_to_cpup($p101);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, $i82);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p5);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vslice_dummy_var_61 := __be32_to_cpup($p104);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i14 := $i3;
    goto $bb9;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i6);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i24 == 1);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i25 := $i3;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i14 := $i25;
    goto $bb9;

  $bb21:
    assume $i24 == 1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32(0, 11);
    goto $bb23;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb9;

  $bb84:
    assume $i88 == 1;
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i91 := $sub.i32($i82, $i3);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i90 := $i91;
    goto $bb86;

  $bb75:
    assume $i81 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p5);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} $i84 := __be32_to_cpup($p83);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, $i63);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p5);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i87 := __be32_to_cpup($p86);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i82 := $i87;
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb25;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb12;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb7;

  $bb66:
    assume $i69 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i63, $i3);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i71 := $i72;
    goto $bb68;

  $bb57:
    assume $i62 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p5);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $i65 := __be32_to_cpup($p64);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, $i44);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p5);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $i68 := __be32_to_cpup($p67);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i63 := $i68;
    goto $bb60;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb25;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb12;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb7;

  $bb48:
    assume $i50 == 1;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i44, $i3);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i52 := $i53;
    goto $bb50;

  $bb39:
    assume $i43 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p5);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i46 := __be32_to_cpup($p45);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, $i23);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p5);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i49 := __be32_to_cpup($p48);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i44 := $i49;
    goto $bb42;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb25;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb12;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb7;

  $bb30:
    assume $i31 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i23, $i3);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb32;

  $bb16:
    assume $i22 == 1;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p5);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} $i27 := __be32_to_cpup($p26);
    call {:si_unique_call 397} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, $i8);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p5);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i30 := __be32_to_cpup($p29);
    call {:si_unique_call 399} {:cexpr "tmp___3"} boogie_si_record_i32($i30);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i23 := $i30;
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb25;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb12;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb7;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i8, $i3);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb5;
}



const deallocate_channel: ref;

axiom deallocate_channel == $sub.ref(0, 377222);

procedure deallocate_channel($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation deallocate_channel($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $i5: i32;
  var $i7: i32;
  var $i8: i32;
  var $i6: i32;
  var $i9: i1;
  var $i10: i64;
  var vslice_dummy_var_62: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} {:cexpr "deallocate_channel:arg:irm_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 421} {:cexpr "deallocate_channel:arg:generation"} boogie_si_record_i32($i2);
    call {:si_unique_call 422} {:cexpr "deallocate_channel:arg:channel"} boogie_si_record_i32($i3);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 31);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i3, $sub.i32(0, 32));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i3, 31);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i10 := (if $i9 == 1 then 281474708275748 else 281474708275752);
    call {:si_unique_call 423} {:cexpr "offset"} boogie_si_record_i64($i10);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} vslice_dummy_var_62 := manage_channel($p0, $i1, $i2, $i6, $i10, 0);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32(1, $i3);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const __be32_to_cpup: ref;

axiom __be32_to_cpup == $sub.ref(0, 378254);

procedure __be32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __be32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i1 := __swab32p($p0);
    call {:si_unique_call 426} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __swab32p: ref;

axiom __swab32p == $sub.ref(0, 379286);

procedure __swab32p($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __swab32p($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i2 := __fswab32($i1);
    call {:si_unique_call 428} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const init_timer_on_stack_key: ref;

axiom init_timer_on_stack_key == $sub.ref(0, 380318);

procedure init_timer_on_stack_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_on_stack_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} {:cexpr "init_timer_on_stack_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_completion_110: ref;

axiom ldv_init_completion_110 == $sub.ref(0, 381350);

procedure ldv_init_completion_110($p0: ref);
  free requires assertsPassed;
  modifies $M.13;



implementation ldv_init_completion_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} ldv_linux_kernel_sched_completion_init_completion_done_of_transaction_callback_data();
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    return;
}



const transaction_callback: ref;

axiom transaction_callback == $sub.ref(0, 382382);

procedure transaction_callback($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation transaction_callback($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} {:cexpr "transaction_callback:arg:rcode"} boogie_si_record_i32($i1);
    call {:si_unique_call 432} {:cexpr "transaction_callback:arg:length"} boogie_si_record_i64($i3);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(104, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i1);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} complete_($p10);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 112)), $mul.ref(96, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 433} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p8, $p2, $i3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_send_request: ref;

axiom fw_send_request == $sub.ref(0, 383414);

procedure fw_send_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref, $p10: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $CurrAddr, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_send_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref, $p10: ref)
{
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 436} {:cexpr "fw_send_request:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 437} {:cexpr "fw_send_request:arg:destination_id"} boogie_si_record_i32($i3);
    call {:si_unique_call 438} {:cexpr "fw_send_request:arg:generation"} boogie_si_record_i32($i4);
    call {:si_unique_call 439} {:cexpr "fw_send_request:arg:speed"} boogie_si_record_i32($i5);
    call {:si_unique_call 440} {:cexpr "fw_send_request:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 441} {:cexpr "fw_send_request:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p12);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i13 := allocate_tlabel($p0);
    call {:si_unique_call 444} {:cexpr "tlabel"} boogie_si_record_i32($i13);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i3);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i13);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} init_timer_key($p20, 0, .str.16, $p11);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(40, 1)), $mul.ref(32, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, split_transaction_timeout_callback);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(40, 1)), $mul.ref(40, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i23);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p9);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, $p10);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(168, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(120, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} fw_fill_request($p28, $i2, $i30, $i3, $i32, $i4, $i5, $i6, $p7, $i8);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(168, 1)), $mul.ref(64, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, transmit_complete_callback);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} list_add_tail($p35, $p36);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} ldv_spin_unlock_irqrestore_135($p37, $u0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(168, 1));
    call {:si_unique_call 451} devirtbounce.3($p41, $p0, $p42);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} ldv_spin_unlock_irqrestore_135($p15, $u0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 446} devirtbounce.5($p9, $p0, 16, $0.ref, 0, $p10);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const ldv_wait_for_completion_111: ref;

axiom ldv_wait_for_completion_111 == $sub.ref(0, 384446);

procedure ldv_wait_for_completion_111($p0: ref);
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_wait_for_completion_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} ldv_linux_kernel_sched_completion_wait_for_completion_done_of_transaction_callback_data();
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} wait_for_completion($p0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const destroy_timer_on_stack: ref;

axiom destroy_timer_on_stack == $sub.ref(0, 385478);

procedure destroy_timer_on_stack($p0: ref);
  free requires assertsPassed;



implementation destroy_timer_on_stack($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_done_of_transaction_callback_data: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_done_of_transaction_callback_data == $sub.ref(0, 386510);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_done_of_transaction_callback_data();
  free requires assertsPassed;
  modifies $M.13, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_done_of_transaction_callback_data()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i0 := $M.13;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $M.13 := 2;
    call {:si_unique_call 455} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_transaction_callback_data"} boogie_si_record_i32(2);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 387542);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107 == $sub.ref(0, 388574);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_107($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const allocate_tlabel: ref;

axiom allocate_tlabel == $sub.ref(0, 389606);

procedure allocate_tlabel($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation allocate_tlabel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i11: i32;
  var $i24: i32;
  var $i10: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(128, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 458} {:cexpr "tlabel"} boogie_si_record_i32($i2);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i2);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i64($i4, $i5);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i10 := $i2;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i10, 1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 63);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(128, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i10);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i31 := $shl.i64(1, $i30);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i32 := $or.i64($i29, $i31);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, $i32);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i17 := $i10;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb4;

  $bb4:
    call $i12, $i13, $p14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i11, $i24 := allocate_tlabel_loop_$bb4($p0, $p3, $i12, $i13, $p14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i11, $i24);
    goto $bb4_last;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 63);
    call {:si_unique_call 459} {:cexpr "tlabel"} boogie_si_record_i32($i13);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(128, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p3);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i13);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i64($i18, $i19);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i24 := $i13;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    goto $bb3;

  $bb10:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i13;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 16);
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1916;
}



const ldv_spin_unlock_irqrestore_135: ref;

axiom ldv_spin_unlock_irqrestore_135 == $sub.ref(0, 390638);

procedure ldv_spin_unlock_irqrestore_135($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_spin_unlock_irqrestore_135($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} {:cexpr "ldv_spin_unlock_irqrestore_135:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card();
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const split_transaction_timeout_callback: ref;

axiom split_transaction_timeout_callback == $sub.ref(0, 391670);

procedure split_transaction_timeout_callback($i0: i64);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation split_transaction_timeout_callback($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} {:cexpr "split_transaction_timeout_callback:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p4);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i6 := list_empty($p5);
    call {:si_unique_call 466} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} list_del($p9);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i15 := $shl.i64(1, $i14);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i16 := $xor.i64($i15, $sub.i64(0, 1));
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i11, $i16);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i17);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} ldv_spin_unlock_irqrestore_135($p19, $u0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    call {:si_unique_call 470} devirtbounce.5($p21, $p3, 17, $0.ref, 0, $p23);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} ldv_spin_unlock_irqrestore_135($p8, $u0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const fw_fill_request: ref;

axiom fw_fill_request == $sub.ref(0, 392702);

procedure fw_fill_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_fill_request($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64)
{
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i32;
  var $p40: ref;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var vslice_dummy_var_63: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "fw_fill_request:arg:tcode"} boogie_si_record_i32($i1);
    call {:si_unique_call 472} {:cexpr "fw_fill_request:arg:tlabel"} boogie_si_record_i32($i2);
    call {:si_unique_call 473} {:cexpr "fw_fill_request:arg:destination_id"} boogie_si_record_i32($i3);
    call {:si_unique_call 474} {:cexpr "fw_fill_request:arg:source_id"} boogie_si_record_i32($i4);
    call {:si_unique_call 475} {:cexpr "fw_fill_request:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 476} {:cexpr "fw_fill_request:arg:speed"} boogie_si_record_i32($i6);
    call {:si_unique_call 477} {:cexpr "fw_fill_request:arg:offset"} boogie_si_record_i64($i7);
    call {:si_unique_call 478} {:cexpr "fw_fill_request:arg:length"} boogie_si_record_i64($i9);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 10);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i1, 16);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22, $i23 := $i1, 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i2, 10);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 256);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i22, 4);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i25, $i26);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i3, 16);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i27, $i28);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i29);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i64($i7, 32);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i4, 16);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i33, $i34);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i7);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i38);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i22, 0);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i22, 9);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i22, 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i22, 4);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i22, 5);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32(1, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i70);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i72 := ldv__builtin_expect($i71, 0);
    call {:si_unique_call 481} {:cexpr "tmp"} boogie_si_record_i64($i72);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32(1, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i75 := $zext.i1.i32($i74);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} vslice_dummy_var_63 := ldv__builtin_expect($i76, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i6);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i5);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, 0);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 0);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i73 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} warn_slowpath_fmt.ref.i32.ref.i32(.str.18, 276, .str.19, $i22);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i45 == 1;
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i64.i32($i9);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 16);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, $i23);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i64);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, 16);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p68, 0);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb20:
    assume $i44 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p60, 12);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, 0);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i9);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i53 := $shl.i32($i52, 16);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i53, $i23);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i54);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, 16);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p8);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, $i9);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p8);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p50, 16);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i1, $sub.i32(0, 17));
    call {:si_unique_call 479} {:cexpr "ext_tcode"} boogie_si_record_i32($i21);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i22, $i23 := 9, $i21;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i9);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 16);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $i3);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 160);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 4);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p8);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i9);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const transmit_complete_callback: ref;

axiom transmit_complete_callback == $sub.ref(0, 393734);

procedure transmit_complete_callback($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.14, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation transmit_complete_callback($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} {:cexpr "transmit_complete_callback:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 168), 288));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 1);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 2);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 4);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 5);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 6);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 13);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 14);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} vslice_dummy_var_68 := close_transaction($p4, $p1, $i2);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i11 == 1;
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} vslice_dummy_var_67 := close_transaction($p4, $p1, 6);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_66 := close_transaction($p4, $p1, 5);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} vslice_dummy_var_65 := close_transaction($p4, $p1, 18);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} start_split_transaction_timeout($p4, $p1);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} vslice_dummy_var_64 := close_transaction($p4, $p1, 0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const close_transaction: ref;

axiom close_transaction == $sub.ref(0, 394766);

procedure close_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation close_transaction($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p15: ref;
  var $p42: ref;
  var $p14: ref;
  var $p33: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} {:cexpr "close_transaction:arg:rcode"} boogie_si_record_i32($i2);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_97($p3);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p14 := $p8;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $p14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} ldv_spin_unlock_irqrestore_135($p43, $u0);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i45, $i47);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 2);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    call {:si_unique_call 498} devirtbounce.5($p50, $p1, $i2, $0.ref, 0, $p52);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb19;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p15 := $p8;
    goto $bb4;

  $bb4:
    call $i16, $i17, $i18, $p19, $p35, $p36, $p37, $p38, $p39, $i40, $i41, $p15, $p42 := close_transaction_loop_$bb4($p0, $i12, $i16, $i17, $i18, $p19, $p35, $p36, $p37, $p38, $p39, $i40, $i41, $p15, $p42);
    goto $bb4_last;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p19 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 288)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p37, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i12);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p42 := $p38;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p14 := $p42;
    goto $bb3;

  $bb14:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p38;
    goto $bb14_dummy;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i20 := try_cancel_split_timeout($p19);
    call {:si_unique_call 494} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} list_del_init($p23);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p19, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i29 := $shl.i64(1, $i28);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i30 := $xor.i64($i29, $sub.i64(0, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i25, $i30);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p32, $i31);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p33 := $p19;
    goto $bb12;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} ldv_spin_unlock_irqrestore_135($p22, $u0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;
}



const start_split_transaction_timeout: ref;

axiom start_split_transaction_timeout == $sub.ref(0, 395798);

procedure start_split_transaction_timeout($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.14, $CurrAddr, $M.26, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation start_split_transaction_timeout($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $p30: ref;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p2);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i4 := list_empty($p3);
    call {:si_unique_call 501} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 503} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i10);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 505} {:cexpr "tmp___0"} boogie_si_record_i64($i14);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 508} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, jiffies);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(180, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i28 := $add.i64($i24, $i27);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_69 := ldv_mod_timer_105($p23, $i28);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} ldv_spin_unlock_irqrestore_135($p30, $u0);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} ldv_spin_unlock_irqrestore_135($p21, $u0);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} warn_slowpath_null(.str.18, 165);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ldv_spin_unlock_irqrestore_135($p6, $u0);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103 == $sub.ref(0, 396830);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_103($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 397862);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mod_timer_105: ref;

axiom ldv_mod_timer_105 == $sub.ref(0, 398894);

procedure ldv_mod_timer_105($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation ldv_mod_timer_105($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} {:cexpr "ldv_mod_timer_105:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 516} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i3 := ldv_mod_timer($i2, $p0, $i1);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 518} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 399926);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 519} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 1} true;
    call {:si_unique_call 520} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 521} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mod_timer: ref;

axiom ldv_mod_timer == $sub.ref(0, 400958);

procedure ldv_mod_timer($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation ldv_mod_timer($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} {:cexpr "ldv_mod_timer:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 523} {:cexpr "ldv_mod_timer:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i3 := ldv_undef_int();
    call {:si_unique_call 525} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i0, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} ldv_assume($i8);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} ldv_assume($i6);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} ldv_dispatch_instance_register_19_2($p1);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_307:
    assume !assertsPassed;
    return;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 401990);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 530} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 531} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 403022);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_dispatch_instance_register_19_2: ref;

axiom ldv_dispatch_instance_register_19_2 == $sub.ref(0, 404054);

procedure ldv_dispatch_instance_register_19_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $CurrAddr, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation ldv_dispatch_instance_register_19_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p1 := ldv_xmalloc(16);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} ldv_timer_timer_instance_17($p4);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 405086);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} $p1 := malloc($i0);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} ldv_assume($i4);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $i5 := ldv_is_err($p1);
    call {:si_unique_call 539} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} ldv_assume($i7);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_timer_timer_instance_17: ref;

axiom ldv_timer_timer_instance_17 == $sub.ref(0, 406118);

procedure ldv_timer_timer_instance_17($p0: ref);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25;



implementation ldv_timer_timer_instance_17($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} ldv_switch_to_interrupt_context();
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} ldv_switch_to_process_context();
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} ldv_timer_instance_callback_17_2($p13, $i15);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} ldv_free($p6);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 407150);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} free_($p0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    return;
}



const ldv_switch_to_interrupt_context: ref;

axiom ldv_switch_to_interrupt_context == $sub.ref(0, 408182);

procedure ldv_switch_to_interrupt_context();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_switch_to_interrupt_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 546} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(1);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    return;
}



const ldv_timer_instance_callback_17_2: ref;

axiom ldv_timer_instance_callback_17_2 == $sub.ref(0, 409214);

procedure ldv_timer_instance_callback_17_2($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ldv_timer_instance_callback_17_2($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "ldv_timer_instance_callback_17_2:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 548} devirtbounce.6($p0, $i1);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_switch_to_process_context: ref;

axiom ldv_switch_to_process_context == $sub.ref(0, 410246);

procedure ldv_switch_to_process_context();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_switch_to_process_context()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 549} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 411278);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 550} $r := $malloc($i0);
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 412310);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card == $sub.ref(0, 413342);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ldv_assume($i5);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 553} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_fw_card"} boogie_si_record_i32(2);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const __ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom __ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 414374);

procedure __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref);
  free requires assertsPassed;



implementation __ldv_linux_kernel_locking_spinlock_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock == $sub.ref(0, 415406);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 1} true;
    call {:si_unique_call 555} __VERIFIER_error();
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_97: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_97 == $sub.ref(0, 416438);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const try_cancel_split_timeout: ref;

axiom try_cancel_split_timeout == $sub.ref(0, 417470);

procedure try_cancel_split_timeout($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation try_cancel_split_timeout($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(32, 1));
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(40, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i5 := ldv_del_timer_96($p4);
    call {:si_unique_call 559} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 418502);

procedure list_del_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_del_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __list_del_entry($p0);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} INIT_LIST_HEAD($p0);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    return;
}



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 419534);

procedure __list_del_entry($p0: ref);
  free requires assertsPassed;



implementation __list_del_entry($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_96: ref;

axiom ldv_del_timer_96 == $sub.ref(0, 420566);

procedure ldv_del_timer_96($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_del_timer_96($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i1 := del_timer($p0);
    call {:si_unique_call 563} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i2 := ldv_del_timer($i1, $p0);
    call {:si_unique_call 565} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 421598);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 567} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_del_timer: ref;

axiom ldv_del_timer == $sub.ref(0, 422630);

procedure ldv_del_timer($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_del_timer($i0: i32, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} {:cexpr "ldv_del_timer:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv_dispatch_instance_deregister_18_1($p1);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dispatch_instance_deregister_18_1: ref;

axiom ldv_dispatch_instance_deregister_18_1 == $sub.ref(0, 423662);

procedure ldv_dispatch_instance_deregister_18_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_instance_deregister_18_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 424694);

procedure warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    return;
}



procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100 == $sub.ref(0, 425726);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card == $sub.ref(0, 426758);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card();
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_fw_card()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i0 := $M.15;
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i3 := $M.15;
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} ldv_assume($i5);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 576} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_fw_card"} boogie_si_record_i32(1);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 427790);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 428822);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock == $sub.ref(0, 429854);

procedure ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} {:cexpr "ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} __VERIFIER_error();
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_sched_completion_init_completion_done_of_transaction_callback_data: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_done_of_transaction_callback_data == $sub.ref(0, 430886);

procedure ldv_linux_kernel_sched_completion_init_completion_done_of_transaction_callback_data();
  free requires assertsPassed;
  modifies $M.13;



implementation ldv_linux_kernel_sched_completion_init_completion_done_of_transaction_callback_data()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $M.13 := 1;
    call {:si_unique_call 582} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_transaction_callback_data"} boogie_si_record_i32(1);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 431918);

procedure ldv__builtin_va_start($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 432950);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(16, 1));
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $p9 := kobject_name($p8);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(312, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 433982);

procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 1} true;
    call {:si_unique_call 584} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 585} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 435014);

procedure ldv__builtin_va_end($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 436046);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 437078);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_inc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_linux_usb_dev_atomic_inc($p0);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_dev_atomic_inc: ref;

axiom ldv_linux_usb_dev_atomic_inc == $sub.ref(0, 438110);

procedure ldv_linux_usb_dev_atomic_inc($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_linux_usb_dev_atomic_inc($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 439142);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 440174);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 441206);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} _raw_spin_lock_irq($p2);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 442238);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_kernel_sched_completion_init_completion_done_of_fw_card: ref;

axiom ldv_linux_kernel_sched_completion_init_completion_done_of_fw_card == $sub.ref(0, 443270);

procedure ldv_linux_kernel_sched_completion_init_completion_done_of_fw_card();
  free requires assertsPassed;
  modifies $M.16;



implementation ldv_linux_kernel_sched_completion_init_completion_done_of_fw_card()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 589} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_fw_card"} boogie_si_record_i32(1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 444302);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    return;
}



const fw_card_add: ref;

axiom fw_card_add == $sub.ref(0, 445334);

procedure fw_card_add($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation fw_card_add($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "fw_card_add:arg:max_receive"} boogie_si_record_i32($i1);
    call {:si_unique_call 592} {:cexpr "fw_card_add:arg:link_speed"} boogie_si_record_i32($i2);
    call {:si_unique_call 593} {:cexpr "fw_card_add:arg:guid"} boogie_si_record_i64($i3);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(192, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(196, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i2);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(184, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, $i3);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} ldv_mutex_lock_110(card_mutex);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} generate_config_rom($p0, tmp_config_rom);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    call {:si_unique_call 596} $i12 := devirtbounce($p10, $p0, tmp_config_rom, $i11);
    call {:si_unique_call 597} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} ldv_mutex_unlock_111(card_mutex);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(320, 1));
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} list_add_tail($p14, card_list);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_110: ref;

axiom ldv_mutex_lock_110 == $sub.ref(0, 446366);

procedure ldv_mutex_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_111: ref;

axiom ldv_mutex_unlock_111 == $sub.ref(0, 447398);

procedure ldv_mutex_unlock_111($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_111($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const fw_core_remove_card: ref;

axiom fw_core_remove_card == $sub.ref(0, 448430);

procedure fw_core_remove_card($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $CurrAddr, $M.15, $M.16, assertsPassed, $M.1, $M.2, $M.10, $M.23, $M.40, $M.26, $M.31, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_core_remove_card($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p1 := $alloc($mul.ref(144, $zext.i32.i64(1)));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 603} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p2, dummy_driver_template, 144, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 604} vslice_dummy_var_70 := devirtbounce.4($p6, $p0, 4, 192, 0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} fw_schedule_bus_reset($p0, 0, 1);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} ldv_mutex_lock_112(card_mutex);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(320, 1));
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} list_del_init($p8);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} ldv_mutex_unlock_113(card_mutex);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p17);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} fw_destroy_nodes($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} fw_card_put($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(24, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} ldv_wait_for_completion_114($p20);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i22 := list_empty($p21);
    call {:si_unique_call 613} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 614} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i24);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 616} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i24, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_71 := ldv__builtin_expect($i32, 0);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} warn_slowpath_null(.str.7, 704);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_112: ref;

axiom ldv_mutex_lock_112 == $sub.ref(0, 449462);

procedure ldv_mutex_lock_112($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_lock_112($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} ldv_linux_kernel_locking_mutex_mutex_lock_card_mutex($p0);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 450494);

procedure ldv_mutex_unlock_113($p0: ref);
  free requires assertsPassed;
  modifies $M.3, assertsPassed;



implementation ldv_mutex_unlock_113($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} ldv_linux_kernel_locking_mutex_mutex_unlock_card_mutex($p0);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;
}



const fw_destroy_nodes: ref;

axiom fw_destroy_nodes == $sub.ref(0, 451526);

procedure fw_destroy_nodes($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $CurrAddr, $M.16;



implementation fw_destroy_nodes($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p1);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} ldv_spin_unlock_irqrestore_135($p15, $u0);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} for_each_fw_node($p0, $p13, report_lost_node);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const ldv_wait_for_completion_114: ref;

axiom ldv_wait_for_completion_114 == $sub.ref(0, 452558);

procedure ldv_wait_for_completion_114($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_wait_for_completion_114($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} ldv_linux_kernel_sched_completion_wait_for_completion_done_of_fw_card();
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} wait_for_completion($p0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_sched_completion_wait_for_completion_done_of_fw_card: ref;

axiom ldv_linux_kernel_sched_completion_wait_for_completion_done_of_fw_card == $sub.ref(0, 453590);

procedure ldv_linux_kernel_sched_completion_wait_for_completion_done_of_fw_card();
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_linux_kernel_sched_completion_wait_for_completion_done_of_fw_card()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i0 := $M.16;
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} ldv_assert_linux_kernel_sched_completion__wait_without_init($i2);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 627} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_fw_card"} boogie_si_record_i32(2);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96 == $sub.ref(0, 454622);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const report_lost_node: ref;

axiom report_lost_node == $sub.ref(0, 455654);

procedure report_lost_node($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation report_lost_node($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} fw_node_event($p0, $p1, 2);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} fw_node_put___1($p1);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(808, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const for_each_fw_node: ref;

axiom for_each_fw_node == $sub.ref(0, 456686);

procedure for_each_fw_node($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation for_each_fw_node($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p42: ref;
  var $p40: ref;
  var $p32: ref;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i24: i32;
  var $p25: ref;
  var $p47: ref;
  var $p23: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p14: ref;
  var $p15: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $i78: i1;
  var $p69: ref;
  var $p70: ref;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} INIT_LIST_HEAD($p3);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_72 := fw_node_get___1($p1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} list_add_tail($p5, $p3);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref($sub.ref(0, 16), 40)), $mul.ref(16, 1));
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p3);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i11, $i12);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p58, $mul.ref($sub.ref(0, 16), 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 16), 40)), $mul.ref(16, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p3);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i66, $i67);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    return;

  $bb24:
    assume $i68 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p69, $p70 := $p64, $p59;
    goto $bb27;

  $bb27:
    call $p72, $p73, $p74, $p75, $p76, $i77, $i78, $p69, $p70 := for_each_fw_node_loop_$bb27($i67, $p72, $p73, $p74, $p75, $p76, $i77, $i78, $p69, $p70);
    goto $bb27_last;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} fw_node_put___1($p70);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p74, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p69, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i77 := $p2i.ref.i64($p76);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, $i67);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i78 == 1);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $p69, $p70 := $p75, $p69;
    goto $bb29_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p14, $p15 := $0.ref, $p9;
    goto $bb4;

  $bb4:
    call $p16, $i17, $p18, $p19, $i20, $i21, $i22, $i26, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $p42, $p40, $p32, $i43, $i44, $i45, $i46, $i24, $p25, $p47, $p23, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p14, $p15, vslice_dummy_var_73 := for_each_fw_node_loop_$bb4($p0, $p2, $p3, $i12, $p16, $i17, $p18, $p19, $i20, $i21, $i22, $i26, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $p42, $p40, $p32, $i43, $i44, $i45, $i46, $i24, $p25, $p47, $p23, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $p14, $p15, vslice_dummy_var_73);
    goto $bb4_last;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(3, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32(0, $i21);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p23 := $p14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call {:si_unique_call 639} devirtbounce.7($p2, $p0, $p15, $p23);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref($sub.ref(0, 16), 40)), $mul.ref(16, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, $i12);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb21:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $p14, $p15 := $p23, $p52;
    goto $bb21_dummy;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i24, $p25 := 0, $p14;
    goto $bb9;

  $bb9:
    call $i26, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $p42, $p40, $p32, $i43, $i44, $i45, $i46, $i24, $p25, $p47, vslice_dummy_var_73 := for_each_fw_node_loop_$bb9($p0, $p3, $p19, $i26, $p28, $p29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $p42, $p40, $p32, $i43, $i44, $i45, $i46, $i24, $p25, $p47, $p15, vslice_dummy_var_73);
    goto $bb9_last;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i24);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(40, 1)), $mul.ref($i26, 8));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i35, $i38);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_73 := fw_node_get___1($p29);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} list_add_tail($p42, $p3);
    assume {:verifier.code 0} true;
    $p40 := $p25;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p32 := $p40;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i24, 1);
    call {:si_unique_call 636} {:cexpr "i"} boogie_si_record_i32($i43);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p19);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i43, $i45);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p47 := $p32;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p23 := $p47;
    goto $bb8;

  $bb18:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i24, $p25 := $i43, $p32;
    goto $bb18_dummy;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p40 := $p29;
    goto $bb17;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p32 := $p25;
    goto $bb13;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  $bb18_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  $bb21_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;
}



const fw_node_get___1: ref;

axiom fw_node_get___1 == $sub.ref(0, 457718);

procedure fw_node_get___1($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_get___1($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} atomic_inc($p1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fw_node_put___1: ref;

axiom fw_node_put___1 == $sub.ref(0, 458750);

procedure fw_node_put___1($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_put___1($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 643} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} kfree($p4);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_node_event: ref;

axiom fw_node_event == $sub.ref(0, 459782);

procedure fw_node_event($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation fw_node_event($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $p64: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i16;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $i125: i64;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 649} {:cexpr "fw_node_event:arg:event"} boogie_si_record_i32($i2);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 5);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 3);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 2);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i2, 4);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i12 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i119 := atomic_xchg($p118, 2);
    call {:si_unique_call 671} {:cexpr "tmp___3"} boogie_si_record_i32($i119);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb46:
    assume $i120 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p117, $mul.ref(0, 2040)), $mul.ref(1656, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p121, fw_device_shutdown);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(320, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i123 := list_empty($p122);
    call {:si_unique_call 673} {:cexpr "tmp___2"} boogie_si_record_i32($i123);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i125 := (if $i124 == 1 then 0 else 500);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} fw_schedule_device_work($p117, $i125);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i114 == 1;
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i99 := $eq.i64($i98, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p97, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    call {:si_unique_call 666} devirtbounce.8(0);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(124, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p97, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p97, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i108 := atomic_read($p107);
    call {:si_unique_call 668} {:cexpr "tmp___1"} boogie_si_record_i32($i108);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb40:
    assume $i109 == 1;
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p97, $mul.ref(0, 2040)), $mul.ref(1656, 1));
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p110, fw_device_update);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} fw_schedule_device_work($p97, 0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i99 == 1;
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i77 := $eq.i64($i76, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i79 := $load.i16($M.0, $p78);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p75, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    call {:si_unique_call 662} devirtbounce.8(0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(124, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i83);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p75, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i86 := atomic_cmpxchg($p85, 1, 0);
    call {:si_unique_call 664} {:cexpr "tmp___0"} boogie_si_record_i32($i86);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p75, $mul.ref(0, 2040)), $mul.ref(1656, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, fw_device_refresh);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p75);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(1644, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i94 := (if $i93 == 1 then 0 else 125);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} fw_schedule_device_work($p75, $i94);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i77 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p13 := kzalloc(2032, 32);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} atomic_set($p17, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p18 := fw_card_get___1($p0);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p18);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} $p20 := fw_node_get___0($p1);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(124, 1));
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i29, $i32);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i35, 1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i37, $sub.i8(0, 2));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, $i38);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i40);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} __mutex_init($p41, .str.12, $p3);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1616, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} INIT_LIST_HEAD($p42);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p13);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1656, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, fw_device_init);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(0, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __init_work($p47, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 137438953408);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p5);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 657} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p52, $p53, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} lockdep_init_map($p56, .str.13, $p4, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} INIT_LIST_HEAD($p59);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, fw_device_workfn);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(80, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} init_timer_key($p64, 2, .str.14, $p6);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, delayed_work_timer_fn);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1664, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i69);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} fw_schedule_device_work($p14, 125);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume $i16 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb26;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 460814);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 676} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_403:
    assume !assertsPassed;
    return;
}



const fw_card_get___1: ref;

axiom fw_card_get___1 == $sub.ref(0, 461846);

procedure fw_card_get___1($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_card_get___1($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} kref_get___1($p1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fw_node_get___0: ref;

axiom fw_node_get___0 == $sub.ref(0, 462878);

procedure fw_node_get___0($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_get___0($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} atomic_inc($p1);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 463910);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    return;
}



const fw_device_init: ref;

axiom fw_device_init == $sub.ref(0, 464942);

procedure fw_device_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.23, $CurrAddr, $M.15, $M.27, $M.28, $M.34, $M.13, $M.26, $M.1, $M.2, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.24, $M.38, $M.39, $M.16, $M.43, $M.11, $M.12, $M.25, $M.14;



implementation fw_device_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $p61: ref;
  var $p62: ref;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(32, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(20, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i7 := read_config_rom($p2, $i6);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 681} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} $p40 := device_find_child($p38, $p39, lookup_existing_device);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} device_initialize($p44);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vslice_dummy_var_74 := fw_device_get($p2);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} down_write(fw_device_rwsem);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i47 := ldv_idr_alloc_102(fw_device_idr, $p46, 0, 1048576, 208);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 696} {:cexpr "minor"} boogie_si_record_i32($i47);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} up_write(fw_device_rwsem);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(488, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, fw_bus_type);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(320, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, fw_device_type);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p54);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i57 := $M.18;
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32($i57, 20);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $i47);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(1248, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i59);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_75 := dev_set_name.ref.ref.i32($p62, .str.51, $i47);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1(0);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1888, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} init_fw_attribute_group($p65, fw_device_attributes, $p66);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i68 := device_add($p67);
    call {:si_unique_call 704} {:cexpr "tmp___1"} boogie_si_record_i32($i68);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} create_units($p2);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i71 := atomic_cmpxchg($p70, 0, 1);
    call {:si_unique_call 711} {:cexpr "tmp___3"} boogie_si_record_i32($i71);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 2);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p75 := dev_name($p74);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p77, $mul.ref(3, 4));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p81, $mul.ref(4, 4));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(24, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i86 := $shl.i32(1, $i85);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} fw_notice.ref.ref.ref.i32.i32.i32($p4, .str.53, $p75, $i79, $i83, $i86);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 0);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(20, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} set_broadcast_channel($p2, $i89);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p92, $mul.ref(3, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} add_device_randomness($p93, 8);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(8, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(288, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i96, $i99);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i100 == 1;
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} fw_schedule_bm_work($p4, 0);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1656, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, fw_device_shutdown);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} fw_schedule_device_work($p2, 500);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i69 == 1;
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} fw_err.ref.ref($p4, .str.52);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} down_write(fw_device_rwsem);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} ldv_idr_remove_103(fw_device_idr, $i47);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} up_write(fw_device_rwsem);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} fw_device_put($p2);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} put_device($p101);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __compiletime_assert_1057();
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume $i48 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} put_device($p40);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} fw_device_release($p43);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i11 := $sle.i32($i10, 9);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(8, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(4, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(8, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(288, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i35 := $eq.i64($i31, $i34);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} fw_device_release($p36);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} fw_schedule_bm_work($p4, 0);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p26 := fw_rcode_string($i7);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(16, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} fw_notice.ref.ref.i32.ref($p4, .str.50, $i28, $p26);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i13 := atomic_read($p12);
    call {:si_unique_call 683} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} fw_schedule_device_work($p2, 750);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_406:
    assume !assertsPassed;
    return;
}



const fw_device_workfn: ref;

axiom fw_device_workfn == $sub.ref(0, 465974);

procedure fw_device_workfn($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_workfn($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $p1 := to_delayed_work($p0);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1656, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.21, $p4);
    call {:si_unique_call 719} devirtbounce.9($p5, $p0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_433:
    assume !assertsPassed;
    return;
}



const fw_schedule_device_work: ref;

axiom fw_schedule_device_work == $sub.ref(0, 467006);

procedure fw_schedule_device_work($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation fw_schedule_device_work($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_76: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "fw_schedule_device_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p2 := $M.5;
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1664, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_76 := queue_delayed_work($p2, $p3, $i1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 468038);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 723} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 724} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 725} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 726} $i10 := devirtbounce.12(0, $p9, $i2, $i1, $p9);
    call {:si_unique_call 727} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const fw_device_refresh: ref;

axiom fw_device_refresh == $sub.ref(0, 469070);

procedure fw_device_refresh($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $CurrAddr, $M.1, $M.2, $M.27, $M.28, $M.24, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.34, $M.13, assertsPassed, $M.16, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.11, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_refresh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i12: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(32, 1));
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(16, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 733} {:cexpr "node_id"} boogie_si_record_i32($i7);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(20, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} $i10 := reread_config_rom($p3, $i9, $p1);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 735} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p1);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i16 := atomic_cmpxchg($p15, 0, 1);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} fw_device_update($p0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(288, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i7, $i53);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i54 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} fw_schedule_bm_work($p5, 0);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} atomic_set($p47, 2);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1656, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, fw_device_shutdown);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} fw_schedule_device_work($p3, 500);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} vslice_dummy_var_77 := device_for_each_child($p19, $0.ref, shutdown_unit);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(20, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $i23 := read_config_rom($p3, $i22);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 743} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} fw_device_cdev_update($p3);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} create_units($p3);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(16, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} vslice_dummy_var_78 := kobject_uevent($p26, 2);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i29 := atomic_cmpxchg($p28, 0, 1);
    call {:si_unique_call 748} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p32 := dev_name($p31);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} fw_notice.ref.ref.ref($p5, .str.73, $p32);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 0);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i24 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i12 := $i23;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i36 := $sle.i32($i35, 9);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p44 := fw_rcode_string($i12);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $p46 := dev_name($p45);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} fw_notice.ref.ref.ref.ref($p5, .str.74, $p46, $p44);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $i38 := atomic_read($p37);
    call {:si_unique_call 752} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(1648, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} fw_schedule_device_work($p3, 750);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const fw_device_update: ref;

axiom fw_device_update == $sub.ref(0, 470102);

procedure fw_device_update($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.24, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, assertsPassed, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_update($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} fw_device_cdev_update($p2);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} vslice_dummy_var_79 := device_for_each_child($p3, $0.ref, update_unit);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;
}



const atomic_xchg: ref;

axiom atomic_xchg == $sub.ref(0, 471134);

procedure atomic_xchg($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_xchg($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} {:cexpr "atomic_xchg:arg:new"} boogie_si_record_i32($i1);
    call {:si_unique_call 761} {:cexpr "atomic_xchg:arg:__ret"} boogie_si_record_i32($i1);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 762} $i9 := devirtbounce.14(0, $p8, $i1, $p8);
    call {:si_unique_call 763} {:cexpr "__ret"} boogie_si_record_i32($i9);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const fw_device_shutdown: ref;

axiom fw_device_shutdown == $sub.ref(0, 472166);

procedure fw_device_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.1, $M.2, $M.10, $M.24, $M.3, $M.15, $M.40, $M.26, $M.31, assertsPassed, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1)), $mul.ref(1248, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1048575);
    call {:si_unique_call 768} {:cexpr "minor"} boogie_si_record_i32($i6);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i7 := get_jiffies_64();
    call {:si_unique_call 770} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(32, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1856)), $mul.ref(160, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i7, $i11);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i12, 500);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64($i13, 0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(0, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i21 := atomic_cmpxchg($p20, 2, 3);
    call {:si_unique_call 775} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 2);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} fw_device_cdev_remove($p2);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_80 := device_for_each_child($p23, $0.ref, shutdown_unit);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(40, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} device_unregister($p25);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} down_write(fw_device_rwsem);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} ldv_idr_remove_97(fw_device_idr, $i6);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} up_write(fw_device_rwsem);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} fw_device_put($p2);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1656), 2040)), $mul.ref(32, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1856)), $mul.ref(320, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i18 := list_empty($p17);
    call {:si_unique_call 772} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i19 == 1;
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} fw_schedule_device_work($p2, 500);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fw_device_cdev_remove: ref;

axiom fw_device_cdev_remove == $sub.ref(0, 473198);

procedure fw_device_cdev_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.24, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, assertsPassed, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_cdev_remove($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} for_each_client($p0, wake_up_client);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const shutdown_unit: ref;

axiom shutdown_unit == $sub.ref(0, 474230);

procedure shutdown_unit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation shutdown_unit($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} device_unregister($p0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const device_unregister: ref;

axiom device_unregister == $sub.ref(0, 475262);

procedure device_unregister($p0: ref);
  free requires assertsPassed;



implementation device_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    return;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 476294);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    return;
}



const ldv_idr_remove_97: ref;

axiom ldv_idr_remove_97 == $sub.ref(0, 477326);

procedure ldv_idr_remove_97($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_idr_remove_97($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "ldv_idr_remove_97:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} ldv_linux_lib_idr_idr_remove_fw_device_idr();
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_466:
    assume !assertsPassed;
    return;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 478358);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    return;
}



const fw_device_put: ref;

axiom fw_device_put == $sub.ref(0, 479390);

procedure fw_device_put($p0: ref);
  free requires assertsPassed;



implementation fw_device_put($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} put_device($p1);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 480422);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_idr_idr_remove_fw_device_idr: ref;

axiom ldv_linux_lib_idr_idr_remove_fw_device_idr == $sub.ref(0, 481454);

procedure ldv_linux_lib_idr_idr_remove_fw_device_idr();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_lib_idr_idr_remove_fw_device_idr()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 790} {:cexpr "ldv_linux_lib_idr_idr_fw_device_idr"} boogie_si_record_i32(2);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__not_initialized: ref;

axiom ldv_assert_linux_lib_idr__not_initialized == $sub.ref(0, 482486);

procedure ldv_assert_linux_lib_idr__not_initialized($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__not_initialized($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} {:cexpr "ldv_assert_linux_lib_idr__not_initialized:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 1} true;
    call {:si_unique_call 792} __VERIFIER_error();
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__destroyed_before_usage: ref;

axiom ldv_assert_linux_lib_idr__destroyed_before_usage == $sub.ref(0, 483518);

procedure ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__destroyed_before_usage($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "ldv_assert_linux_lib_idr__destroyed_before_usage:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 1} true;
    call {:si_unique_call 794} __VERIFIER_error();
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const wake_up_client: ref;

axiom wake_up_client == $sub.ref(0, 484550);

procedure wake_up_client($p0: ref);
  free requires assertsPassed;



implementation wake_up_client($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} __wake_up($p1, 1, 1, $0.ref);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    return;
}



const for_each_client: ref;

axiom for_each_client == $sub.ref(0, 485582);

procedure for_each_client($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.24, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, assertsPassed, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation for_each_client($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p13: ref;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} ldv_mutex_lock_104($p2);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 488), 512));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 488), 512)), $mul.ref(488, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} ldv_mutex_unlock_105($p22);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p13 := for_each_client_loop_$bb4($p1, $i11, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p13);
    goto $bb4_last;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call {:si_unique_call 797} devirtbounce.15($p1, $p13);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 512)), $mul.ref(488, 1)), $mul.ref(0, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref($sub.ref(0, 488), 512));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref($sub.ref(0, 488), 512)), $mul.ref(488, 1));
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, $i11);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p18;
    goto $bb6_dummy;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;
}



const ldv_mutex_lock_104: ref;

axiom ldv_mutex_lock_104 == $sub.ref(0, 486614);

procedure ldv_mutex_lock_104($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_104($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 487646);

procedure ldv_mutex_unlock_105($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_105($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device == $sub.ref(0, 488678);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 802} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_client_list_mutex_of_fw_device"} boogie_si_record_i8(0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device == $sub.ref(0, 489710);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 804} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_client_list_mutex_of_fw_device"} boogie_si_record_i8(1);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 490742);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 806} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    return;
}



const __xchg_wrong_size: ref;

axiom __xchg_wrong_size == $sub.ref(0, 491774);

procedure __xchg_wrong_size();



const fw_device_cdev_update: ref;

axiom fw_device_cdev_update == $sub.ref(0, 492806);

procedure fw_device_cdev_update($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.24, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, assertsPassed, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_cdev_update($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} for_each_client($p0, queue_bus_reset_event);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_502:
    assume !assertsPassed;
    return;
}



const update_unit: ref;

axiom update_unit == $sub.ref(0, 493838);

procedure update_unit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.25, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.14;



implementation update_unit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p2 := fw_unit($p0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(496, 1));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i6 := is_fw_unit($p0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 810} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} device_lock($p0);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 152)), $mul.ref(128, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 812} devirtbounce.16($p16, $p2);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} device_unlock($p0);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;
}



const fw_unit: ref;

axiom fw_unit == $sub.ref(0, 494870);

procedure fw_unit($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_unit($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const is_fw_unit: ref;

axiom is_fw_unit == $sub.ref(0, 495902);

procedure is_fw_unit($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_fw_unit($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(320, 1));
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(fw_unit_type));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const device_lock: ref;

axiom device_lock == $sub.ref(0, 496934);

procedure device_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation device_lock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(328, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} ldv_mutex_lock_56($p1);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_514:
    assume !assertsPassed;
    return;
}



const device_unlock: ref;

axiom device_unlock == $sub.ref(0, 497966);

procedure device_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation device_unlock($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(328, 1));
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} ldv_mutex_unlock_58($p1);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_517:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_58: ref;

axiom ldv_mutex_unlock_58 == $sub.ref(0, 498998);

procedure ldv_mutex_unlock_58($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_unlock_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_device($p0);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_520:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_device == $sub.ref(0, 500030);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_device($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_mutex_of_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.25 := 0;
    call {:si_unique_call 818} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_523:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_56: ref;

axiom ldv_mutex_lock_56 == $sub.ref(0, 501062);

procedure ldv_mutex_lock_56($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_mutex_lock_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_device($p0);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_526:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_device: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_device == $sub.ref(0, 502094);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_device($p0: ref);
  free requires assertsPassed;
  modifies $M.25, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_mutex_of_device($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i1 := $M.25;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.25 := 1;
    call {:si_unique_call 821} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_529:
    assume !assertsPassed;
    return;
}



const queue_bus_reset_event: ref;

axiom queue_bus_reset_event == $sub.ref(0, 503126);

procedure queue_bus_reset_event($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $CurrAddr;



implementation queue_bus_reset_event($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p1 := kzalloc(88, 208);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} fill_bus_reset_event($p5, $p0);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} queue_event($p0, $p6, $p8, 40, $0.ref, 0);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} ldv_spin_lock_irq_100___0($p9);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_81 := idr_for_each($p10, schedule_reallocations, $p11);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} ldv_spin_unlock_irq_101___0($p13);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_532:
    assume !assertsPassed;
    return;
}



const fill_bus_reset_event: ref;

axiom fill_bus_reset_event == $sub.ref(0, 504158);

procedure fill_bus_reset_event($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed;



implementation fill_bus_reset_event($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i16;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} ldv_spin_lock_irq_100($p6);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 512)), $mul.ref(400, 1));
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p9, $i8);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(280, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(816, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(296, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(288, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i39 := $load.i16($M.0, $p38);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} ldv_spin_unlock_irq_101($p42);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const queue_event: ref;

axiom queue_event == $sub.ref(0, 505190);

procedure queue_event($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $i5: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation queue_event($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $i5: i64)
{
  var $p8: ref;
  var $p11: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "queue_event:arg:size0"} boogie_si_record_i64($i3);
    call {:si_unique_call 831} {:cexpr "queue_event:arg:size1"} boogie_si_record_i64($i5);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i3);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p4);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, $i5);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p18);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} list_add_tail($p23, $p24);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} ldv_spin_unlock_irqrestore_99($p25, $u0);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __wake_up($p26, 1, 1, $0.ref);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} kfree($p22);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_553:
    assume !assertsPassed;
    return;
}



const ldv_spin_lock_irq_100___0: ref;

axiom ldv_spin_lock_irq_100___0 == $sub.ref(0, 506222);

procedure ldv_spin_lock_irq_100___0($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_spin_lock_irq_100___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client();
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} spin_lock_irq($p0);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;
}



const schedule_reallocations: ref;

axiom schedule_reallocations == $sub.ref(0, 507254);

procedure schedule_reallocations($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const idr_for_each: ref;

axiom idr_for_each == $sub.ref(0, 508286);

procedure idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation idr_for_each($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 839} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 840} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_spin_unlock_irq_101___0: ref;

axiom ldv_spin_unlock_irq_101___0 == $sub.ref(0, 509318);

procedure ldv_spin_unlock_irq_101___0($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_spin_unlock_irq_101___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client();
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} spin_unlock_irq($p0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_562:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client == $sub.ref(0, 510350);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client();
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i0 := $M.26;
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i3 := $M.26;
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} ldv_assume($i5);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 845} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_client"} boogie_si_record_i32(1);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;
}



const schedule_if_iso_resource: ref;

axiom schedule_if_iso_resource == $sub.ref(0, 511382);

procedure schedule_if_iso_resource($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation schedule_if_iso_resource($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(release_iso_resource));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} schedule_iso_resource($p5, 0);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_568:
    assume !assertsPassed;
    return;
}



const release_iso_resource: ref;

axiom release_iso_resource == $sub.ref(0, 512414);

procedure release_iso_resource($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation release_iso_resource($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} ldv_spin_lock_irq_100___0($p3);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 288)), $mul.ref(248, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 2);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} schedule_iso_resource($p2, 0);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} ldv_spin_unlock_irq_101___0($p5);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const schedule_iso_resource: ref;

axiom schedule_iso_resource == $sub.ref(0, 513446);

procedure schedule_iso_resource($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation schedule_iso_resource($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} {:cexpr "schedule_iso_resource:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} client_get($p3);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p4 := $M.5;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i6 := queue_delayed_work($p4, $p5, $i1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 853} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} client_put($p12);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const client_get: ref;

axiom client_get == $sub.ref(0, 514478);

procedure client_get($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation client_get($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(504, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} kref_get___0($p1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    return;
}



const client_put: ref;

axiom client_put == $sub.ref(0, 515510);

procedure client_put($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation client_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(504, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} vslice_dummy_var_82 := kref_put___0($p1, client_release);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;
}



const client_release: ref;

axiom client_release == $sub.ref(0, 516542);

procedure client_release($p0: ref);
  free requires assertsPassed;



implementation client_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 504), 512));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 504), 512)), $mul.ref(8, 1));
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} fw_device_put($p4);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} kfree($p5);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    return;
}



const kref_put___0: ref;

axiom kref_put___0 == $sub.ref(0, 517574);

procedure kref_put___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_put___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i2 := kref_sub___0($p0, 1, $p1);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 860} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_586:
    assume !assertsPassed;
    return;
}



const kref_sub___0: ref;

axiom kref_sub___0 == $sub.ref(0, 518606);

procedure kref_sub___0($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_sub___0($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_83: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} {:cexpr "kref_sub___0:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 862} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_83 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 868} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 869} devirtbounce.1($p2, $p0);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} warn_slowpath_null(.str.36, 71);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_get___0: ref;

axiom kref_get___0 == $sub.ref(0, 519638);

procedure kref_get___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_get___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_84: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 871} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 872} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 874} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_84 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 875} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 877} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 880} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} warn_slowpath_null(.str.36, 47);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client == $sub.ref(0, 520670);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client();
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i0 := $M.26;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i3 := $M.26;
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_assume($i5);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 884} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_client"} boogie_si_record_i32(2);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_592:
    assume !assertsPassed;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98 == $sub.ref(0, 521702);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client();
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_595:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_irqrestore_99: ref;

axiom ldv_spin_unlock_irqrestore_99 == $sub.ref(0, 522734);

procedure ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_spin_unlock_irqrestore_99($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} {:cexpr "ldv_spin_unlock_irqrestore_99:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} ldv_linux_kernel_locking_spinlock_spin_unlock_lock_of_client();
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} spin_unlock_irqrestore($p0, $i1);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;
}



const reread_config_rom: ref;

axiom reread_config_rom == $sub.ref(0, 523766);

procedure reread_config_rom($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation reread_config_rom($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i7: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 891} {:cexpr "reread_config_rom:arg:generation"} boogie_si_record_i32($i1);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i4 := read_rom($p0, $i1, 0, $p3);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    call {:si_unique_call 893} {:cexpr "rcode"} boogie_si_record_i32($i4);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p3);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i10, $i13);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i15 := read_rom($p0, $i1, 1, $p3);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p3);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1, 4));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i19, $i23);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i25 := read_rom($p0, $i1, 2, $p3);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p3);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(2, 4));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i29, $i33);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i35 := read_rom($p0, $i1, 3, $p3);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i6 := $i35;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p3);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(3, 4));
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i39, $i43);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i45 := read_rom($p0, $i1, 4, $p3);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i6 := $i45;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p3);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(4, 4));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i49, $i53);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} $i55 := read_rom($p0, $i1, 5, $p3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p3);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(5, 4));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i59, $i63);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 1);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb76:
    assume 0 == 1;
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p3);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb78;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i7 := 18;
    goto $bb6;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb6;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb16;

  $bb63:
    assume 0 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p3);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb65;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb12;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb16;

  $bb50:
    assume 0 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p3);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb52;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb12;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb16;

  $bb37:
    assume 0 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p3);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb39;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb4;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb16;

  $bb24:
    assume 0 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p3);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb4;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb16;

  $bb8:
    assume 1 == 1;
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p3);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb12;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;

  SeqInstr_601:
    assume !assertsPassed;
    return;
}



const read_config_rom: ref;

axiom read_config_rom == $sub.ref(0, 524798);

procedure read_config_rom($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation read_config_rom($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i8;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i92: i64;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i107: i64;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i64;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i120: i64;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $p133: ref;
  var $i134: i32;
  var $i135: i64;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i64;
  var $i140: i64;
  var $p141: ref;
  var $i119: i32;
  var $i142: i32;
  var $i143: i1;
  var $i105: i32;
  var $i106: i32;
  var $i144: i32;
  var $i145: i32;
  var $i103: i32;
  var $i104: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i60: i32;
  var $i61: i32;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i64;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $i160: i64;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i32;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i8;
  var $p170: ref;
  var $i171: i8;
  var $i172: i8;
  var $i173: i8;
  var $i174: i8;
  var $i175: i8;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $p183: ref;
  var $i184: i8;
  var $i185: i8;
  var $i186: i8;
  var $i187: i8;
  var $i188: i8;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $i192: i8;
  var $p193: ref;
  var $i194: i8;
  var $i195: i8;
  var $i196: i8;
  var $i197: i8;
  var $i198: i8;
  var $i16: i32;
  var $p199: ref;
  var $i9: i32;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i219: i32;
  var $i220: i1;
  var $p221: ref;
  var $i222: i32;
  var $i223: i1;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 900} {:cexpr "read_config_rom:arg:generation"} boogie_si_record_i32($i1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $p5 := kmalloc(2048, 208);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p6);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 902} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p11, 0, 1024, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i13 := read_rom($p0, $i1, 0, $p6);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 904} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(1 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i201 := read_rom($p0, $i1, 1, $p200);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i202 := $ne.i32($i201, 0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i15 := $i201;
    assume {:branchcond $i202} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i207 := read_rom($p0, $i1, 2, $p206);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i15 := $i207;
    assume {:branchcond $i208} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p6, $mul.ref(3, 4));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i213 := read_rom($p0, $i1, 3, $p212);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i214 := $ne.i32($i213, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i15 := $i213;
    assume {:branchcond $i214} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($p6, $mul.ref(4, 4));
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i219 := read_rom($p0, $i1, 4, $p218);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i220 := $ne.i32($i219, 0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i15 := $i219;
    assume {:branchcond $i220} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(0 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i8($i22, 5);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i24 := $and.i8($i23, 3);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 7);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i29, $i31);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i32 == 1);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i35 == 1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(312, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i56 := $add.i32(0, 1);
    call {:si_unique_call 909} {:cexpr "sp"} boogie_si_record_i32($i56);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64(0);
    $i58 := $add.i64(256, $i57);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p6, $mul.ref($i58, 4));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $sub.i32(0, 1073741819));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i60, $i61 := 5, $i56;
    goto $bb44;

  $bb44:
    call $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $i119, $i142, $i143, $i105, $i106, $i144, $i145, $i103, $i104, $i146, $i147, $i148, $i60, $i61, $i149 := read_config_rom_loop_$bb44($p0, $i1, $p4, $p6, $i62, $i63, $i64, $p65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $i119, $i142, $i143, $i105, $i106, $i144, $i145, $i103, $i104, $i146, $i147, $i148, $i60, $i61, $i149);
    goto $bb44_last;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, 1);
    call {:si_unique_call 910} {:cexpr "sp"} boogie_si_record_i32($i62);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i63 := $zext.i32.i64($i62);
    $i64 := $add.i64(256, $i63);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p6, $mul.ref($i64, 4));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    call {:si_unique_call 911} {:cexpr "key"} boogie_si_record_i32($i66);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 16777215);
    call {:si_unique_call 912} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, 255);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 913} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i69);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 915} {:cexpr "tmp___2"} boogie_si_record_i64($i73);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i69, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i76);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 918} {:cexpr "tmp___3"} boogie_si_record_i64($i78);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i67);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p6, $mul.ref($i80, 4));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i82 := read_rom($p0, $i1, $i67, $p81);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    call {:si_unique_call 920} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i84 := $i82;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i67);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p6, $mul.ref($i85, 4));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i88 := $lshr.i32($i87, 16);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i67, $i88);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i90 := $add.i32($i89, 1);
    call {:si_unique_call 921} {:cexpr "end"} boogie_si_record_i32($i90);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i91 := $sgt.i32($i90, 256);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i90;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i67, 1);
    call {:si_unique_call 923} {:cexpr "i"} boogie_si_record_i32($i101);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, $i100);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i103, $i104 := $i62, $i101;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i60, $i104);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i147 := $i60;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i103, 0);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i149 := $i147;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p6);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i153 := $mul.i32($i149, 4);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i154 := $sext.i32.i64($i153);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p155 := kmemdup($p152, $i154, 208);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i158 := $eq.i64($i157, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} down_write(fw_device_rwsem);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p159, $p155);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i160 := $sext.i32.i64($i149);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1640, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p161, $i160);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} up_write(fw_device_rwsem);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p151);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} kfree($p162);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.0, $p163);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i165 := $lshr.i32($i164, 12);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i8($i165);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i168 := $and.i32($i167, 15);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i8($i168);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i172 := $and.i8($i169, 15);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i173 := $shl.i8($i172, 1);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i174 := $and.i8($i171, $sub.i8(0, 31));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i175 := $or.i8($i174, $i173);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, $i175);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i178 := $lshr.i32($i177, 30);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i32.i8($i178);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i180 := $zext.i8.i32($i179);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i185 := $and.i8($i182, 1);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i186 := $shl.i8($i185, 5);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i187 := $and.i8($i184, $sub.i8(0, 33));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i188 := $or.i8($i187, $i186);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, $i188);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.0, $p189);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i191 := $lshr.i32($i190, 31);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i8($i191);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i195 := $and.i8($i192, 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i196 := $shl.i8($i195, 6);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i197 := $and.i8($i194, $sub.i8(0, 65));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i198 := $or.i8($i197, $i196);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p193, $i198);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p6);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} kfree($p199);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb85:
    assume $i158 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb10;

  $bb82:
    assume $i148 == 1;
    assume {:verifier.code 0} true;
    $i60, $i61 := $i147, $i103;
    goto $bb82_dummy;

  $bb79:
    assume $i146 == 1;
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i147 := $i104;
    goto $bb81;

  $bb58:
    assume $i102 == 1;
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i105, $i106 := $i101, $i62;
    goto $bb61;

  $bb61:
    call $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $i119, $i142, $i143, $i105, $i106, $i144, $i145 := read_config_rom_loop_$bb61($p0, $i1, $p4, $p6, $i66, $i100, $i107, $p108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i120, $p121, $i122, $i123, $i124, $i125, $i126, $p127, $i128, $i129, $i130, $i131, $i132, $p133, $i134, $i135, $p136, $i137, $i138, $i139, $i140, $p141, $i119, $i142, $i143, $i105, $i106, $i144, $i145);
    goto $bb61_last;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i107 := $sext.i32.i64($i105);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p6, $mul.ref($i107, 4));
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i109 := read_rom($p0, $i1, $i105, $p108);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32($i109);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i111 := $i109;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i112 := $lshr.i32($i66, 30);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 3);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i113 == 1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i105);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p6, $mul.ref($i114, 4));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i117 := $lshr.i32($i116, 30);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i118 := $ule.i32($i117, 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i105);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p6, $mul.ref($i120, 4));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 16777215);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i124 := $add.i32($i105, $i123);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i125 := $ugt.i32($i124, 255);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i106, 1);
    call {:si_unique_call 928} {:cexpr "sp"} boogie_si_record_i32($i134);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i105);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p6, $mul.ref($i135, 4));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i105, $i137);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i139 := $zext.i32.i64($i106);
    $i140 := $add.i64(256, $i139);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p6, $mul.ref($i140, 4));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p141, $i138);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i119 := $i134;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i105, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32($i142);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i143 := $slt.i32($i142, $i100);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i144, $i145 := $i119, $i142;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i103, $i104 := $i144, $i145;
    goto $bb60;

  $bb76:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    $i105, $i106 := $i142, $i119;
    goto $bb76_dummy;

  $bb73:
    assume $i125 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i105);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p6, $mul.ref($i126, 4));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.0, $p127);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i129 := $mul.i32($i105, 4);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i131 := $or.i64($i130, 281474708276224);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} fw_err.ref.ref.i32.i64($p4, .str.56, $i128, $i131);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i105);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p6, $mul.ref($i132, 4));
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p133, 0);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i119 := $i106;
    goto $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i119 := $i106;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb67;

  $bb63:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i16 := $i111;
    goto $bb10;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i91 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i67);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p6, $mul.ref($i92, 4));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i95 := $mul.i32($i67, 4);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i97 := $or.i64($i96, 281474708276224);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} fw_err.ref.ref.i32.i64($p4, .str.55, $i94, $i97);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i67);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p6, $mul.ref($i98, 4));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, 0);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i100 := $i67;
    goto $bb57;

  $bb52:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i16 := $i84;
    goto $bb10;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i79 == 1;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 6);
    goto $bb10;

  $bb46:
    assume $i74 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} warn_slowpath_null(.str.54, 604);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 3);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb31:
    assume $i47 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    call $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55 := read_config_rom_loop_$bb34($p0, $i1, $p2, $p45, $i48, $i49, $p50, $i51, $i52, $p53, $i54, $i55);
    goto $bb34_last;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i48 := read_rom($p0, $i1, 0, $p2);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 908} {:cexpr "tmp___0"} boogie_si_record_i32($i48);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p45);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i55 == 1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb40_dummy;

  $bb36:
    assume $i49 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i41 == 1;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(196, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb22;

  $bb121:
    assume 0 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($p6, $mul.ref(4, 4));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i222 := $load.i32($M.0, $p221);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb123;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := 18;
    goto $bb10;

  $bb118:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb10;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb111:
    assume 0 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p6, $mul.ref(3, 4));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i217 == 1);
    goto $bb113;

  $bb114:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb16;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb8;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb101:
    assume 0 == 1;
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p6, $mul.ref(2, 4));
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb103;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb16;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb8;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb91:
    assume 0 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p6, $mul.ref(1, 4));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.0, $p203);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb93;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb16;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb8;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb12:
    assume 1 == 1;
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p6);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb8;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb76_dummy:
    assume false;
    return;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  $bb82_dummy:
    assume false;
    return;

  $bb44_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  $bb40_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    goto $bb35;
}



const create_units: ref;

axiom create_units == $sub.ref(0, 525830);

procedure create_units($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr, $M.34, assertsPassed;



implementation create_units($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i9: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(5, 4));
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} fw_csr_iterator_init($p1, $p6);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i7 := fw_csr_iterator_next($p1, $p2, $p3);
    call {:si_unique_call 941} {:cexpr "tmp___3"} boogie_si_record_i32($i7);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p27, $p29, $p30, $p32, $i33, $p34, $p35, $p36, $i38, $p39, $p40, $p41, $i42, $i43, $p45, $i46, $i47, $i9, vslice_dummy_var_85, vslice_dummy_var_86 := create_units_loop_$bb4($p0, $p1, $p2, $p3, $i10, $i11, $i12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $p27, $p29, $p30, $p32, $i33, $p34, $p35, $p36, $i38, $p39, $p40, $p41, $i42, $i43, $p45, $i46, $i47, $i9, vslice_dummy_var_85, vslice_dummy_var_86);
    goto $bb4_last;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i10, $i11, $i12, $i13, $p14, $p15, $i16, $i17, $p18 := create_units_loop_$bb10($p1, $p2, $p3, $i10, $i11, $i12, $i13, $p14, $p15, $i16, $i17, $p18);
    goto $bb10_last;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.27, $p2);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 209);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p14 := kzalloc(1568, 208);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p18 := $p14;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.28, $p3);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $sub.i64(0, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p20, $mul.ref($i23, 4));
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(488, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p27, fw_bus_type);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(320, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, fw_unit_type);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p30);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i9, 1);
    call {:si_unique_call 945} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $p35 := dev_name($p34);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vslice_dummy_var_85 := dev_set_name.ref.ref.ref.i32($p36, .str.70, $p35, $i9);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1(0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(1424, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} init_fw_attribute_group($p39, fw_unit_attributes, $p40);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i42 := device_register($p41);
    call {:si_unique_call 951} {:cexpr "tmp___2"} boogie_si_record_i32($i42);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} vslice_dummy_var_86 := fw_device_get($p0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i46 := fw_csr_iterator_next($p1, $p2, $p3);
    call {:si_unique_call 955} {:cexpr "tmp___3"} boogie_si_record_i32($i46);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i47 == 1);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i33;
    goto $bb24_dummy;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p18);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} kfree($p45);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __compiletime_assert_730();
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i12 := fw_csr_iterator_next($p1, $p2, $p3);
    call {:si_unique_call 943} {:cexpr "tmp___3"} boogie_si_record_i32($i12);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i13 == 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb9_dummy;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;
}



const kobject_uevent: ref;

axiom kobject_uevent == $sub.ref(0, 526862);

procedure kobject_uevent($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_uevent($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 956} {:cexpr "kobject_uevent:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 1} true;
    call {:si_unique_call 957} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 958} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fw_csr_iterator_init: ref;

axiom fw_csr_iterator_init == $sub.ref(0, 527894);

procedure fw_csr_iterator_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_csr_iterator_init($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p2);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p1);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 16);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p5, $mul.ref($i8, 4));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p9);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_name: ref;

axiom dev_set_name == $sub.ref(0, 528926);

procedure dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 1} true;
    call {:si_unique_call 959} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 960} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_set_name.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_set_name.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 1} true;
    call {:si_unique_call 961} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 962} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __compiletime_assert_730: ref;

axiom __compiletime_assert_730 == $sub.ref(0, 529958);

procedure __compiletime_assert_730();
  free requires assertsPassed;



implementation __compiletime_assert_730()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    return;
}



const init_fw_attribute_group: ref;

axiom init_fw_attribute_group == $sub.ref(0, 530990);

procedure init_fw_attribute_group($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.34, $CurrAddr;



implementation init_fw_attribute_group($p0: ref, $p1: ref, $p2: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i9: i32;
  var $i24: i32;
  var $i8: i32;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i28: i32;
  var $i33: i64;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i64;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $i92: i32;
  var $i93: i64;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $p103: ref;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 964} $i26 := devirtbounce.17($p25, $p0, config_rom_attributes, $0.ref);
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i27 := $slt.i64($i26, 0);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i8, 1);
    call {:si_unique_call 966} {:cexpr "j"} boogie_si_record_i32($i29);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i8);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i30, 8));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, config_rom_attributes);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 967} $i50 := devirtbounce.17($p49, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i51 := $slt.i64($i50, 0);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i28, 1);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i28);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i53, 8));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i56 := $i52;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 968} $i58 := devirtbounce.17($p57, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i59 := $slt.i64($i58, 0);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i56, 1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i56);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i61, 8));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p63, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i64 := $i60;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 969} $i66 := devirtbounce.17($p65, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i67 := $slt.i64($i66, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i64, 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i64);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i69, 8));
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p71, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i72 := $i68;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 970} $i74 := devirtbounce.17($p73, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i75 := $slt.i64($i74, 0);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i72, 1);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i72);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i77, 8));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i80 := $i76;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 971} $i82 := devirtbounce.17($p81, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i83 := $slt.i64($i82, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i80, 1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i80);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i85, 8));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i88 := $i84;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 972} $i90 := devirtbounce.17($p89, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i91 := $slt.i64($i90, 0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i88, 1);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i88);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i93, 8));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i96 := $i92;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)));
    call {:si_unique_call 973} $i98 := devirtbounce.17($p97, $p0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $0.ref);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i99 := $slt.i64($i98, 0);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i96, 1);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i96);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i101, 8));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p103, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i34 := $i100;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i34);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i33, 8));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(16, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p37);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $0.ref);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1));
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(0, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1384, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, $p2);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i99 == 1;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i34 := $i96;
    goto $bb50;

  $bb42:
    assume $i91 == 1;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i96 := $i88;
    goto $bb45;

  $bb37:
    assume $i83 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i88 := $i80;
    goto $bb40;

  $bb32:
    assume $i75 == 1;
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i80 := $i72;
    goto $bb35;

  $bb27:
    assume $i67 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i72 := $i64;
    goto $bb30;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i64 := $i56;
    goto $bb25;

  $bb17:
    assume $i51 == 1;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i56 := $i28;
    goto $bb20;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i28 := $i8;
    goto $bb13;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    call $i10, $p12, $i13, $p15, $i16, $i17, $p20, $p21, $i22, $i23, $i9, $i24 := init_fw_attribute_group_loop_$bb4($p1, $p2, $i10, $p12, $i13, $p15, $i16, $i17, $p20, $p21, $i22, $i23, $i9, $i24);
    goto $bb4_last;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($i10, 48)), $mul.ref(0, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i9);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref($i13, 8));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $p12);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    call {:si_unique_call 963} {:cexpr "j"} boogie_si_record_i32($i16);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref($i17, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i24 := $i16;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;
}



const device_register: ref;

axiom device_register == $sub.ref(0, 532022);

procedure device_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 975} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fw_device_get: ref;

axiom fw_device_get == $sub.ref(0, 533054);

procedure fw_device_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_device_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var vslice_dummy_var_87: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_87 := get_device($p1);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fw_csr_iterator_next: ref;

axiom fw_csr_iterator_next == $sub.ref(0, 534086);

procedure fw_csr_iterator_next($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.0;



implementation fw_csr_iterator_next($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 24);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p1, $i6);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16777215);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $M.28 := $store.i32($M.28, $p2, $i10);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(1, 4));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p15);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p12);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i21 := $ult.i64($i17, $i20);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 535118);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $p1 := external_alloc();
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 536150);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 978} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 979} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 537182);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 981} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} ldv_check_alloc_flags($i1);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} ldv_after_alloc($p2);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_649:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 538214);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const read_rom: ref;

axiom read_rom == $sub.ref(0, 539246);

procedure read_rom($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation read_rom($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i19: i32;
  var $i20: i1;
  var $i7: i32;
  var $i21: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "read_rom:arg:generation"} boogie_si_record_i32($i1);
    call {:si_unique_call 986} {:cexpr "read_rom:arg:index"} boogie_si_record_i32($i2);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i4 := $mul.i32($i2, 4);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 281474708276224);
    call {:si_unique_call 987} {:cexpr "offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 988} devirtbounce.8(0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i7 := 10;
    goto $bb1;

  $bb1:
    call $p8, $p9, $p10, $i11, $p12, $i13, $p14, $i15, $i16, $i17, $i19, $i20, $i7, $i21 := read_rom_loop_$bb1($p0, $i1, $p3, $i6, $p8, $p9, $p10, $i11, $p12, $i13, $p14, $i15, $i16, $i17, $i19, $i20, $i7, $i21);
    goto $bb1_last;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i15 := fw_run_transaction($p9, 4, $i11, $i1, $i13, $i6, $p14, 4);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 990} {:cexpr "rcode"} boogie_si_record_i32($i15);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 18);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} msleep($i7);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 10);
    call {:si_unique_call 993} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i20 := $sle.i32($i19, 99);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i21 := $i15;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __swab32s($p3);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb7:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i19;
    goto $bb7_dummy;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb5;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4420;
}



const fw_err: ref;

axiom fw_err == $sub.ref(0, 540278);

procedure fw_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);



procedure fw_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_err.ref.ref($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_88: i32;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} ldv__builtin_va_start($p5);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p10 := dev_name($p9);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_88 := printk.ref.ref.ref(.str, $p10, $p2);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} ldv__builtin_va_end($p13);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    return;
}



procedure fw_err.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation fw_err.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var vslice_dummy_var_89: i32;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} ldv__builtin_va_start($p5);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p3);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p10 := dev_name($p9);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} vslice_dummy_var_89 := printk.ref.ref.ref(.str, $p10, $p2);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} ldv__builtin_va_end($p13);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    return;
}



const kmemdup: ref;

axiom kmemdup == $sub.ref(0, 541310);

procedure kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmemdup($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} {:cexpr "kmemdup:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1007} {:cexpr "kmemdup:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p3 := external_alloc();
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 542342);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    return;
}



const __swab32s: ref;

axiom __swab32s == $sub.ref(0, 543374);

procedure __swab32s($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __swab32s($p0: ref)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i1 := __swab32p($p0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p0, $i1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 544406);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  SeqInstr_655:
    assume !assertsPassed;
    return;
}



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 545438);

procedure ldv_malloc_unknown_size() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_malloc_unknown_size() returns ($r: ref)
{
  var $i0: i32;
  var $i1: i1;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i0 := ldv_undef_int();
    call {:si_unique_call 1015} {:cexpr "tmp___1"} boogie_si_record_i32($i0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $p2 := external_allocated_data();
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} ldv_assume($i5);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i6 := ldv_is_err($p2);
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} ldv_assume($i8);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p9 := $p2;
    goto $bb3;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 546470);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    return;
}



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 547502);

procedure external_allocated_data() returns ($r: ref);
  free requires assertsPassed;



implementation external_allocated_data() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p0 := external_alloc();
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 548534);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1024} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 549566);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i1 := $M.29;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 550598);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1029} __VERIFIER_error();
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 551630);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i0 := $M.14;
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 552662);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1031} __VERIFIER_error();
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __cmpxchg_wrong_size: ref;

axiom __cmpxchg_wrong_size == $sub.ref(0, 553694);

procedure __cmpxchg_wrong_size();



const to_delayed_work: ref;

axiom to_delayed_work == $sub.ref(0, 554726);

procedure to_delayed_work($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation to_delayed_work($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const fw_device_release: ref;

axiom fw_device_release == $sub.ref(0, 555758);

procedure fw_device_release($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p1 := fw_device($p0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___0($p4);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $0.ref);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_spin_unlock_irqrestore_135($p8, $u0);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} fw_node_put___0($p10);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} kfree($p13);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} kfree($p14);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} fw_card_put___1($p3);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const lookup_existing_device: ref;

axiom lookup_existing_device == $sub.ref(0, 556790);

procedure lookup_existing_device($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $CurrAddr, assertsPassed, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $M.26, $M.31, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation lookup_existing_device($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p2 := fw_device($p0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $i6 := is_fw_device($p0);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 1041} {:cexpr "tmp___0"} boogie_si_record_i8($i7);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} down_read(fw_device_rwsem);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_spin_lock_irq_100($p12);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i19 := memcmp($p15, $p18, 24);
    call {:si_unique_call 1045} {:cexpr "tmp___3"} boogie_si_record_i32($i19);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} ldv_spin_unlock_irq_101($p58);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} up_read(fw_device_rwsem);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i11 := $i57;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} $i22 := atomic_cmpxchg($p21, 2, 1);
    call {:si_unique_call 1047} {:cexpr "tmp___4"} boogie_si_record_i32($i22);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb16;

  $bb10:
    assume $i23 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p27);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p32, $p1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p25);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(8, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p2);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p25, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    call {:si_unique_call 1048} devirtbounce.8(0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(124, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1648, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $p49 := dev_name($p0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} fw_notice.ref.ref.ref($p5, .str.57, $p49);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1656, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, fw_device_update);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} fw_schedule_device_work($p2, 0);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p25);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(288, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i51, $i54);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb15;

  $bb12:
    assume $i55 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} fw_schedule_bm_work($p5, 0);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;
}



const device_find_child: ref;

axiom device_find_child == $sub.ref(0, 557822);

procedure device_find_child($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_find_child($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p3 := external_alloc();
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const device_initialize: ref;

axiom device_initialize == $sub.ref(0, 558854);

procedure device_initialize($p0: ref);
  free requires assertsPassed;



implementation device_initialize($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    return;
}



const ldv_idr_alloc_102: ref;

axiom ldv_idr_alloc_102 == $sub.ref(0, 559886);

procedure ldv_idr_alloc_102($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_idr_alloc_102($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} {:cexpr "ldv_idr_alloc_102:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1057} {:cexpr "ldv_idr_alloc_102:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 1058} {:cexpr "ldv_idr_alloc_102:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} ldv_linux_lib_idr_idr_alloc_fw_device_idr();
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i5 := ldv_undef_int();
    call {:si_unique_call 1061} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;
}



const __compiletime_assert_1057: ref;

axiom __compiletime_assert_1057 == $sub.ref(0, 560918);

procedure __compiletime_assert_1057();
  free requires assertsPassed;



implementation __compiletime_assert_1057()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    return;
}



const device_add: ref;

axiom device_add == $sub.ref(0, 561950);

procedure device_add($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_add($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const add_device_randomness: ref;

axiom add_device_randomness == $sub.ref(0, 562982);

procedure add_device_randomness($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation add_device_randomness($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "add_device_randomness:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    return;
}



const ldv_idr_remove_103: ref;

axiom ldv_idr_remove_103 == $sub.ref(0, 564014);

procedure ldv_idr_remove_103($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_idr_remove_103($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} {:cexpr "ldv_idr_remove_103:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} ldv_linux_lib_idr_idr_remove_fw_device_idr();
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_alloc_fw_device_idr: ref;

axiom ldv_linux_lib_idr_idr_alloc_fw_device_idr == $sub.ref(0, 565046);

procedure ldv_linux_lib_idr_idr_alloc_fw_device_idr();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_lib_idr_idr_alloc_fw_device_idr()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1069} {:cexpr "ldv_linux_lib_idr_idr_fw_device_idr"} boogie_si_record_i32(2);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const down_read: ref;

axiom down_read == $sub.ref(0, 566078);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    return;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 567110);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const up_read: ref;

axiom up_read == $sub.ref(0, 568142);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___0: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___0 == $sub.ref(0, 569174);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___0($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;
}



const fw_node_put___0: ref;

axiom fw_node_put___0 == $sub.ref(0, 570206);

procedure fw_node_put___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_node_put___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i2 := atomic_dec_and_test($p1);
    call {:si_unique_call 1073} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} kfree($p4);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_card_put___1: ref;

axiom fw_card_put___1 == $sub.ref(0, 571238);

procedure fw_card_put___1($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_card_put___1($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_90 := kref_put___1($p1, fw_card_release);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_706:
    assume !assertsPassed;
    return;
}



const kref_put___1: ref;

axiom kref_put___1 == $sub.ref(0, 572270);

procedure kref_put___1($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_put___1($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $i2 := kref_sub___1($p0, 1, $p1);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1077} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_709:
    assume !assertsPassed;
    return;
}



const kref_sub___1: ref;

axiom kref_sub___1 == $sub.ref(0, 573302);

procedure kref_sub___1($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation kref_sub___1($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_91: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} {:cexpr "kref_sub___1:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 1079} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1081} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} vslice_dummy_var_91 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 1085} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 1086} devirtbounce.1($p2, $p0);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} warn_slowpath_null(.str.36, 71);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_get___1: ref;

axiom kref_get___1 == $sub.ref(0, 574334);

procedure kref_get___1($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_get___1($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_92: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 1088} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 1089} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 1091} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_92 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1092} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1094} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1097} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} warn_slowpath_null(.str.36, 47);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 575366);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed, $M.0, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1100} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} ldv_check_alloc_flags($i1);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $p2 := ldv_zalloc($i0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} ldv_after_alloc($p2);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_715:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 576398);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 577430);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 1107} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i2 := ldv_undef_int();
    call {:si_unique_call 1109} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p4 := calloc($i0, $i1);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} ldv_assume($i7);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i8 := ldv_is_err($p4);
    call {:si_unique_call 1113} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_assume($i10);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const no_llseek: ref;

axiom no_llseek == $sub.ref(0, 578462);

procedure no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation no_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1115} {:cexpr "no_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1116} {:cexpr "no_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1118} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fw_device_op_read: ref;

axiom fw_device_op_read == $sub.ref(0, 579494);

procedure fw_device_op_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, assertsPassed;



implementation fw_device_op_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} {:cexpr "fw_device_op_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i7 := dequeue_event($p6, $p1, $i2);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    call {:si_unique_call 1121} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_718:
    assume !assertsPassed;
    return;
}



const fw_device_op_poll: ref;

axiom fw_device_op_poll == $sub.ref(0, 580526);

procedure fw_device_op_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation fw_device_op_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} poll_wait($p0, $p5, $p1);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i8 := fw_device_is_shutdown($p7);
    call {:si_unique_call 1124} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i13 := list_empty($p12);
    call {:si_unique_call 1127} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i11, 65);
    call {:si_unique_call 1128} {:cexpr "mask"} boogie_si_record_i32($i15);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i10 := $or.i32(0, 24);
    call {:si_unique_call 1125} {:cexpr "mask"} boogie_si_record_i32($i10);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;

  SeqInstr_721:
    assume !assertsPassed;
    return;
}



const fw_device_op_ioctl: ref;

axiom fw_device_op_ioctl == $sub.ref(0, 581558);

procedure fw_device_op_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $CurrAddr, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_device_op_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} {:cexpr "fw_device_op_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1130} {:cexpr "fw_device_op_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i7 := dispatch_ioctl($p5, $i1, $p6);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    call {:si_unique_call 1132} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_724:
    assume !assertsPassed;
    return;
}



const fw_device_op_compat_ioctl: ref;

axiom fw_device_op_compat_ioctl == $sub.ref(0, 582590);

procedure fw_device_op_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $CurrAddr, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_device_op_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} {:cexpr "fw_device_op_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1134} {:cexpr "fw_device_op_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p4 := compat_ptr($i3);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i8 := dispatch_ioctl($p7, $i1, $p4);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    call {:si_unique_call 1137} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_727:
    assume !assertsPassed;
    return;
}



const fw_device_op_mmap: ref;

axiom fw_device_op_mmap == $sub.ref(0, 583622);

procedure fw_device_op_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation fw_device_op_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i32;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $p56: ref;
  var $i57: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i58: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $i7 := fw_device_is_shutdown($p6);
    call {:si_unique_call 1139} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 8);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 4095);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(448, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i24);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i30 := $sub.i64($i27, $i29);
    call {:si_unique_call 1140} {:cexpr "size"} boogie_si_record_i64($i30);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i64($i30, 12);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 1141} {:cexpr "page_count___0"} boogie_si_record_i32($i32);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i30, 4095);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i36 := fw_iso_buffer_alloc($p35, $i32);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    call {:si_unique_call 1143} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} ldv_spin_lock_irq_100___0($p38);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i55 := $i36;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} ldv_spin_unlock_irq_101___0($p56);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i55, 0);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i60 := fw_iso_buffer_map_vma($p59, $p1);
    call {:si_unique_call 1152} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb27:
    assume $i61 == 1;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i58 := $i60;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} fw_iso_buffer_destroy($p62, $p66);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i9 := $i58;
    goto $bb3;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i58 := $i55;
    goto $bb25;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i42 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i45 := iso_dma_direction($p44);
    call {:si_unique_call 1146} {:cexpr "tmp___0"} boogie_si_record_i32($i45);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i51 := fw_iso_buffer_map_dma($p46, $p50, $i45);
    call {:si_unique_call 1148} {:cexpr "ret"} boogie_si_record_i32($i51);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 512)), $mul.ref(456, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i52);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i54);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i55 := $i51;
    goto $bb22;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i9 := $i36;
    goto $bb3;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;
}



const fw_device_op_open: ref;

axiom fw_device_op_open == $sub.ref(0, 584654);

procedure fw_device_op_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.31, $M.23, assertsPassed;



implementation fw_device_op_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i10: i32;
  var vslice_dummy_var_93: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 976)), $mul.ref(76, 1));
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $p7 := fw_device_get_by_devt($i6);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i11 := fw_device_is_shutdown($p7);
    call {:si_unique_call 1158} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $p13 := kzalloc(512, 208);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p7);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} vslice_dummy_var_93 := spinlock_check($p18);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __raw_spin_lock_init($p22, .str.47, $p2);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ldv_idr_init_96($p23);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} INIT_LIST_HEAD($p24);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __init_waitqueue_head($p25, .str.48, $p3);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(312, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} __init_waitqueue_head($p26, .str.49, $p4);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} INIT_LIST_HEAD($p27);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(488, 1));
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} INIT_LIST_HEAD($p28);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(504, 1));
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} kref_init($p29);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p13);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i32 := ldv_nonseekable_open_97($p0, $p1);
    call {:si_unique_call 1172} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i10 := $i32;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} fw_device_put($p7);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} fw_device_put($p7);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_739:
    assume !assertsPassed;
    return;
}



const fw_device_op_release: ref;

axiom fw_device_op_release == $sub.ref(0, 585686);

procedure fw_device_op_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.24, $M.26, $CurrAddr, assertsPassed, $M.1, $M.2, $M.10, $M.31, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_device_op_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i32;
  var $i50: i1;
  var $i51: i64;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p74: ref;
  var $p75: ref;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} ldv_spin_lock_irq_100($p10);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} list_del($p11);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} ldv_spin_unlock_irq_101($p16);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} ldv_mutex_lock_142($p19);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(488, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} list_del($p20);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} ldv_mutex_unlock_143($p23);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} ldv_spin_lock_irq_100___0($p40);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} ldv_spin_unlock_irq_101___0($p42);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} __might_sleep(.str.43, 1775, 0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i43 := has_outbound_transactions($p5);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    call {:si_unique_call 1186} {:cexpr "tmp"} boogie_si_record_i32($i43);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} INIT_LIST_HEAD($p45);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(312, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i48 := prepare_to_wait_event($p47, $p2, 2);
    call {:si_unique_call 1191} {:cexpr "tmp___0"} boogie_si_record_i64($i48);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i49 := has_outbound_transactions($p5);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    call {:si_unique_call 1193} {:cexpr "tmp___1"} boogie_si_record_i32($i49);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i50 == 1);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call $i51, $i52, $i53 := fw_device_op_release_loop_$bb14($p2, $p5, $p47, $i51, $i52, $i53);
    goto $bb14_last;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} schedule();
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i51 := prepare_to_wait_event($p47, $p2, 2);
    call {:si_unique_call 1197} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i52 := has_outbound_transactions($p5);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    call {:si_unique_call 1199} {:cexpr "tmp___1"} boogie_si_record_i32($i52);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb18_dummy;

  $bb15:
    assume $i53 == 1;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(312, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} finish_wait($p54, $p2);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p5);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vslice_dummy_var_94 := idr_for_each($p55, shutdown_resource, $p56);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} ldv_idr_destroy_146($p58);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p62, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p62, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i70, $i72);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} client_put($p5);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i73 == 1;
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p74, $p75 := $p68, $p63;
    goto $bb22;

  $bb22:
    call $p76, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p74, $p75 := fw_device_op_release_loop_$bb22($i72, $p76, $p78, $p79, $p80, $p81, $p82, $i83, $i84, $p74, $p75);
    goto $bb22_last;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} kfree($p76);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p74, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p80, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p74, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, $i72);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i84 == 1);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $p74, $p75 := $p81, $p74;
    goto $bb24_dummy;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb12;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i44 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i34 == 1;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} fw_iso_buffer_destroy($p35, $p39);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} fw_iso_context_destroy($p29);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb18_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb24_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;
}



const ldv_mutex_lock_142: ref;

axiom ldv_mutex_lock_142 == $sub.ref(0, 586718);

procedure ldv_mutex_lock_142($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_142($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_784:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_143: ref;

axiom ldv_mutex_unlock_143 == $sub.ref(0, 587750);

procedure ldv_mutex_unlock_143($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_143($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_787:
    assume !assertsPassed;
    return;
}



const fw_iso_context_destroy: ref;

axiom fw_iso_context_destroy == $sub.ref(0, 588782);

procedure fw_iso_context_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_iso_context_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(88, 1));
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1204} devirtbounce.18($p6, $p0);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_790:
    assume !assertsPassed;
    return;
}



const fw_iso_buffer_destroy: ref;

axiom fw_iso_buffer_destroy == $sub.ref(0, 589814);

procedure fw_iso_buffer_destroy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_iso_buffer_destroy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i5: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i24: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} kfree($p35);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb12;

  $bb12:
    call $p25, $p26, $i27, $p28, $p29, $i30, $i31, $i32, $i24 := fw_iso_buffer_destroy_loop_$bb12($p0, $p21, $p25, $p26, $i27, $p28, $p29, $i30, $i31, $i32, $i24);
    goto $bb12_last;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i24);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p26, $mul.ref($i27, 8));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __free_pages($p29, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i24, 1);
    call {:si_unique_call 1209} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p21);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i30;
    goto $bb14_dummy;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $p9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i5 := fw_iso_buffer_destroy_loop_$bb4($p0, $p1, $p2, $p6, $p7, $i8, $p9, $p10, $p11, $p12, $i13, $p14, $p15, $p16, $i17, $i18, $i19, $i20, $i5);
    goto $bb4_last;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p7, $mul.ref($i8, 8));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 1205} {:cexpr "address"} boogie_si_record_i64($i13);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} dma_unmap_page($p15, $i13, 4096, $i17);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i5, 1);
    call {:si_unique_call 1207} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p2);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i18, $i19);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i18;
    goto $bb6_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5187;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5160;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 590846);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1212} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    return;
}



const has_outbound_transactions: ref;

axiom has_outbound_transactions == $sub.ref(0, 591878);

procedure has_outbound_transactions($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation has_outbound_transactions($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} ldv_spin_lock_irq_100___0($p1);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i3 := idr_for_each($p2, is_outbound_transaction_resource, $0.ref);
    call {:si_unique_call 1215} {:cexpr "ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} ldv_spin_unlock_irq_101___0($p4);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  SeqInstr_793:
    assume !assertsPassed;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 592910);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1217} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1218} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1219} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 593942);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 594974);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    return;
}



const shutdown_resource: ref;

axiom shutdown_resource == $sub.ref(0, 596006);

procedure shutdown_resource($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const ldv_idr_destroy_146: ref;

axiom ldv_idr_destroy_146 == $sub.ref(0, 597038);

procedure ldv_idr_destroy_146($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_destroy_146($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} ldv_linux_lib_idr_idr_destroy_resource_idr_of_client();
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_destroy_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_destroy_resource_idr_of_client == $sub.ref(0, 598070);

procedure ldv_linux_lib_idr_idr_destroy_resource_idr_of_client();
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_lib_idr_idr_destroy_resource_idr_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.31 := 3;
    call {:si_unique_call 1223} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(3);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;
}



const is_outbound_transaction_resource: ref;

axiom is_outbound_transaction_resource == $sub.ref(0, 599102);

procedure is_outbound_transaction_resource($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);



const release_transaction: ref;

axiom release_transaction == $sub.ref(0, 600134);

procedure release_transaction($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation release_transaction($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 601166);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 1225} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 1226} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p4 := get_dma_ops($p0);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 1229} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1231} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1233} devirtbounce.21($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 1232} devirtbounce.20(0, .str.83, 91, 12);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 602198);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    return;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 603230);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 604262);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 2);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 605294);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1240} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1241} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 1242} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    return;
}



const fw_device_get_by_devt: ref;

axiom fw_device_get_by_devt == $sub.ref(0, 606326);

procedure fw_device_get_by_devt($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation fw_device_get_by_devt($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var vslice_dummy_var_95: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} {:cexpr "fw_device_get_by_devt:arg:devt"} boogie_si_record_i32($i0);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} down_read(fw_device_rwsem);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 1048575);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $p2 := ldv_idr_find_96(fw_device_idr, $i1);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} up_read(fw_device_rwsem);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_95 := fw_device_get($p3);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_808:
    assume !assertsPassed;
    return;
}



const fw_device_is_shutdown: ref;

axiom fw_device_is_shutdown == $sub.ref(0, 607358);

procedure fw_device_is_shutdown($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_device_is_shutdown($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $i2 := atomic_read($p1);
    call {:si_unique_call 1249} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 3);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_idr_init_96: ref;

axiom ldv_idr_init_96 == $sub.ref(0, 608390);

procedure ldv_idr_init_96($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_init_96($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} ldv_linux_lib_idr_idr_init_resource_idr_of_client();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_811:
    assume !assertsPassed;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 609422);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    return;
}



const ldv_nonseekable_open_97: ref;

axiom ldv_nonseekable_open_97 == $sub.ref(0, 610454);

procedure ldv_nonseekable_open_97($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_nonseekable_open_97($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_linux_lib_idr_idr_init_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_init_resource_idr_of_client == $sub.ref(0, 611486);

procedure ldv_linux_lib_idr_idr_init_resource_idr_of_client();
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_lib_idr_idr_init_resource_idr_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} ldv_assert_linux_lib_idr__double_init($i2);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1252} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(1);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_lib_idr__double_init: ref;

axiom ldv_assert_linux_lib_idr__double_init == $sub.ref(0, 612518);

procedure ldv_assert_linux_lib_idr__double_init($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__double_init($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} {:cexpr "ldv_assert_linux_lib_idr__double_init:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1254} __VERIFIER_error();
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_idr_find_96: ref;

axiom ldv_idr_find_96 == $sub.ref(0, 613550);

procedure ldv_idr_find_96($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_idr_find_96($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} {:cexpr "ldv_idr_find_96:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} ldv_linux_lib_idr_idr_find_fw_device_idr();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p2 := ldv_undef_ptr();
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_find_fw_device_idr: ref;

axiom ldv_linux_lib_idr_idr_find_fw_device_idr == $sub.ref(0, 614582);

procedure ldv_linux_lib_idr_idr_find_fw_device_idr();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_lib_idr_idr_find_fw_device_idr()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.23 := 2;
    call {:si_unique_call 1260} {:cexpr "ldv_linux_lib_idr_idr_fw_device_idr"} boogie_si_record_i32(2);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  SeqInstr_823:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 615614);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1262} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const fw_iso_buffer_alloc: ref;

axiom fw_iso_buffer_alloc == $sub.ref(0, 616646);

procedure fw_iso_buffer_alloc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation fw_iso_buffer_alloc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i14: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $i29: i32;
  var $i31: i32;
  var $i32: i1;
  var $i16: i32;
  var $i33: i32;
  var $i15: i32;
  var $i30: i32;
  var $p34: ref;
  var $i35: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} {:cexpr "fw_iso_buffer_alloc:arg:page_count___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i4, 8);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p6 := kmalloc($i5, 208);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p6);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32(0, $i1);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $i15;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i30);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i30, $i1);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} fw_iso_buffer_destroy($p0, $0.ref);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb8;

  $bb8:
    call $p17, $p18, $p19, $i20, $p21, $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i31, $i32, $i16, $i33 := fw_iso_buffer_alloc_loop_$bb8($p0, $i1, $p17, $p18, $p19, $i20, $p21, $p22, $p23, $i24, $p25, $p26, $i27, $i28, $i29, $i31, $i32, $i16, $i33);
    goto $bb8_last;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p17 := alloc_pages(32980, 0);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i16);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 8));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p17);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i16);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p23, $mul.ref($i24, 8));
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i29 := $i16;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i16, 1);
    call {:si_unique_call 1266} {:cexpr "i"} boogie_si_record_i32($i31);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, $i1);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i15 := $i33;
    goto $bb7;

  $bb14:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i31;
    goto $bb14_dummy;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb12;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;
}



const iso_dma_direction: ref;

axiom iso_dma_direction == $sub.ref(0, 617678);

procedure iso_dma_direction($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iso_dma_direction($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i4 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;
}



const fw_iso_buffer_map_dma: ref;

axiom fw_iso_buffer_map_dma == $sub.ref(0, 618710);

procedure fw_iso_buffer_map_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_iso_buffer_map_dma($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i8: i32;
  var $i33: i32;
  var $i7: i32;
  var $i22: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} {:cexpr "fw_iso_buffer_map_dma:arg:direction"} boogie_si_record_i32($i2);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i2);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i22 := $i7;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i22);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i22, $i36);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 12);
    goto $bb15;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $p12, $i13, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i8, $i33 := fw_iso_buffer_map_dma_loop_$bb4($p0, $p1, $i2, $p4, $p9, $p10, $p11, $p12, $i13, $p14, $p15, $i16, $p17, $p18, $i19, $i20, $i21, $p23, $p24, $i25, $p26, $p27, $p28, $p29, $i30, $i31, $i32, $i8, $i33);
    goto $bb4_last;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 8));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i16 := dma_map_page($p10, $p15, 0, 4096, $i2);
    call {:si_unique_call 1270} {:cexpr "address"} boogie_si_record_i64($i16);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i19 := dma_mapping_error($p18, $i16);
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i21 := $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i8);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 8));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i16);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i8, 1);
    call {:si_unique_call 1273} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p4);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i30, $i31);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i33 := $i30;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb10:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;
}



const fw_iso_buffer_map_vma: ref;

axiom fw_iso_buffer_map_vma == $sub.ref(0, 619742);

procedure fw_iso_buffer_map_vma($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_buffer_map_vma($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i18: i64;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;
  var $i8: i64;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 1274} {:cexpr "uaddr"} boogie_si_record_i64($i3);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i5);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, $i3;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i7, $i8 := fw_iso_buffer_map_vma_loop_$bb4($p0, $p1, $p4, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i7, $i8);
    goto $bb4_last;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 8));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i14 := vm_insert_page($p1, $i8, $p13);
    call {:si_unique_call 1276} {:cexpr "err"} boogie_si_record_i32($i14);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i8, 4096);
    call {:si_unique_call 1277} {:cexpr "uaddr"} boogie_si_record_i64($i18);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 1);
    call {:si_unique_call 1278} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p4);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, $i20);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7, $i8 := $i19, $i18;
    goto $bb10_dummy;

  $bb6:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;
}



const vm_insert_page: ref;

axiom vm_insert_page == $sub.ref(0, 620774);

procedure vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vm_insert_page($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1279} {:cexpr "vm_insert_page:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1280} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1281} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 621806);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 1283} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1284} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p5 := get_dma_ops($p0);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p6 := lowmem_page_address($p1);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 1289} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 1291} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 1293} $i17 := devirtbounce.22($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 1294} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 1292} devirtbounce.20(0, .str.83, 79, 12);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 622838);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p2 := get_dma_ops($p0);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 1299} $i9 := devirtbounce.23($p8, $p0, $i1);
    call {:si_unique_call 1300} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 623870);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 624902);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 625934);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 626966);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1304} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 1305} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 1306} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 1307} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 627998);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} {:cexpr "alloc_pages:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 1309} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} ldv_check_alloc_flags($i0);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $p2 := ldv_malloc_unknown_size();
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 629030);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dispatch_ioctl: ref;

axiom dispatch_ioctl == $sub.ref(0, 630062);

procedure dispatch_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $CurrAddr, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation dispatch_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $i8: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1314} {:cexpr "dispatch_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i6 := fw_device_is_shutdown($p5);
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i1, 8);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 255);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 35);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i1, 255);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 24);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i1, 16);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16383);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 40);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 1317} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p17, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i1, 1073741824);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i1, 255);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref($i27, 8));
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.33, $p28);
    call {:si_unique_call 1320} $i30 := devirtbounce.24($p29, $p0, $p3);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    call {:si_unique_call 1321} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i1, 0);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb22:
    assume $i32 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p3);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i32($i1, 16);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 16383);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i37 := copy_to_user($p2, $p33, $i36);
    call {:si_unique_call 1323} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i38 == 1;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb3;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i32($i1, 16);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 16383);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i24 := copy_from_user($p20, $p2, $i23);
    call {:si_unique_call 1319} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 25);
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 631094);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} might_fault();
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1327} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1331} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i18 := _copy_from_user($p0, $p1, $i17);
    call {:si_unique_call 1333} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i9 := _copy_from_user($p0, $p1, $i8);
    call {:si_unique_call 1329} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 632126);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} might_fault();
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($sub.i32(0, 1), 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i6 := ldv__builtin_expect($i5, 1);
    call {:si_unique_call 1338} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($sub.i32(0, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i12 := $uge.i64($i11, $i2);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1342} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i19 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i10 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i32($i2);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i18 := _copy_to_user($p0, $p1, $i17);
    call {:si_unique_call 1344} {:cexpr "n"} boogie_si_record_i64($i18);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i2);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i9 := _copy_to_user($p0, $p1, $i8);
    call {:si_unique_call 1340} {:cexpr "n"} boogie_si_record_i64($i9);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 633158);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 634190);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1346} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1347} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1348} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 635222);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 636254);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1350} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1351} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 637286);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 638318);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1352} devirtbounce.25($p12, $p0, $p1, $p2);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_841:
    assume !assertsPassed;
    return;
}



const dequeue_event: ref;

axiom dequeue_event == $sub.ref(0, 639350);

procedure dequeue_event($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, assertsPassed;



implementation dequeue_event($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i19: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i63: i1;
  var $i65: i1;
  var $i64: i64;
  var $i66: i32;
  var $i62: i32;
  var $p67: ref;
  var $i34: i32;
  var $p70: ref;
  var $i71: i64;
  var $i72: i64;
  var $i73: i1;
  var $i74: i64;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1354} {:cexpr "dequeue_event:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __might_sleep(.str.43, 313, 0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i5 := list_empty($p4);
    call {:si_unique_call 1357} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $i36 := list_empty($p35);
    call {:si_unique_call 1375} {:cexpr "tmp___4"} boogie_si_record_i32($i36);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} ldv_spin_lock_irq_100___0($p42);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p46, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} list_del($p48);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} ldv_spin_unlock_irq_101___0($p49);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i65 := $ult.i64(0, $i2);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i64 := 0;
    assume {:branchcond $i65} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i64.i32($i64);
    call {:si_unique_call 1386} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i62 := $i66;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p47);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} kfree($p67);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i34 := $i62;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb44:
    assume $i65 == 1;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p46, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    call {:si_unique_call 1381} {:cexpr "_min1"} boogie_si_record_i64($i53);
    call {:si_unique_call 1382} {:cexpr "dequeue_event:arg:_min2"} boogie_si_record_i64($i2);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i54 := $ult.i64($i53, $i2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i55 := $i2;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p46, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(0, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i60 := copy_to_user($p1, $p59, $i55);
    call {:si_unique_call 1384} {:cexpr "tmp___6"} boogie_si_record_i64($i60);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb36, $bb38;

  $bb38:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i63 := $ult.i64($i55, $i2);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i64 := $i55;
    assume {:branchcond $i63} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb43;

  $bb41:
    assume $i63 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p46, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i72 := $sub.i64($i2, $i55);
    call {:si_unique_call 1387} {:cexpr "dequeue_event:arg:_min2"} boogie_si_record_i64($i2);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i73 := $ult.i64($i71, $i72);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i73 == 1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i74 := $i72;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p1, $mul.ref($i55, 1));
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p46, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(0, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $i80 := copy_to_user($p75, $p79, $i74);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i82 := $add.i64($i55, $i74);
    assume {:verifier.code 0} true;
    $i64 := $i82;
    goto $bb43;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 14);
    goto $bb39;

  $bb48:
    assume $i73 == 1;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i74 := $i71;
    goto $bb50;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb37;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb35;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i37 == 1;
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i40 := fw_device_is_shutdown($p39);
    call {:si_unique_call 1377} {:cexpr "tmp___5"} boogie_si_record_i32($i40);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i41 == 1;
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 19);
    goto $bb23;

  $bb21:
    assume $i33 == 1;
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    goto $bb23;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i9 := fw_device_is_shutdown($p8);
    call {:si_unique_call 1359} {:cexpr "tmp___3"} boogie_si_record_i32($i9);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb20;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} INIT_LIST_HEAD($p11);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $i14 := prepare_to_wait_event($p13, $p3, 1);
    call {:si_unique_call 1362} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(208, 1));
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i16 := list_empty($p15);
    call {:si_unique_call 1364} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb8;

  $bb8:
    call $i18, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28 := dequeue_event_loop_$bb8($p0, $p3, $p13, $p15, $i18, $p20, $p21, $i22, $i23, $i24, $i25, $i26, $i27, $i28);
    goto $bb8_last;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i22 := fw_device_is_shutdown($p21);
    call {:si_unique_call 1366} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i18, 0);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i25 := $i18;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} schedule();
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i26 := prepare_to_wait_event($p13, $p3, 1);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i27 := list_empty($p15);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i26;
    goto $bb18_dummy;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} finish_wait($p29, $p3);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i19);
    call {:si_unique_call 1368} {:cexpr "__ret"} boogie_si_record_i32($i30);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb19;

  $bb15:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i19 := $i25;
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb18_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;
}



const fw_csr_string: ref;

axiom fw_csr_string == $sub.ref(0, 640382);

procedure fw_csr_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation fw_csr_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} {:cexpr "fw_csr_string:arg:key"} boogie_si_record_i32($i1);
    call {:si_unique_call 1390} {:cexpr "fw_csr_string:arg:size"} boogie_si_record_i64($i3);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p4 := search_leaf($p0, $i1);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i8 := textual_leaf_to_string($p4, $p2, $i3);
    call {:si_unique_call 1393} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 2);
    goto $bb3;
}



const search_leaf: ref;

axiom search_leaf == $sub.ref(0, 641414);

procedure search_leaf($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation search_leaf($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i7: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1397} {:cexpr "search_leaf:arg:search_key"} boogie_si_record_i32($i1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} fw_csr_iterator_init($p2, $p0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i5 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 1400} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $i9, $i10, $i18, $i19, $i20, $i7 := search_leaf_loop_$bb4($i1, $p2, $p3, $p4, $i8, $i9, $i10, $i18, $i19, $i20, $i7);
    goto $bb4_last;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, $i1);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.27, $p3);
    call {:si_unique_call 1401} {:cexpr "last_key"} boogie_si_record_i32($i18);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i19 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 1403} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb13_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.27, $p3);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 129);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.28, $p4);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i15 := $add.i64($i14, $sub.i64(0, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p12, $mul.ref($i15, 4));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p17 := $p16;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5850;
}



const textual_leaf_to_string: ref;

axiom textual_leaf_to_string == $sub.ref(0, 642446);

procedure textual_leaf_to_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation textual_leaf_to_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i23: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i42: i32;
  var $i22: i32;
  var $i37: i32;
  var $i47: i64;
  var $p48: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "textual_leaf_to_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p0);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 16);
    call {:si_unique_call 1405} {:cexpr "_min1"} boogie_si_record_i32($i8);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i9 := $ult.i32($i8, 256);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i10 := 256;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i11 := $ule.i32($i10, 1);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p0, $mul.ref(1, 4));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i14 == 1);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(2, 4));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i10, 2);
    call {:si_unique_call 1406} {:cexpr "quadlets"} boogie_si_record_i32($i19);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i20 := $mul.i32($i19, 4);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32(0, $i20);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i22 := 0;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i37 := $i22;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i37);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p1, $mul.ref($i47, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i6 := $i37;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb20:
    assume $i21 == 1;
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb23;

  $bb23:
    call $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $i23, $i43, $i44, $i45, $i46, $i42 := textual_leaf_to_string_loop_$bb23($p0, $p1, $i2, $i20, $i24, $i25, $i26, $p27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $p39, $i40, $i41, $i23, $i43, $i44, $i45, $i46, $i42);
    goto $bb23_last;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i23);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $i44 := $sub.i64($i2, 1);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $i45 := $ult.i64($i43, $i44);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i46 := $i23;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i22 := $i46;
    goto $bb22;

  $bb31:
    assume $i45 == 1;
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i24 := $udiv.i32($i23, 4);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    $i26 := $add.i64(3, $i25);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p0, $mul.ref($i26, 4));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i29 := $xor.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 3);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i30, 8);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i32 := $lshr.i32($i28, $i31);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    call {:si_unique_call 1407} {:cexpr "c"} boogie_si_record_i8($i33);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i36 := $i23;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i23);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref($i38, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, $i33);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i23, 1);
    call {:si_unique_call 1408} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i41 := $ult.i32($i40, $i20);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i22 := $i42;
    goto $bb22;

  $bb29:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i40;
    goto $bb29_dummy;

  $bb25:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb27;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 61);
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb15;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 61);
    goto $bb6;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb29_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;
}



const fw_unit_match: ref;

axiom fw_unit_match == $sub.ref(0, 643478);

procedure fw_unit_match($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28;



implementation fw_unit_match($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $i2 := is_fw_unit($p0);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1410} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p5 := unit_match($p0, $p1);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb5;
}



const fw_unit_probe: ref;

axiom fw_unit_probe == $sub.ref(0, 644510);

procedure fw_unit_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.38, $M.39, $M.3, $CurrAddr, $M.27, $M.28, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_unit_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(496, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(496, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p6 := unit_match($p0, $p5);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p7 := fw_unit($p0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(120, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 1414} $i10 := devirtbounce.26($p9, $p7, $p6);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    call {:si_unique_call 1415} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;
}



const fw_unit_remove: ref;

axiom fw_unit_remove == $sub.ref(0, 645542);

procedure fw_unit_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_unit_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(496, 1));
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p4 := fw_unit($p0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(136, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1417} devirtbounce.16($p6, $p4);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const unit_match: ref;

axiom unit_match == $sub.ref(0, 646574);

procedure unit_match($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28;



implementation unit_match($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p15: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 152)), $mul.ref(144, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p6, 0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p7, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p8, 0);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p9, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $p10 := fw_unit($p0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p2);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} get_modalias_ids($p10, $p11);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p15 := $p5;
    goto $bb4;

  $bb4:
    call $p16, $i17, $i18, $i19, $p20, $p22, $p23, $i24, $i25, $p15 := unit_match_loop_$bb4($p2, $p16, $i17, $i18, $i19, $p20, $p22, $p23, $i24, $i25, $p15);
    goto $bb4_last;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i17 := match_ids($p15, $p16);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 1422} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p20 := $p15;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p15, $mul.ref(1, 32));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p15, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p22;
    goto $bb10_dummy;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p21 := $p20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6004;
}



const get_modalias_ids: ref;

axiom get_modalias_ids == $sub.ref(0, 647606);

procedure get_modalias_ids($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.34, $CurrAddr;



implementation get_modalias_ids($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} $p2 := fw_parent_device($p0);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(5, 4));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} get_ids($p5, $p1);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} get_ids($p7, $p1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    return;
}



const match_ids: ref;

axiom match_ids == $sub.ref(0, 648638);

procedure match_ids($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation match_ids($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.34, $p1);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, $i4);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.34, $p8);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i9, $i11);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.34, $p15);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i16, $i18);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i14;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.34, $p22);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, $i25);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i28 := $i21;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i28, $i30);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, $i33);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i21, 8);
    call {:si_unique_call 1429} {:cexpr "match"} boogie_si_record_i32($i27);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb12;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i14, 4);
    call {:si_unique_call 1428} {:cexpr "match"} boogie_si_record_i32($i20);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb9;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i7, 2);
    call {:si_unique_call 1427} {:cexpr "match"} boogie_si_record_i32($i13);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i6 := $or.i32(0, 1);
    call {:si_unique_call 1426} {:cexpr "match"} boogie_si_record_i32($i6);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const fw_parent_device: ref;

axiom fw_parent_device == $sub.ref(0, 649670);

procedure fw_parent_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fw_parent_device($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $p4 := fw_device($p3);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const get_ids: ref;

axiom get_ids == $sub.ref(0, 650702);

procedure get_ids($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.34, $CurrAddr;



implementation get_ids($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} fw_csr_iterator_init($p2, $p0);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i5 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 1436} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $p19, $i20, $p21, $i22, $i23 := get_ids_loop_$bb4($p1, $p2, $p3, $p4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $p17, $i18, $p19, $i20, $p21, $i22, $i23);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.27, $p3);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 3);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.27, $p3);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 23);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.27, $p3);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 18);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.27, $p3);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 19);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i22 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 1438} {:cexpr "tmp"} boogie_si_record_i32($i22);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i23 == 1);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb24_dummy;

  $bb18:
    assume $i14 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.28, $p4);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p21, $i20);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i12 == 1;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.28, $p4);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p19, $i18);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.28, $p4);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p17, $i16);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.28, $p4);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p1, $i15);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fw_device_enable_phys_dma: ref;

axiom fw_device_enable_phys_dma == $sub.ref(0, 651734);

procedure fw_device_enable_phys_dma($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_device_enable_phys_dma($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1439} {:cexpr "generation"} boogie_si_record_i32($i2);
    call {:si_unique_call 1440} devirtbounce.8(0);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 144)), $mul.ref(56, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1441} $i13 := devirtbounce.27($p8, $p10, $i12, $i2);
    call {:si_unique_call 1442} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const fw_iso_buffer_init: ref;

axiom fw_iso_buffer_init == $sub.ref(0, 652766);

procedure fw_iso_buffer_init($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);



const fw_iso_context_create: ref;

axiom fw_iso_context_create == $sub.ref(0, 653798);

procedure fw_iso_context_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_iso_context_create($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i64, $p5: ref, $p6: ref) returns ($r: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} {:cexpr "fw_iso_context_create:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1444} {:cexpr "fw_iso_context_create:arg:channel"} boogie_si_record_i32($i2);
    call {:si_unique_call 1445} {:cexpr "fw_iso_context_create:arg:speed"} boogie_si_record_i32($i3);
    call {:si_unique_call 1446} {:cexpr "fw_iso_context_create:arg:header_size"} boogie_si_record_i64($i4);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 144)), $mul.ref(80, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1447} $p11 := devirtbounce.28($p10, $p0, $i1, $i2, $i4);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i13 := IS_ERR($p12);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p16, $p0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i1);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i2);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i3);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i4);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p5);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p11, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p6);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 654830);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1451} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const fw_iso_context_start: ref;

axiom fw_iso_context_start == $sub.ref(0, 655862);

procedure fw_iso_context_start($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation fw_iso_context_start($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} {:cexpr "fw_iso_context_start:arg:cycle"} boogie_si_record_i32($i1);
    call {:si_unique_call 1453} {:cexpr "fw_iso_context_start:arg:sync"} boogie_si_record_i32($i2);
    call {:si_unique_call 1454} {:cexpr "fw_iso_context_start:arg:tags"} boogie_si_record_i32($i3);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(96, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 1455} $i10 := devirtbounce.29($p9, $p0, $i1, $i2, $i3);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;
}



const fw_iso_context_queue: ref;

axiom fw_iso_context_queue == $sub.ref(0, 656894);

procedure fw_iso_context_queue($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fw_iso_context_queue($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} {:cexpr "fw_iso_context_queue:arg:payload"} boogie_si_record_i64($i3);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    call {:si_unique_call 1458} $i10 := devirtbounce.30($p9, $p0, $p1, $p2, $i3);
    call {:si_unique_call 1459} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const fw_iso_context_queue_flush: ref;

axiom fw_iso_context_queue_flush == $sub.ref(0, 657926);

procedure fw_iso_context_queue_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_iso_context_queue_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1460} devirtbounce.18($p6, $p0);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;
}



const fw_iso_context_flush_completions: ref;

axiom fw_iso_context_flush_completions == $sub.ref(0, 658958);

procedure fw_iso_context_flush_completions($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.34, $M.0, $M.49, $M.50, $M.51, $M.55, $M.56, $M.10, $M.3, $M.15, $M.26, $M.24, $M.38, $M.39, $M.23, $M.40, $M.31, $CurrAddr, $M.27, $M.28, assertsPassed, $M.45, $M.46, $M.16, $M.13, $M.25, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_iso_context_flush_completions($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1461} $i7 := devirtbounce.31($p6, $p0);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    call {:si_unique_call 1462} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const fw_iso_context_stop: ref;

axiom fw_iso_context_stop == $sub.ref(0, 659990);

procedure fw_iso_context_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.34, $M.0, $M.49, $M.50, $M.51, $M.55, $M.56, $M.10, $M.3, $M.15, $M.26, $M.24, $M.38, $M.39, $M.23, $M.40, $M.31, $CurrAddr, $M.27, $M.28, assertsPassed, $M.45, $M.46, $M.16, $M.13, $M.25, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_iso_context_stop($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1463} $i7 := devirtbounce.31($p6, $p0);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    call {:si_unique_call 1464} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;
}



const fw_core_handle_bus_reset: ref;

axiom fw_core_handle_bus_reset == $sub.ref(0, 661022);

procedure fw_core_handle_bus_reset($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref, $i5: i1);



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___1: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___1 == $sub.ref(0, 662054);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_98___1($p0: ref);



const build_tree: ref;

axiom build_tree == $sub.ref(0, 663086);

procedure build_tree($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);



const update_topology_map: ref;

axiom update_topology_map == $sub.ref(0, 664118);

procedure update_topology_map($p0: ref, $p1: ref, $i2: i32);



const report_found_node: ref;

axiom report_found_node == $sub.ref(0, 665150);

procedure report_found_node($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation report_found_node($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $i15: i32;
  var $p16: ref;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i8;
  var $i31: i8;
  var $i32: i32;
  var $i27: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i8;
  var $i37: i8;
  var $i38: i8;
  var $i39: i8;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i46: i1;
  var $i45: i1;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $p55: ref;
  var $i56: i8;
  var $i57: i8;
  var $i58: i8;
  var $p59: ref;
  var $i60: i8;
  var $i61: i8;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $i65: i8;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $p72: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 24);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1465} {:cexpr "b_path"} boogie_si_record_i32($i8);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i57 := $lshr.i8($i56, 3);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i58 := $and.i8($i57, 3);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.0, $p59);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i61 := $and.i8($i58, 3);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i62 := $shl.i8($i61, 5);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i60, $sub.i8(0, 97));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i64 := $or.i8($i63, $i62);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i64);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i8);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i65, 1);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i69 := $shl.i8($i68, 2);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i67, $sub.i8(0, 5));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i71 := $or.i8($i70, $i69);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i71);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} fw_node_event($p0, $p1, 0);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(808, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 0);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i8($i12, 5);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, 3);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i8($i17, 3);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, 3);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, $i20);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i8($i29, 3);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, 3);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i27);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i36 := $and.i8($i33, 3);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i37 := $shl.i8($i36, 5);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i38 := $and.i8($i35, $sub.i8(0, 97));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i39 := $or.i8($i38, $i37);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i39);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p2);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(4, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i45);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i51 := $and.i8($i48, 1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i52 := $shl.i8($i51, 2);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i53 := $and.i8($i50, $sub.i8(0, 5));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i54 := $or.i8($i53, $i52);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i54);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i8, 0);
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb8;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i8($i23, 5);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i25 := $and.i8($i24, 3);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb5;
}



const update_tree: ref;

axiom update_tree == $sub.ref(0, 666182);

procedure update_tree($p0: ref, $p1: ref);



const fw_node: ref;

axiom fw_node == $sub.ref(0, 667214);

procedure fw_node($p0: ref) returns ($r: ref);



const move_tree: ref;

axiom move_tree == $sub.ref(0, 668246);

procedure move_tree($p0: ref, $p1: ref, $i2: i32);



const __cpu_to_be32p: ref;

axiom __cpu_to_be32p == $sub.ref(0, 669278);

procedure __cpu_to_be32p($p0: ref) returns ($r: i32);



const count_ports: ref;

axiom count_ports == $sub.ref(0, 670310);

procedure count_ports($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);



const fw_node_create: ref;

axiom fw_node_create == $sub.ref(0, 671342);

procedure fw_node_create($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);



const get_port_type: ref;

axiom get_port_type == $sub.ref(0, 672374);

procedure get_port_type($p0: ref, $i1: i32) returns ($r: i32);



const __list_del: ref;

axiom __list_del == $sub.ref(0, 673406);

procedure __list_del($p0: ref, $p1: ref);



const update_hop_count: ref;

axiom update_hop_count == $sub.ref(0, 674438);

procedure update_hop_count($p0: ref);



const fw_cancel_transaction: ref;

axiom fw_cancel_transaction == $sub.ref(0, 675470);

procedure fw_cancel_transaction($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.15, $M.26, $M.10, $M.24, $M.34, $M.38, $M.39, $M.3, assertsPassed, $M.23, $M.40, $M.31, $CurrAddr, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_cancel_transaction($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(48, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 288)), $mul.ref(168, 1));
    call {:si_unique_call 1467} $i7 := devirtbounce.32($p5, $p0, $p6);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    call {:si_unique_call 1468} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} $i10 := close_transaction($p1, $p0, 17);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    call {:si_unique_call 1470} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_871:
    assume !assertsPassed;
    return;
}



const fw_core_add_address_handler: ref;

axiom fw_core_add_address_handler == $sub.ref(0, 676502);

procedure fw_core_add_address_handler($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.38, $M.39, $M.40, assertsPassed, $CurrAddr;



implementation fw_core_add_address_handler($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i38: i8;
  var $i39: i1;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p40: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $i55: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, $sub.i64(0, 281474976710653));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i10 := $uge.i64($i7, $i9);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64($i12, 281474976710656);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 3);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_spin_lock_115(address_handler_list_lock);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i23);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i26, $i28);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.0, $p30);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i32 := $ule.i64($i29, $i31);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32(0, 16);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ldv_spin_unlock_116(address_handler_list_lock);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i21 := $i55;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    call $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p41, $i42, $p43, $i44, $p45, $p40, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $p53, $i56, $i57, $i58, $i59, $i60 := fw_core_add_address_handler_loop_$bb17($p0, $p25, $p27, $p30, $p33, $i34, $p35, $i36, $i37, $i38, $i39, $p41, $i42, $p43, $i44, $p45, $p40, $i46, $i47, $p48, $i49, $p50, $i51, $i52, $p53, $i56, $i57, $i58, $i59, $i60);
    goto $bb17_last;

  $bb18:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.0, $p33);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i37 := is_in_fcp_region($i34, $i36);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i37);
    call {:si_unique_call 1473} {:cexpr "tmp"} boogie_si_record_i8($i38);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p45 := lookup_overlapping_address_handler(address_handler_list, $i42, $i44);
    assume {:verifier.code 0} true;
    $p40 := $p45;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p40);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i47 == 1);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} list_add_tail_rcu($p54, address_handler_list);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb25;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i47 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i49, $i51);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p25);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p27);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i58 := $add.i64($i56, $i57);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p30);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i60 := $ule.i64($i58, $i59);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i60 == 1);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb26_dummy;

  $bb19:
    assume $i39 == 1;
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p40 := $0.ref;
    goto $bb21;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 22);
    goto $bb12;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto $bb18;
}



const ldv_spin_lock_115: ref;

axiom ldv_spin_lock_115 == $sub.ref(0, 677534);

procedure ldv_spin_lock_115($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_lock_115($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_linux_kernel_locking_spinlock_spin_lock_address_handler_list_lock();
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} spin_lock($p0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const is_in_fcp_region: ref;

axiom is_in_fcp_region == $sub.ref(0, 678566);

procedure is_in_fcp_region($i0: i64, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_in_fcp_region($i0: i64, $i1: i64) returns ($r: i1)
{
  var $i2: i1;
  var $i4: i64;
  var $i5: i1;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} {:cexpr "is_in_fcp_region:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 1480} {:cexpr "is_in_fcp_region:arg:length"} boogie_si_record_i64($i1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i0, 281474708278015);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i0, $i1);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i4, 281474708279040);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const lookup_overlapping_address_handler: ref;

axiom lookup_overlapping_address_handler == $sub.ref(0, 679598);

procedure lookup_overlapping_address_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.38, $M.39, $CurrAddr;



implementation lookup_overlapping_address_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p18: ref;
  var $p30: ref;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1483} {:cexpr "lookup_overlapping_address_handler:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1484} {:cexpr "lookup_overlapping_address_handler:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p3, $p6);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.38, $p3);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $i8 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1486} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i15, $i16);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p30 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $r := $p30;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    goto $bb10;

  $bb10:
    call $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $p32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p18, vslice_dummy_var_97 := lookup_overlapping_address_handler_loop_$bb10($i1, $i2, $p4, $i16, $p19, $i20, $i21, $i22, $p23, $i24, $p25, $i26, $i27, $i28, $p29, $p32, $p33, $p34, $i35, $i36, $i37, $p39, $p40, $p41, $i42, $i43, $p18, vslice_dummy_var_97);
    goto $bb10_last;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i1, $i2);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i22 := $ult.i64($i20, $i21);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p4, $p33);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.39, $p4);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i35 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1489} {:cexpr "tmp___0"} boogie_si_record_i32($i35);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p34);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, $i16);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p40;
    goto $bb25_dummy;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($u3);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} vslice_dummy_var_97 := rcu_read_lock_held();
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb21;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i27 := $add.i64($i24, $i26);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i28 := $ult.i64($i1, $i27);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p29 := $p18;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb15:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p30 := $p29;
    goto $bb17;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($u3);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_96 := rcu_read_lock_held();
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;
}



const list_add_tail_rcu: ref;

axiom list_add_tail_rcu == $sub.ref(0, 680630);

procedure list_add_tail_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation list_add_tail_rcu($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_check_for_read_section();
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock_116: ref;

axiom ldv_spin_unlock_116 == $sub.ref(0, 681662);

procedure ldv_spin_unlock_116($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_spin_unlock_116($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_linux_kernel_locking_spinlock_spin_unlock_address_handler_list_lock();
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} spin_unlock($p0);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_unlock_address_handler_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_unlock_address_handler_list_lock == $sub.ref(0, 682694);

procedure ldv_linux_kernel_locking_spinlock_spin_unlock_address_handler_list_lock();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_unlock_address_handler_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 2);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_unlock($i2);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_assume($i5);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1496} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_address_handler_list_lock"} boogie_si_record_i32(1);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 683726);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} _raw_spin_unlock($p2);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 684758);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_for_read_section: ref;

axiom ldv_check_for_read_section == $sub.ref(0, 685790);

procedure ldv_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_for_read_section()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section();
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section();
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_linux_kernel_rcu_update_lock_check_for_read_section();
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_linux_kernel_rcu_srcu_check_for_read_section();
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section == $sub.ref(0, 686822);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i2);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_910:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section == $sub.ref(0, 687854);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i2);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_913:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_for_read_section == $sub.ref(0, 688886);

procedure ldv_linux_kernel_rcu_update_lock_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i2);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_916:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_for_read_section: ref;

axiom ldv_linux_kernel_rcu_srcu_check_for_read_section == $sub.ref(0, 689918);

procedure ldv_linux_kernel_rcu_srcu_check_for_read_section();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_for_read_section()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i2);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_919:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section == $sub.ref(0, 690950);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1507} __VERIFIER_error();
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section == $sub.ref(0, 691982);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1509} __VERIFIER_error();
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section == $sub.ref(0, 693014);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1511} __VERIFIER_error();
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section == $sub.ref(0, 694046);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_read_section:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1513} __VERIFIER_error();
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 695078);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1514} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1515} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 696110);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1516} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1517} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_linux_kernel_locking_spinlock_spin_lock_address_handler_list_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_address_handler_list_lock == $sub.ref(0, 697142);

procedure ldv_linux_kernel_locking_spinlock_spin_lock_address_handler_list_lock();
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation ldv_linux_kernel_locking_spinlock_spin_lock_address_handler_list_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i0 := $M.40;
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_assert_linux_kernel_locking_spinlock__one_thread_double_lock($i2);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i3 := $M.40;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_assume($i5);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1520} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_address_handler_list_lock"} boogie_si_record_i32(2);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_934:
    assume !assertsPassed;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 698174);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} _raw_spin_lock($p2);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 699206);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    return;
}



const fw_core_remove_address_handler: ref;

axiom fw_core_remove_address_handler == $sub.ref(0, 700238);

procedure fw_core_remove_address_handler($p0: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation fw_core_remove_address_handler($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_spin_lock_115(address_handler_list_lock);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} list_del_rcu($p1);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_spin_unlock_116(address_handler_list_lock);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} synchronize_rcu();
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_946:
    assume !assertsPassed;
    return;

  SeqInstr_943:
    assume !assertsPassed;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const list_del_rcu: ref;

axiom list_del_rcu == $sub.ref(0, 701270);

procedure list_del_rcu($p0: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation list_del_rcu($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_check_for_read_section();
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 702302);

procedure synchronize_rcu();
  free requires assertsPassed;
  modifies assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} ldv_synchronize_sched_35();
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;
}



const ldv_synchronize_sched_35: ref;

axiom ldv_synchronize_sched_35 == $sub.ref(0, 703334);

procedure ldv_synchronize_sched_35();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_synchronize_sched_35()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_check_for_read_section();
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_955:
    assume !assertsPassed;
    return;
}



const fw_fill_response: ref;

axiom fw_fill_response == $sub.ref(0, 704366);

procedure fw_fill_response($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_fill_response($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i64)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p28: ref;
  var $p30: ref;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $i81: i1;
  var $i82: i32;
  var $i83: i64;
  var $p85: ref;
  var vslice_dummy_var_98: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} {:cexpr "fw_fill_response:arg:rcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 1530} {:cexpr "fw_fill_response:arg:length"} boogie_si_record_i64($i4);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 4);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 15);
    call {:si_unique_call 1531} {:cexpr "tcode"} boogie_si_record_i32($i7);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p1);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 10);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 63);
    call {:si_unique_call 1532} {:cexpr "tlabel"} boogie_si_record_i32($i10);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i11, 16);
    call {:si_unique_call 1533} {:cexpr "source"} boogie_si_record_i32($i12);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 16);
    call {:si_unique_call 1534} {:cexpr "destination"} boogie_si_record_i32($i15);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 65535);
    call {:si_unique_call 1535} {:cexpr "extended_tcode"} boogie_si_record_i32($i18);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i19 := $shl.i32($i10, 10);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i15, 16);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i19, $i20);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i21);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i12, 16);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32($i2, 12);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i24, $i25);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i26);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i7, 0);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i7, 1);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i7, 4);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i7, 5);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i7, 9);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32(1, 0);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 1537} {:cexpr "tmp"} boogie_si_record_i64($i79);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32(1, 0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_98 := ldv__builtin_expect($i83, 0);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(56, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} warn_slowpath_fmt.ref.i32.ref.i32(.str.18, 725, .str.19, $i7);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i7, 2);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i63, 4);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i62, $i64);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i4);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i69 := $shl.i32($i68, 16);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, $i18);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i70);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p73, 16);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p74, $p3);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p75, $i4);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 96);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p49, $i47);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p3);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i51 == 1);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 0);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, 16);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p59, 0);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23:
    assume $i51 == 1;
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i53);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 32);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i39);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(24, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 12);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(40, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, 0);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fw_send_response: ref;

axiom fw_send_response == $sub.ref(0, 705398);

procedure fw_send_response($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_send_response($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} {:cexpr "fw_send_response:arg:rcode"} boogie_si_record_i32($i2);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 1541} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i5);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1543} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i5, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 1551} {:cexpr "tmp___2"} boogie_si_record_i64($i27);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 2);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i31 == 1);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(0, 4));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 4128768);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 4128768);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i2, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} fw_fill_response($p46, $p48, $i2, $0.ref, 0);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 144)), $mul.ref(40, 1));
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    call {:si_unique_call 1557} devirtbounce.3($p52, $p0, $p53);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $i39 := fw_get_response_length($p1);
    call {:si_unique_call 1554} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i39);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} fw_fill_response($p40, $p42, $i2, $p44, $i45);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p1);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} kfree($p37);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb15;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1(1);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i12 := $xor.i1($i11, 1);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1544} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i13);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1546} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i13, 0);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1549} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} warn_slowpath_fmt.ref.i32.ref(.str.18, 807, .str.20);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const fw_get_response_length: ref;

axiom fw_get_response_length == $sub.ref(0, 706430);

procedure fw_get_response_length($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_get_response_length($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $i11: i32;
  var vslice_dummy_var_99: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(0, 4));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i32($i3, 4);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 15);
    call {:si_unique_call 1558} {:cexpr "tcode"} boogie_si_record_i32($i5);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i5, 1);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 4);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 5);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 9);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32(1, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1563} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32(1, 0);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_99 := ldv__builtin_expect($i34, 0);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb33:
    assume $i31 == 1;
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} warn_slowpath_fmt.ref.i32.ref.i32(.str.18, 669, .str.19, $i5);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb17:
    assume $i10 == 1;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(3, 4));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 65535);
    call {:si_unique_call 1560} {:cexpr "ext_tcode"} boogie_si_record_i32($i19);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(3, 4));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i22, 16);
    call {:si_unique_call 1561} {:cexpr "data_length"} boogie_si_record_i32($i23);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i19, 3);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i19, 4);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i26 := $sdiv.i32($i23, 2);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i11 := $i26;
    goto $bb22;

  $bb27:
    assume $i25 == 1;
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i11 := $i23;
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(104, 1)), $mul.ref(3, 4));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 16);
    call {:si_unique_call 1559} {:cexpr "data_length"} boogie_si_record_i32($i15);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i11 := $i15;
    goto $bb22;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i11 := 4;
    goto $bb22;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb22;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const fw_get_request_speed: ref;

axiom fw_get_request_speed == $sub.ref(0, 707462);

procedure fw_get_request_speed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fw_get_request_speed($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const fw_core_handle_request: ref;

axiom fw_core_handle_request == $sub.ref(0, 708494);

procedure fw_core_handle_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.46, $M.15, $M.26, $M.47, $M.48, $M.1, $M.2, assertsPassed, $CurrAddr, $M.43, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.10, $M.24, $M.34, $M.38, $M.39, $M.23, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation fw_core_handle_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 1);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i8, 4);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 14);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} $p12 := allocate_request($p0, $p1);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 65535);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i20 := $shl.i64($i19, 32);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i25 := $or.i64($i20, $i24);
    call {:si_unique_call 1568} {:cexpr "offset"} boogie_si_record_i64($i25);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i29 := is_in_fcp_region($i25, $i28);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 1570} {:cexpr "tmp"} boogie_si_record_i8($i30);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} handle_fcp_region_request($p0, $p1, $p12, $i25);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} handle_exclusive_region_request($p0, $p1, $p12, $i25);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} fw_cdev_handle_phy_packet($p0, $p1);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const fw_cdev_handle_phy_packet: ref;

axiom fw_cdev_handle_phy_packet == $sub.ref(0, 709526);

procedure fw_cdev_handle_phy_packet($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed;



implementation fw_cdev_handle_phy_packet($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p13: ref;
  var $p51: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_134($p2);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(336, 1)), $mul.ref(0, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($sub.ref(0, 464), 512));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref($sub.ref(0, 464), 512)), $mul.ref(464, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(336, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i9, $i11);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} ldv_spin_unlock_irqrestore_135($p51, $u0);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p13 := $p7;
    goto $bb4;

  $bb4:
    call $p14, $p15, $i16, $i17, $p18, $i19, $p21, $p23, $p25, $p27, $p29, $i30, $p33, $p35, $i36, $p39, $p40, $p41, $p42, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $p13 := fw_cdev_handle_phy_packet_loop_$bb4($p1, $i11, $p14, $p15, $i16, $i17, $p18, $i19, $p21, $p23, $p25, $p27, $p29, $i30, $p33, $p35, $i36, $p39, $p40, $p41, $p42, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $p13);
    goto $bb4_last;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $p14 := kmalloc(80, 32);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 512)), $mul.ref(480, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p21, $i19);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 8);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 0);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 8);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i30);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} queue_event($p13, $p40, $p42, 32, $0.ref, 0);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 512)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p46, $mul.ref($sub.ref(0, 464), 512));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p46, $mul.ref($sub.ref(0, 464), 512)), $mul.ref(464, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, $i11);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i50 == 1);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $p13 := $p47;
    goto $bb10_dummy;

  SeqInstr_982:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_976:
    assume !assertsPassed;
    return;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;
}



const allocate_request: ref;

axiom allocate_request == $sub.ref(0, 710558);

procedure allocate_request($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation allocate_request($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p18: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p32: ref;
  var $i33: i32;
  var $p35: ref;
  var $i36: i32;
  var $p15: ref;
  var $i16: i32;
  var $i38: i64;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p37: ref;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 4);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 15);
    call {:si_unique_call 1577} {:cexpr "request_tcode"} boogie_si_record_i32($i6);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 1);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 9);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 4);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i6, 5);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} fw_notice.ref.ref.i32.i32.i32($p0, .str.94, $i30, $i33, $i36);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p37 := $0.ref;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $r := $p37;
    return;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 16);
    call {:si_unique_call 1579} {:cexpr "length"} boogie_si_record_i32($i27);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $p15, $i16 := $0.ref, $i27;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i16);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, 128);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $p40 := kmalloc($i39, 32);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(60, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} $i50 := compute_split_timeout_timestamp($p0, $i49);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(60, 1));
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i54);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 0);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, free_response_callback);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(72, 1));
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i16);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p15);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(104, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 1584} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p72, $p74, 16, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $p37 := $p40;
    goto $bb23;

  $bb28:
    assume $i66 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p41, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p15);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i16);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 1583} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p68, $p69, $i70, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i43 == 1;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $p37 := $0.ref;
    goto $bb23;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p15, $i16 := $0.ref, 4;
    goto $bb22;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i22, 16);
    call {:si_unique_call 1578} {:cexpr "length"} boogie_si_record_i32($i23);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p15, $i16 := $p18, $i23;
    goto $bb22;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p13, $mul.ref(3, 4));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p15, $i16 := $p14, 4;
    goto $bb22;
}



const handle_exclusive_region_request: ref;

axiom handle_exclusive_region_request == $sub.ref(0, 711590);

procedure handle_exclusive_region_request($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.47, $M.48, $M.26, $M.1, $M.2, $M.43, assertsPassed, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $CurrAddr, $M.31, $M.10, $M.24, $M.34, $M.38, $M.39, $M.23, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation handle_exclusive_region_request($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} {:cexpr "handle_exclusive_region_request:arg:offset"} boogie_si_record_i64($i3);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 16);
    call {:si_unique_call 1586} {:cexpr "destination"} boogie_si_record_i32($i7);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 16);
    call {:si_unique_call 1587} {:cexpr "source"} boogie_si_record_i32($i11);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 4);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 15);
    call {:si_unique_call 1588} {:cexpr "tcode"} boogie_si_record_i32($i16);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 9);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} rcu_read_lock();
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i25);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p27 := lookup_enclosing_address_handler(address_handler_list, $i3, $i26);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} rcu_read_unlock();
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p27);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} fw_send_response($p0, $p2, 7);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_994:
    assume !assertsPassed;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i38 := $zext.i32.i64($i37);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p27, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 1592} devirtbounce.33($p31, $p0, $p2, $i23, $i7, $i11, $i33, $i3, $p35, $i38, $p40);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 65535);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 16);
    call {:si_unique_call 1589} {:cexpr "tcode"} boogie_si_record_i32($i22);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb3;
}



const handle_fcp_region_request: ref;

axiom handle_fcp_region_request == $sub.ref(0, 712622);

procedure handle_fcp_region_request($p0: ref, $p1: ref, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.45, $M.46, $M.1, $M.2, $M.26, $CurrAddr, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.43, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation handle_fcp_region_request($p0: ref, $p1: ref, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i64;
  var $i40: i1;
  var $i41: i8;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p36: ref;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1597} {:cexpr "handle_fcp_region_request:arg:offset"} boogie_si_record_i64($i3);
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i3, 281474708278016);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i10 := $ugt.i32($i9, 512);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i13, 4);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 15);
    call {:si_unique_call 1599} {:cexpr "tcode"} boogie_si_record_i32($i15);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 16);
    call {:si_unique_call 1600} {:cexpr "destination"} boogie_si_record_i32($i19);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i23 := $lshr.i32($i22, 16);
    call {:si_unique_call 1601} {:cexpr "source"} boogie_si_record_i32($i23);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i24 := $ugt.i32($i15, 1);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} rcu_read_lock();
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, address_handler_list);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $M.45 := $store.ref($M.45, $p4, $p25);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.45, $p4);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $i27 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1605} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p26);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p31, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, $p2i.ref.i64(address_handler_list));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} rcu_read_unlock();
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} fw_send_response($p0, $p2, 0);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $p36 := $p32;
    goto $bb23;

  $bb23:
    call $p37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $i50, $i51, $p52, $p53, $p55, $p56, $p57, $i58, $i59, $i60, $p62, $p63, $p64, $i65, $i66, $p36, vslice_dummy_var_101 := handle_fcp_region_request_loop_$bb23($p0, $p1, $p2, $i3, $p5, $i15, $i19, $i23, $p37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $p45, $i46, $p47, $p48, $p49, $i50, $i51, $p52, $p53, $p55, $p56, $p57, $i58, $i59, $i60, $p62, $p63, $p64, $i65, $i66, $p36, vslice_dummy_var_101);
    goto $bb23_last;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i38);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $i40 := is_enclosing_handler($p36, $i3, $i39);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1608} {:cexpr "tmp___0"} boogie_si_record_i8($i41);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i41);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, $p5, $p56);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.46, $p5);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $i58 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32($i58);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p57);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p62, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, $p2i.ref.i64(address_handler_list));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i66 == 1);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb34:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $p36 := $p63;
    goto $bb34_dummy;

  $bb28:
    assume $i59 == 1;
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($u3);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_101 := rcu_read_lock_held();
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb30;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p36, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i51 := $zext.i32.i64($i50);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p36, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    call {:si_unique_call 1609} devirtbounce.33($p44, $p0, $0.ref, $i15, $i19, $i23, $i46, $i3, $p48, $i51, $p53);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_1003:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($u3);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_100 := rcu_read_lock_held();
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} fw_send_response($p0, $p2, 6);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1000:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} fw_send_response($p0, $p2, 7);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i3, 281474708278528);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb34_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 713654);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.43;



implementation rcu_read_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    return;
}



const is_enclosing_handler: ref;

axiom is_enclosing_handler == $sub.ref(0, 714686);

procedure is_enclosing_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation is_enclosing_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} {:cexpr "is_enclosing_handler:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1617} {:cexpr "is_enclosing_handler:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i5 := $ule.i64($i4, $i1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i1, $i2);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i12 := $add.i64($i9, $i11);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i13 := $ule.i64($i7, $i12);
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb3;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 715718);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation rcu_read_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_unlock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_unlock == $sub.ref(0, 716750);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.43, assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i2);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i3 := $M.43;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $M.43 := $i4;
    call {:si_unique_call 1620} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i4);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_rcu_update_lock__more_unlocks: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__more_unlocks == $sub.ref(0, 717782);

procedure ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__more_unlocks($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__more_unlocks:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1622} __VERIFIER_error();
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_kernel_rcu_update_lock_rcu_read_lock: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_read_lock == $sub.ref(0, 718814);

procedure ldv_linux_kernel_rcu_update_lock_rcu_read_lock();
  free requires assertsPassed;
  modifies $M.43;



implementation ldv_linux_kernel_rcu_update_lock_rcu_read_lock()
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.43 := $i1;
    call {:si_unique_call 1623} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32($i1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    return;
}



const lookup_enclosing_address_handler: ref;

axiom lookup_enclosing_address_handler == $sub.ref(0, 719846);

procedure lookup_enclosing_address_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.47, $M.48, $CurrAddr;



implementation lookup_enclosing_address_handler($p0: ref, $i1: i64, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i1;
  var $i20: i8;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p18: ref;
  var $p23: ref;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1626} {:cexpr "lookup_enclosing_address_handler:arg:offset"} boogie_si_record_i64($i1);
    call {:si_unique_call 1627} {:cexpr "lookup_enclosing_address_handler:arg:length"} boogie_si_record_i64($i2);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $M.47 := $store.ref($M.47, $p3, $p6);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.47, $p3);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i8 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1629} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i15, $i16);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p23 := $0.ref;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $r := $p23;
    return;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $p18 := $p13;
    goto $bb10;

  $bb10:
    call $i19, $i20, $i21, $p22, $p25, $p26, $p27, $i28, $i29, $i30, $p32, $p33, $p34, $i35, $i36, $p18, vslice_dummy_var_103 := lookup_enclosing_address_handler_loop_$bb10($i1, $i2, $p4, $i16, $i19, $i20, $i21, $p22, $p25, $p26, $p27, $i28, $i29, $i30, $p32, $p33, $p34, $i35, $i36, $p18, vslice_dummy_var_103);
    goto $bb10_last;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i19 := is_enclosing_handler($p18, $i1, $i2);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i8($i19);
    call {:si_unique_call 1632} {:cexpr "tmp___0"} boogie_si_record_i8($i20);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i8.i1($i20);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p22 := $p18;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p18, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, $p4, $p26);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.48, $p4);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $i28 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1634} {:cexpr "tmp___1"} boogie_si_record_i32($i28);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p27);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p32, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p32, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, $i16);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i36 == 1);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $p18 := $p33;
    goto $bb22_dummy;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i8.i1($u3);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} vslice_dummy_var_103 := rcu_read_lock_held();
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb18;

  $bb12:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb14;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($u3);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_102 := rcu_read_lock_held();
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;
}



const compute_split_timeout_timestamp: ref;

axiom compute_split_timeout_timestamp == $sub.ref(0, 720878);

procedure compute_split_timeout_timestamp($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation compute_split_timeout_timestamp($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} {:cexpr "compute_split_timeout_timestamp:arg:request_timestamp"} boogie_si_record_i32($i1);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(176, 1));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    call {:si_unique_call 1637} {:cexpr "cycles"} boogie_si_record_i32($i3);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i1, 8191);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i3, $i4);
    call {:si_unique_call 1638} {:cexpr "cycles"} boogie_si_record_i32($i5);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, $sub.i32(0, 8192));
    call {:si_unique_call 1639} {:cexpr "timestamp"} boogie_si_record_i32($i6);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i32($i5, 8000);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 13);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i6, $i8);
    call {:si_unique_call 1640} {:cexpr "timestamp"} boogie_si_record_i32($i9);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $i10 := $urem.i32($i5, 8000);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i9, $i10);
    call {:si_unique_call 1641} {:cexpr "timestamp"} boogie_si_record_i32($i11);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const free_response_callback: ref;

axiom free_response_callback == $sub.ref(0, 721910);

procedure free_response_callback($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation free_response_callback($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} {:cexpr "free_response_callback:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} kfree($p4);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_134: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_134 == $sub.ref(0, 722942);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_134($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_134($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1021:
    assume !assertsPassed;
    return;
}



const fw_core_handle_response: ref;

axiom fw_core_handle_response == $sub.ref(0, 723974);

procedure fw_core_handle_response($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.26, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.3, assertsPassed, $M.23, $M.40, $M.31, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_core_handle_response($p0: ref, $p1: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $p53: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p33: ref;
  var $p63: ref;
  var $p32: ref;
  var $p54: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i64;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var vslice_dummy_var_104: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 4);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 15);
    call {:si_unique_call 1646} {:cexpr "tcode"} boogie_si_record_i32($i6);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i32($i9, 10);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 63);
    call {:si_unique_call 1647} {:cexpr "tlabel"} boogie_si_record_i32($i11);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 16);
    call {:si_unique_call 1648} {:cexpr "source"} boogie_si_record_i32($i15);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 12);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 15);
    call {:si_unique_call 1649} {:cexpr "rcode"} boogie_si_record_i32($i20);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119($p21);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1)), $mul.ref(0, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p25, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i28, $i30);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p32 := $p26;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p54 := $p32;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} ldv_spin_unlock_irqrestore_135($p64, $u0);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p54, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(144, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i66, $i68);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i6, 6);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i6, 2);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i6, 7);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i6, 11);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p77, $p78, $i79 := $p54, $0.ref, 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 144)), $mul.ref(48, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p77, $mul.ref(0, 288)), $mul.ref(168, 1));
    call {:si_unique_call 1658} vslice_dummy_var_104 := devirtbounce.32($p91, $p0, $p92);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p77, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p78);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p77, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    call {:si_unique_call 1659} devirtbounce.5($p95, $p0, $i20, $p96, $i79, $p98);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i73 == 1;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(32, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i86 := $lshr.i32($i85, 16);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i87 := $zext.i32.i64($i86);
    call {:si_unique_call 1657} {:cexpr "data_length"} boogie_si_record_i64($i87);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p77, $p78, $i79 := $p54, $p81, $i87;
    goto $bb41;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p77, $p78, $i79 := $p54, $0.ref, 0;
    goto $bb41;

  $bb24:
    assume $i70 == 1;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($p75, $mul.ref(3, 4));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p77, $p78, $i79 := $p54, $p76, 4;
    goto $bb41;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} fw_notice.ref.ref.i32.i32($p0, .str.21, $i15, $i11);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i31 == 1;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    goto $bb4;

  $bb4:
    call $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p33, $p63 := fw_core_handle_response_loop_$bb4($i11, $i15, $i30, $p34, $i35, $i36, $p37, $i38, $i39, $p40, $p56, $p57, $p58, $p59, $p60, $i61, $i62, $p33, $p63);
    goto $bb4_last;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, $i15);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p58, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, $i30);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p63 := $p59;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p32 := $p63;
    goto $bb3;

  $bb17:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p59;
    goto $bb17_dummy;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p33, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $i11);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p40 := $p33;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb8;

  $bb9:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $i41 := try_cancel_split_timeout($p40);
    call {:si_unique_call 1652} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p40, $mul.ref(0, 288)), $mul.ref(8, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} list_del_init($p44);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p40, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i50 := $shl.i64(1, $i49);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i51 := $xor.i64($i50, $sub.i64(0, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i46, $i51);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(136, 1));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p53, $i52);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $p54 := $p40;
    goto $bb15;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_spin_unlock_irqrestore_135($p43, $u0);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119 == $sub.ref(0, 725006);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_119($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1039:
    assume !assertsPassed;
    return;
}



const dummy_read_phy_reg: ref;

axiom dummy_read_phy_reg == $sub.ref(0, 726038);

procedure dummy_read_phy_reg($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_read_phy_reg($p0: ref, $i1: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} {:cexpr "dummy_read_phy_reg:arg:address"} boogie_si_record_i32($i1);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_update_phy_reg: ref;

axiom dummy_update_phy_reg == $sub.ref(0, 727070);

procedure dummy_update_phy_reg($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_update_phy_reg($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} {:cexpr "dummy_update_phy_reg:arg:address"} boogie_si_record_i32($i1);
    call {:si_unique_call 1664} {:cexpr "dummy_update_phy_reg:arg:clear_bits"} boogie_si_record_i32($i2);
    call {:si_unique_call 1665} {:cexpr "dummy_update_phy_reg:arg:set_bits"} boogie_si_record_i32($i3);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_send_request: ref;

axiom dummy_send_request == $sub.ref(0, 728102);

procedure dummy_send_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation dummy_send_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1666} devirtbounce.34($p3, $p1, $p0, 17);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1042:
    assume !assertsPassed;
    return;
}



const dummy_send_response: ref;

axiom dummy_send_response == $sub.ref(0, 729134);

procedure dummy_send_response($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation dummy_send_response($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(64, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 1667} devirtbounce.34($p3, $p1, $p0, 17);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;
}



const dummy_cancel_packet: ref;

axiom dummy_cancel_packet == $sub.ref(0, 730166);

procedure dummy_cancel_packet($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_cancel_packet($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 2);
    return;
}



const dummy_enable_phys_dma: ref;

axiom dummy_enable_phys_dma == $sub.ref(0, 731198);

procedure dummy_enable_phys_dma($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_enable_phys_dma($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} {:cexpr "dummy_enable_phys_dma:arg:node_id"} boogie_si_record_i32($i1);
    call {:si_unique_call 1669} {:cexpr "dummy_enable_phys_dma:arg:generation"} boogie_si_record_i32($i2);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_allocate_iso_context: ref;

axiom dummy_allocate_iso_context == $sub.ref(0, 732230);

procedure dummy_allocate_iso_context($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: ref);
  free requires assertsPassed;



implementation dummy_allocate_iso_context($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} {:cexpr "dummy_allocate_iso_context:arg:type"} boogie_si_record_i32($i1);
    call {:si_unique_call 1671} {:cexpr "dummy_allocate_iso_context:arg:channel"} boogie_si_record_i32($i2);
    call {:si_unique_call 1672} {:cexpr "dummy_allocate_iso_context:arg:header_size"} boogie_si_record_i64($i3);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p4 := ERR_PTR($sub.i64(0, 19));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const dummy_start_iso: ref;

axiom dummy_start_iso == $sub.ref(0, 733262);

procedure dummy_start_iso($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_start_iso($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} {:cexpr "dummy_start_iso:arg:cycle"} boogie_si_record_i32($i1);
    call {:si_unique_call 1675} {:cexpr "dummy_start_iso:arg:sync"} boogie_si_record_i32($i2);
    call {:si_unique_call 1676} {:cexpr "dummy_start_iso:arg:tags"} boogie_si_record_i32($i3);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_set_iso_channels: ref;

axiom dummy_set_iso_channels == $sub.ref(0, 734294);

procedure dummy_set_iso_channels($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_set_iso_channels($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_queue_iso: ref;

axiom dummy_queue_iso == $sub.ref(0, 735326);

procedure dummy_queue_iso($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_queue_iso($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} {:cexpr "dummy_queue_iso:arg:payload"} boogie_si_record_i64($i3);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const dummy_flush_queue_iso: ref;

axiom dummy_flush_queue_iso == $sub.ref(0, 736358);

procedure dummy_flush_queue_iso($p0: ref);
  free requires assertsPassed;



implementation dummy_flush_queue_iso($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    return;
}



const dummy_flush_iso_completions: ref;

axiom dummy_flush_iso_completions == $sub.ref(0, 737390);

procedure dummy_flush_iso_completions($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dummy_flush_iso_completions($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 19);
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 738422);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 739454);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(4294967295, $i0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ioctl_get_info: ref;

axiom ioctl_get_info == $sub.ref(0, 740486);

procedure ioctl_get_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.15, $CurrAddr, assertsPassed;



implementation ioctl_get_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $i74: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 5);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 1856)), $mul.ref(316, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} down_read(fw_device_rwsem);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2040)), $mul.ref(1640, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i64.i32($i41);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i43 := $mul.i32($i42, 4);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} up_read(fw_device_rwsem);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i37, 0);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1689} ldv_mutex_lock_108($p49);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i51 := $load.i64($M.0, $p50);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(400, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i51);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i37;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 2040)), $mul.ref(1456, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_mutex_unlock_109($p72);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i61, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i74 := (if $i73 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i46 := $i74;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i62 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(488, 1));
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} $i64 := list_empty($p63);
    call {:si_unique_call 1695} {:cexpr "tmp___1"} boogie_si_record_i32($i64);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(488, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 2040)), $mul.ref(1616, 1));
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} list_add_tail($p66, $p69);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i55 == 1;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} fill_bus_reset_event($p2, $p0);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1691} $p58 := u64_to_uptr($i57);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} $i60 := copy_to_user($p58, $p59, 36);
    call {:si_unique_call 1693} {:cexpr "ret"} boogie_si_record_i64($i60);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb13;

  SeqInstr_1051:
    assume !assertsPassed;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 14);
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    call {:si_unique_call 1683} {:cexpr "want"} boogie_si_record_i64($i20);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(1640, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i25 := $mul.i64($i24, 4);
    call {:si_unique_call 1684} {:cexpr "have"} boogie_si_record_i64($i25);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $p28 := u64_to_uptr($i27);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i34 := $ult.i64($i20, $i25);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i34 == 1);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i35 := $i25;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} $i36 := copy_to_user($p28, $p33, $i35);
    call {:si_unique_call 1687} {:cexpr "ret"} boogie_si_record_i64($i36);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb6;

  $bb3:
    assume $i34 == 1;
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i35 := $i20;
    goto $bb5;
}



const ioctl_send_request: ref;

axiom ioctl_send_request == $sub.ref(0, 741518);

procedure ioctl_send_request($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, assertsPassed, $CurrAddr, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_send_request($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 4);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p1);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 5);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p1);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 17);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 18);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 19);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 20);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 21);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 22);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 23);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 22);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb41:
    assume $i45 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} $i56 := init_request($p0, $p47, $i51, $i55);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    call {:si_unique_call 1699} {:cexpr "tmp"} boogie_si_record_i32($i56);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i46 := $i56;
    goto $bb47;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i41 == 1;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb33:
    assume $i37 == 1;
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb21:
    assume $i25 == 1;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i13 == 1;
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ioctl_allocate: ref;

axiom ioctl_allocate == $sub.ref(0, 742550);

procedure ioctl_allocate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.0, $M.38, $M.39, $M.26, $CurrAddr, $M.40, assertsPassed, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.51, $M.55, $M.56, $M.3, $M.10, $M.47, $M.48, $M.24, $M.34, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_allocate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p29: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} $p4 := kmalloc(80, 208);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i10 := $load.i64($M.0, $p9);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $M.49 := $store.i64($M.49, $p11, $i10);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, 3);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p24, $i23);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i27);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, handle_request);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $p4);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i36 := $load.i64($M.0, $p35);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i36);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i40 := fw_core_add_address_handler($p39, $p2);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    call {:si_unique_call 1703} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p48, release_address_handler);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i50 := add_client_resource($p0, $p49, 208);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    call {:si_unique_call 1706} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb11:
    assume $i51 == 1;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} release_address_handler($p0, $p52);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i8 := $i50;
    goto $bb3;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i41 == 1;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} kfree($p42);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i8 := $i40;
    goto $bb3;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i16, $i19);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p21, $i20);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1060:
    assume !assertsPassed;
    return;
}



const ioctl_deallocate: ref;

axiom ioctl_deallocate == $sub.ref(0, 743582);

procedure ioctl_deallocate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.31, $M.1, $M.2, assertsPassed, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_deallocate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} $i5 := release_client_resource($p0, $i4, release_address_handler, $0.ref);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    call {:si_unique_call 1709} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1072:
    assume !assertsPassed;
    return;
}



const ioctl_send_response: ref;

axiom ioctl_send_response == $sub.ref(0, 744614);

procedure ioctl_send_response($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, $M.26, $M.31, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.10, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_send_response($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i16: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1711} $i6 := release_client_resource($p0, $i5, release_request, $p2);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    call {:si_unique_call 1712} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p2);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $i13 := is_fcp_request($p12);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1714} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $i19 := fw_get_response_length($p18);
    call {:si_unique_call 1718} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $i19);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.0, $p26);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $p28 := u64_to_uptr($i27);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} $i34 := copy_from_user($p30, $p28, $i33);
    call {:si_unique_call 1722} {:cexpr "tmp___3"} boogie_si_record_i64($i34);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} fw_send_response($p40, $p42, $i44);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1715} fw_card_put___0($p46);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p10);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} kfree($p47);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} kfree($p38);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 14);
    goto $bb7;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} kfree($p25);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  SeqInstr_1075:
    assume !assertsPassed;
    return;
}



const ioctl_initiate_bus_reset: ref;

axiom ioctl_initiate_bus_reset == $sub.ref(0, 745646);

procedure ioctl_initiate_bus_reset($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ioctl_initiate_bus_reset($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} fw_schedule_bus_reset($p5, 1, $i9);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;
}



const ioctl_add_descriptor: ref;

axiom ioctl_add_descriptor == $sub.ref(0, 746678);

procedure ioctl_add_descriptor($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.3, assertsPassed, $M.31, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.40, $M.10, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_add_descriptor($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i34: i32;
  var $p65: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(1644, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 256);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 4);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 56);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} $p19 := kmalloc($i18, 208);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $p25 := u64_to_uptr($i24);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(56, 1));
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i29, 4);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} $i32 := copy_from_user($p27, $p25, $i31);
    call {:si_unique_call 1729} {:cexpr "tmp___1"} boogie_si_record_i64($i32);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i37);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i41);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(4, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(28, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(56, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(32, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p51, $p48);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} $i53 := fw_core_add_descriptor($p52);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    call {:si_unique_call 1732} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, release_descriptor);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $i58 := add_client_resource($p0, $p57, 208);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    call {:si_unique_call 1734} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb18:
    assume $i59 == 1;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p20, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} fw_core_remove_descriptor($p60);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i34 := $i58;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p20);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} kfree($p65);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i10 := $i34;
    goto $bb3;

  SeqInstr_1096:
    assume !assertsPassed;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i54 == 1;
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i34 := $i53;
    goto $bb13;

  SeqInstr_1090:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 14);
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1087:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 38);
    goto $bb3;
}



const ioctl_remove_descriptor: ref;

axiom ioctl_remove_descriptor == $sub.ref(0, 747710);

procedure ioctl_remove_descriptor($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.31, $M.1, $M.2, assertsPassed, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_remove_descriptor($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} $i5 := release_client_resource($p0, $i4, release_descriptor, $0.ref);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    call {:si_unique_call 1737} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;
}



const ioctl_create_iso_context: ref;

axiom ioctl_create_iso_context == $sub.ref(0, 748742);

procedure ioctl_create_iso_context($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, $M.10, assertsPassed, $M.3, $M.23, $M.15, $M.40, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ioctl_create_iso_context($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p20: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p20 := iso_mc_callback;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $p45 := fw_iso_context_create($p34, $i36, $i38, $i40, $i43, $p20, $p44);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $i47 := IS_ERR($p46);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    call {:si_unique_call 1741} {:cexpr "tmp___0"} boogie_si_record_i8($i48);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i55 := $ule.i32($i54, 4);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_spin_lock_irq_100___0($p57);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(456, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i65 == 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} $i66 := iso_dma_direction($p45);
    call {:si_unique_call 1748} {:cexpr "tmp___1"} boogie_si_record_i32($i66);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} $i72 := fw_iso_buffer_map_dma($p67, $p71, $i66);
    call {:si_unique_call 1750} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(456, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 1);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i77 := $load.i64($M.0, $p76);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(416, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p78, $i77);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p79, $p45);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_spin_unlock_irq_101___0($p80);
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb22;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i73 == 1;
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} ldv_spin_unlock_irq_101___0($p74);
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} fw_iso_context_destroy($p45);
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i19 := $i72;
    goto $bb22;

  SeqInstr_1114:
    assume !assertsPassed;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i61 == 1;
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_spin_unlock_irq_101___0($p62);
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} fw_iso_context_destroy($p45);
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 16);
    goto $bb22;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  SeqInstr_1105:
    assume !assertsPassed;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i55 == 1;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p45, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 1);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i49 == 1;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p45);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i51 := PTR_ERR($p50);
    call {:si_unique_call 1743} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i19 := $i52;
    goto $bb22;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 3);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i23 == 1);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 3);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i27 == 1);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i29, 63);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p20 := iso_callback;
    goto $bb24;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb26;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb26;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 5);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i15 == 1);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 63);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p20 := iso_callback;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb18;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} __compiletime_assert_979();
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ioctl_queue_iso: ref;

axiom ioctl_queue_iso == $sub.ref(0, 749774);

procedure ioctl_queue_iso($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $CurrAddr, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ioctl_queue_iso($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i51: i8;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i16;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i8;
  var $i92: i8;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p99: ref;
  var $i100: i8;
  var $i101: i8;
  var $i102: i8;
  var $i103: i8;
  var $i104: i8;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i8;
  var $p111: ref;
  var $i112: i8;
  var $i113: i8;
  var $i114: i8;
  var $i115: i8;
  var $i116: i8;
  var $i117: i32;
  var $i118: i8;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $p123: ref;
  var $i124: i8;
  var $i125: i8;
  var $i126: i8;
  var $i127: i8;
  var $i128: i8;
  var $i129: i32;
  var $i130: i8;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p143: ref;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $i157: i1;
  var $p159: ref;
  var $i160: i8;
  var $i161: i64;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $i170: i1;
  var $p172: ref;
  var $i173: i16;
  var $i174: i32;
  var $i175: i32;
  var $i176: i1;
  var $i152: i64;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $p180: ref;
  var $i181: i64;
  var $i182: i64;
  var $i183: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p201: ref;
  var $i202: i8;
  var $i203: i32;
  var $p205: ref;
  var $i206: i16;
  var $i207: i32;
  var $i208: i32;
  var $i209: i1;
  var $p211: ref;
  var $i212: i16;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i64;
  var $p221: ref;
  var $i222: i32;
  var $p227: ref;
  var $i228: i16;
  var $i229: i64;
  var $i230: i64;
  var $i231: i32;
  var $i232: i64;
  var $i233: i1;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i234: i64;
  var $p235: ref;
  var $i236: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i223: i64;
  var $p224: ref;
  var $i225: i32;
  var $p237: ref;
  var $i238: i64;
  var $p239: ref;
  var $i240: i32;
  var $p241: ref;
  var $i242: i64;
  var $i243: i32;
  var $i244: i32;
  var $i245: i32;
  var $i246: i32;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $p250: ref;
  var $p251: ref;
  var $i252: i64;
  var $i253: i64;
  var $p254: ref;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $p2 := $alloc($mul.ref(260, $zext.i32.i64(1)));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(448, 1));
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64($i13, $i15);
    call {:si_unique_call 1755} {:cexpr "payload"} boogie_si_record_i64($i16);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(424, 1)), $mul.ref(16, 1));
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 12);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    call {:si_unique_call 1756} {:cexpr "buffer_end"} boogie_si_record_i64($i21);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, $p22);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(424, 1)), $mul.ref(8, 1));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i30 := $uge.i64($i16, $i21);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31, $i32 := $i16, $i21;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} $p40 := u64_to_uptr($i39);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} $p42 := current_thread_info();
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p41);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 56)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i50 := __chk_range_not_ok($i43, $i46, $i49);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i8($i50);
    call {:si_unique_call 1760} {:cexpr "tmp___1"} boogie_si_record_i8($i51);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i8.i1($i51);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} $i55 := ldv__builtin_expect($i54, 1);
    call {:si_unique_call 1762} {:cexpr "tmp___3"} boogie_si_record_i64($i55);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p41, $mul.ref($i59, 4));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p41);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p60);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i63 := $ult.i64($i61, $i62);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i64, $p65, $i66 := $i31, $p40, 0;
    assume {:branchcond $i63} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i223, $p224, $i225 := $i64, $p65, $i66;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} fw_iso_context_queue_flush($p5);
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p224);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} $i238 := uptr_to_u64($p237);
    call {:si_unique_call 1774} {:cexpr "tmp___6"} boogie_si_record_i64($i238);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.0, $p239);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i242 := $load.i64($M.0, $p241);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i243 := $trunc.i64.i32($i242);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i64.i32($i238);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i245 := $sub.i32($i243, $i244);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i246 := $add.i32($i240, $i245);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p247, $i246);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p224);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1775} $i249 := uptr_to_u64($p248);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p250, $i249);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(448, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i252 := $load.i64($M.0, $p251);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i253 := $add.i64($i252, $i223);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p254, $i253);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i11 := $i225;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i63 == 1;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i67, $i68, $p69, $i70 := 0, 0, $p40, $i31;
    goto $bb31;

  $bb31:
    call $p71, $p72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $i82, $i83, $i84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p143, $i144, $i145, $i146, $i147, $p149, $i150, $i151, $p154, $i155, $i156, $i157, $p159, $i160, $i161, $p162, $i163, $i164, $i165, $p167, $i168, $i169, $i170, $p172, $i173, $i174, $i175, $i176, $i152, $p177, $p178, $i179, $p180, $i181, $i182, $i183, $p185, $p186, $p187, $p188, $i189, $i190, $i191, $p192, $p193, $i194, $i195, $i196, $p197, $i198, $i199, $p201, $i202, $i203, $p205, $i206, $i207, $i208, $i209, $p211, $i212, $i213, $i214, $i215, $p216, $p217, $i218, $i219, $i220, $p221, $i222, $p227, $i228, $i229, $i230, $i231, $i232, $i233, $i67, $i68, $p69, $i70, $i234, $p235, $i236 := ioctl_queue_iso_loop_$bb31($p0, $p2, $p5, $i32, $p60, $i62, $p71, $p72, $p73, $i74, $i75, $i76, $i77, $i78, $i79, $p81, $i82, $i83, $i84, $i85, $i86, $p88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $p132, $p133, $i134, $i135, $p136, $i137, $i138, $p139, $i140, $i141, $p143, $i144, $i145, $i146, $i147, $p149, $i150, $i151, $p154, $i155, $i156, $i157, $p159, $i160, $i161, $p162, $i163, $i164, $i165, $p167, $i168, $i169, $i170, $p172, $i173, $i174, $i175, $i176, $i152, $p177, $p178, $i179, $p180, $i181, $i182, $i183, $p185, $p186, $p187, $p188, $i189, $i190, $i191, $p192, $p193, $i194, $i195, $i196, $p197, $i198, $i199, $p201, $i202, $i203, $p205, $i206, $i207, $i208, $i209, $p211, $i212, $i213, $i214, $i215, $p216, $p217, $i218, $i219, $i220, $p221, $i222, $p227, $i228, $i229, $i230, $i231, $i232, $i233, $i67, $i68, $p69, $i70, $i234, $p235, $i236);
    goto $bb31_last;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} might_fault();
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p69, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1764} $p72 := devirtbounce.35(0, $p71, 4);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p73 := $extractvalue($p72, 0);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i74 := $extractvalue($p72, 1);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p73);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    call {:si_unique_call 1765} {:cexpr "__ret_gu"} boogie_si_record_i32($i76);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i74);
    call {:si_unique_call 1766} {:cexpr "control"} boogie_si_record_i32($i77);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i76, 0);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i77);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p81, $i79);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i82 := $lshr.i32($i77, 16);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 1);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i86, 1);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i91 := $and.i8($i89, $sub.i8(0, 2));
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i92 := $or.i8($i91, $i90);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i92);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i77, 17);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i101 := $and.i8($i97, 1);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i102 := $shl.i8($i101, 1);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i103 := $and.i8($i100, $sub.i8(0, 3));
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i104 := $or.i8($i103, $i102);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i104);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i105 := $lshr.i32($i77, 18);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 3);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i8($i108);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i113 := $and.i8($i109, 3);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i114 := $shl.i8($i113, 2);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i115 := $and.i8($i112, $sub.i8(0, 13));
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i116 := $or.i8($i115, $i114);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, $i116);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i117 := $lshr.i32($i77, 20);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 15);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i8($i120);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i125 := $and.i8($i121, 15);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i126 := $shl.i8($i125, 4);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i127 := $and.i8($i124, 15);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i128 := $or.i8($i127, $i126);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, $i128);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i129 := $lshr.i32($i77, 24);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p132, $i130);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 0);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.0, $p139);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i152 := $i68;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p69, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i179 := $udiv.i64($i152, 4);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($p178, $mul.ref($i179, 4));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i182 := $p2i.ref.i64($p60);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i183 := $ugt.i64($i181, $i182);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p69, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i189 := $trunc.i64.i32($i152);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} $i190 := __copy_from_user($p186, $p188, $i189);
    call {:si_unique_call 1769} {:cexpr "tmp___4"} boogie_si_record_i32($i190);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p2);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($p192, $mul.ref(2, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.0, $p211);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i64($i212);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i214 := $add.i64($i70, $i213);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i215 := $ugt.i64($i214, $i32);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} $i218 := fw_iso_context_queue($p5, $p216, $p217, $i70);
    call {:si_unique_call 1771} {:cexpr "tmp___5"} boogie_si_record_i32($i218);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i220, $p221, $i222 := $i70, $p69, $i67;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i228 := $load.i16($M.0, $p227);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i229 := $zext.i16.i64($i228);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i230 := $add.i64($i70, $i229);
    call {:si_unique_call 1776} {:cexpr "payload"} boogie_si_record_i64($i230);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i231 := $add.i32($i67, 1);
    call {:si_unique_call 1777} {:cexpr "count"} boogie_si_record_i32($i231);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $i232 := $p2i.ref.i64($p180);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i233 := $ult.i64($i232, $i62);
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i234, $p235, $i236 := $i230, $p180, $i231;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i64, $p65, $i66 := $i234, $p235, $i236;
    goto $bb30;

  $bb86:
    assume $i233 == 1;
    assume {:verifier.code 0} true;
    $i67, $i68, $p69, $i70 := $i231, $i152, $p180, $i230;
    goto $bb86_dummy;

  $bb82:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i223, $p224, $i225 := $i220, $p221, $i222;
    goto $bb84;

  $bb79:
    assume $i215 == 1;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb71:
    assume $i196 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.0, $p197);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 0);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb73;

  $bb74:
    assume $i199 == 1;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.0, $p201);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i203 := $zext.i8.i32($i202);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.0, $p205);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i206);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i208 := $add.i32($i203, $i207);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i209 := $sgt.i32($i208, 0);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i209 == 1);
    goto $bb73;

  $bb76:
    assume $i209 == 1;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb68:
    assume $i191 == 1;
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb6;

  $bb65:
    assume $i183 == 1;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb44:
    assume $i141 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.0, $p167);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, 0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb61;

  $bb61:
    assume !($i170 == 1);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.0, $p172);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i173);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 3);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i152 := $i68;
    goto $bb52;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb60;

  $bb40:
    assume $i138 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 0);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i157 == 1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.0, $p159);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i64($i160);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.0, $p162);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i164 := $urem.i64($i161, $i163);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i152 := $i68;
    goto $bb52;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb54;

  $bb36:
    assume $i135 == 1;
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 3);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i64($i150);
    call {:si_unique_call 1767} {:cexpr "transmit_header_bytes"} boogie_si_record_i64($i151);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i152 := $i151;
    goto $bb52;

  $bb49:
    assume $i147 == 1;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb33:
    assume $i78 == 1;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb6;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 14);
    goto $bb6;

  $bb22:
    assume $i52 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb24;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i31, 3);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31, $i32 := 0, 0;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb86_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8156;
}



const ioctl_start_iso: ref;

axiom ioctl_start_iso == $sub.ref(0, 750806);

procedure ioctl_start_iso($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation ioctl_start_iso($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} $i32 := fw_iso_context_start($p25, $i27, $i29, $i31);
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    call {:si_unique_call 1780} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i11 := $i32;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, 14);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i20 == 1);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, 15);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb15;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} __compiletime_assert_1171();
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ioctl_stop_iso: ref;

axiom ioctl_stop_iso == $sub.ref(0, 751838);

procedure ioctl_stop_iso($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.34, $M.0, $M.49, $M.50, $M.51, $M.55, $M.56, $M.10, $M.3, $M.15, $M.26, $M.24, $M.38, $M.39, $M.23, $M.40, $M.31, $CurrAddr, $M.27, $M.28, assertsPassed, $M.45, $M.46, $M.16, $M.13, $M.25, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ioctl_stop_iso($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} $i13 := fw_iso_context_stop($p12);
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    call {:si_unique_call 1782} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const ioctl_get_cycle_timer: ref;

axiom ioctl_get_cycle_timer == $sub.ref(0, 752870);

procedure ioctl_get_cycle_timer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.0, $M.55, $M.56, $CurrAddr;



implementation ioctl_get_cycle_timer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $p2 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $M.51 := $store.i32($M.51, $p4, 0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_105 := ioctl_get_cycle_timer2($p0, $p5);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.52, $p7);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 1000000);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.53, $p10);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i12 := $sdiv.i32($i11, 1000);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i14 := $add.i64($i9, $i13);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.54, $p16);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ioctl_allocate_iso_resource: ref;

axiom ioctl_allocate_iso_resource == $sub.ref(0, 753902);

procedure ioctl_allocate_iso_resource($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_allocate_iso_resource($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} $i3 := init_iso_resource($p0, $p2, 0);
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    call {:si_unique_call 1786} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;
}



const ioctl_deallocate_iso_resource: ref;

axiom ioctl_deallocate_iso_resource == $sub.ref(0, 754934);

procedure ioctl_deallocate_iso_resource($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.31, $M.1, $M.2, assertsPassed, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_deallocate_iso_resource($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i5 := release_client_resource($p0, $i4, release_iso_resource, $0.ref);
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    call {:si_unique_call 1788} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;
}



const ioctl_allocate_iso_resource_once: ref;

axiom ioctl_allocate_iso_resource_once == $sub.ref(0, 755966);

procedure ioctl_allocate_iso_resource_once($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_allocate_iso_resource_once($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i3 := init_iso_resource($p0, $p2, 3);
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    call {:si_unique_call 1790} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;
}



const ioctl_deallocate_iso_resource_once: ref;

axiom ioctl_deallocate_iso_resource_once == $sub.ref(0, 756998);

procedure ioctl_deallocate_iso_resource_once($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation ioctl_deallocate_iso_resource_once($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i3 := init_iso_resource($p0, $p2, 4);
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    call {:si_unique_call 1792} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;
}



const ioctl_get_speed: ref;

axiom ioctl_get_speed == $sub.ref(0, 758030);

procedure ioctl_get_speed($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ioctl_get_speed($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ioctl_send_broadcast_request: ref;

axiom ioctl_send_broadcast_request == $sub.ref(0, 759062);

procedure ioctl_send_broadcast_request($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, assertsPassed, $CurrAddr, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_send_broadcast_request($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i12 := $ule.i64($i11, 281474708277247);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} $i13 := init_request($p0, $p2, 65535, 0);
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    call {:si_unique_call 1794} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i9 := $i13;
    goto $bb11;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 13);
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ioctl_send_stream_packet: ref;

axiom ioctl_send_stream_packet == $sub.ref(0, 760094);

procedure ioctl_send_stream_packet($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.26, $M.1, $M.2, assertsPassed, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_send_stream_packet($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 1856)), $mul.ref(196, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i5, $i11);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32(1024, $i16);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i14, $i17);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i22 := $ugt.i32($i21, 3);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i25 := $ugt.i32($i24, 63);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, 15);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i35 := fw_stream_packet_destination_id($i30, $i32, $i34);
    call {:si_unique_call 1797} {:cexpr "dest"} boogie_si_record_i32($i35);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 10);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, $i41);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(36, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} $i51 := init_request($p0, $p2, $i35, $i50);
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    call {:si_unique_call 1799} {:cexpr "tmp"} boogie_si_record_i32($i51);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i19 := $i51;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb6;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const ioctl_get_cycle_timer2: ref;

axiom ioctl_get_cycle_timer2 == $sub.ref(0, 761126);

procedure ioctl_get_cycle_timer2($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $M.56, $M.0, $CurrAddr;



implementation ioctl_get_cycle_timer2($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.55 := $store.i64($M.55, $p8, 0);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $M.56 := $store.i64($M.56, $p9, 0);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} arch_local_irq_disable();
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} trace_hardirqs_off();
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    call {:si_unique_call 1803} $i14 := devirtbounce.2($p13, $p7, 512);
    call {:si_unique_call 1804} {:cexpr "cycle_time"} boogie_si_record_i32($i14);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 1);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 4);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 22);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} trace_hardirqs_on();
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} arch_local_irq_enable();
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.55, $p25);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i26);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.56, $p28);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i14);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} getrawmonotonic($p2);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} ktime_get_ts($p2);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} getnstimeofday($p2);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb14;
}



const ioctl_send_phy_packet: ref;

axiom ioctl_send_phy_packet == $sub.ref(0, 762158);

procedure ioctl_send_phy_packet($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ioctl_send_phy_packet($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p25: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i32;
  var $p34: ref;
  var $p36: ref;
  var $i37: i32;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1644, 1));
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $p15 := kzalloc(188, 208);
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} client_get($p0);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p0);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(4, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i23);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, 224);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(0, 4));
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i37);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(24, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p42, 12);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1)), $mul.ref(64, 1));
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, outbound_phy_packet_callback);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(160, 1)), $mul.ref(0, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i46);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(160, 1)), $mul.ref(8, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 7);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} $i53 := is_ping_packet($p52);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i53);
    call {:si_unique_call 1813} {:cexpr "tmp___0"} boogie_si_record_i8($i54);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 144)), $mul.ref(32, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(56, 1));
    call {:si_unique_call 1814} devirtbounce.3($p61, $p6, $p62);
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i55 == 1;
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 184)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, 4);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 38);
    goto $bb3;
}



const ioctl_receive_phy_packets: ref;

axiom ioctl_receive_phy_packets == $sub.ref(0, 763190);

procedure ioctl_receive_phy_packets($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, assertsPassed;



implementation ioctl_receive_phy_packets($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(1644, 1));
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_spin_lock_irq_100($p15);
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(464, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(336, 1));
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} list_move_tail($p16, $p17);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(480, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i19);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} ldv_spin_unlock_irq_101($p21);
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 38);
    goto $bb3;
}



const ioctl_set_iso_channels: ref;

axiom ioctl_set_iso_channels == $sub.ref(0, 764222);

procedure ioctl_set_iso_channels($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ioctl_set_iso_channels($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i12 := fw_iso_context_set_channels($p4, $p11);
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    call {:si_unique_call 1819} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const ioctl_flush_iso: ref;

axiom ioctl_flush_iso == $sub.ref(0, 765254);

procedure ioctl_flush_iso($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.34, $M.0, $M.49, $M.50, $M.51, $M.55, $M.56, $M.10, $M.3, $M.15, $M.26, $M.24, $M.38, $M.39, $M.23, $M.40, $M.31, $CurrAddr, $M.27, $M.28, assertsPassed, $M.45, $M.46, $M.16, $M.13, $M.25, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ioctl_flush_iso($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(408, 1));
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} $i13 := fw_iso_context_flush_completions($p12);
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    call {:si_unique_call 1821} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const fw_iso_context_set_channels: ref;

axiom fw_iso_context_set_channels == $sub.ref(0, 766286);

procedure fw_iso_context_set_channels($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation fw_iso_context_set_channels($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 144)), $mul.ref(104, 1));
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 1822} $i8 := devirtbounce.36($p7, $p0, $p1);
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    call {:si_unique_call 1823} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;
}



const list_move_tail: ref;

axiom list_move_tail == $sub.ref(0, 767318);

procedure list_move_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_move_tail($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} __list_del_entry($p0);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} list_add_tail($p0, $p1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    return;
}



const outbound_phy_packet_callback: ref;

axiom outbound_phy_packet_callback == $sub.ref(0, 768350);

procedure outbound_phy_packet_callback($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation outbound_phy_packet_callback($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} {:cexpr "outbound_phy_packet_callback:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 2);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 4);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 5);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 6);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 13);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 14);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i2);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(60, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i25);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(48, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(0, 1));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1));
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(16, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, 24);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} queue_event($p30, $p31, $p33, $i38, $0.ref, 0);
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(48, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} client_put($p40);
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i11 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 6);
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb21:
    assume $i10 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 5);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb17:
    assume $i9 == 1;
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 18);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 56), 184)), $mul.ref(160, 1)), $mul.ref(12, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    goto $bb30;
}



const is_ping_packet: ref;

axiom is_ping_packet == $sub.ref(0, 769382);

procedure is_ping_packet($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_ping_packet($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, $sub.i32(0, 1056964609));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p0);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p0, $mul.ref(1, 4));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, $i8);
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;
}



const arch_local_irq_disable: ref;

axiom arch_local_irq_disable == $sub.ref(0, 770414);

procedure arch_local_irq_disable();
  free requires assertsPassed;



implementation arch_local_irq_disable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1830} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1832} $i7 := devirtbounce.37(0, 46, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1833} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1831} devirtbounce.20(0, .str.46, 814, 12);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const trace_hardirqs_off: ref;

axiom trace_hardirqs_off == $sub.ref(0, 771446);

procedure trace_hardirqs_off();
  free requires assertsPassed;



implementation trace_hardirqs_off()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    return;
}



const getnstimeofday: ref;

axiom getnstimeofday == $sub.ref(0, 772478);

procedure getnstimeofday($p0: ref);
  free requires assertsPassed;



implementation getnstimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} getnstimeofday64($p0);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_ts: ref;

axiom ktime_get_ts == $sub.ref(0, 773510);

procedure ktime_get_ts($p0: ref);
  free requires assertsPassed;



implementation ktime_get_ts($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1835} ktime_get_ts64($p0);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    return;
}



const getrawmonotonic: ref;

axiom getrawmonotonic == $sub.ref(0, 774542);

procedure getrawmonotonic($p0: ref);
  free requires assertsPassed;



implementation getrawmonotonic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} getrawmonotonic64($p0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    return;
}



const trace_hardirqs_on: ref;

axiom trace_hardirqs_on == $sub.ref(0, 775574);

procedure trace_hardirqs_on();
  free requires assertsPassed;



implementation trace_hardirqs_on()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    return;
}



const arch_local_irq_enable: ref;

axiom arch_local_irq_enable == $sub.ref(0, 776606);

procedure arch_local_irq_enable();
  free requires assertsPassed;



implementation arch_local_irq_enable()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)));
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1838} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call {:si_unique_call 1840} $i7 := devirtbounce.37(0, 47, $add.ref($add.ref($add.ref(pv_irq_ops, $mul.ref(0, 56)), $mul.ref(24, 1)), $mul.ref(0, 1)), 1);
    call {:si_unique_call 1841} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1839} devirtbounce.20(0, .str.46, 819, 12);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    assume false;
    return;
}



const getrawmonotonic64: ref;

axiom getrawmonotonic64 == $sub.ref(0, 777638);

procedure getrawmonotonic64($p0: ref);
  free requires assertsPassed;



implementation getrawmonotonic64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    return;
}



const ktime_get_ts64: ref;

axiom ktime_get_ts64 == $sub.ref(0, 778670);

procedure ktime_get_ts64($p0: ref);
  free requires assertsPassed;



implementation ktime_get_ts64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    return;
}



const getnstimeofday64: ref;

axiom getnstimeofday64 == $sub.ref(0, 779702);

procedure getnstimeofday64($p0: ref);
  free requires assertsPassed;



implementation getnstimeofday64($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    return;
}



const fw_stream_packet_destination_id: ref;

axiom fw_stream_packet_destination_id == $sub.ref(0, 780734);

procedure fw_stream_packet_destination_id($i0: i32, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation fw_stream_packet_destination_id($i0: i32, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} {:cexpr "fw_stream_packet_destination_id:arg:tag"} boogie_si_record_i32($i0);
    call {:si_unique_call 1843} {:cexpr "fw_stream_packet_destination_id:arg:channel"} boogie_si_record_i32($i1);
    call {:si_unique_call 1844} {:cexpr "fw_stream_packet_destination_id:arg:sy"} boogie_si_record_i32($i2);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i0, 14);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i1, 8);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i3, $i4);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, $i2);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const init_request: ref;

axiom init_request == $sub.ref(0, 781766);

procedure init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.1, $M.2, assertsPassed, $CurrAddr, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation init_request($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $i71: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $i52: i32;
  var $p79: ref;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} {:cexpr "init_request:arg:destination_id"} boogie_si_record_i32($i2);
    call {:si_unique_call 1846} {:cexpr "init_request:arg:speed"} boogie_si_record_i32($i3);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 10);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i23, 384);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $p25 := kmalloc($i24, 208);
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(48, 1));
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p0);
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i31);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(0, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, release_transaction);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} $i58 := add_client_resource($p0, $p57, 208);
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    call {:si_unique_call 1853} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(56, 1)), $mul.ref(16, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p26);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} fw_send_request($p63, $p65, $i67, $i2, $i69, $i3, $i71, $p74, $i77, complete_transaction, $p78);
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i59 == 1;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i52 := $i58;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p26);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} kfree($p79);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $i14 := $i52;
    goto $bb9;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i40 == 1;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} $p43 := u64_to_uptr($i42);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i48);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i50 := copy_from_user($p46, $p43, $i49);
    call {:si_unique_call 1850} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32(0, 14);
    goto $bb24;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_1174:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i19, 3);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb13;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 4096);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32(512, $i3);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i11, $i12);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;
}



const u64_to_uptr: ref;

axiom u64_to_uptr == $sub.ref(0, 782798);

procedure u64_to_uptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation u64_to_uptr($i0: i64) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $p5: ref;
  var $p7: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} {:cexpr "u64_to_uptr:arg:value"} boogie_si_record_i64($i0);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} $i1 := is_compat_task();
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1857} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p7 := $i2p.i64.ref($i0);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i0);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $p5 := compat_ptr($i4);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p6 := $p5;
    goto $bb3;
}



const add_client_resource: ref;

axiom add_client_resource == $sub.ref(0, 783830);

procedure add_client_resource($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation add_client_resource($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i11: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} {:cexpr "add_client_resource:arg:gfp_mask"} boogie_si_record_i32($i2);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 16);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1860} {:cexpr "preload"} boogie_si_record_i8($i5);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p7);
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $i14 := ldv_idr_alloc_111($p12, $p13, 0, 0, 0);
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    call {:si_unique_call 1864} {:cexpr "ret"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    $i11 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i15 := $sge.i32($i11, 0);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} ldv_spin_unlock_irqrestore_99($p17, $u0);
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i5);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i11);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb15;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1868} idr_preload_end();
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i11);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} client_get($p0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1866} schedule_if_iso_resource($p1);
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 125);
    goto $bb6;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} idr_preload($i2);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const complete_transaction: ref;

axiom complete_transaction == $sub.ref(0, 784862);

procedure complete_transaction($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation complete_transaction($p0: ref, $i1: i32, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} {:cexpr "complete_transaction:arg:rcode"} boogie_si_record_i32($i1);
    call {:si_unique_call 1870} {:cexpr "complete_transaction:arg:length"} boogie_si_record_i64($i3);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(48, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i12 := $ult.i64($i3, $i11);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 0);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1872} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p21);
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p8, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} ldv_idr_remove_118($p22, $i26);
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p8, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} ldv_spin_unlock_irqrestore_99($p31, $u0);
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    $p32 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(8, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, 1);
    $p33 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(12, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i1);
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i36 := $ule.i32($i35, 4);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i36 == 1);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p6);
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i48 := $zext.i32.i64($i47);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i49 := $add.i64($i48, 24);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} queue_event($p8, $p44, $p45, $i49, $0.ref, 0);
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} client_put($p8);
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i36 == 1;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(0, 1));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p6);
    $p39 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    $p41 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1876} queue_event($p8, $p37, $p38, 24, $p40, $i43);
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 512)), $mul.ref(312, 1));
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} __wake_up($p30, 3, 1, $0.ref);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i15 == 1;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(20, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i19);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    cmdloc_dummy_var_26 := $M.0;
    call {:si_unique_call 1871} cmdloc_dummy_var_27 := $memcpy.i8(cmdloc_dummy_var_25, cmdloc_dummy_var_26, $p17, $p2, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_27;
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i3);
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 384)), $mul.ref(360, 1)), $mul.ref(16, 1));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117 == $sub.ref(0, 785894);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_117($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client();
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1880} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_118: ref;

axiom ldv_idr_remove_118 == $sub.ref(0, 786926);

procedure ldv_idr_remove_118($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_remove_118($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} {:cexpr "ldv_idr_remove_118:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1882} ldv_linux_lib_idr_idr_remove_resource_idr_of_client();
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_remove_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_remove_resource_idr_of_client == $sub.ref(0, 787958);

procedure ldv_linux_lib_idr_idr_remove_resource_idr_of_client();
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_lib_idr_idr_remove_resource_idr_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 1885} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(2);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;
}



const idr_preload: ref;

axiom idr_preload == $sub.ref(0, 788990);

procedure idr_preload($i0: i32);
  free requires assertsPassed;



implementation idr_preload($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} {:cexpr "idr_preload:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    return;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110 == $sub.ref(0, 790022);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_110($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_client();
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;
}



const ldv_idr_alloc_111: ref;

axiom ldv_idr_alloc_111 == $sub.ref(0, 791054);

procedure ldv_idr_alloc_111($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_alloc_111($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} {:cexpr "ldv_idr_alloc_111:arg:ldv_func_arg3"} boogie_si_record_i32($i2);
    call {:si_unique_call 1890} {:cexpr "ldv_idr_alloc_111:arg:ldv_func_arg4"} boogie_si_record_i32($i3);
    call {:si_unique_call 1891} {:cexpr "ldv_idr_alloc_111:arg:ldv_func_arg5"} boogie_si_record_i32($i4);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1892} ldv_linux_lib_idr_idr_alloc_resource_idr_of_client();
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} $i5 := ldv_undef_int();
    call {:si_unique_call 1894} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;
}



const idr_preload_end: ref;

axiom idr_preload_end == $sub.ref(0, 792086);

procedure idr_preload_end();
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation idr_preload_end()
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} devirtbounce.8(0);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1896} __preempt_count_sub(1);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const __preempt_count_sub: ref;

axiom __preempt_count_sub == $sub.ref(0, 793118);

procedure __preempt_count_sub($i0: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation __preempt_count_sub($i0: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} {:cexpr "__preempt_count_sub:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32(0, 1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32(0, $sub.i32(0, 1));
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i8 == 1);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, $i0);
    call {:si_unique_call 1906} devirtbounce.39(0, __preempt_count, $i9, __preempt_count);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i8 == 1;
    call {:si_unique_call 1905} devirtbounce.38(0, __preempt_count, __preempt_count);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    call {:si_unique_call 1904} devirtbounce.38(0, __preempt_count, __preempt_count);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_1255:
    assume !assertsPassed;
    return;
}



const __bad_percpu_size: ref;

axiom __bad_percpu_size == $sub.ref(0, 794150);

procedure __bad_percpu_size();



const ldv_linux_lib_idr_idr_alloc_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_alloc_resource_idr_of_client == $sub.ref(0, 795182);

procedure ldv_linux_lib_idr_idr_alloc_resource_idr_of_client();
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_lib_idr_idr_alloc_resource_idr_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 1913} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(2);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const is_compat_task: ref;

axiom is_compat_task == $sub.ref(0, 796214);

procedure is_compat_task() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation is_compat_task() returns ($r: i1)
{
  var $i0: i1;
  var $i1: i8;
  var $i2: i1;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i32;
  var $i3: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} $i0 := is_ia32_task();
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i1 := $zext.i1.i8($i0);
    call {:si_unique_call 1915} {:cexpr "tmp"} boogie_si_record_i8($i1);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} $i4 := is_x32_task();
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1917} {:cexpr "tmp___0"} boogie_si_record_i8($i5);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i3, 0);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const is_ia32_task: ref;

axiom is_ia32_task == $sub.ref(0, 797246);

procedure is_ia32_task() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation is_ia32_task() returns ($r: i1)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p0 := current_thread_info();
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(20, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const is_x32_task: ref;

axiom is_x32_task == $sub.ref(0, 798278);

procedure is_x32_task() returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0;



implementation is_x32_task() returns ($r: i1)
{
  var $p0: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} $p0 := get_current();
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 10680)), $mul.ref(2592, 1)), $mul.ref(24, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.57, $p2);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i4 := $add.i64($i3, $sub.i64(0, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 168)), $mul.ref(120, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 1073741824);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 799310);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1920} $p3 := devirtbounce.40(0, current_task);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 800342);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call {:si_unique_call 1925} $i3 := devirtbounce.41(0, kernel_stack);
    call {:si_unique_call 1926} {:cexpr "pfo_ret__"} boogie_si_record_i64($i3);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i4 := $sub.i64($i3, 32728);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p5 := $i2p.i64.ref($i4);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const init_iso_resource: ref;

axiom init_iso_resource == $sub.ref(0, 801374);

procedure init_iso_resource($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $CurrAddr, $M.31, $M.1, $M.2, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation init_iso_resource($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i1;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $p42: ref;
  var $p45: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p76: ref;
  var $p78: ref;
  var $i79: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i28: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i15: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1934} {:cexpr "init_iso_resource:arg:todo"} boogie_si_record_i32($i2);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 4915);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} $p16 := kmalloc(288, 208);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} $p18 := kmalloc(72, 208);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $p20 := kmalloc(72, 208);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p17);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i23 == 1);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p19);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p21);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} __init_work($p30, 0);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p31, 137438953408);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.0;
    cmdloc_dummy_var_29 := $M.0;
    call {:si_unique_call 1942} cmdloc_dummy_var_30 := $memcpy.i8(cmdloc_dummy_var_28, cmdloc_dummy_var_29, $p35, $p36, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_30;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} lockdep_init_map($p39, .str.44, $p3, 0);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} INIT_LIST_HEAD($p42);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, iso_resource_work);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(80, 1));
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} init_timer_key($p47, 2, .str.45, $p5);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p50, delayed_work_timer_fn);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1));
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(24, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p55, $i52);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(16, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p0);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(248, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i2);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(252, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $sub.i32(0, 1));
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(256, 1));
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i60);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(264, 1));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(272, 1));
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p65, $p18);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(280, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p20);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p70, $i68);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, 4);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p76, $i74);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, 5);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i2, 0);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i79 == 1);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p86, $0.ref);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $sub.i32(0, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} schedule_iso_resource($p17, 0);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(20, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i91);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i79 == 1;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p81, release_iso_resource);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p17, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} $i83 := add_client_resource($p0, $p82, 208);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    call {:si_unique_call 1947} {:cexpr "ret"} boogie_si_record_i32($i83);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i84 == 1;
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i28 := $i83;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p17);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} kfree($p93);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p19);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} kfree($p94);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p21);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} kfree($p95);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i15 := $i28;
    goto $bb9;

  SeqInstr_1288:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 12);
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  SeqInstr_1285:
    assume !assertsPassed;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb9;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb5;
}



const iso_resource_work: ref;

axiom iso_resource_work == $sub.ref(0, 802406);

procedure iso_resource_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.15, $M.31, $CurrAddr, assertsPassed, $M.1, $M.2, $M.10, $M.13, $M.3, $M.23, $M.40, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.16, $M.27, $M.28, $M.34, $M.47, $M.48, $M.24, $M.38, $M.39, $M.11, $M.12, $M.43, $M.25, $M.14;



implementation iso_resource_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i27: i1;
  var $i31: i8;
  var $i25: i8;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i34: i1;
  var $i38: i8;
  var $i32: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i8;
  var $p42: ref;
  var $p43: ref;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i55: i1;
  var $i54: i1;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i1;
  var $i61: i1;
  var $i64: i8;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i8;
  var $i89: i8;
  var $p90: ref;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p105: ref;
  var $p110: ref;
  var $i111: i32;
  var $p113: ref;
  var $i114: i32;
  var $p116: ref;
  var $i117: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i1;
  var $p124: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var vslice_dummy_var_106: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1949} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 24), 288));
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(16, 1));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_spin_lock_irq_100___0($p7);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(20, 1));
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 1952} {:cexpr "generation"} boogie_si_record_i32($i11);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(248, 1));
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1953} {:cexpr "todo"} boogie_si_record_i32($i13);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i13, 1);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i8($i34);
    call {:si_unique_call 1960} {:cexpr "skip"} boogie_si_record_i8($i38);
    assume {:verifier.code 0} true;
    $i32 := $i38;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32($i13, 2);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i40 := $ule.i32($i39, 2);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $i41 := $zext.i1.i8($i40);
    call {:si_unique_call 1958} {:cexpr "free___0"} boogie_si_record_i8($i41);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(252, 1));
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i11);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1959} ldv_spin_unlock_irq_101___0($p43);
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i8.i1($i32);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(264, 1));
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i46);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(256, 1));
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i52 := $load.i64($M.0, $p51);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i53 := $ule.i32($i13, 1);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i54 := 1;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i53 == 1);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i13, 3);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i54 := $i55;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1962} fw_iso_resource_manage($p50, $i11, $i52, $p1, $p2, $i54);
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, $sub.i32(0, 11));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i60 := $sge.i32($i59, 0);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i61 := 1;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i60 == 1);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p2);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, 0);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i61 := $i63;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i8($i61);
    call {:si_unique_call 1963} {:cexpr "success"} boogie_si_record_i8($i64);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1964} ldv_spin_lock_irq_100___0($p65);
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(248, 1));
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(248, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i89 := $i41;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1968} ldv_spin_unlock_irq_101___0($p90);
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i13, 0);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i13, 1);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i13, 0);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb55, $bb57;

  $bb57:
    assume !($i100 == 1);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i13, 3);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i101 == 1);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(280, 1));
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(280, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p108, $0.ref);
    assume {:verifier.code 0} true;
    $p105 := $p107;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i111);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p1);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i114);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.0, $p2);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(20, 1));
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p119, $i117);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p105, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1969} queue_event($p6, $p120, $p122, 24, $0.ref, 0);
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i8.i1($i89);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1961} client_put($p6);
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i123 == 1;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(24, 1));
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} vslice_dummy_var_106 := cancel_delayed_work($p124);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(272, 1));
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p127);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} kfree($p128);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(280, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} kfree($p131);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p4);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} kfree($p132);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i101 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(272, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(272, 1));
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $0.ref);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p105 := $p103;
    goto $bb60;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb56;

  $bb49:
    assume $i98 == 1;
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i8.i1($i64);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb51;

  $bb52:
    assume $i99 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb43:
    assume $i91 == 1;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p1);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i93 := $sge.i32($i92, 0);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb45;

  $bb46:
    assume $i93 == 1;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p1);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i95 := $zext.i32.i64($i94);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i96 := $shl.i64(1, $i95);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(256, 1));
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p97, $i96);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i8.i1($i64);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i73 == 1);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i76 == 1);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1965} $p81 := ldv_idr_find_114($p77, $i80);
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i41;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb42;

  $bb39:
    assume $i83 == 1;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} ldv_idr_remove_128($p84, $i87);
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1967} client_put($p6);
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i88 := 1;
    goto $bb41;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb34;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb34;

  $bb29:
    assume $i68 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(248, 1));
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, 1);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1309:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb27;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i13, 1);
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb22;

  $bb23:
    assume $i58 == 1;
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i33 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(252, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, $i11);
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb12;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $i15 := get_jiffies_64();
    call {:si_unique_call 1955} {:cexpr "tmp"} boogie_si_record_i64($i15);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1856)), $mul.ref(160, 1));
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i15, $i21);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i22, 250);
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i24 := $slt.i64($i23, 0);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i13, 1);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i27);
    call {:si_unique_call 1957} {:cexpr "skip"} boogie_si_record_i8($i31);
    assume {:verifier.code 0} true;
    $i25 := $i31;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i32 := $i25;
    goto $bb9;

  $bb6:
    assume $i26 == 1;
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 288)), $mul.ref(252, 1));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i11);
    assume {:verifier.code 0} true;
    $i27 := $i30;
    goto $bb8;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1956} schedule_iso_resource($p4, 84);
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb5;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;
}



const ldv_idr_find_114: ref;

axiom ldv_idr_find_114 == $sub.ref(0, 803438);

procedure ldv_idr_find_114($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_find_114($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} {:cexpr "ldv_idr_find_114:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} ldv_linux_lib_idr_idr_find_resource_idr_of_client();
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $p2 := ldv_undef_ptr();
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_128: ref;

axiom ldv_idr_remove_128 == $sub.ref(0, 804470);

procedure ldv_idr_remove_128($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_remove_128($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} {:cexpr "ldv_idr_remove_128:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} ldv_linux_lib_idr_idr_remove_resource_idr_of_client();
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;
}



const cancel_delayed_work: ref;

axiom cancel_delayed_work == $sub.ref(0, 805502);

procedure cancel_delayed_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1979} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1980} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_linux_lib_idr_idr_find_resource_idr_of_client: ref;

axiom ldv_linux_lib_idr_idr_find_resource_idr_of_client == $sub.ref(0, 806534);

procedure ldv_linux_lib_idr_idr_find_resource_idr_of_client();
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_linux_lib_idr_idr_find_resource_idr_of_client()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1981} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i3 := $M.31;
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 1983} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(2);
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;
}



const release_client_resource: ref;

axiom release_client_resource == $sub.ref(0, 807566);

procedure release_client_resource($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.26, $M.31, $M.1, $M.2, assertsPassed, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation release_client_resource($p0: ref, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p8: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} {:cexpr "release_client_resource:arg:handle"} boogie_si_record_i32($i1);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} ldv_spin_lock_irq_100___0($p4);
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(88, 1));
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} $p10 := ldv_idr_find_114($p9, $i1);
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p8 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p8);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} ldv_spin_unlock_irq_101___0($p20);
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p8);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i22 == 1);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p2);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i25, $i26);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p3);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 1989} devirtbounce.19($p32, $p0, $p8);
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} client_put($p0);
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p8);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 22);
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb11;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p2);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i16, $i17);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb6;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 512)), $mul.ref(96, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} ldv_idr_remove_115($p19, $i1);
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  SeqInstr_1339:
    assume !assertsPassed;
    return;
}



const ldv_idr_remove_115: ref;

axiom ldv_idr_remove_115 == $sub.ref(0, 808598);

procedure ldv_idr_remove_115($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_idr_remove_115($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} {:cexpr "ldv_idr_remove_115:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} ldv_linux_lib_idr_idr_remove_resource_idr_of_client();
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;
}



const __compiletime_assert_1171: ref;

axiom __compiletime_assert_1171 == $sub.ref(0, 809630);

procedure __compiletime_assert_1171();
  free requires assertsPassed;



implementation __compiletime_assert_1171()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 810662);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1994} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1995} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1996} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const __copy_from_user: ref;

axiom __copy_from_user == $sub.ref(0, 811694);

procedure __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} {:cexpr "__copy_from_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} might_fault();
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} $i3 := __copy_from_user_nocheck($p0, $p1, $i2);
    call {:si_unique_call 2000} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const uptr_to_u64: ref;

axiom uptr_to_u64 == $sub.ref(0, 812726);

procedure uptr_to_u64($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation uptr_to_u64($p0: ref) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i7: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} $i1 := is_compat_task();
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2002} {:cexpr "tmp___0"} boogie_si_record_i8($i2);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $i4 := ptr_to_compat($p0);
    call {:si_unique_call 2004} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;
}



const ptr_to_compat: ref;

axiom ptr_to_compat == $sub.ref(0, 813758);

procedure ptr_to_compat($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ptr_to_compat($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __copy_from_user_nocheck: ref;

axiom __copy_from_user_nocheck == $sub.ref(0, 814790);

procedure __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __copy_from_user_nocheck($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $i75: i32;
  var $i76: i64;
  var $i77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} {:cexpr "__copy_from_user_nocheck:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 2007} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const copy_user_generic: ref;

axiom copy_user_generic == $sub.ref(0, 815822);

procedure copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} {:cexpr "copy_user_generic:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 2023} $p3 := devirtbounce.46(0, copy_user_generic_unrolled, copy_user_generic_string, copy_user_enhanced_fast_string, $p0, $p1, $i2);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i4 := $extractvalue($p3, 0);
    call {:si_unique_call 2024} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const copy_user_generic_unrolled: ref;

axiom copy_user_generic_unrolled == $sub.ref(0, 816854);

procedure copy_user_generic_unrolled($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_generic_string: ref;

axiom copy_user_generic_string == $sub.ref(0, 817886);

procedure copy_user_generic_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_enhanced_fast_string: ref;

axiom copy_user_enhanced_fast_string == $sub.ref(0, 818918);

procedure copy_user_enhanced_fast_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const __compiletime_assert_979: ref;

axiom __compiletime_assert_979 == $sub.ref(0, 819950);

procedure __compiletime_assert_979();
  free requires assertsPassed;



implementation __compiletime_assert_979()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    return;
}



const iso_callback: ref;

axiom iso_callback == $sub.ref(0, 820982);

procedure iso_callback($p0: ref, $i1: i32, $i2: i64, $p3: ref, $p4: ref);



const iso_mc_callback: ref;

axiom iso_mc_callback == $sub.ref(0, 822014);

procedure iso_mc_callback($p0: ref, $i1: i64, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation iso_mc_callback($p0: ref, $i1: i64, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} {:cexpr "iso_mc_callback:arg:completed"} boogie_si_record_i64($i1);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} $p4 := kmalloc(64, 32);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 9);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(416, 1));
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i11);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} $i15 := fw_iso_buffer_lookup($p14, $i1);
    call {:si_unique_call 2028} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i15);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} queue_event($p3, $p19, $p21, 16, $0.ref, 0);
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1360:
    assume !assertsPassed;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 823046);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 2031} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 824078);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(4294967295, $i1);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fw_iso_buffer_lookup: ref;

axiom fw_iso_buffer_lookup == $sub.ref(0, 825110);

procedure fw_iso_buffer_lookup($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation fw_iso_buffer_lookup($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i22: i64;
  var $i23: i32;
  var $i24: i64;
  var $i25: i1;
  var $i6: i64;
  var $i21: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} {:cexpr "fw_iso_buffer_lookup:arg:completed"} boogie_si_record_i64($i1);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64(0, $i4);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, $i6 := fw_iso_buffer_lookup_loop_$bb4($p0, $i1, $p2, $p7, $p8, $p9, $p10, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, $i23, $i24, $i25, $i6);
    goto $bb4_last;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref($i6, 8));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    call {:si_unique_call 2033} {:cexpr "address"} boogie_si_record_i64($i13);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i14 := $sub.i64($i1, $i13);
    call {:si_unique_call 2034} {:cexpr "offset"} boogie_si_record_i64($i14);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64($i14, 1);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i16 := $ule.i64($i15, 4095);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i6, $i14;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i6, 1);
    call {:si_unique_call 2035} {:cexpr "i"} boogie_si_record_i64($i22);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p2);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i25 := $ult.i64($i22, $i24);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i22;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i19 := $shl.i64($i17, 12);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, $i18);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9870;
}



const release_descriptor: ref;

axiom release_descriptor == $sub.ref(0, 826142);

procedure release_descriptor($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.0, assertsPassed;



implementation release_descriptor($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} fw_core_remove_descriptor($p3);
    goto SeqInstr_1366, SeqInstr_1367;

  SeqInstr_1367:
    assume assertsPassed;
    goto SeqInstr_1368;

  SeqInstr_1368:
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} kfree($p4);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1366:
    assume !assertsPassed;
    return;
}



const release_request: ref;

axiom release_request == $sub.ref(0, 827174);

procedure release_request($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation release_request($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $i5 := is_fcp_request($p4);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2039} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} fw_send_response($p11, $p13, 4);
    goto SeqInstr_1369, SeqInstr_1370;

  SeqInstr_1370:
    assume assertsPassed;
    goto SeqInstr_1371;

  SeqInstr_1371:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} fw_card_put___0($p15);
    goto SeqInstr_1372, SeqInstr_1373;

  SeqInstr_1373:
    assume assertsPassed;
    goto SeqInstr_1374;

  SeqInstr_1374:
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p2);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} kfree($p16);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1372:
    assume !assertsPassed;
    return;

  SeqInstr_1369:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} kfree($p9);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const is_fcp_request: ref;

axiom is_fcp_request == $sub.ref(0, 828206);

procedure is_fcp_request($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_fcp_request($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const fw_card_put___0: ref;

axiom fw_card_put___0 == $sub.ref(0, 829238);

procedure fw_card_put___0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation fw_card_put___0($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} vslice_dummy_var_107 := kref_put___0($p1, fw_card_release);
    goto SeqInstr_1375, SeqInstr_1376;

  SeqInstr_1376:
    assume assertsPassed;
    goto SeqInstr_1377;

  SeqInstr_1377:
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1375:
    assume !assertsPassed;
    return;
}



const release_address_handler: ref;

axiom release_address_handler == $sub.ref(0, 830270);

procedure release_address_handler($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.40, assertsPassed;



implementation release_address_handler($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} fw_core_remove_address_handler($p3);
    goto SeqInstr_1378, SeqInstr_1379;

  SeqInstr_1379:
    assume assertsPassed;
    goto SeqInstr_1380;

  SeqInstr_1380:
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} kfree($p4);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1378:
    assume !assertsPassed;
    return;
}



const handle_request: ref;

axiom handle_request == $sub.ref(0, 831302);

procedure handle_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.1, $M.2, $M.31, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation handle_request($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref)
{
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i62: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p20: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var vslice_dummy_var_108: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} {:cexpr "handle_request:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 2048} {:cexpr "handle_request:arg:destination"} boogie_si_record_i32($i3);
    call {:si_unique_call 2049} {:cexpr "handle_request:arg:source"} boogie_si_record_i32($i4);
    call {:si_unique_call 2050} {:cexpr "handle_request:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 2051} {:cexpr "handle_request:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 2052} {:cexpr "handle_request:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} vslice_dummy_var_108 := fw_card_get___0($p0);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} $p12 := kmalloc(48, 32);
    goto SeqInstr_1381, SeqInstr_1382;

  SeqInstr_1382:
    assume assertsPassed;
    goto SeqInstr_1383;

  SeqInstr_1383:
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} $p14 := kmalloc(96, 32);
    goto SeqInstr_1384, SeqInstr_1385;

  SeqInstr_1385:
    assume assertsPassed;
    goto SeqInstr_1386;

  SeqInstr_1386:
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p15);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p0);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p1);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p7);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p24, $i8);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} $i25 := is_fcp_request($p1);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 2062} {:cexpr "tmp___1"} boogie_si_record_i8($i26);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $p32 := $0.ref;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, release_request);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} $i38 := add_client_resource($p36, $p37, 32);
    goto SeqInstr_1387, SeqInstr_1388;

  SeqInstr_1388:
    assume assertsPassed;
    goto SeqInstr_1389;

  SeqInstr_1389:
    call {:si_unique_call 2065} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i43, 3);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, 6);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(12, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i2);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i6);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i4);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i3);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(316, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(36, 1));
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i5);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i8);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.0, $p80);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p64, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p82, $i81);
    assume {:verifier.code 0} true;
    $i62 := 48;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} queue_event($p84, $p85, $p87, $i62, $p89, $i8);
    goto SeqInstr_1390, SeqInstr_1391;

  SeqInstr_1391:
    assume assertsPassed;
    goto SeqInstr_1392;

  SeqInstr_1392:
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1390:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 96)), $mul.ref(48, 1));
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i2, 16);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i2;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 2);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i6);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i8);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p10, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p46, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p61, $i60);
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i62 := 32;
    goto $bb22;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i49 := 9;
    goto $bb21;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $p20 := $p32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p13);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} kfree($p90);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p15);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} kfree($p91);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} kfree($p20);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} $i92 := is_fcp_request($p1);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    call {:si_unique_call 2060} {:cexpr "tmp___2"} boogie_si_record_i8($i93);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i93);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} fw_card_put___0($p0);
    goto SeqInstr_1396, SeqInstr_1397;

  SeqInstr_1397:
    assume assertsPassed;
    goto SeqInstr_1398;

  SeqInstr_1398:
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_1396:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i96 == 1;
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} fw_send_response($p0, $p1, 4);
    goto SeqInstr_1393, SeqInstr_1394;

  SeqInstr_1394:
    assume assertsPassed;
    goto SeqInstr_1395;

  SeqInstr_1395:
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1393:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i94 == 1;
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb26;

  SeqInstr_1387:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $p28 := kmemdup($p7, $i8, 32);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p13, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p28);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p32 := $p28;
    goto $bb13;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p20 := $p28;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p20 := $0.ref;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  SeqInstr_1384:
    assume !assertsPassed;
    return;

  SeqInstr_1381:
    assume !assertsPassed;
    return;
}



const fw_card_get___0: ref;

axiom fw_card_get___0 == $sub.ref(0, 832334);

procedure fw_card_get___0($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation fw_card_get___0($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(16, 1));
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} kref_get___0($p1);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_mutex_lock_108: ref;

axiom ldv_mutex_lock_108 == $sub.ref(0, 833366);

procedure ldv_mutex_lock_108($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_lock_108($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} ldv_linux_kernel_locking_mutex_mutex_lock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_1399, SeqInstr_1400;

  SeqInstr_1400:
    assume assertsPassed;
    goto SeqInstr_1401;

  SeqInstr_1401:
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1399:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_109: ref;

axiom ldv_mutex_unlock_109 == $sub.ref(0, 834398);

procedure ldv_mutex_unlock_109($p0: ref);
  free requires assertsPassed;
  modifies $M.24, assertsPassed;



implementation ldv_mutex_unlock_109($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} ldv_linux_kernel_locking_mutex_mutex_unlock_client_list_mutex_of_fw_device($p0);
    goto SeqInstr_1402, SeqInstr_1403;

  SeqInstr_1403:
    assume assertsPassed;
    goto SeqInstr_1404;

  SeqInstr_1404:
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1402:
    assume !assertsPassed;
    return;
}



const fw_unit_uevent: ref;

axiom fw_unit_uevent == $sub.ref(0, 835430);

procedure fw_unit_uevent($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28;



implementation fw_unit_uevent($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} $p2 := $alloc($mul.ref(64, $zext.i32.i64(1)));
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p3 := fw_unit($p0);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} vslice_dummy_var_109 := get_modalias($p3, $p4, 64);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} $i7 := add_uevent_var.ref.ref.ref($p1, .str.82, $p6);
    call {:si_unique_call 2076} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;
}



const fw_unit_release: ref;

axiom fw_unit_release == $sub.ref(0, 836462);

procedure fw_unit_release($p0: ref);
  free requires assertsPassed;



implementation fw_unit_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} $p1 := fw_unit($p0);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} $p2 := fw_parent_device($p1);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} fw_device_put($p2);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} kfree($p3);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    return;
}



const get_modalias: ref;

axiom get_modalias == $sub.ref(0, 837494);

procedure get_modalias($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.27, $M.28, $CurrAddr;



implementation get_modalias($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 2082} {:cexpr "get_modalias:arg:buffer_size"} boogie_si_record_i64($i2);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p4, 0);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p5, 0);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p6, 0);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, $p7, 0);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} get_modalias_ids($p0, $p8);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.34, $p9);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.34, $p11);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.34, $p13);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.34, $p15);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} $i17 := snprintf.ref.i64.ref.i32.i32.i32.i32($p1, $i2, .str.79, $i10, $i12, $i14, $i16);
    call {:si_unique_call 2085} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const add_uevent_var: ref;

axiom add_uevent_var == $sub.ref(0, 838526);

procedure add_uevent_var.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation add_uevent_var.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2086} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2087} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 839558);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);



const show_immediate: ref;

axiom show_immediate == $sub.ref(0, 840590);

procedure show_immediate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation show_immediate($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p13: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $i30: i32;
  var $i31: i1;
  var $i29: i32;
  var $i32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} down_read(fw_device_rwsem);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} $i7 := is_fw_unit($p0);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 2093} {:cexpr "tmp___1"} boogie_si_record_i8($i8);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} $p14 := fw_device($p0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(5, 4));
    assume {:verifier.code 0} true;
    $p13 := $p17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} fw_csr_iterator_init($p3, $p13);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} $i18 := fw_csr_iterator_next($p3, $p4, $p5);
    call {:si_unique_call 2098} {:cexpr "tmp___2"} boogie_si_record_i32($i18);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 2);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} up_read(fw_device_rwsem);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i29);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p20, $i21, $i22, $i23, $i30, $i31 := show_immediate_loop_$bb7($p3, $p4, $p5, $p6, $p20, $i21, $i22, $i23, $i30, $i31);
    goto $bb7_last;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.27, $p4);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, $i22);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} $i30 := fw_csr_iterator_next($p3, $p4, $p5);
    call {:si_unique_call 2103} {:cexpr "tmp___2"} boogie_si_record_i32($i30);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13_dummy;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p2);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then 4096 else 0);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.28, $p5);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} $i28 := snprintf.ref.i64.ref.i32($p2, $i26, .str.81, $i27);
    call {:si_unique_call 2100} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} $p10 := fw_unit($p0);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const show_text_leaf: ref;

axiom show_text_leaf == $sub.ref(0, 841622);

procedure show_text_leaf($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation show_text_leaf($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p11: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i28: i32;
  var $i29: i1;
  var $i27: i32;
  var $i31: i64;
  var $i32: i64;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i30: i32;
  var $i26: i32;
  var $i43: i64;
  var $p44: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var vslice_dummy_var_110: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} down_read(fw_device_rwsem);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} $i5 := is_fw_unit($p0);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 2107} {:cexpr "tmp___1"} boogie_si_record_i8($i6);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} $p12 := fw_device($p0);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(5, 4));
    assume {:verifier.code 0} true;
    $p11 := $p15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p2);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p18, $i19 := $p3, 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} $i23 := fw_csr_string($p11, $i22, $p18, $i19);
    call {:si_unique_call 2111} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i24 := $sge.i32($i23, 0);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i47 := $i23;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} up_read(fw_device_rwsem);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i23, 0);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $i26 := $i23;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i26);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p18, $mul.ref($i43, 1));
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} vslice_dummy_var_110 := strcpy($p44, .str.75);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i26, 1);
    call {:si_unique_call 2114} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb19;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb12;

  $bb12:
    call $i28, $i29, $i27, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i30 := show_text_leaf_loop_$bb12($p18, $i28, $i29, $i27, $i31, $i32, $p33, $i34, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $i30);
    goto $bb12_last;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i27);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, $sub.i64(0, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p18, $mul.ref($i32, 1));
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref($i36, 1));
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 32);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i42 := $i27;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $i26 := $i42;
    goto $bb11;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    call {:si_unique_call 2112} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $i30 := $i28;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb11;

  $bb14:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb14_dummy;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $p18, $i19 := $p2, 4095;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $p8 := fw_unit($p0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10217;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 842654);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const config_rom_show: ref;

axiom config_rom_show == $sub.ref(0, 843686);

procedure config_rom_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation config_rom_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} $p3 := fw_device($p0);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} down_read(fw_device_rwsem);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1640, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 4);
    call {:si_unique_call 2118} {:cexpr "length"} boogie_si_record_i64($i6);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_31 := $M.0;
    cmdloc_dummy_var_32 := $M.0;
    call {:si_unique_call 2119} cmdloc_dummy_var_33 := $memcpy.i8(cmdloc_dummy_var_31, cmdloc_dummy_var_32, $p2, $p9, $i6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_33;
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} up_read(fw_device_rwsem);
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const guid_show: ref;

axiom guid_show == $sub.ref(0, 844718);

procedure guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation guid_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} $p3 := fw_device($p0);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} down_read(fw_device_rwsem);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(3, 4));
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 4));
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} $i12 := snprintf.ref.i64.ref.i32.i32($p2, 4096, .str.77, $i7, $i11);
    call {:si_unique_call 2124} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} up_read(fw_device_rwsem);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const is_local_show: ref;

axiom is_local_show == $sub.ref(0, 845750);

procedure is_local_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation is_local_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} $p3 := fw_device($p0);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2040)), $mul.ref(1652, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} $i8 := sprintf.ref.ref.i32($p2, .str.78, $i7);
    call {:si_unique_call 2128} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const units_show: ref;

axiom units_show == $sub.ref(0, 846782);

procedure units_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation units_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i29: i32;
  var $i30: i1;
  var $i13: i32;
  var $i32: i32;
  var $i33: i1;
  var $i31: i32;
  var $i12: i32;
  var $i34: i32;
  var $i35: i32;
  var $i28: i32;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} $p6 := fw_device($p0);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} down_read(fw_device_rwsem);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(5, 4));
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} fw_csr_iterator_init($p3, $p9);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} $i10 := fw_csr_iterator_next($p3, $p4, $p5);
    call {:si_unique_call 2136} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i35 := $i12;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i28 := $i35;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} up_read(fw_device_rwsem);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i28, 0);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i28);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $r := $i40;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i28);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i37, $sub.i64(0, 1));
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p2, $mul.ref($i38, 1));
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 10);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb4;

  $bb4:
    call $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i29, $i30, $i13, $i32, $i33, $i31, $i34 := units_show_loop_$bb4($p2, $p3, $p4, $p5, $i14, $i15, $i16, $p17, $p18, $p19, $i20, $i21, $i22, $p23, $i24, $i25, $i26, $i27, $i29, $i30, $i13, $i32, $i33, $i31, $i34);
    goto $bb4_last;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call $i14, $i15, $i32, $i33, $i34 := units_show_loop_$bb15($p3, $p4, $p5, $i14, $i15, $i13, $i32, $i33, $i34);
    goto $bb15_last;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.27, $p4);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 209);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i13);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p2, $mul.ref($i16, 1));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.28, $p5);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i22 := $add.i64($i21, $sub.i64(0, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p19, $mul.ref($i22, 4));
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} $i24 := units_sprintf($p17, $p23);
    call {:si_unique_call 2140} {:cexpr "tmp___0"} boogie_si_record_i32($i24);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i13, $i24);
    call {:si_unique_call 2141} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, 4077);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i27 := $i25;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $i29 := fw_csr_iterator_next($p3, $p4, $p5);
    call {:si_unique_call 2144} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i12 := $i31;
    goto $bb3;

  $bb13:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i25;
    goto $bb13_dummy;

  $bb9:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb11;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} $i32 := fw_csr_iterator_next($p3, $p4, $p5);
    call {:si_unique_call 2138} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i34 := $i13;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb16_dummy;

  $bb16_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10298;
}



const units_sprintf: ref;

axiom units_sprintf == $sub.ref(0, 847814);

procedure units_sprintf($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation units_sprintf($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i18: i32;
  var $i16: i32;
  var $i17: i32;
  var $i19: i32;
  var $i20: i1;
  var $i9: i32;
  var $i10: i32;
  var $i21: i32;
  var $i22: i32;
  var $i7: i32;
  var $i8: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} fw_csr_iterator_init($p2, $p1);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} $i5 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 2150} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i7, $i8 := 0, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} $i23 := sprintf.ref.ref.i32.i32($p0, .str.76, $i7, $i8);
    call {:si_unique_call 2156} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, 0;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $i14, $i15, $i18, $i16, $i17, $i19, $i20, $i9, $i10, $i21, $i22 := units_sprintf_loop_$bb4($p2, $p3, $p4, $i11, $i12, $i13, $i14, $i15, $i18, $i16, $i17, $i19, $i20, $i9, $i10, $i21, $i22);
    goto $bb4_last;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.27, $p3);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 18);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.27, $p3);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 19);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i10, $i9;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $i19 := fw_csr_iterator_next($p2, $p3, $p4);
    call {:si_unique_call 2154} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i16, $i17;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i21, $i22;
    goto $bb3;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i17, $i16;
    goto $bb16_dummy;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.28, $p4);
    call {:si_unique_call 2152} {:cexpr "version"} boogie_si_record_i32($i18);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i10, $i18;
    goto $bb15;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.28, $p4);
    call {:si_unique_call 2151} {:cexpr "specifier_id"} boogie_si_record_i32($i15);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i15, $i9;
    goto $bb15;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10347;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 848846);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure sprintf.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);



const modalias_show: ref;

axiom modalias_show == $sub.ref(0, 849878);

procedure modalias_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.27, $M.28, $CurrAddr;



implementation modalias_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $i8: i32;
  var $i9: i64;
  var vslice_dummy_var_111: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} $p3 := fw_unit($p0);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $i4 := get_modalias($p3, $p2, 4096);
    call {:si_unique_call 2159} {:cexpr "length"} boogie_si_record_i32($i4);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} vslice_dummy_var_111 := strcpy($p6, .str.75);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i4, 1);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const rom_index_show: ref;

axiom rom_index_show == $sub.ref(0, 850910);

procedure rom_index_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation rom_index_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1416)), $mul.ref(0, 1));
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} $p5 := fw_device($p4);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} $p6 := fw_unit($p0);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(1632, 1));
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64($i9, $i12);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i14 := $sdiv.i64($i13, 4);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $i16 := snprintf.ref.i64.ref.i32($p2, 4096, .str.80, $i15);
    call {:si_unique_call 2164} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const transmit_phy_packet_callback: ref;

axiom transmit_phy_packet_callback == $sub.ref(0, 851942);

procedure transmit_phy_packet_callback($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation transmit_phy_packet_callback($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} {:cexpr "transmit_phy_packet_callback:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} complete_(phy_config_done);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    return;
}



const handle_topology_map: ref;

axiom handle_topology_map == $sub.ref(0, 852974);

procedure handle_topology_map($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation handle_topology_map($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref)
{
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} {:cexpr "handle_topology_map:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 2168} {:cexpr "handle_topology_map:arg:destination"} boogie_si_record_i32($i3);
    call {:si_unique_call 2169} {:cexpr "handle_topology_map:arg:source"} boogie_si_record_i32($i4);
    call {:si_unique_call 2170} {:cexpr "handle_topology_map:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 2171} {:cexpr "handle_topology_map:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 2172} {:cexpr "handle_topology_map:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i2, $sub.i32(0, 2));
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 4);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i6, 3);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i8, 3);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, topology_map_region);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i17 := $sub.i64($i6, $i16);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i64($i17, 4);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 2175} {:cexpr "start"} boogie_si_record_i32($i19);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(828, 1));
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i19);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 1));
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.0;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 2176} cmdloc_dummy_var_36 := $memcpy.i8(cmdloc_dummy_var_34, cmdloc_dummy_var_35, $p7, $p23, $i8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} fw_send_response($p0, $p1, 0);
    goto SeqInstr_1411, SeqInstr_1412;

  SeqInstr_1412:
    assume assertsPassed;
    goto SeqInstr_1413;

  SeqInstr_1413:
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1411:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} fw_send_response($p0, $p1, 7);
    goto SeqInstr_1408, SeqInstr_1409;

  SeqInstr_1409:
    assume assertsPassed;
    goto SeqInstr_1410;

  SeqInstr_1410:
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1408:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} fw_send_response($p0, $p1, 6);
    goto SeqInstr_1405, SeqInstr_1406;

  SeqInstr_1406:
    assume assertsPassed;
    goto SeqInstr_1407;

  SeqInstr_1407:
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1405:
    assume !assertsPassed;
    return;
}



const handle_registers: ref;

axiom handle_registers == $sub.ref(0, 854006);

procedure handle_registers($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.15, $M.26, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation handle_registers($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref)
{
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i40: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i59: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i72: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i85: i1;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i84: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $i100: i32;
  var $i93: i32;
  var $i32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} {:cexpr "handle_registers:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 2179} {:cexpr "handle_registers:arg:destination"} boogie_si_record_i32($i3);
    call {:si_unique_call 2180} {:cexpr "handle_registers:arg:source"} boogie_si_record_i32($i4);
    call {:si_unique_call 2181} {:cexpr "handle_registers:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 2182} {:cexpr "handle_registers:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 2183} {:cexpr "handle_registers:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i6);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 268435455);
    call {:si_unique_call 2184} {:cexpr "reg"} boogie_si_record_i32($i11);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p7);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i11, 536);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 8);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 0);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, 4);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 512);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i11, 516);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i11, 528);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i11, 12);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i11, 24);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i11, 28);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i11, 560);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i11, 564);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i11, 540);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i11, 544);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i11, 548);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i11, 552);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i32 := 7;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} fw_send_response($p0, $p1, $i32);
    goto SeqInstr_1414, SeqInstr_1415;

  SeqInstr_1415:
    assume assertsPassed;
    goto SeqInstr_1416;

  SeqInstr_1416:
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1414:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i28 == 1;
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    call {:si_unique_call 2185} devirtbounce.20(0, .str.18, 1191, 12);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb57:
    assume $i27 == 1;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb53:
    assume $i26 == 1;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb49:
    assume $i25 == 1;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb45:
    assume $i24 == 1;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i2, 4);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i89 == 1);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i2, 0);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i100 := 6;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i93 := $i100;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    $i32 := $i93;
    goto $bb68;

  $bb100:
    assume $i94 == 1;
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p12);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} $i96 := __fswab32($i95);
    call {:si_unique_call 2212} {:cexpr "tmp___7"} boogie_si_record_i32($i96);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 1073741824);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, $sub.i32(0, 2147483617));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(824, 1));
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p99, $i98);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $i100 := 0;
    goto $bb102;

  $bb97:
    assume $i89 == 1;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(824, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} $i92 := __fswab32($i91);
    call {:si_unique_call 2210} {:cexpr "tmp___6"} boogie_si_record_i32($i92);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i92);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb99;

  $bb41:
    assume $i23 == 1;
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i2, 4);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i81 == 1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i2, 0);
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i88 := 6;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i84 := $i88;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i32 := $i84;
    goto $bb68;

  $bb94:
    assume $i85 == 1;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p12);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(1852, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i86);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i88 := 0;
    goto $bb96;

  $bb91:
    assume $i81 == 1;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(1852, 1));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i83);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb93;

  $bb37:
    assume $i22 == 1;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i2, 4);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i68 == 1);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i2, 0);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i80 := 6;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i72 := $i80;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $i32 := $i72;
    goto $bb68;

  $bb88:
    assume $i73 == 1;
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_124($p74);
    goto SeqInstr_1423, SeqInstr_1424;

  SeqInstr_1424:
    assume assertsPassed;
    goto SeqInstr_1425;

  SeqInstr_1425:
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p12);
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} $i76 := __fswab32($i75);
    call {:si_unique_call 2206} {:cexpr "tmp___5"} boogie_si_record_i32($i76);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, $sub.i32(0, 524288));
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(172, 1));
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} update_split_timeout($p0);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} ldv_spin_unlock_irqrestore_135($p79, $u0);
    goto SeqInstr_1426, SeqInstr_1427;

  SeqInstr_1427:
    assume assertsPassed;
    goto SeqInstr_1428;

  SeqInstr_1428:
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i80 := 0;
    goto $bb90;

  SeqInstr_1426:
    assume !assertsPassed;
    return;

  SeqInstr_1423:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i68 == 1;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(172, 1));
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} $i71 := __fswab32($i70);
    call {:si_unique_call 2203} {:cexpr "tmp___4"} boogie_si_record_i32($i71);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i71);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $i72 := 0;
    goto $bb87;

  $bb33:
    assume $i21 == 1;
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i2, 4);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i55 == 1);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i2, 0);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i67 := 6;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59 := $i67;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i32 := $i59;
    goto $bb68;

  $bb82:
    assume $i60 == 1;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122($p61);
    goto SeqInstr_1417, SeqInstr_1418;

  SeqInstr_1418:
    assume assertsPassed;
    goto SeqInstr_1419;

  SeqInstr_1419:
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p12);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $i63 := __fswab32($i62);
    call {:si_unique_call 2199} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 7);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(168, 1));
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} update_split_timeout($p0);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(208, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} ldv_spin_unlock_irqrestore_135($p66, $u0);
    goto SeqInstr_1420, SeqInstr_1421;

  SeqInstr_1421:
    assume assertsPassed;
    goto SeqInstr_1422;

  SeqInstr_1422:
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb84;

  SeqInstr_1420:
    assume !assertsPassed;
    return;

  SeqInstr_1417:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i55 == 1;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(168, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} $i58 := __fswab32($i57);
    call {:si_unique_call 2196} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i58);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb81;

  $bb29:
    assume $i20 == 1;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i2, 0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i54 := 6;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $i32 := $i54;
    goto $bb68;

  $bb76:
    assume $i49 == 1;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    call {:si_unique_call 2194} devirtbounce.47($p53, $p0, 0, 1024);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i54 := 0;
    goto $bb78;

  $bb25:
    assume $i19 == 1;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i2, 4);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i33 == 1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i2, 0);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i48 := 6;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i40 := $i48;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i32 := $i40;
    goto $bb68;

  $bb73:
    assume $i41 == 1;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p12);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} $i43 := __fswab32($i42);
    call {:si_unique_call 2192} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 144)), $mul.ref(72, 1));
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    call {:si_unique_call 2193} devirtbounce.47($p47, $p0, $i11, $i43);
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb75;

  $bb70:
    assume $i33 == 1;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 144)), $mul.ref(64, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    call {:si_unique_call 2187} $i38 := devirtbounce.2($p37, $p0, $i11);
    call {:si_unique_call 2188} {:cexpr "tmp"} boogie_si_record_i32($i38);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} $i39 := __fswab32($i38);
    call {:si_unique_call 2190} {:cexpr "tmp___0"} boogie_si_record_i32($i39);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i39);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $i40 := 0;
    goto $bb72;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(821, 1));
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i31 == 1);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i32 := 7;
    goto $bb68;

  $bb66:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122 == $sub.ref(0, 855038);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_122($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_1429, SeqInstr_1430;

  SeqInstr_1430:
    assume assertsPassed;
    goto SeqInstr_1431;

  SeqInstr_1431:
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1429:
    assume !assertsPassed;
    return;
}



const update_split_timeout: ref;

axiom update_split_timeout == $sub.ref(0, 856070);

procedure update_split_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation update_split_timeout($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(168, 1));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 8000);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(172, 1));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 19);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i3, $i6);
    call {:si_unique_call 2215} {:cexpr "cycles"} boogie_si_record_i32($i7);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 800);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i9 := 800;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i9, 24000);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i11 := 24000;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(176, 1));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i11, 250);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, 7999);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $i15 := $udiv.i32($i14, 8000);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1856)), $mul.ref(180, 1));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $i11 := $i9;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const ldv___ldv_linux_kernel_locking_spinlock_spin_lock_124: ref;

axiom ldv___ldv_linux_kernel_locking_spinlock_spin_lock_124 == $sub.ref(0, 857102);

procedure ldv___ldv_linux_kernel_locking_spinlock_spin_lock_124($p0: ref);
  free requires assertsPassed;
  modifies $M.15, assertsPassed;



implementation ldv___ldv_linux_kernel_locking_spinlock_spin_lock_124($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} ldv_linux_kernel_locking_spinlock_spin_lock_lock_of_fw_card();
    goto SeqInstr_1432, SeqInstr_1433;

  SeqInstr_1433:
    assume assertsPassed;
    goto SeqInstr_1434;

  SeqInstr_1434:
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} __ldv_linux_kernel_locking_spinlock_spin_lock($p0);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1432:
    assume !assertsPassed;
    return;
}



const handle_low_memory: ref;

axiom handle_low_memory == $sub.ref(0, 858134);

procedure handle_low_memory($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation handle_low_memory($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $i5: i32, $i6: i64, $p7: ref, $i8: i64, $p9: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2218} {:cexpr "handle_low_memory:arg:tcode"} boogie_si_record_i32($i2);
    call {:si_unique_call 2219} {:cexpr "handle_low_memory:arg:destination"} boogie_si_record_i32($i3);
    call {:si_unique_call 2220} {:cexpr "handle_low_memory:arg:source"} boogie_si_record_i32($i4);
    call {:si_unique_call 2221} {:cexpr "handle_low_memory:arg:generation"} boogie_si_record_i32($i5);
    call {:si_unique_call 2222} {:cexpr "handle_low_memory:arg:offset"} boogie_si_record_i64($i6);
    call {:si_unique_call 2223} {:cexpr "handle_low_memory:arg:length"} boogie_si_record_i64($i8);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2224} fw_send_response($p0, $p1, 6);
    goto SeqInstr_1435, SeqInstr_1436;

  SeqInstr_1436:
    assume assertsPassed;
    goto SeqInstr_1437;

  SeqInstr_1437:
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1435:
    assume !assertsPassed;
    return;
}



const ldv_undef_int_nonpositive: ref;

axiom ldv_undef_int_nonpositive == $sub.ref(0, 859166);

procedure ldv_undef_int_nonpositive() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int_nonpositive() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2225} $i0 := ldv_undef_int();
    call {:si_unique_call 2226} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} ldv_assume($i2);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_10: ref;

axiom ldv_dummy_resourceless_instance_callback_15_10 == $sub.ref(0, 860198);

procedure ldv_dummy_resourceless_instance_callback_15_10($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_10($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} {:cexpr "ldv_dummy_resourceless_instance_callback_15_10:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2229} {:cexpr "ldv_dummy_resourceless_instance_callback_15_10:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} vslice_dummy_var_112 := dummy_enable_phys_dma($p1, $i2, $i3);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_13: ref;

axiom ldv_dummy_resourceless_instance_callback_15_13 == $sub.ref(0, 861230);

procedure ldv_dummy_resourceless_instance_callback_15_13($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2231} vslice_dummy_var_113 := dummy_flush_iso_completions($p1);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_14: ref;

axiom ldv_dummy_resourceless_instance_callback_15_14 == $sub.ref(0, 862262);

procedure ldv_dummy_resourceless_instance_callback_15_14($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_14($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2232} dummy_flush_queue_iso($p1);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_15: ref;

axiom ldv_dummy_resourceless_instance_callback_15_15 == $sub.ref(0, 863294);

procedure ldv_dummy_resourceless_instance_callback_15_15($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_15($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} {:cexpr "ldv_dummy_resourceless_instance_callback_15_15:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} vslice_dummy_var_114 := dummy_queue_iso($p1, $p2, $p3, $i4);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_18: ref;

axiom ldv_dummy_resourceless_instance_callback_15_18 == $sub.ref(0, 864326);

procedure ldv_dummy_resourceless_instance_callback_15_18($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_18($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} {:cexpr "ldv_dummy_resourceless_instance_callback_15_18:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} vslice_dummy_var_115 := dummy_read_phy_reg($p1, $i2);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_21: ref;

axiom ldv_dummy_resourceless_instance_callback_15_21 == $sub.ref(0, 865358);

procedure ldv_dummy_resourceless_instance_callback_15_21($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation ldv_dummy_resourceless_instance_callback_15_21($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} dummy_send_request($p1, $p2);
    goto SeqInstr_1438, SeqInstr_1439;

  SeqInstr_1439:
    assume assertsPassed;
    goto SeqInstr_1440;

  SeqInstr_1440:
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1438:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_22: ref;

axiom ldv_dummy_resourceless_instance_callback_15_22 == $sub.ref(0, 866390);

procedure ldv_dummy_resourceless_instance_callback_15_22($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation ldv_dummy_resourceless_instance_callback_15_22($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} dummy_send_response($p1, $p2);
    goto SeqInstr_1441, SeqInstr_1442;

  SeqInstr_1442:
    assume assertsPassed;
    goto SeqInstr_1443;

  SeqInstr_1443:
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1441:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_23: ref;

axiom ldv_dummy_resourceless_instance_callback_15_23 == $sub.ref(0, 867422);

procedure ldv_dummy_resourceless_instance_callback_15_23($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_23($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} vslice_dummy_var_116 := dummy_set_iso_channels($p1, $p2);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_26: ref;

axiom ldv_dummy_resourceless_instance_callback_15_26 == $sub.ref(0, 868454);

procedure ldv_dummy_resourceless_instance_callback_15_26($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_26($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} {:cexpr "ldv_dummy_resourceless_instance_callback_15_26:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2241} {:cexpr "ldv_dummy_resourceless_instance_callback_15_26:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2242} {:cexpr "ldv_dummy_resourceless_instance_callback_15_26:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} vslice_dummy_var_117 := dummy_start_iso($p1, $i2, $i3, $i4);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_29: ref;

axiom ldv_dummy_resourceless_instance_callback_15_29 == $sub.ref(0, 869486);

procedure ldv_dummy_resourceless_instance_callback_15_29($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_29($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32)
{
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2244} {:cexpr "ldv_dummy_resourceless_instance_callback_15_29:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2245} {:cexpr "ldv_dummy_resourceless_instance_callback_15_29:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2246} {:cexpr "ldv_dummy_resourceless_instance_callback_15_29:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} vslice_dummy_var_118 := dummy_update_phy_reg($p1, $i2, $i3, $i4);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_3: ref;

axiom ldv_dummy_resourceless_instance_callback_15_3 == $sub.ref(0, 870518);

procedure ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_3($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i64)
{
  var vslice_dummy_var_119: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} {:cexpr "ldv_dummy_resourceless_instance_callback_15_3:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2249} {:cexpr "ldv_dummy_resourceless_instance_callback_15_3:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2250} {:cexpr "ldv_dummy_resourceless_instance_callback_15_3:arg:arg4"} boogie_si_record_i64($i4);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} vslice_dummy_var_119 := dummy_allocate_iso_context($p1, $i2, $i3, $i4);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_15_9: ref;

axiom ldv_dummy_resourceless_instance_callback_15_9 == $sub.ref(0, 871550);

procedure ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_15_9($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} vslice_dummy_var_120 := dummy_cancel_packet($p1, $p2);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_20_1: ref;

axiom ldv_dispatch_deregister_20_1 == $sub.ref(0, 872582);

procedure ldv_dispatch_deregister_20_1($p0: ref);
  free requires assertsPassed;



implementation ldv_dispatch_deregister_20_1($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_21_2: ref;

axiom ldv_dispatch_register_21_2 == $sub.ref(0, 873614);

procedure ldv_dispatch_register_21_2($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.24, $M.26, $M.31, assertsPassed, $M.1, $M.2, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.3, $M.40, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_dispatch_register_21_2($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $p1 := ldv_xmalloc(16);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p0);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} ldv_file_operations_file_operations_instance_0($p4);
    goto SeqInstr_1444, SeqInstr_1445;

  SeqInstr_1445:
    assume assertsPassed;
    goto SeqInstr_1446;

  SeqInstr_1446:
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1444:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_file_operations_instance_0: ref;

axiom ldv_file_operations_file_operations_instance_0 == $sub.ref(0, 874646);

procedure ldv_file_operations_file_operations_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.24, $M.26, $CurrAddr, $M.31, assertsPassed, $M.1, $M.2, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.3, $M.40, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_file_operations_file_operations_instance_0($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $p7 := $u9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $p8 := ldv_xmalloc(504);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $p10 := ldv_xmalloc(976);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} $i12 := ldv_undef_int();
    call {:si_unique_call 2259} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $p14 := $i2p.i64.ref($i13);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $i15 := ldv_undef_int();
    call {:si_unique_call 2261} {:cexpr "tmp___3"} boogie_si_record_i32($i15);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p9);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} ldv_free($p29);
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p11);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} ldv_free($p30);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60 := ldv_file_operations_file_operations_instance_0_loop_$bb7($p7, $p9, $p11, $p14, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $p48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60);
    goto $bb7_last;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $i19 := ldv_file_operations_instance_probe_0_12($p18, $p11, $p9);
    goto SeqInstr_1447, SeqInstr_1448;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  SeqInstr_1449:
    call {:si_unique_call 2265} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i19);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $i20 := ldv_filter_err_code($i19);
    call {:si_unique_call 2267} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i20);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $i21 := ldv_undef_int();
    call {:si_unique_call 2269} {:cexpr "tmp___2"} boogie_si_record_i32($i21);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i20, 0);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} ldv_assume($i26);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} $i27 := ldv_undef_int();
    call {:si_unique_call 2275} {:cexpr "tmp___3"} boogie_si_record_i32($i27);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i28 == 1);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb12_dummy;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, 0);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} ldv_assume($i24);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60 := ldv_file_operations_file_operations_instance_0_loop_$bb10($p7, $p9, $p14, $i31, $i32, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $i40, $p41, $p42, $i43, $i44, $p45, $p46, $p47, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60);
    goto $bb10_last;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} ldv_stop();
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb30_dummy;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} $i50 := ldv_undef_int();
    call {:si_unique_call 2281} {:cexpr "tmp___7"} boogie_si_record_i32($i50);
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i50, 2);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i50, 3);
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i50, 4);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i50, 5);
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i50, 6);
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} ldv_stop();
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb51:
    assume $i56 == 1;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} ldv_file_operations_instance_callback_0_5($u10, $p9, $u4, $u0);
    goto SeqInstr_1468, SeqInstr_1469;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  SeqInstr_1470:
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1468:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i55 == 1;
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_file_operations_instance_callback_0_22($u15, $p9, $u0, $u4);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb43:
    assume $i54 == 1;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_file_operations_instance_callback_0_25($u13, $p9, $u14);
    goto SeqInstr_1465, SeqInstr_1466;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  SeqInstr_1467:
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1465:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i53 == 1;
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_file_operations_instance_callback_0_26($u12, $p9, $p14);
    goto SeqInstr_1462, SeqInstr_1463;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  SeqInstr_1464:
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1462:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} $p57 := ldv_xmalloc(1);
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} $p58 := ldv_xmalloc(8);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_file_operations_instance_callback_0_27($u11, $p9, $p57, $u0, $p59);
    goto SeqInstr_1459, SeqInstr_1460;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  SeqInstr_1461:
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} ldv_free($p57);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_free($p60);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1459:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i51 == 1;
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} ldv_file_operations_instance_callback_0_30($u10, $p9, $u4, $u0);
    goto SeqInstr_1456, SeqInstr_1457;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  SeqInstr_1458:
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1456:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} ldv_file_operations_instance_release_0_2($p49, $p11, $p9);
    goto SeqInstr_1450, SeqInstr_1451;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  SeqInstr_1452:
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1450:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i32 == 1;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} $p35 := ldv_xmalloc(1);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} $p36 := ldv_xmalloc(8);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p14);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i39 := $ule.i64($i38, 2147479552);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} ldv_assume($i40);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} ldv_free($p35);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p37);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} ldv_free($p47);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i44 == 1;
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} ldv_file_operations_instance_write_0_4($p46, $p9, $p35, $u0, $p37);
    goto SeqInstr_1453, SeqInstr_1454;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  SeqInstr_1455:
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1453:
    assume !assertsPassed;
    return;

  SeqInstr_1447:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} ldv_free($p6);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb30_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $i31 := ldv_undef_int();
    call {:si_unique_call 2273} {:cexpr "tmp___4"} boogie_si_record_i32($i31);
    goto corral_source_split_10766;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10749;
}



const ldv_file_operations_instance_probe_0_12: ref;

axiom ldv_file_operations_instance_probe_0_12 == $sub.ref(0, 875678);

procedure ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.31, $M.23, assertsPassed;



implementation ldv_file_operations_instance_probe_0_12($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2297} $i3 := fw_device_op_open($p1, $p2);
    goto SeqInstr_1471, SeqInstr_1472;

  SeqInstr_1472:
    assume assertsPassed;
    goto SeqInstr_1473;

  SeqInstr_1473:
    call {:si_unique_call 2298} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_1471:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 876710);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2299} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2300} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2301} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_file_operations_instance_write_0_4: ref;

axiom ldv_file_operations_instance_write_0_4 == $sub.ref(0, 877742);

procedure ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, assertsPassed;



implementation ldv_file_operations_instance_write_0_4($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_121: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2302} {:cexpr "ldv_file_operations_instance_write_0_4:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 2303} vslice_dummy_var_121 := devirtbounce.48($p0, $p1, $p2, $i3, $p4);
    goto SeqInstr_1474, SeqInstr_1475;

  SeqInstr_1475:
    assume assertsPassed;
    goto SeqInstr_1476;

  SeqInstr_1476:
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1474:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_release_0_2: ref;

axiom ldv_file_operations_instance_release_0_2 == $sub.ref(0, 878774);

procedure ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.24, $M.26, $CurrAddr, assertsPassed, $M.1, $M.2, $M.10, $M.31, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ldv_file_operations_instance_release_0_2($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} vslice_dummy_var_122 := fw_device_op_release($p1, $p2);
    goto SeqInstr_1477, SeqInstr_1478;

  SeqInstr_1478:
    assume assertsPassed;
    goto SeqInstr_1479;

  SeqInstr_1479:
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1477:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_30: ref;

axiom ldv_file_operations_instance_callback_0_30 == $sub.ref(0, 879806);

procedure ldv_file_operations_instance_callback_0_30($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $CurrAddr, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ldv_file_operations_instance_callback_0_30($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_123: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2305} {:cexpr "ldv_file_operations_instance_callback_0_30:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2306} {:cexpr "ldv_file_operations_instance_callback_0_30:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2307} vslice_dummy_var_123 := fw_device_op_ioctl($p1, $i2, $i3);
    goto SeqInstr_1480, SeqInstr_1481;

  SeqInstr_1481:
    assume assertsPassed;
    goto SeqInstr_1482;

  SeqInstr_1482:
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1480:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_27: ref;

axiom ldv_file_operations_instance_callback_0_27 == $sub.ref(0, 880838);

procedure ldv_file_operations_instance_callback_0_27($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, assertsPassed;



implementation ldv_file_operations_instance_callback_0_27($p0: ref, $p1: ref, $p2: ref, $i3: i64, $p4: ref)
{
  var vslice_dummy_var_124: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} {:cexpr "ldv_file_operations_instance_callback_0_27:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2309} vslice_dummy_var_124 := fw_device_op_read($p1, $p2, $i3, $p4);
    goto SeqInstr_1483, SeqInstr_1484;

  SeqInstr_1484:
    assume assertsPassed;
    goto SeqInstr_1485;

  SeqInstr_1485:
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1483:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_26: ref;

axiom ldv_file_operations_instance_callback_0_26 == $sub.ref(0, 881870);

procedure ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation ldv_file_operations_instance_callback_0_26($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2310} vslice_dummy_var_125 := fw_device_op_poll($p1, $p2);
    goto SeqInstr_1486, SeqInstr_1487;

  SeqInstr_1487:
    assume assertsPassed;
    goto SeqInstr_1488;

  SeqInstr_1488:
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1486:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_25: ref;

axiom ldv_file_operations_instance_callback_0_25 == $sub.ref(0, 882902);

procedure ldv_file_operations_instance_callback_0_25($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation ldv_file_operations_instance_callback_0_25($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2311} vslice_dummy_var_126 := fw_device_op_mmap($p1, $p2);
    goto SeqInstr_1489, SeqInstr_1490;

  SeqInstr_1490:
    assume assertsPassed;
    goto SeqInstr_1491;

  SeqInstr_1491:
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1489:
    assume !assertsPassed;
    return;
}



const ldv_file_operations_instance_callback_0_22: ref;

axiom ldv_file_operations_instance_callback_0_22 == $sub.ref(0, 883934);

procedure ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation ldv_file_operations_instance_callback_0_22($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var vslice_dummy_var_127: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} {:cexpr "ldv_file_operations_instance_callback_0_22:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 2313} {:cexpr "ldv_file_operations_instance_callback_0_22:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} vslice_dummy_var_127 := no_llseek($p1, $i2, $i3);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_instance_callback_0_5: ref;

axiom ldv_file_operations_instance_callback_0_5 == $sub.ref(0, 884966);

procedure ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i32, $i3: i64);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $CurrAddr, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ldv_file_operations_instance_callback_0_5($p0: ref, $p1: ref, $i2: i32, $i3: i64)
{
  var vslice_dummy_var_128: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2315} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 2316} {:cexpr "ldv_file_operations_instance_callback_0_5:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} vslice_dummy_var_128 := fw_device_op_compat_ioctl($p1, $i2, $i3);
    goto SeqInstr_1492, SeqInstr_1493;

  SeqInstr_1493:
    assume assertsPassed;
    goto SeqInstr_1494;

  SeqInstr_1494:
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1492:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 885998);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 887030);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2318} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_10887;

  corral_source_split_10887:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2319} ldv_assume($i2);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_register_chrdev: ref;

axiom ldv_register_chrdev == $sub.ref(0, 888062);

procedure ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.15, $M.24, $M.26, $M.31, assertsPassed, $M.1, $M.2, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.3, $M.40, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_register_chrdev($i0: i32, $i1: i32, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2320} {:cexpr "ldv_register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2321} {:cexpr "ldv_register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2322} $i4 := ldv_undef_int();
    call {:si_unique_call 2323} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i0, 0);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2326} ldv_assume($i9);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2324} ldv_assume($i7);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} ldv_dispatch_register_21_2($p3);
    goto SeqInstr_1495, SeqInstr_1496;

  SeqInstr_1496:
    assume assertsPassed;
    goto SeqInstr_1497;

  SeqInstr_1497:
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1495:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev: ref;

axiom ldv_unregister_chrdev == $sub.ref(0, 889094);

procedure ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2327} {:cexpr "ldv_unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2328} ldv_dispatch_deregister_20_1($u9);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_3: ref;

axiom ldv_dummy_resourceless_instance_callback_10_3 == $sub.ref(0, 890126);

procedure ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_10_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_129: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} vslice_dummy_var_129 := show_text_leaf($p1, $p2, $p3);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_11_3: ref;

axiom ldv_dummy_resourceless_instance_callback_11_3 == $sub.ref(0, 891158);

procedure ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_11_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_130: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2330} vslice_dummy_var_130 := units_show($p1, $p2, $p3);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_3: ref;

axiom ldv_dummy_resourceless_instance_callback_4_3 == $sub.ref(0, 892190);

procedure ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ldv_dummy_resourceless_instance_callback_4_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_131: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} vslice_dummy_var_131 := config_rom_show($p1, $p2, $p3);
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_3: ref;

axiom ldv_dummy_resourceless_instance_callback_5_3 == $sub.ref(0, 893222);

procedure ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_132: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2332} vslice_dummy_var_132 := guid_show($p1, $p2, $p3);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_3: ref;

axiom ldv_dummy_resourceless_instance_callback_6_3 == $sub.ref(0, 894254);

procedure ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_133: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_133 := is_local_show($p1, $p2, $p3);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_3: ref;

axiom ldv_dummy_resourceless_instance_callback_7_3 == $sub.ref(0, 895286);

procedure ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_7_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_134: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2334} vslice_dummy_var_134 := modalias_show($p1, $p2, $p3);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_3: ref;

axiom ldv_dummy_resourceless_instance_callback_8_3 == $sub.ref(0, 896318);

procedure ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_8_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_135: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10928;

  corral_source_split_10928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} vslice_dummy_var_135 := rom_index_show($p1, $p2, $p3);
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_3: ref;

axiom ldv_dummy_resourceless_instance_callback_9_3 == $sub.ref(0, 897350);

procedure ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_dummy_resourceless_instance_callback_9_3($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var vslice_dummy_var_136: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10931;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2336} vslice_dummy_var_136 := show_immediate($p1, $p2, $p3);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    return;
}



const ldv_rtc_class_instance_callback_3_4: ref;

axiom ldv_rtc_class_instance_callback_3_4 == $sub.ref(0, 898382);

procedure ldv_rtc_class_instance_callback_3_4($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28;



implementation ldv_rtc_class_instance_callback_3_4($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} vslice_dummy_var_137 := fw_unit_uevent($p1, $p2);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    return;
}



const ldv_rtc_class_instance_release_3_2: ref;

axiom ldv_rtc_class_instance_release_3_2 == $sub.ref(0, 899414);

procedure ldv_rtc_class_instance_release_3_2($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_rtc_class_instance_release_3_2($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2338} fw_unit_release($p1);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_exit_fw_core_cleanup_22_2: ref;

axiom ldv_EMGentry_exit_fw_core_cleanup_22_2 == $sub.ref(0, 900446);

procedure ldv_EMGentry_exit_fw_core_cleanup_22_2($p0: ref);
  free requires assertsPassed;
  modifies $M.23, $M.62, assertsPassed;



implementation ldv_EMGentry_exit_fw_core_cleanup_22_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} fw_core_cleanup();
    goto SeqInstr_1498, SeqInstr_1499;

  SeqInstr_1499:
    assume assertsPassed;
    goto SeqInstr_1500;

  SeqInstr_1500:
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1498:
    assume !assertsPassed;
    return;
}



const fw_core_cleanup: ref;

axiom fw_core_cleanup == $sub.ref(0, 901478);

procedure fw_core_cleanup();
  free requires assertsPassed;
  modifies $M.23, $M.62, assertsPassed;



implementation fw_core_cleanup()
{
  var $i0: i32;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i0 := $M.18;
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2340} ldv_unregister_chrdev_127($i0, .str.8);
    goto SeqInstr_1501, SeqInstr_1502;

  SeqInstr_1502:
    assume assertsPassed;
    goto SeqInstr_1503;

  SeqInstr_1503:
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} bus_unregister(fw_bus_type);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p1 := $M.5;
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2342} destroy_workqueue($p1);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} ldv_idr_destroy_128(fw_device_idr);
    goto SeqInstr_1504, SeqInstr_1505;

  SeqInstr_1505:
    assume assertsPassed;
    goto SeqInstr_1506;

  SeqInstr_1506:
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1504:
    assume !assertsPassed;
    return;

  SeqInstr_1501:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev_127: ref;

axiom ldv_unregister_chrdev_127 == $sub.ref(0, 902510);

procedure ldv_unregister_chrdev_127($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.62, assertsPassed;



implementation ldv_unregister_chrdev_127($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2344} {:cexpr "ldv_unregister_chrdev_127:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} unregister_chrdev($i0, $p1);
    goto SeqInstr_1507, SeqInstr_1508;

  SeqInstr_1508:
    assume assertsPassed;
    goto SeqInstr_1509;

  SeqInstr_1509:
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2346} ldv_unregister_chrdev($0.ref, $i0, $p1);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1507:
    assume !assertsPassed;
    return;
}



const bus_unregister: ref;

axiom bus_unregister == $sub.ref(0, 903542);

procedure bus_unregister($p0: ref);
  free requires assertsPassed;



implementation bus_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 904574);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    return;
}



const ldv_idr_destroy_128: ref;

axiom ldv_idr_destroy_128 == $sub.ref(0, 905606);

procedure ldv_idr_destroy_128($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_idr_destroy_128($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2347} ldv_linux_lib_idr_idr_destroy_fw_device_idr();
    goto SeqInstr_1510, SeqInstr_1511;

  SeqInstr_1511:
    assume assertsPassed;
    goto SeqInstr_1512;

  SeqInstr_1512:
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1510:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_idr_destroy_fw_device_idr: ref;

axiom ldv_linux_lib_idr_idr_destroy_fw_device_idr == $sub.ref(0, 906638);

procedure ldv_linux_lib_idr_idr_destroy_fw_device_idr();
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_linux_lib_idr_idr_destroy_fw_device_idr()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2348} ldv_assert_linux_lib_idr__not_initialized($i2);
    goto SeqInstr_1513, SeqInstr_1514;

  SeqInstr_1514:
    assume assertsPassed;
    goto SeqInstr_1515;

  SeqInstr_1515:
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 3);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} ldv_assert_linux_lib_idr__destroyed_before_usage($i5);
    goto SeqInstr_1516, SeqInstr_1517;

  SeqInstr_1517:
    assume assertsPassed;
    goto SeqInstr_1518;

  SeqInstr_1518:
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $M.23 := 3;
    call {:si_unique_call 2350} {:cexpr "ldv_linux_lib_idr_idr_fw_device_idr"} boogie_si_record_i32(3);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1516:
    assume !assertsPassed;
    return;

  SeqInstr_1513:
    assume !assertsPassed;
    return;
}



const unregister_chrdev: ref;

axiom unregister_chrdev == $sub.ref(0, 907670);

procedure unregister_chrdev($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.62, assertsPassed;



implementation unregister_chrdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} {:cexpr "unregister_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2352} ldv_unregister_chrdev_76($i0, $p1);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} ldv_linux_fs_char_dev_unregister_chrdev_region();
    goto SeqInstr_1519, SeqInstr_1520;

  SeqInstr_1520:
    assume assertsPassed;
    goto SeqInstr_1521;

  SeqInstr_1521:
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2354} ldv_linux_usb_gadget_unregister_chrdev_region();
    goto SeqInstr_1522, SeqInstr_1523;

  SeqInstr_1523:
    assume assertsPassed;
    goto SeqInstr_1524;

  SeqInstr_1524:
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1522:
    assume !assertsPassed;
    return;

  SeqInstr_1519:
    assume !assertsPassed;
    return;
}



const ldv_unregister_chrdev_76: ref;

axiom ldv_unregister_chrdev_76 == $sub.ref(0, 908702);

procedure ldv_unregister_chrdev_76($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation ldv_unregister_chrdev_76($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2355} {:cexpr "ldv_unregister_chrdev_76:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} __unregister_chrdev($i0, 0, 256, $p1);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_fs_char_dev_unregister_chrdev_region: ref;

axiom ldv_linux_fs_char_dev_unregister_chrdev_region == $sub.ref(0, 909734);

procedure ldv_linux_fs_char_dev_unregister_chrdev_region();
  free requires assertsPassed;
  modifies $M.62, assertsPassed;



implementation ldv_linux_fs_char_dev_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    $i0 := $M.62;
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2357} ldv_assert_linux_fs_char_dev__double_deregistration($i2);
    goto SeqInstr_1525, SeqInstr_1526;

  SeqInstr_1526:
    assume assertsPassed;
    goto SeqInstr_1527;

  SeqInstr_1527:
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $M.62 := 0;
    call {:si_unique_call 2358} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1525:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_unregister_chrdev_region: ref;

axiom ldv_linux_usb_gadget_unregister_chrdev_region == $sub.ref(0, 910766);

procedure ldv_linux_usb_gadget_unregister_chrdev_region();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_unregister_chrdev_region()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i0 := $M.63;
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2359} ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i2);
    goto SeqInstr_1528, SeqInstr_1529;

  SeqInstr_1529:
    assume assertsPassed;
    goto SeqInstr_1530;

  SeqInstr_1530:
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1528:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget == $sub.ref(0, 911798);

procedure ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_deregistration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2361} __VERIFIER_error();
    goto SeqInstr_1531, SeqInstr_1532;

  SeqInstr_1532:
    assume assertsPassed;
    goto SeqInstr_1533;

  SeqInstr_1533:
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1531:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_deregistration: ref;

axiom ldv_assert_linux_fs_char_dev__double_deregistration == $sub.ref(0, 912830);

procedure ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_deregistration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2362} {:cexpr "ldv_assert_linux_fs_char_dev__double_deregistration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2363} __VERIFIER_error();
    goto SeqInstr_1534, SeqInstr_1535;

  SeqInstr_1535:
    assume assertsPassed;
    goto SeqInstr_1536;

  SeqInstr_1536:
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1534:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 913862);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2364} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2365} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2366} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_fw_core_init_22_19: ref;

axiom ldv_EMGentry_init_fw_core_init_22_19 == $sub.ref(0, 914894);

procedure ldv_EMGentry_init_fw_core_init_22_19($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.18, $M.0, $M.1, $M.2, $M.38, $M.39, $CurrAddr, $M.40, $M.3, $M.62, assertsPassed, $M.15, $M.24, $M.26, $M.31, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.34, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_EMGentry_init_fw_core_init_22_19($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} $i1 := fw_core_init();
    goto SeqInstr_1537, SeqInstr_1538;

  SeqInstr_1538:
    assume assertsPassed;
    goto SeqInstr_1539;

  SeqInstr_1539:
    call {:si_unique_call 2368} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1537:
    assume !assertsPassed;
    return;
}



const fw_core_init: ref;

axiom fw_core_init == $sub.ref(0, 915926);

procedure fw_core_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.18, $M.0, $M.1, $M.2, $M.38, $M.39, $CurrAddr, $M.40, $M.3, $M.62, assertsPassed, $M.15, $M.24, $M.26, $M.31, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.34, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation fw_core_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i5: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2370} $p1 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.8, 8, 0, $p0, .str.95);
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $M.5 := $p1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p2 := $M.5;
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2371} $i6 := bus_register(fw_bus_type);
    call {:si_unique_call 2372} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2374} $i9 := ldv_register_chrdev_126(0, .str.8, fw_device_ops);
    goto SeqInstr_1540, SeqInstr_1541;

  SeqInstr_1541:
    assume assertsPassed;
    goto SeqInstr_1542;

  SeqInstr_1542:
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $M.18 := $i9;
    call {:si_unique_call 2375} {:cexpr "fw_cdev_major"} boogie_si_record_i32($i9);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $i10 := $M.18;
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2378} vslice_dummy_var_138 := fw_core_add_address_handler(topology_map, topology_map_region);
    goto SeqInstr_1543, SeqInstr_1544;

  SeqInstr_1544:
    assume assertsPassed;
    goto SeqInstr_1545;

  SeqInstr_1545:
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2379} vslice_dummy_var_139 := fw_core_add_address_handler(registers, registers_region);
    goto SeqInstr_1546, SeqInstr_1547;

  SeqInstr_1547:
    assume assertsPassed;
    goto SeqInstr_1548;

  SeqInstr_1548:
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2380} vslice_dummy_var_140 := fw_core_add_address_handler(low_memory, low_memory_region);
    goto SeqInstr_1549, SeqInstr_1550;

  SeqInstr_1550:
    assume assertsPassed;
    goto SeqInstr_1551;

  SeqInstr_1551:
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} vslice_dummy_var_141 := fw_core_add_descriptor(vendor_id_descriptor);
    goto SeqInstr_1552, SeqInstr_1553;

  SeqInstr_1553:
    assume assertsPassed;
    goto SeqInstr_1554;

  SeqInstr_1554:
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2382} vslice_dummy_var_142 := fw_core_add_descriptor(model_id_descriptor);
    goto SeqInstr_1555, SeqInstr_1556;

  SeqInstr_1556:
    assume assertsPassed;
    goto SeqInstr_1557;

  SeqInstr_1557:
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  SeqInstr_1555:
    assume !assertsPassed;
    return;

  SeqInstr_1552:
    assume !assertsPassed;
    return;

  SeqInstr_1549:
    assume !assertsPassed;
    return;

  SeqInstr_1546:
    assume !assertsPassed;
    return;

  SeqInstr_1543:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} bus_unregister(fw_bus_type);
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $p12 := $M.5;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2377} destroy_workqueue($p12);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i13 := $M.18;
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  SeqInstr_1540:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $p8 := $M.5;
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} destroy_workqueue($p8);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 916958);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2384} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} $p5 := external_alloc();
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const bus_register: ref;

axiom bus_register == $sub.ref(0, 917990);

procedure bus_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation bus_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2386} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 2387} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_register_chrdev_126: ref;

axiom ldv_register_chrdev_126 == $sub.ref(0, 919022);

procedure ldv_register_chrdev_126($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.62, $CurrAddr, $M.15, $M.24, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.23, $M.3, $M.40, $M.34, $M.38, $M.39, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_register_chrdev_126($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2388} {:cexpr "ldv_register_chrdev_126:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} $i3 := register_chrdev($i0, $p1, $p2);
    goto SeqInstr_1558, SeqInstr_1559;

  SeqInstr_1559:
    assume assertsPassed;
    goto SeqInstr_1560;

  SeqInstr_1560:
    call {:si_unique_call 2390} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2391} $i4 := ldv_register_chrdev($i3, $i0, $p1, $p2);
    goto SeqInstr_1561, SeqInstr_1562;

  SeqInstr_1562:
    assume assertsPassed;
    goto SeqInstr_1563;

  SeqInstr_1563:
    call {:si_unique_call 2392} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1561:
    assume !assertsPassed;
    return;

  SeqInstr_1558:
    assume !assertsPassed;
    return;
}



const register_chrdev: ref;

axiom register_chrdev == $sub.ref(0, 920054);

procedure register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, assertsPassed;



implementation register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2393} {:cexpr "register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} $i3 := ldv_register_chrdev_75($i0, $p1, $p2);
    call {:si_unique_call 2395} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} $i4 := ldv_linux_fs_char_dev_register_chrdev($i0);
    goto SeqInstr_1564, SeqInstr_1565;

  SeqInstr_1565:
    assume assertsPassed;
    goto SeqInstr_1566;

  SeqInstr_1566:
    call {:si_unique_call 2397} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} $i5 := ldv_linux_usb_gadget_register_chrdev($i0);
    goto SeqInstr_1567, SeqInstr_1568;

  SeqInstr_1568:
    assume assertsPassed;
    goto SeqInstr_1569;

  SeqInstr_1569:
    call {:si_unique_call 2399} {:cexpr "tmp___1"} boogie_si_record_i32($i5);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i4, $i5);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} ldv_assume($i7);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_1567:
    assume !assertsPassed;
    return;

  SeqInstr_1564:
    assume !assertsPassed;
    return;
}



const ldv_register_chrdev_75: ref;

axiom ldv_register_chrdev_75 == $sub.ref(0, 921086);

procedure ldv_register_chrdev_75($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_register_chrdev_75($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} {:cexpr "ldv_register_chrdev_75:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
    call {:si_unique_call 2403} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_linux_fs_char_dev_register_chrdev: ref;

axiom ldv_linux_fs_char_dev_register_chrdev == $sub.ref(0, 922118);

procedure ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, assertsPassed;



implementation ldv_linux_fs_char_dev_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} {:cexpr "ldv_linux_fs_char_dev_register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2406} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i3 := $M.62;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} ldv_assert_linux_fs_char_dev__double_registration($i5);
    goto SeqInstr_1570, SeqInstr_1571;

  SeqInstr_1571:
    assume assertsPassed;
    goto SeqInstr_1572;

  SeqInstr_1572:
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $M.62 := 1;
    call {:si_unique_call 2408} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(1);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2409} $i7 := ldv_undef_int();
    call {:si_unique_call 2410} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} ldv_assume($i9);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_1570:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_register_chrdev: ref;

axiom ldv_linux_usb_gadget_register_chrdev == $sub.ref(0, 923150);

procedure ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_register_chrdev($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2412} {:cexpr "ldv_linux_usb_gadget_register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i1 := ldv_undef_int_nonpositive();
    call {:si_unique_call 2414} {:cexpr "is_reg"} boogie_si_record_i32($i1);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $i3 := $M.63;
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2415} ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i5);
    goto SeqInstr_1573, SeqInstr_1574;

  SeqInstr_1574:
    assume assertsPassed;
    goto SeqInstr_1575;

  SeqInstr_1575:
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 0);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2416} $i7 := ldv_undef_int();
    call {:si_unique_call 2417} {:cexpr "is_reg"} boogie_si_record_i32($i7);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2418} ldv_assume($i9);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i10 := $i7;
    goto $bb5;

  SeqInstr_1573:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget: ref;

axiom ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget == $sub.ref(0, 924182);

procedure ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2419} {:cexpr "ldv_assert_linux_usb_gadget__chrdev_registration_with_usb_gadget:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2420} __VERIFIER_error();
    goto SeqInstr_1576, SeqInstr_1577;

  SeqInstr_1577:
    assume assertsPassed;
    goto SeqInstr_1578;

  SeqInstr_1578:
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1576:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__double_registration: ref;

axiom ldv_assert_linux_fs_char_dev__double_registration == $sub.ref(0, 925214);

procedure ldv_assert_linux_fs_char_dev__double_registration($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__double_registration($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2421} {:cexpr "ldv_assert_linux_fs_char_dev__double_registration:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2422} __VERIFIER_error();
    goto SeqInstr_1579, SeqInstr_1580;

  SeqInstr_1580:
    assume assertsPassed;
    goto SeqInstr_1581;

  SeqInstr_1581:
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1579:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 926246);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2423} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2424} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2425} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2426} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 2427} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_10_22_4: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_10_22_4 == $sub.ref(0, 927278);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_10_22_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_10_22_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_11_22_5: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_11_22_5 == $sub.ref(0, 928310);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_11_22_5();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_11_22_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_12_22_6: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_12_22_6 == $sub.ref(0, 929342);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_12_22_6();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_12_22_6()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_dummy_resourceless_instance_9_22_7: ref;

axiom ldv_dispatch_deregister_dummy_resourceless_instance_9_22_7 == $sub.ref(0, 930374);

procedure ldv_dispatch_deregister_dummy_resourceless_instance_9_22_7();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_dummy_resourceless_instance_9_22_7()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_platform_instance_7_22_8: ref;

axiom ldv_dispatch_deregister_platform_instance_7_22_8 == $sub.ref(0, 931406);

procedure ldv_dispatch_deregister_platform_instance_7_22_8();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_platform_instance_7_22_8()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_deregister_rtc_class_instance_8_22_9: ref;

axiom ldv_dispatch_deregister_rtc_class_instance_8_22_9 == $sub.ref(0, 932438);

procedure ldv_dispatch_deregister_rtc_class_instance_8_22_9();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_rtc_class_instance_8_22_9()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_deregister_2_5: ref;

axiom ldv_dispatch_pm_deregister_2_5 == $sub.ref(0, 933470);

procedure ldv_dispatch_pm_deregister_2_5();
  free requires assertsPassed;



implementation ldv_dispatch_pm_deregister_2_5()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_pm_register_2_6: ref;

axiom ldv_dispatch_pm_register_2_6 == $sub.ref(0, 934502);

procedure ldv_dispatch_pm_register_2_6();
  free requires assertsPassed;
  modifies $CurrAddr, $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.15, $M.23, $M.3, $M.26, $M.31, $M.40, $M.24, $M.38, $M.39, $M.27, $M.28, $M.13, assertsPassed, $M.16, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_dispatch_pm_register_2_6()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2429} ldv_pm_pm_ops_instance_1($p2);
    goto SeqInstr_1582, SeqInstr_1583;

  SeqInstr_1583:
    assume assertsPassed;
    goto SeqInstr_1584;

  SeqInstr_1584:
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1582:
    assume !assertsPassed;
    return;
}



const ldv_pm_pm_ops_instance_1: ref;

axiom ldv_pm_pm_ops_instance_1 == $sub.ref(0, 935534);

procedure ldv_pm_pm_ops_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.15, $M.23, $M.3, $M.26, $M.31, $M.40, $M.24, $M.38, $M.39, $CurrAddr, $M.27, $M.28, $M.13, assertsPassed, $M.16, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_pm_ops_instance_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $i146: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154 := ldv_pm_pm_ops_instance_1_loop_$bb1($i1, $i2, $i3, $i4, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $i31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $p48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $i79, $i80, $p81, $p82, $i83, $i84, $p85, $p86, $p87, $p88, $i89, $i90, $p91, $p92, $p93, $p94, $i95, $i96, $p97, $p98, $p99, $p100, $i101, $i102, $p103, $p104, $p105, $p106, $i107, $i108, $p109, $p110, $p111, $p112, $i113, $i114, $p115, $p116, $i117, $i118, $p119, $p120, $i121, $i122, $p123, $p124, $p125, $p126, $i127, $i128, $p129, $p130, $p131, $p132, $i133, $i134, $p135, $p136, $p137, $p138, $i139, $i140, $p141, $p142, $p143, $p144, $i145, $i146, $p147, $p148, $p149, $p150, $i151, $i152, $p153, $p154);
    goto $bb1_last;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 2);
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 3);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $i5 := $i1;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 4);
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} ldv_stop();
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb10:
    assume $i4 == 1;
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.70, $p25);
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $i31 := ldv_undef_int();
    call {:si_unique_call 2438} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 1);
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i31, 2);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i31, 3);
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} ldv_stop();
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.108, $p149);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    $i151 := $p2i.ref.i64($p150);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb110:
    assume $i152 == 1;
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.109, $p153);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} ldv_pm_ops_instance_complete_1_3($p154, $u17);
    goto SeqInstr_1651, SeqInstr_1652;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  SeqInstr_1653:
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_1651:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i34 == 1;
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.96, $p111);
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $i117 := ldv_undef_int();
    call {:si_unique_call 2458} {:cexpr "tmp___3"} boogie_si_record_i32($i117);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i118 == 1);
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.102, $p131);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.104, $p137);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.106, $p143);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $i145 := $p2i.ref.i64($p144);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_11400;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb106:
    assume $i146 == 1;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.107, $p147);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} ldv_pm_ops_instance_restore_1_4($p148, $u17);
    goto SeqInstr_1648, SeqInstr_1649;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  SeqInstr_1650:
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_1648:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i140 == 1;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.105, $p141);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} ldv_pm_ops_instance_restore_noirq_1_5($p142, $u17);
    goto SeqInstr_1645, SeqInstr_1646;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  SeqInstr_1647:
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_1645:
    assume !assertsPassed;
    return;

  $bb100:
    assume $i134 == 1;
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.103, $p135);
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} ldv_pm_ops_instance_poweroff_noirq_1_6($p136, $u17);
    goto SeqInstr_1642, SeqInstr_1643;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  SeqInstr_1644:
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_1642:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i118 == 1;
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.98, $p119);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.100, $p125);
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume $i128 == 1;
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.101, $p129);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} ldv_pm_ops_instance_restore_early_1_7($p130, $u17);
    goto SeqInstr_1639, SeqInstr_1640;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  SeqInstr_1641:
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_1639:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i122 == 1;
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.99, $p123);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} ldv_pm_ops_instance_poweroff_late_1_8($p124, $u17);
    goto SeqInstr_1636, SeqInstr_1637;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  SeqInstr_1638:
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_1636:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i114 == 1;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.97, $p115);
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} ldv_pm_ops_instance_poweroff_1_9($p116, $u17);
    goto SeqInstr_1633, SeqInstr_1634;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  SeqInstr_1635:
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_1633:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i33 == 1;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.84, $p73);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $i79 := ldv_undef_int();
    call {:si_unique_call 2450} {:cexpr "tmp___2"} boogie_si_record_i32($i79);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i80 == 1);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.90, $p93);
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.92, $p99);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p100);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.94, $p105);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb85:
    assume $i108 == 1;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.95, $p109);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} ldv_pm_ops_instance_thaw_1_10($p110, $u17);
    goto SeqInstr_1630, SeqInstr_1631;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  SeqInstr_1632:
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_1630:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i102 == 1;
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.93, $p103);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} ldv_pm_ops_instance_thaw_noirq_1_11($p104, $u17);
    goto SeqInstr_1627, SeqInstr_1628;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  SeqInstr_1629:
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1627:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i96 == 1;
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.91, $p97);
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} ldv_pm_ops_instance_freeze_noirq_1_12($p98, $u17);
    goto SeqInstr_1624, SeqInstr_1625;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  SeqInstr_1626:
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_1624:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i80 == 1;
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.86, $p81);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.88, $p87);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i90 == 1;
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.89, $p91);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} ldv_pm_ops_instance_thaw_early_1_13($p92, $u17);
    goto SeqInstr_1621, SeqInstr_1622;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  SeqInstr_1623:
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_1621:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.87, $p85);
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} ldv_pm_ops_instance_freeze_late_1_14($p86, $u17);
    goto SeqInstr_1618, SeqInstr_1619;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  SeqInstr_1620:
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_1618:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i76 == 1;
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.85, $p77);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} ldv_pm_ops_instance_freeze_1_15($p78, $u17);
    goto SeqInstr_1615, SeqInstr_1616;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  SeqInstr_1617:
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_1615:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i32 == 1;
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.72, $p35);
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $i41 := ldv_undef_int();
    call {:si_unique_call 2442} {:cexpr "tmp___1"} boogie_si_record_i32($i41);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i42 == 1);
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.78, $p55);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.80, $p61);
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.82, $p67);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i70 == 1;
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.83, $p71);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} ldv_pm_ops_instance_resume_1_16($p72, $u17);
    goto SeqInstr_1612, SeqInstr_1613;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  SeqInstr_1614:
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_1612:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i64 == 1;
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.81, $p65);
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} ldv_pm_ops_instance_resume_early_1_17($p66, $u17);
    goto SeqInstr_1609, SeqInstr_1610;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  SeqInstr_1611:
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_1609:
    assume !assertsPassed;
    return;

  $bb57:
    assume $i58 == 1;
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.79, $p59);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} ldv_pm_ops_instance_suspend_late_1_18($p60, $u17);
    goto SeqInstr_1606, SeqInstr_1607;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  SeqInstr_1608:
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_1606:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i42 == 1;
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.74, $p43);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.76, $p49);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i52 == 1;
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.77, $p53);
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} ldv_pm_ops_instance_resume_noirq_1_19($p54, $u17);
    goto SeqInstr_1603, SeqInstr_1604;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  SeqInstr_1605:
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_1603:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i46 == 1;
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.75, $p47);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} ldv_pm_ops_instance_suspend_noirq_1_20($p48, $u17);
    goto SeqInstr_1600, SeqInstr_1601;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  SeqInstr_1602:
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1600:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i38 == 1;
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.73, $p39);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} ldv_pm_ops_instance_suspend_1_21($p40, $u17);
    goto SeqInstr_1597, SeqInstr_1598;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  SeqInstr_1599:
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_1597:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.71, $p29);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} ldv_pm_ops_instance_prepare_1_22($p30, $u17);
    goto SeqInstr_1594, SeqInstr_1595;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  SeqInstr_1596:
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1594:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.66, $p13);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.68, $p19);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume $i22 == 1;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.69, $p23);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} ldv_pm_ops_instance_runtime_resume_1_24($p24, $u17);
    goto SeqInstr_1591, SeqInstr_1592;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  SeqInstr_1593:
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1591:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i16 == 1;
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.67, $p17);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} ldv_pm_ops_instance_runtime_suspend_1_25($p18, $u17);
    goto SeqInstr_1588, SeqInstr_1589;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  SeqInstr_1590:
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1588:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i2 == 1;
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.64, $p7);
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.65, $p11);
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} ldv_pm_ops_instance_runtime_idle_1_27($p12, $u17);
    goto SeqInstr_1585, SeqInstr_1586;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  SeqInstr_1587:
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1585:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} $i1 := ldv_undef_int();
    call {:si_unique_call 2431} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11148;
}



const ldv_pm_ops_instance_runtime_idle_1_27: ref;

axiom ldv_pm_ops_instance_runtime_idle_1_27 == $sub.ref(0, 936566);

procedure ldv_pm_ops_instance_runtime_idle_1_27($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_runtime_idle_1_27($p0: ref, $p1: ref)
{
  var vslice_dummy_var_143: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} vslice_dummy_var_143 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1654, SeqInstr_1655;

  SeqInstr_1655:
    assume assertsPassed;
    goto SeqInstr_1656;

  SeqInstr_1656:
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1654:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_suspend_1_25: ref;

axiom ldv_pm_ops_instance_runtime_suspend_1_25 == $sub.ref(0, 937598);

procedure ldv_pm_ops_instance_runtime_suspend_1_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_runtime_suspend_1_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} vslice_dummy_var_144 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1657, SeqInstr_1658;

  SeqInstr_1658:
    assume assertsPassed;
    goto SeqInstr_1659;

  SeqInstr_1659:
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1657:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_runtime_resume_1_24: ref;

axiom ldv_pm_ops_instance_runtime_resume_1_24 == $sub.ref(0, 938630);

procedure ldv_pm_ops_instance_runtime_resume_1_24($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_runtime_resume_1_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} vslice_dummy_var_145 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1660, SeqInstr_1661;

  SeqInstr_1661:
    assume assertsPassed;
    goto SeqInstr_1662;

  SeqInstr_1662:
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1660:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_prepare_1_22: ref;

axiom ldv_pm_ops_instance_prepare_1_22 == $sub.ref(0, 939662);

procedure ldv_pm_ops_instance_prepare_1_22($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_prepare_1_22($p0: ref, $p1: ref)
{
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} vslice_dummy_var_146 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1663, SeqInstr_1664;

  SeqInstr_1664:
    assume assertsPassed;
    goto SeqInstr_1665;

  SeqInstr_1665:
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1663:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_1_21: ref;

axiom ldv_pm_ops_instance_suspend_1_21 == $sub.ref(0, 940694);

procedure ldv_pm_ops_instance_suspend_1_21($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_suspend_1_21($p0: ref, $p1: ref)
{
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} vslice_dummy_var_147 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1666, SeqInstr_1667;

  SeqInstr_1667:
    assume assertsPassed;
    goto SeqInstr_1668;

  SeqInstr_1668:
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1666:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_noirq_1_20: ref;

axiom ldv_pm_ops_instance_suspend_noirq_1_20 == $sub.ref(0, 941726);

procedure ldv_pm_ops_instance_suspend_noirq_1_20($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_suspend_noirq_1_20($p0: ref, $p1: ref)
{
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} vslice_dummy_var_148 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1669, SeqInstr_1670;

  SeqInstr_1670:
    assume assertsPassed;
    goto SeqInstr_1671;

  SeqInstr_1671:
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1669:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_noirq_1_19: ref;

axiom ldv_pm_ops_instance_resume_noirq_1_19 == $sub.ref(0, 942758);

procedure ldv_pm_ops_instance_resume_noirq_1_19($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_resume_noirq_1_19($p0: ref, $p1: ref)
{
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} vslice_dummy_var_149 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1672, SeqInstr_1673;

  SeqInstr_1673:
    assume assertsPassed;
    goto SeqInstr_1674;

  SeqInstr_1674:
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1672:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_suspend_late_1_18: ref;

axiom ldv_pm_ops_instance_suspend_late_1_18 == $sub.ref(0, 943790);

procedure ldv_pm_ops_instance_suspend_late_1_18($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_suspend_late_1_18($p0: ref, $p1: ref)
{
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} vslice_dummy_var_150 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1675, SeqInstr_1676;

  SeqInstr_1676:
    assume assertsPassed;
    goto SeqInstr_1677;

  SeqInstr_1677:
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1675:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_early_1_17: ref;

axiom ldv_pm_ops_instance_resume_early_1_17 == $sub.ref(0, 944822);

procedure ldv_pm_ops_instance_resume_early_1_17($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_resume_early_1_17($p0: ref, $p1: ref)
{
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} vslice_dummy_var_151 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1678, SeqInstr_1679;

  SeqInstr_1679:
    assume assertsPassed;
    goto SeqInstr_1680;

  SeqInstr_1680:
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1678:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_resume_1_16: ref;

axiom ldv_pm_ops_instance_resume_1_16 == $sub.ref(0, 945854);

procedure ldv_pm_ops_instance_resume_1_16($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_resume_1_16($p0: ref, $p1: ref)
{
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} vslice_dummy_var_152 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1681, SeqInstr_1682;

  SeqInstr_1682:
    assume assertsPassed;
    goto SeqInstr_1683;

  SeqInstr_1683:
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1681:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_1_15: ref;

axiom ldv_pm_ops_instance_freeze_1_15 == $sub.ref(0, 946886);

procedure ldv_pm_ops_instance_freeze_1_15($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_freeze_1_15($p0: ref, $p1: ref)
{
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} vslice_dummy_var_153 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1684, SeqInstr_1685;

  SeqInstr_1685:
    assume assertsPassed;
    goto SeqInstr_1686;

  SeqInstr_1686:
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1684:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_late_1_14: ref;

axiom ldv_pm_ops_instance_freeze_late_1_14 == $sub.ref(0, 947918);

procedure ldv_pm_ops_instance_freeze_late_1_14($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_freeze_late_1_14($p0: ref, $p1: ref)
{
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} vslice_dummy_var_154 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1687, SeqInstr_1688;

  SeqInstr_1688:
    assume assertsPassed;
    goto SeqInstr_1689;

  SeqInstr_1689:
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1687:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_early_1_13: ref;

axiom ldv_pm_ops_instance_thaw_early_1_13 == $sub.ref(0, 948950);

procedure ldv_pm_ops_instance_thaw_early_1_13($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_thaw_early_1_13($p0: ref, $p1: ref)
{
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} vslice_dummy_var_155 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1690, SeqInstr_1691;

  SeqInstr_1691:
    assume assertsPassed;
    goto SeqInstr_1692;

  SeqInstr_1692:
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1690:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_freeze_noirq_1_12: ref;

axiom ldv_pm_ops_instance_freeze_noirq_1_12 == $sub.ref(0, 949982);

procedure ldv_pm_ops_instance_freeze_noirq_1_12($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_freeze_noirq_1_12($p0: ref, $p1: ref)
{
  var vslice_dummy_var_156: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} vslice_dummy_var_156 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1693, SeqInstr_1694;

  SeqInstr_1694:
    assume assertsPassed;
    goto SeqInstr_1695;

  SeqInstr_1695:
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1693:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_noirq_1_11: ref;

axiom ldv_pm_ops_instance_thaw_noirq_1_11 == $sub.ref(0, 951014);

procedure ldv_pm_ops_instance_thaw_noirq_1_11($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_thaw_noirq_1_11($p0: ref, $p1: ref)
{
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} vslice_dummy_var_157 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1696, SeqInstr_1697;

  SeqInstr_1697:
    assume assertsPassed;
    goto SeqInstr_1698;

  SeqInstr_1698:
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1696:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_thaw_1_10: ref;

axiom ldv_pm_ops_instance_thaw_1_10 == $sub.ref(0, 952046);

procedure ldv_pm_ops_instance_thaw_1_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_thaw_1_10($p0: ref, $p1: ref)
{
  var vslice_dummy_var_158: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} vslice_dummy_var_158 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1699, SeqInstr_1700;

  SeqInstr_1700:
    assume assertsPassed;
    goto SeqInstr_1701;

  SeqInstr_1701:
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1699:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_1_9: ref;

axiom ldv_pm_ops_instance_poweroff_1_9 == $sub.ref(0, 953078);

procedure ldv_pm_ops_instance_poweroff_1_9($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_poweroff_1_9($p0: ref, $p1: ref)
{
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} vslice_dummy_var_159 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1702, SeqInstr_1703;

  SeqInstr_1703:
    assume assertsPassed;
    goto SeqInstr_1704;

  SeqInstr_1704:
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1702:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_late_1_8: ref;

axiom ldv_pm_ops_instance_poweroff_late_1_8 == $sub.ref(0, 954110);

procedure ldv_pm_ops_instance_poweroff_late_1_8($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_poweroff_late_1_8($p0: ref, $p1: ref)
{
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} vslice_dummy_var_160 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1705, SeqInstr_1706;

  SeqInstr_1706:
    assume assertsPassed;
    goto SeqInstr_1707;

  SeqInstr_1707:
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1705:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_early_1_7: ref;

axiom ldv_pm_ops_instance_restore_early_1_7 == $sub.ref(0, 955142);

procedure ldv_pm_ops_instance_restore_early_1_7($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_restore_early_1_7($p0: ref, $p1: ref)
{
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} vslice_dummy_var_161 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1708, SeqInstr_1709;

  SeqInstr_1709:
    assume assertsPassed;
    goto SeqInstr_1710;

  SeqInstr_1710:
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1708:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_poweroff_noirq_1_6: ref;

axiom ldv_pm_ops_instance_poweroff_noirq_1_6 == $sub.ref(0, 956174);

procedure ldv_pm_ops_instance_poweroff_noirq_1_6($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_poweroff_noirq_1_6($p0: ref, $p1: ref)
{
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} vslice_dummy_var_162 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1711, SeqInstr_1712;

  SeqInstr_1712:
    assume assertsPassed;
    goto SeqInstr_1713;

  SeqInstr_1713:
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1711:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_noirq_1_5: ref;

axiom ldv_pm_ops_instance_restore_noirq_1_5 == $sub.ref(0, 957206);

procedure ldv_pm_ops_instance_restore_noirq_1_5($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_restore_noirq_1_5($p0: ref, $p1: ref)
{
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} vslice_dummy_var_163 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1714, SeqInstr_1715;

  SeqInstr_1715:
    assume assertsPassed;
    goto SeqInstr_1716;

  SeqInstr_1716:
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1714:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_restore_1_4: ref;

axiom ldv_pm_ops_instance_restore_1_4 == $sub.ref(0, 958238);

procedure ldv_pm_ops_instance_restore_1_4($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_ops_instance_restore_1_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_164: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} vslice_dummy_var_164 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1717, SeqInstr_1718;

  SeqInstr_1718:
    assume assertsPassed;
    goto SeqInstr_1719;

  SeqInstr_1719:
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1717:
    assume !assertsPassed;
    return;
}



const ldv_pm_ops_instance_complete_1_3: ref;

axiom ldv_pm_ops_instance_complete_1_3 == $sub.ref(0, 959270);

procedure ldv_pm_ops_instance_complete_1_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $M.2, $M.15, $M.23, $M.3, $M.26, $M.31, $M.40, $CurrAddr, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.16, $M.24, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.11, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ldv_pm_ops_instance_complete_1_3($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} devirtbounce.50($p0, $p1);
    goto SeqInstr_1720, SeqInstr_1721;

  SeqInstr_1721:
    assume assertsPassed;
    goto SeqInstr_1722;

  SeqInstr_1722:
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1720:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_10_22_10: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_10_22_10 == $sub.ref(0, 960302);

procedure ldv_dispatch_register_dummy_resourceless_instance_10_22_10();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.15, $M.26, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_dispatch_register_dummy_resourceless_instance_10_22_10()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11476;

  corral_source_split_11476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} ldv_struct_fw_address_handler_dummy_resourceless_instance_12($p2);
    goto SeqInstr_1723, SeqInstr_1724;

  SeqInstr_1724:
    assume assertsPassed;
    goto SeqInstr_1725;

  SeqInstr_1725:
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $p3 := ldv_xmalloc(4);
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} ldv_struct_fw_address_handler_dummy_resourceless_instance_13($p5);
    goto SeqInstr_1726, SeqInstr_1727;

  SeqInstr_1727:
    assume assertsPassed;
    goto SeqInstr_1728;

  SeqInstr_1728:
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} $p6 := ldv_xmalloc(4);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11483;

  corral_source_split_11483:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} ldv_struct_fw_address_handler_dummy_resourceless_instance_14($p8);
    goto SeqInstr_1729, SeqInstr_1730;

  SeqInstr_1730:
    assume assertsPassed;
    goto SeqInstr_1731;

  SeqInstr_1731:
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1729:
    assume !assertsPassed;
    return;

  SeqInstr_1726:
    assume !assertsPassed;
    return;

  SeqInstr_1723:
    assume !assertsPassed;
    return;
}



const ldv_struct_fw_address_handler_dummy_resourceless_instance_12: ref;

axiom ldv_struct_fw_address_handler_dummy_resourceless_instance_12 == $sub.ref(0, 961334);

procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_12($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_12($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} $i1 := ldv_undef_int();
    call {:si_unique_call 2495} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11491;

  corral_source_split_11491:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $p4, $i5, $i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_12_loop_$bb4($p3, $p4, $i5, $i6);
    goto $bb4_last;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $p4 := ldv_xmalloc(1);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} ldv_dummy_resourceless_instance_callback_12_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, $p3, $u0, $p4);
    goto SeqInstr_1732, SeqInstr_1733;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  SeqInstr_1734:
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} ldv_free($p3);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} ldv_free($p4);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i5 := ldv_undef_int();
    call {:si_unique_call 2502} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5_dummy;

  SeqInstr_1732:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11493;
}



const ldv_struct_fw_address_handler_dummy_resourceless_instance_13: ref;

axiom ldv_struct_fw_address_handler_dummy_resourceless_instance_13 == $sub.ref(0, 962366);

procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_13($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.15, $CurrAddr, $M.26, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_13($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $i1 := ldv_undef_int();
    call {:si_unique_call 2504} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $p4, $i5, $i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_13_loop_$bb4($p3, $p4, $i5, $i6);
    goto $bb4_last;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $p4 := ldv_xmalloc(1);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} ldv_dummy_resourceless_instance_callback_13_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, $p3, $u0, $p4);
    goto SeqInstr_1735, SeqInstr_1736;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  SeqInstr_1737:
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ldv_free($p3);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} ldv_free($p4);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} $i5 := ldv_undef_int();
    call {:si_unique_call 2511} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5_dummy;

  SeqInstr_1735:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11509;
}



const ldv_struct_fw_address_handler_dummy_resourceless_instance_14: ref;

axiom ldv_struct_fw_address_handler_dummy_resourceless_instance_14 == $sub.ref(0, 963398);

procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_14($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $CurrAddr, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_14($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $i1 := ldv_undef_int();
    call {:si_unique_call 2513} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $p4, $i5, $i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_14_loop_$bb4($p3, $p4, $i5, $i6);
    goto $bb4_last;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $p4 := ldv_xmalloc(1);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} ldv_dummy_resourceless_instance_callback_14_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, $p3, $u0, $p4);
    goto SeqInstr_1738, SeqInstr_1739;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  SeqInstr_1740:
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} ldv_free($p3);
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} ldv_free($p4);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $i5 := ldv_undef_int();
    call {:si_unique_call 2520} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb5_dummy;

  SeqInstr_1738:
    assume !assertsPassed;
    return;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11525;
}



const ldv_dummy_resourceless_instance_callback_14_3: ref;

axiom ldv_dummy_resourceless_instance_callback_14_3 == $sub.ref(0, 964430);

procedure ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_dummy_resourceless_instance_callback_14_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2522} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2523} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 2524} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 2525} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg7"} boogie_si_record_i64($i7);
    call {:si_unique_call 2526} {:cexpr "ldv_dummy_resourceless_instance_callback_14_3:arg:arg9"} boogie_si_record_i64($i9);
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} handle_topology_map($p1, $p2, $i3, $i4, $i5, $i6, $i7, $p8, $i9, $p10);
    goto SeqInstr_1741, SeqInstr_1742;

  SeqInstr_1742:
    assume assertsPassed;
    goto SeqInstr_1743;

  SeqInstr_1743:
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1741:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_13_3: ref;

axiom ldv_dummy_resourceless_instance_callback_13_3 == $sub.ref(0, 965462);

procedure ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.15, $M.26, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_dummy_resourceless_instance_callback_13_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2529} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2530} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 2531} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 2532} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg7"} boogie_si_record_i64($i7);
    call {:si_unique_call 2533} {:cexpr "ldv_dummy_resourceless_instance_callback_13_3:arg:arg9"} boogie_si_record_i64($i9);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} handle_registers($p1, $p2, $i3, $i4, $i5, $i6, $i7, $p8, $i9, $p10);
    goto SeqInstr_1744, SeqInstr_1745;

  SeqInstr_1745:
    assume assertsPassed;
    goto SeqInstr_1746;

  SeqInstr_1746:
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1744:
    assume !assertsPassed;
    return;
}



const ldv_dummy_resourceless_instance_callback_12_3: ref;

axiom ldv_dummy_resourceless_instance_callback_12_3 == $sub.ref(0, 966494);

procedure ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_dummy_resourceless_instance_callback_12_3($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i64, $p8: ref, $i9: i64, $p10: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 2536} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 2537} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 2538} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 2539} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg7"} boogie_si_record_i64($i7);
    call {:si_unique_call 2540} {:cexpr "ldv_dummy_resourceless_instance_callback_12_3:arg:arg9"} boogie_si_record_i64($i9);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} handle_low_memory($p1, $p2, $i3, $i4, $i5, $i6, $i7, $p8, $i9, $p10);
    goto SeqInstr_1747, SeqInstr_1748;

  SeqInstr_1748:
    assume assertsPassed;
    goto SeqInstr_1749;

  SeqInstr_1749:
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1747:
    assume !assertsPassed;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_11_22_11: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_11_22_11 == $sub.ref(0, 967526);

procedure ldv_dispatch_register_dummy_resourceless_instance_11_22_11();
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation ldv_dispatch_register_dummy_resourceless_instance_11_22_11()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} ldv_struct_fw_card_driver_dummy_resourceless_instance_15($p2);
    goto SeqInstr_1750, SeqInstr_1751;

  SeqInstr_1751:
    assume assertsPassed;
    goto SeqInstr_1752;

  SeqInstr_1752:
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1750:
    assume !assertsPassed;
    return;
}



const ldv_struct_fw_card_driver_dummy_resourceless_instance_15: ref;

axiom ldv_struct_fw_card_driver_dummy_resourceless_instance_15 == $sub.ref(0, 968558);

procedure ldv_struct_fw_card_driver_dummy_resourceless_instance_15($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $CurrAddr, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation ldv_struct_fw_card_driver_dummy_resourceless_instance_15($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} $i1 := ldv_undef_int();
    call {:si_unique_call 2545} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $p17, $p18, $i19, $i20 := ldv_struct_fw_card_driver_dummy_resourceless_instance_15_loop_$bb4($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $p16, $p17, $p18, $i19, $i20);
    goto $bb4_last;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, 2);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 3);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 4);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 5);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 6);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 7);
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 8);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i3, 9);
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i3, 10);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 11);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i3, 12);
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} ldv_stop();
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $i19 := ldv_undef_int();
    call {:si_unique_call 2564} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_11635;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i20 == 1);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb56_dummy;

  $bb49:
    assume $i15 == 1;
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} ldv_dummy_resourceless_instance_callback_15_3($u35, $u19, $u4, $u4, $u0);
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb45:
    assume $i14 == 1;
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} ldv_dummy_resourceless_instance_callback_15_9($u34, $u19, $u26);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb41:
    assume $i13 == 1;
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ldv_dummy_resourceless_instance_callback_15_10($u33, $u19, $u4, $u4);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb37:
    assume $i12 == 1;
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} ldv_dummy_resourceless_instance_callback_15_13($u32, $u23);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb33:
    assume $i11 == 1;
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} ldv_dummy_resourceless_instance_callback_15_14($u31, $u23);
    goto corral_source_split_11607;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb29:
    assume $i10 == 1;
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} ldv_dummy_resourceless_instance_callback_15_15($u28, $u23, $u29, $u30, $u0);
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb25:
    assume $i9 == 1;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} ldv_dummy_resourceless_instance_callback_15_18($u27, $u19, $u4);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb21:
    assume $i8 == 1;
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_dummy_resourceless_instance_callback_15_21($u25, $u19, $u26);
    goto SeqInstr_1756, SeqInstr_1757;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  SeqInstr_1758:
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1756:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i7 == 1;
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} ldv_dummy_resourceless_instance_callback_15_22($u25, $u19, $u26);
    goto SeqInstr_1753, SeqInstr_1754;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  SeqInstr_1755:
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb54;

  SeqInstr_1753:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i6 == 1;
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} $p16 := ldv_xmalloc(8);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} ldv_dummy_resourceless_instance_callback_15_23($u24, $u23, $p17);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} ldv_free($p18);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb9:
    assume $i5 == 1;
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_dummy_resourceless_instance_callback_15_26($u22, $u23, $u4, $u4, $u4);
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} ldv_dummy_resourceless_instance_callback_15_29($u21, $u19, $u4, $u4, $u4);
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb56_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} $i3 := ldv_undef_int();
    call {:si_unique_call 2547} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11556;
}



const ldv_dispatch_register_dummy_resourceless_instance_12_22_12: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_12_22_12 == $sub.ref(0, 969590);

procedure ldv_dispatch_register_dummy_resourceless_instance_12_22_12();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_12_22_12()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} ldv_struct_fw_packet_dummy_resourceless_instance_16($p2);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_fw_packet_dummy_resourceless_instance_16: ref;

axiom ldv_struct_fw_packet_dummy_resourceless_instance_16 == $sub.ref(0, 970622);

procedure ldv_struct_fw_packet_dummy_resourceless_instance_16($p0: ref);
  free requires assertsPassed;



implementation ldv_struct_fw_packet_dummy_resourceless_instance_16($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $i1 := ldv_undef_int();
    call {:si_unique_call 2568} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i3, $i4 := ldv_struct_fw_packet_dummy_resourceless_instance_16_loop_$bb4($i3, $i4);
    goto $bb4_last;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} $i3 := ldv_undef_int();
    call {:si_unique_call 2571} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb5_dummy;

  $bb5_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} ldv_dummy_resourceless_instance_callback_16_3($u36, $u26, $u19, $u4);
    goto corral_source_split_11652;
}



const ldv_dummy_resourceless_instance_callback_16_3: ref;

axiom ldv_dummy_resourceless_instance_callback_16_3 == $sub.ref(0, 971654);

procedure ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_16_3($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} {:cexpr "ldv_dummy_resourceless_instance_callback_16_3:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} transmit_phy_packet_callback($p1, $p2, $i3);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_dummy_resourceless_instance_9_22_13: ref;

axiom ldv_dispatch_register_dummy_resourceless_instance_9_22_13 == $sub.ref(0, 972686);

procedure ldv_dispatch_register_dummy_resourceless_instance_9_22_13();
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.27, $M.28, $CurrAddr;



implementation ldv_dispatch_register_dummy_resourceless_instance_9_22_13()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} ldv_struct_device_attribute_dummy_resourceless_instance_4($p2);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $p3 := ldv_xmalloc(4);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} ldv_struct_device_attribute_dummy_resourceless_instance_5($p5);
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $p6 := ldv_xmalloc(4);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} ldv_struct_device_attribute_dummy_resourceless_instance_6($p8);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $p9 := ldv_xmalloc(4);
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} ldv_struct_device_attribute_dummy_resourceless_instance_7($p11);
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $p12 := ldv_xmalloc(4);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} ldv_struct_device_attribute_dummy_resourceless_instance_8($p14);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} $p15 := ldv_xmalloc(4);
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} ldv_struct_device_attribute_dummy_resourceless_instance_9($p17);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} $p18 := ldv_xmalloc(4);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} ldv_struct_device_attribute_dummy_resourceless_instance_10($p20);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $p21 := ldv_xmalloc(4);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} ldv_struct_device_attribute_dummy_resourceless_instance_11($p23);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    return;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_4: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_4 == $sub.ref(0, 973718);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_4($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_4($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $i1 := ldv_undef_int();
    call {:si_unique_call 2591} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $i4 := ldv_undef_int();
    call {:si_unique_call 2594} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_dummy_resourceless_instance_callback_4_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} ldv_free($p3);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $i9 := ldv_undef_int();
    call {:si_unique_call 2601} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_free($p6);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} ldv_dummy_resourceless_instance_callback_4_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11701;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_5: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_5 == $sub.ref(0, 974750);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11723;

  corral_source_split_11723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i1 := ldv_undef_int();
    call {:si_unique_call 2603} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i4 := ldv_undef_int();
    call {:si_unique_call 2606} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} ldv_dummy_resourceless_instance_callback_5_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} ldv_free($p3);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} $i9 := ldv_undef_int();
    call {:si_unique_call 2613} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} ldv_free($p6);
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_dummy_resourceless_instance_callback_5_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11729;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_6: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_6 == $sub.ref(0, 975782);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_6($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_6($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} $i1 := ldv_undef_int();
    call {:si_unique_call 2615} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $i4 := ldv_undef_int();
    call {:si_unique_call 2618} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} ldv_dummy_resourceless_instance_callback_6_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} ldv_free($p3);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} $i9 := ldv_undef_int();
    call {:si_unique_call 2625} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} ldv_free($p6);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} ldv_dummy_resourceless_instance_callback_6_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11757;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_7: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_7 == $sub.ref(0, 976814);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_7($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_7($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $i1 := ldv_undef_int();
    call {:si_unique_call 2627} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $i4 := ldv_undef_int();
    call {:si_unique_call 2630} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11794;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} ldv_dummy_resourceless_instance_callback_7_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} ldv_free($p3);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $i9 := ldv_undef_int();
    call {:si_unique_call 2637} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} ldv_free($p6);
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} ldv_dummy_resourceless_instance_callback_7_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11785;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_8: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_8 == $sub.ref(0, 977846);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_8($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_8($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $i1 := ldv_undef_int();
    call {:si_unique_call 2639} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $i4 := ldv_undef_int();
    call {:si_unique_call 2642} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_dummy_resourceless_instance_callback_8_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} ldv_free($p3);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i9 := ldv_undef_int();
    call {:si_unique_call 2649} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11820;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} ldv_free($p6);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} ldv_dummy_resourceless_instance_callback_8_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11813;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_9: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_9 == $sub.ref(0, 978878);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_9($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_9($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $i1 := ldv_undef_int();
    call {:si_unique_call 2651} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $i4 := ldv_undef_int();
    call {:si_unique_call 2654} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11843;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} ldv_dummy_resourceless_instance_callback_9_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_free($p3);
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} $i9 := ldv_undef_int();
    call {:si_unique_call 2661} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} ldv_free($p6);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} ldv_dummy_resourceless_instance_callback_9_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11841;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_10: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_10 == $sub.ref(0, 979910);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_10($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_10($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $i1 := ldv_undef_int();
    call {:si_unique_call 2663} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $i4 := ldv_undef_int();
    call {:si_unique_call 2666} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} ldv_dummy_resourceless_instance_callback_10_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_free($p3);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} $i9 := ldv_undef_int();
    call {:si_unique_call 2673} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} ldv_free($p6);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11880;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} ldv_dummy_resourceless_instance_callback_10_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11869;
}



const ldv_struct_device_attribute_dummy_resourceless_instance_11: ref;

axiom ldv_struct_device_attribute_dummy_resourceless_instance_11 == $sub.ref(0, 980942);

procedure ldv_struct_device_attribute_dummy_resourceless_instance_11($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_11($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} $i1 := ldv_undef_int();
    call {:si_unique_call 2675} {:cexpr "tmp___2"} boogie_si_record_i32($i1);
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10 := ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4($p3, $i4, $i5, $p6, $i7, $i8, $i9, $i10);
    goto $bb4_last;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $i4 := ldv_undef_int();
    call {:si_unique_call 2678} {:cexpr "tmp___1"} boogie_si_record_i32($i4);
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} ldv_dummy_resourceless_instance_callback_11_3($u39, $u17, $u38, $p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} ldv_free($p3);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} $i9 := ldv_undef_int();
    call {:si_unique_call 2685} {:cexpr "tmp___2"} boogie_si_record_i32($i9);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11_dummy;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} $p6 := ldv_xmalloc(1);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} ldv_free($p6);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_11908;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} ldv_dummy_resourceless_instance_callback_11_9($u37, $u17, $u38, $p6, $u0);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} $p3 := ldv_xmalloc(1);
    goto corral_source_split_11897;
}



const ldv_dummy_resourceless_instance_callback_11_9: ref;

axiom ldv_dummy_resourceless_instance_callback_11_9 == $sub.ref(0, 981974);

procedure ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_11_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_165: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} {:cexpr "ldv_dummy_resourceless_instance_callback_11_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2687} vslice_dummy_var_165 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_10_9: ref;

axiom ldv_dummy_resourceless_instance_callback_10_9 == $sub.ref(0, 983006);

procedure ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_10_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_166: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} {:cexpr "ldv_dummy_resourceless_instance_callback_10_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2689} vslice_dummy_var_166 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_9_9: ref;

axiom ldv_dummy_resourceless_instance_callback_9_9 == $sub.ref(0, 984038);

procedure ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_9_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_167: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} {:cexpr "ldv_dummy_resourceless_instance_callback_9_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2691} vslice_dummy_var_167 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_8_9: ref;

axiom ldv_dummy_resourceless_instance_callback_8_9 == $sub.ref(0, 985070);

procedure ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_8_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_168: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2692} {:cexpr "ldv_dummy_resourceless_instance_callback_8_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2693} vslice_dummy_var_168 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_7_9: ref;

axiom ldv_dummy_resourceless_instance_callback_7_9 == $sub.ref(0, 986102);

procedure ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_7_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_169: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} {:cexpr "ldv_dummy_resourceless_instance_callback_7_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2695} vslice_dummy_var_169 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_6_9: ref;

axiom ldv_dummy_resourceless_instance_callback_6_9 == $sub.ref(0, 987134);

procedure ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_6_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_170: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} {:cexpr "ldv_dummy_resourceless_instance_callback_6_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2697} vslice_dummy_var_170 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_5_9: ref;

axiom ldv_dummy_resourceless_instance_callback_5_9 == $sub.ref(0, 988166);

procedure ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_5_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_171: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2698} {:cexpr "ldv_dummy_resourceless_instance_callback_5_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2699} vslice_dummy_var_171 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dummy_resourceless_instance_callback_4_9: ref;

axiom ldv_dummy_resourceless_instance_callback_4_9 == $sub.ref(0, 989198);

procedure ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64);
  free requires assertsPassed;



implementation ldv_dummy_resourceless_instance_callback_4_9($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64)
{
  var vslice_dummy_var_172: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} {:cexpr "ldv_dummy_resourceless_instance_callback_4_9:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 2701} vslice_dummy_var_172 := devirtbounce.51($p0, $p1, $p2, $p3, $i4);
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_platform_instance_7_22_14: ref;

axiom ldv_dispatch_register_platform_instance_7_22_14 == $sub.ref(0, 990230);

procedure ldv_dispatch_register_platform_instance_7_22_14();
  free requires assertsPassed;
  modifies $CurrAddr, $M.114, $M.115, $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, assertsPassed, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_dispatch_register_platform_instance_7_22_14()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2702} $p0 := ldv_xmalloc(4);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_11938;

  corral_source_split_11938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} ldv_pm_platform_instance_2($p2);
    goto SeqInstr_1759, SeqInstr_1760;

  SeqInstr_1760:
    assume assertsPassed;
    goto SeqInstr_1761;

  SeqInstr_1761:
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1759:
    assume !assertsPassed;
    return;
}



const ldv_pm_platform_instance_2: ref;

axiom ldv_pm_platform_instance_2 == $sub.ref(0, 991262);

procedure ldv_pm_platform_instance_2($p0: ref);
  free requires assertsPassed;
  modifies $M.114, $M.115, $M.1, $M.2, $CurrAddr, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, assertsPassed, $M.16, $M.27, $M.28, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_platform_instance_2($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i22: i32;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} $i1 := ldv_undef_int();
    call {:si_unique_call 2705} {:cexpr "tmp___1"} boogie_si_record_i32($i1);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40 := ldv_pm_platform_instance_2_loop_$bb4($i3, $p4, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $i12, $i13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i22, $i28, $i29, $p30, $p31, $p32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $i40);
    goto $bb4_last;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} $p4 := ldv_xmalloc(1464);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} ldv_ldv_pre_probe_133();
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.110, $p6);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i14 := ldv_ldv_post_probe_134($i13);
    goto SeqInstr_1765, SeqInstr_1766;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  SeqInstr_1767:
    call {:si_unique_call 2711} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32($i14);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p5);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_free($p15);
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} $i16 := ldv_undef_int();
    call {:si_unique_call 2714} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i14, 0);
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_assume($i24);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $i25 := $i14;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} $i26 := ldv_undef_int();
    call {:si_unique_call 2720} {:cexpr "tmp___1"} boogie_si_record_i32($i26);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i25;
    goto $bb15_dummy;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 0);
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} ldv_assume($i19);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} $i20 := ldv_undef_int();
    call {:si_unique_call 2717} {:cexpr "tmp___2"} boogie_si_record_i32($i20);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i21 == 1);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb13;

  $bb13:
    call $i22, $i28, $i29, $i39, $i40 := ldv_pm_platform_instance_2_loop_$bb13($i22, $i28, $i29, $i39, $i40);
    goto $bb13_last;

  $bb20:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 2);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 3);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} ldv_stop();
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb25:
    assume $i29 == 1;
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_1768, SeqInstr_1769;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  SeqInstr_1770:
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} $i39 := ldv_undef_int();
    call {:si_unique_call 2728} {:cexpr "tmp___2"} boogie_si_record_i32($i39);
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 1);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  $bb34:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i39;
    goto $bb34_dummy;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} $p30 := ldv_xmalloc(1464);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.112, $p32);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p31);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_free($p38);
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb30:
    assume $i35 == 1;
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.113, $p36);
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} ldv_platform_instance_release_2_3($p37, $p31);
    goto SeqInstr_1771, SeqInstr_1772;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  SeqInstr_1773:
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1771:
    assume !assertsPassed;
    return;

  SeqInstr_1768:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb11;

  SeqInstr_1765:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.111, $p10);
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} $i12 := ldv_platform_instance_probe_2_14($p11, $p5);
    goto SeqInstr_1762, SeqInstr_1763;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  SeqInstr_1764:
    call {:si_unique_call 2709} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32($i12);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  SeqInstr_1762:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11947;
}



const ldv_ldv_pre_probe_133: ref;

axiom ldv_ldv_pre_probe_133 == $sub.ref(0, 992294);

procedure ldv_ldv_pre_probe_133();
  free requires assertsPassed;
  modifies $M.114, $M.115;



implementation ldv_ldv_pre_probe_133()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2730} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2731} ldv_pre_probe();
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_instance_probe_2_14: ref;

axiom ldv_platform_instance_probe_2_14 == $sub.ref(0, 993326);

procedure ldv_platform_instance_probe_2_14($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_platform_instance_probe_2_14($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2732} $i2 := devirtbounce.52($p0, $p1);
    goto SeqInstr_1774, SeqInstr_1775;

  SeqInstr_1775:
    assume assertsPassed;
    goto SeqInstr_1776;

  SeqInstr_1776:
    call {:si_unique_call 2733} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1774:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_134: ref;

axiom ldv_ldv_post_probe_134 == $sub.ref(0, 994358);

procedure ldv_ldv_post_probe_134($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.114, $M.115, assertsPassed;



implementation ldv_ldv_post_probe_134($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2734} {:cexpr "ldv_ldv_post_probe_134:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_1777, SeqInstr_1778;

  SeqInstr_1778:
    assume assertsPassed;
    goto SeqInstr_1779;

  SeqInstr_1779:
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_1780, SeqInstr_1781;

  SeqInstr_1781:
    assume assertsPassed;
    goto SeqInstr_1782;

  SeqInstr_1782:
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2737} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2738} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1780:
    assume !assertsPassed;
    return;

  SeqInstr_1777:
    assume !assertsPassed;
    return;
}



const ldv_platform_instance_release_2_3: ref;

axiom ldv_platform_instance_release_2_3 == $sub.ref(0, 995390);

procedure ldv_platform_instance_release_2_3($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_platform_instance_release_2_3($p0: ref, $p1: ref)
{
  var vslice_dummy_var_173: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} vslice_dummy_var_173 := devirtbounce.52($p0, $p1);
    goto SeqInstr_1783, SeqInstr_1784;

  SeqInstr_1784:
    assume assertsPassed;
    goto SeqInstr_1785;

  SeqInstr_1785:
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1783:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_register_check_return_value_probe: ref;

axiom ldv_linux_net_register_check_return_value_probe == $sub.ref(0, 996422);

procedure ldv_linux_net_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.114, assertsPassed;



implementation ldv_linux_net_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2740} {:cexpr "ldv_linux_net_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i1 := $M.114;
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2742} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} ldv_assert_linux_net_register__wrong_return_value($i4);
    goto SeqInstr_1786, SeqInstr_1787;

  SeqInstr_1787:
    assume assertsPassed;
    goto SeqInstr_1788;

  SeqInstr_1788:
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1786:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_register_check_return_value_probe: ref;

axiom ldv_linux_usb_register_check_return_value_probe == $sub.ref(0, 997454);

procedure ldv_linux_usb_register_check_return_value_probe($i0: i32);
  free requires assertsPassed;
  modifies $M.115, assertsPassed;



implementation ldv_linux_usb_register_check_return_value_probe($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} {:cexpr "ldv_linux_usb_register_check_return_value_probe:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i1 := $M.115;
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2745} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} ldv_assert_linux_usb_register__wrong_return_value($i4);
    goto SeqInstr_1789, SeqInstr_1790;

  SeqInstr_1790:
    assume assertsPassed;
    goto SeqInstr_1791;

  SeqInstr_1791:
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1789:
    assume !assertsPassed;
    return;
}



const ldv_post_probe: ref;

axiom ldv_post_probe == $sub.ref(0, 998486);

procedure ldv_post_probe($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_probe($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2746} {:cexpr "ldv_post_probe:arg:probe_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2748} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12058;

  corral_source_split_12058:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_usb_register__wrong_return_value: ref;

axiom ldv_assert_linux_usb_register__wrong_return_value == $sub.ref(0, 999518);

procedure ldv_assert_linux_usb_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} {:cexpr "ldv_assert_linux_usb_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2750} __VERIFIER_error();
    goto SeqInstr_1792, SeqInstr_1793;

  SeqInstr_1793:
    assume assertsPassed;
    goto SeqInstr_1794;

  SeqInstr_1794:
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1792:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 1000550);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.115;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $M.115 := 0;
    call {:si_unique_call 2751} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    return;
}



const ldv_assert_linux_net_register__wrong_return_value: ref;

axiom ldv_assert_linux_net_register__wrong_return_value == $sub.ref(0, 1001582);

procedure ldv_assert_linux_net_register__wrong_return_value($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_register__wrong_return_value($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} {:cexpr "ldv_assert_linux_net_register__wrong_return_value:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2753} __VERIFIER_error();
    goto SeqInstr_1795, SeqInstr_1796;

  SeqInstr_1796:
    assume assertsPassed;
    goto SeqInstr_1797;

  SeqInstr_1797:
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1795:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 1002614);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;
  modifies $M.114;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $M.114 := 0;
    call {:si_unique_call 2754} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    return;
}



const ldv_pre_probe: ref;

axiom ldv_pre_probe == $sub.ref(0, 1003646);

procedure ldv_pre_probe();
  free requires assertsPassed;



implementation ldv_pre_probe()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_rtc_class_instance_8_22_15: ref;

axiom ldv_dispatch_register_rtc_class_instance_8_22_15 == $sub.ref(0, 1004678);

procedure ldv_dispatch_register_rtc_class_instance_8_22_15();
  free requires assertsPassed;
  modifies $M.114, $M.115, $M.34, $CurrAddr, $M.1, $M.2, $M.0, $M.27, $M.28, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, assertsPassed, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $M.16, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_dispatch_register_rtc_class_instance_8_22_15()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} $p0 := ldv_xmalloc(4);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} ldv_rtc_rtc_class_instance_3($p2);
    goto SeqInstr_1798, SeqInstr_1799;

  SeqInstr_1799:
    assume assertsPassed;
    goto SeqInstr_1800;

  SeqInstr_1800:
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1798:
    assume !assertsPassed;
    return;
}



const ldv_rtc_rtc_class_instance_3: ref;

axiom ldv_rtc_rtc_class_instance_3 == $sub.ref(0, 1005710);

procedure ldv_rtc_rtc_class_instance_3($p0: ref);
  free requires assertsPassed;
  modifies $M.114, $M.115, $M.34, $M.1, $M.2, $CurrAddr, $M.0, $M.27, $M.28, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, assertsPassed, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $M.16, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_rtc_rtc_class_instance_3($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2757} $i1 := ldv_undef_int();
    call {:si_unique_call 2758} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb4;

  $bb4:
    call $i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $p26 := ldv_rtc_rtc_class_instance_3_loop_$bb4($i3, $p4, $p5, $i6, $i7, $p8, $p9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $p25, $p26);
    goto $bb4_last;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} ldv_ldv_pre_probe_135();
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.116, $p4);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i3;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} $i12 := ldv_ldv_post_probe_136($i11);
    goto SeqInstr_1804, SeqInstr_1805;

  SeqInstr_1805:
    assume assertsPassed;
    goto SeqInstr_1806;

  SeqInstr_1806:
    call {:si_unique_call 2763} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i12);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} $i13 := ldv_undef_int();
    call {:si_unique_call 2765} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i12, 0);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} ldv_assume($i20);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} $i21 := ldv_undef_int();
    call {:si_unique_call 2775} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i12;
    goto $bb15_dummy;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 0);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assume($i16);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} $i17 := ldv_undef_int();
    call {:si_unique_call 2768} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.118, $p25);
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} ldv_rtc_class_instance_release_3_2($p26, $u17);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i18 == 1;
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call $i23, $i24 := ldv_rtc_rtc_class_instance_3_loop_$bb13($i23, $i24);
    goto $bb13_last;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} $i23 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb17_dummy;

  SeqInstr_1804:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.117, $p8);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} $i10 := ldv_rtc_class_instance_probe_3_10($p9, $u17);
    goto SeqInstr_1801, SeqInstr_1802;

  SeqInstr_1802:
    assume assertsPassed;
    goto SeqInstr_1803;

  SeqInstr_1803:
    call {:si_unique_call 2761} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb7;

  SeqInstr_1801:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} ldv_rtc_class_instance_callback_3_4($u42, $u17, $u43);
    goto corral_source_split_12127;

  $bb15_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_12092;
}



const ldv_ldv_pre_probe_135: ref;

axiom ldv_ldv_pre_probe_135 == $sub.ref(0, 1006742);

procedure ldv_ldv_pre_probe_135();
  free requires assertsPassed;
  modifies $M.114, $M.115;



implementation ldv_ldv_pre_probe_135()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2776} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2777} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2778} ldv_pre_probe();
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    return;
}



const ldv_rtc_class_instance_probe_3_10: ref;

axiom ldv_rtc_class_instance_probe_3_10 == $sub.ref(0, 1007774);

procedure ldv_rtc_class_instance_probe_3_10($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_rtc_class_instance_probe_3_10($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2779} $i2 := devirtbounce.49($p0, $p1);
    goto SeqInstr_1807, SeqInstr_1808;

  SeqInstr_1808:
    assume assertsPassed;
    goto SeqInstr_1809;

  SeqInstr_1809:
    call {:si_unique_call 2780} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1807:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_probe_136: ref;

axiom ldv_ldv_post_probe_136 == $sub.ref(0, 1008806);

procedure ldv_ldv_post_probe_136($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.114, $M.115, assertsPassed;



implementation ldv_ldv_post_probe_136($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2781} {:cexpr "ldv_ldv_post_probe_136:arg:retval"} boogie_si_record_i32($i0);
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2782} ldv_linux_net_register_check_return_value_probe($i0);
    goto SeqInstr_1810, SeqInstr_1811;

  SeqInstr_1811:
    assume assertsPassed;
    goto SeqInstr_1812;

  SeqInstr_1812:
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2783} ldv_linux_usb_register_check_return_value_probe($i0);
    goto SeqInstr_1813, SeqInstr_1814;

  SeqInstr_1814:
    assume assertsPassed;
    goto SeqInstr_1815;

  SeqInstr_1815:
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2784} $i1 := ldv_post_probe($i0);
    call {:si_unique_call 2785} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;

  SeqInstr_1813:
    assume !assertsPassed;
    return;

  SeqInstr_1810:
    assume !assertsPassed;
    return;
}



const ldv_entry_EMGentry_22: ref;

axiom ldv_entry_EMGentry_22 == $sub.ref(0, 1009838);

procedure ldv_entry_EMGentry_22($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.18, $M.0, $M.1, $M.2, $M.114, $M.115, $M.34, $M.27, $M.28, $M.38, $M.39, $CurrAddr, $M.40, $M.3, $M.26, $M.15, $M.23, $M.62, assertsPassed, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.45, $M.46, $M.24, $M.31, $M.47, $M.48, $M.16, $M.13, $M.43, $M.11, $M.12, $M.25, $M.14;



implementation ldv_entry_EMGentry_22($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2786} $i1 := ldv_EMGentry_init_fw_core_init_22_19($u44);
    goto SeqInstr_1816, SeqInstr_1817;

  SeqInstr_1817:
    assume assertsPassed;
    goto SeqInstr_1818;

  SeqInstr_1818:
    call {:si_unique_call 2787} {:cexpr "ldv_22_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2788} $i2 := ldv_ldv_post_init_129($i1);
    call {:si_unique_call 2789} {:cexpr "ldv_22_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2790} $i3 := ldv_undef_int();
    call {:si_unique_call 2791} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_12154;

  corral_source_split_12154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2795} ldv_assume($i8);
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2796} $i9 := ldv_undef_int();
    call {:si_unique_call 2797} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2810} ldv_EMGentry_exit_fw_core_cleanup_22_2($u45);
    goto SeqInstr_1834, SeqInstr_1835;

  SeqInstr_1835:
    assume assertsPassed;
    goto SeqInstr_1836;

  SeqInstr_1836:
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2811} ldv_ldv_check_final_state_131();
    goto SeqInstr_1837, SeqInstr_1838;

  SeqInstr_1838:
    assume assertsPassed;
    goto SeqInstr_1839;

  SeqInstr_1839:
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2812} ldv_stop();
    goto corral_source_split_12186;

  corral_source_split_12186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1837:
    assume !assertsPassed;
    return;

  SeqInstr_1834:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2798} ldv_dispatch_register_rtc_class_instance_8_22_15();
    goto SeqInstr_1822, SeqInstr_1823;

  SeqInstr_1823:
    assume assertsPassed;
    goto SeqInstr_1824;

  SeqInstr_1824:
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2799} ldv_dispatch_register_platform_instance_7_22_14();
    goto SeqInstr_1825, SeqInstr_1826;

  SeqInstr_1826:
    assume assertsPassed;
    goto SeqInstr_1827;

  SeqInstr_1827:
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2800} ldv_dispatch_register_dummy_resourceless_instance_9_22_13();
    goto corral_source_split_12173;

  corral_source_split_12173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2801} ldv_dispatch_register_dummy_resourceless_instance_12_22_12();
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2802} ldv_dispatch_register_dummy_resourceless_instance_11_22_11();
    goto SeqInstr_1828, SeqInstr_1829;

  SeqInstr_1829:
    assume assertsPassed;
    goto SeqInstr_1830;

  SeqInstr_1830:
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2803} ldv_dispatch_register_dummy_resourceless_instance_10_22_10();
    goto SeqInstr_1831, SeqInstr_1832;

  SeqInstr_1832:
    assume assertsPassed;
    goto SeqInstr_1833;

  SeqInstr_1833:
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2804} ldv_dispatch_deregister_rtc_class_instance_8_22_9();
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2805} ldv_dispatch_deregister_platform_instance_7_22_8();
    goto corral_source_split_12178;

  corral_source_split_12178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2806} ldv_dispatch_deregister_dummy_resourceless_instance_9_22_7();
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2807} ldv_dispatch_deregister_dummy_resourceless_instance_12_22_6();
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2808} ldv_dispatch_deregister_dummy_resourceless_instance_11_22_5();
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2809} ldv_dispatch_deregister_dummy_resourceless_instance_10_22_4();
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1831:
    assume !assertsPassed;
    return;

  SeqInstr_1828:
    assume !assertsPassed;
    return;

  SeqInstr_1825:
    assume !assertsPassed;
    return;

  SeqInstr_1822:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2792} ldv_assume($i6);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2793} ldv_ldv_check_final_state_130();
    goto SeqInstr_1819, SeqInstr_1820;

  SeqInstr_1820:
    assume assertsPassed;
    goto SeqInstr_1821;

  SeqInstr_1821:
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} ldv_stop();
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1819:
    assume !assertsPassed;
    return;

  SeqInstr_1816:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_129: ref;

axiom ldv_ldv_post_init_129 == $sub.ref(0, 1010870);

procedure ldv_ldv_post_init_129($i0: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.114, $M.115;



implementation ldv_ldv_post_init_129($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2813} {:cexpr "ldv_ldv_post_init_129:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2814} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2815} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2816} $i1 := ldv_post_init($i0);
    call {:si_unique_call 2817} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_130: ref;

axiom ldv_ldv_check_final_state_130 == $sub.ref(0, 1011902);

procedure ldv_ldv_check_final_state_130();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_130()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2818} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1840, SeqInstr_1841;

  SeqInstr_1841:
    assume assertsPassed;
    goto SeqInstr_1842;

  SeqInstr_1842:
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2819} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1843, SeqInstr_1844;

  SeqInstr_1844:
    assume assertsPassed;
    goto SeqInstr_1845;

  SeqInstr_1845:
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2820} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1846, SeqInstr_1847;

  SeqInstr_1847:
    assume assertsPassed;
    goto SeqInstr_1848;

  SeqInstr_1848:
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2821} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1849, SeqInstr_1850;

  SeqInstr_1850:
    assume assertsPassed;
    goto SeqInstr_1851;

  SeqInstr_1851:
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2822} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1852, SeqInstr_1853;

  SeqInstr_1853:
    assume assertsPassed;
    goto SeqInstr_1854;

  SeqInstr_1854:
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2823} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1855, SeqInstr_1856;

  SeqInstr_1856:
    assume assertsPassed;
    goto SeqInstr_1857;

  SeqInstr_1857:
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2824} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1858, SeqInstr_1859;

  SeqInstr_1859:
    assume assertsPassed;
    goto SeqInstr_1860;

  SeqInstr_1860:
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2825} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1861, SeqInstr_1862;

  SeqInstr_1862:
    assume assertsPassed;
    goto SeqInstr_1863;

  SeqInstr_1863:
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2826} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1864, SeqInstr_1865;

  SeqInstr_1865:
    assume assertsPassed;
    goto SeqInstr_1866;

  SeqInstr_1866:
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2827} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1867, SeqInstr_1868;

  SeqInstr_1868:
    assume assertsPassed;
    goto SeqInstr_1869;

  SeqInstr_1869:
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2828} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1870, SeqInstr_1871;

  SeqInstr_1871:
    assume assertsPassed;
    goto SeqInstr_1872;

  SeqInstr_1872:
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2829} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1873, SeqInstr_1874;

  SeqInstr_1874:
    assume assertsPassed;
    goto SeqInstr_1875;

  SeqInstr_1875:
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2830} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1876, SeqInstr_1877;

  SeqInstr_1877:
    assume assertsPassed;
    goto SeqInstr_1878;

  SeqInstr_1878:
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2831} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1879, SeqInstr_1880;

  SeqInstr_1880:
    assume assertsPassed;
    goto SeqInstr_1881;

  SeqInstr_1881:
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2832} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1882, SeqInstr_1883;

  SeqInstr_1883:
    assume assertsPassed;
    goto SeqInstr_1884;

  SeqInstr_1884:
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2833} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1885, SeqInstr_1886;

  SeqInstr_1886:
    assume assertsPassed;
    goto SeqInstr_1887;

  SeqInstr_1887:
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2834} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1888, SeqInstr_1889;

  SeqInstr_1889:
    assume assertsPassed;
    goto SeqInstr_1890;

  SeqInstr_1890:
    goto corral_source_split_12210;

  corral_source_split_12210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2835} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1891, SeqInstr_1892;

  SeqInstr_1892:
    assume assertsPassed;
    goto SeqInstr_1893;

  SeqInstr_1893:
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2836} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1894, SeqInstr_1895;

  SeqInstr_1895:
    assume assertsPassed;
    goto SeqInstr_1896;

  SeqInstr_1896:
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2837} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1897, SeqInstr_1898;

  SeqInstr_1898:
    assume assertsPassed;
    goto SeqInstr_1899;

  SeqInstr_1899:
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1897:
    assume !assertsPassed;
    return;

  SeqInstr_1894:
    assume !assertsPassed;
    return;

  SeqInstr_1891:
    assume !assertsPassed;
    return;

  SeqInstr_1888:
    assume !assertsPassed;
    return;

  SeqInstr_1885:
    assume !assertsPassed;
    return;

  SeqInstr_1882:
    assume !assertsPassed;
    return;

  SeqInstr_1879:
    assume !assertsPassed;
    return;

  SeqInstr_1876:
    assume !assertsPassed;
    return;

  SeqInstr_1873:
    assume !assertsPassed;
    return;

  SeqInstr_1870:
    assume !assertsPassed;
    return;

  SeqInstr_1867:
    assume !assertsPassed;
    return;

  SeqInstr_1864:
    assume !assertsPassed;
    return;

  SeqInstr_1861:
    assume !assertsPassed;
    return;

  SeqInstr_1858:
    assume !assertsPassed;
    return;

  SeqInstr_1855:
    assume !assertsPassed;
    return;

  SeqInstr_1852:
    assume !assertsPassed;
    return;

  SeqInstr_1849:
    assume !assertsPassed;
    return;

  SeqInstr_1846:
    assume !assertsPassed;
    return;

  SeqInstr_1843:
    assume !assertsPassed;
    return;

  SeqInstr_1840:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_131: ref;

axiom ldv_ldv_check_final_state_131 == $sub.ref(0, 1012934);

procedure ldv_ldv_check_final_state_131();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_131()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2838} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1900, SeqInstr_1901;

  SeqInstr_1901:
    assume assertsPassed;
    goto SeqInstr_1902;

  SeqInstr_1902:
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2839} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1903, SeqInstr_1904;

  SeqInstr_1904:
    assume assertsPassed;
    goto SeqInstr_1905;

  SeqInstr_1905:
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2840} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1906, SeqInstr_1907;

  SeqInstr_1907:
    assume assertsPassed;
    goto SeqInstr_1908;

  SeqInstr_1908:
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2841} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1909, SeqInstr_1910;

  SeqInstr_1910:
    assume assertsPassed;
    goto SeqInstr_1911;

  SeqInstr_1911:
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2842} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1912, SeqInstr_1913;

  SeqInstr_1913:
    assume assertsPassed;
    goto SeqInstr_1914;

  SeqInstr_1914:
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2843} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1915, SeqInstr_1916;

  SeqInstr_1916:
    assume assertsPassed;
    goto SeqInstr_1917;

  SeqInstr_1917:
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2844} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1918, SeqInstr_1919;

  SeqInstr_1919:
    assume assertsPassed;
    goto SeqInstr_1920;

  SeqInstr_1920:
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2845} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1921, SeqInstr_1922;

  SeqInstr_1922:
    assume assertsPassed;
    goto SeqInstr_1923;

  SeqInstr_1923:
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2846} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1924, SeqInstr_1925;

  SeqInstr_1925:
    assume assertsPassed;
    goto SeqInstr_1926;

  SeqInstr_1926:
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2847} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1927, SeqInstr_1928;

  SeqInstr_1928:
    assume assertsPassed;
    goto SeqInstr_1929;

  SeqInstr_1929:
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2848} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1930, SeqInstr_1931;

  SeqInstr_1931:
    assume assertsPassed;
    goto SeqInstr_1932;

  SeqInstr_1932:
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2849} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1933, SeqInstr_1934;

  SeqInstr_1934:
    assume assertsPassed;
    goto SeqInstr_1935;

  SeqInstr_1935:
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2850} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1936, SeqInstr_1937;

  SeqInstr_1937:
    assume assertsPassed;
    goto SeqInstr_1938;

  SeqInstr_1938:
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2851} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1939, SeqInstr_1940;

  SeqInstr_1940:
    assume assertsPassed;
    goto SeqInstr_1941;

  SeqInstr_1941:
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2852} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1942, SeqInstr_1943;

  SeqInstr_1943:
    assume assertsPassed;
    goto SeqInstr_1944;

  SeqInstr_1944:
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2853} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1945, SeqInstr_1946;

  SeqInstr_1946:
    assume assertsPassed;
    goto SeqInstr_1947;

  SeqInstr_1947:
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2854} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1948, SeqInstr_1949;

  SeqInstr_1949:
    assume assertsPassed;
    goto SeqInstr_1950;

  SeqInstr_1950:
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2855} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1951, SeqInstr_1952;

  SeqInstr_1952:
    assume assertsPassed;
    goto SeqInstr_1953;

  SeqInstr_1953:
    goto corral_source_split_12233;

  corral_source_split_12233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2856} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1954, SeqInstr_1955;

  SeqInstr_1955:
    assume assertsPassed;
    goto SeqInstr_1956;

  SeqInstr_1956:
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2857} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1957, SeqInstr_1958;

  SeqInstr_1958:
    assume assertsPassed;
    goto SeqInstr_1959;

  SeqInstr_1959:
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1957:
    assume !assertsPassed;
    return;

  SeqInstr_1954:
    assume !assertsPassed;
    return;

  SeqInstr_1951:
    assume !assertsPassed;
    return;

  SeqInstr_1948:
    assume !assertsPassed;
    return;

  SeqInstr_1945:
    assume !assertsPassed;
    return;

  SeqInstr_1942:
    assume !assertsPassed;
    return;

  SeqInstr_1939:
    assume !assertsPassed;
    return;

  SeqInstr_1936:
    assume !assertsPassed;
    return;

  SeqInstr_1933:
    assume !assertsPassed;
    return;

  SeqInstr_1930:
    assume !assertsPassed;
    return;

  SeqInstr_1927:
    assume !assertsPassed;
    return;

  SeqInstr_1924:
    assume !assertsPassed;
    return;

  SeqInstr_1921:
    assume !assertsPassed;
    return;

  SeqInstr_1918:
    assume !assertsPassed;
    return;

  SeqInstr_1915:
    assume !assertsPassed;
    return;

  SeqInstr_1912:
    assume !assertsPassed;
    return;

  SeqInstr_1909:
    assume !assertsPassed;
    return;

  SeqInstr_1906:
    assume !assertsPassed;
    return;

  SeqInstr_1903:
    assume !assertsPassed;
    return;

  SeqInstr_1900:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 1013966);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i0 := $M.119;
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2858} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1960, SeqInstr_1961;

  SeqInstr_1961:
    assume assertsPassed;
    goto SeqInstr_1962;

  SeqInstr_1962:
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1960:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 1014998);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i0 := $M.120;
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2859} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1963, SeqInstr_1964;

  SeqInstr_1964:
    assume assertsPassed;
    goto SeqInstr_1965;

  SeqInstr_1965:
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1963:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 1016030);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i0 := $M.121;
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2860} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1966, SeqInstr_1967;

  SeqInstr_1967:
    assume assertsPassed;
    goto SeqInstr_1968;

  SeqInstr_1968:
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1966:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 1017062);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $i0 := $M.122;
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2861} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1969, SeqInstr_1970;

  SeqInstr_1970:
    assume assertsPassed;
    goto SeqInstr_1971;

  SeqInstr_1971:
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1969:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 1018094);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i0 := $M.123;
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2862} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1972, SeqInstr_1973;

  SeqInstr_1973:
    assume assertsPassed;
    goto SeqInstr_1974;

  SeqInstr_1974:
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1972:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 1019126);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i0 := $M.62;
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2863} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1975, SeqInstr_1976;

  SeqInstr_1976:
    assume assertsPassed;
    goto SeqInstr_1977;

  SeqInstr_1977:
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1975:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 1020158);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i0 := $M.124;
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2864} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1978, SeqInstr_1979;

  SeqInstr_1979:
    assume assertsPassed;
    goto SeqInstr_1980;

  SeqInstr_1980:
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1978:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 1021190);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i0 := $M.125;
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2865} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1981, SeqInstr_1982;

  SeqInstr_1982:
    assume assertsPassed;
    goto SeqInstr_1983;

  SeqInstr_1983:
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i3 := $M.126;
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2866} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1984, SeqInstr_1985;

  SeqInstr_1985:
    assume assertsPassed;
    goto SeqInstr_1986;

  SeqInstr_1986:
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1984:
    assume !assertsPassed;
    return;

  SeqInstr_1981:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 1022222);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $i0 := $M.127;
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2867} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1987, SeqInstr_1988;

  SeqInstr_1988:
    assume assertsPassed;
    goto SeqInstr_1989;

  SeqInstr_1989:
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1987:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 1023254);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i0 := $M.41;
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2868} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1990, SeqInstr_1991;

  SeqInstr_1991:
    assume assertsPassed;
    goto SeqInstr_1992;

  SeqInstr_1992:
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1990:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 1024286);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i0 := $M.42;
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2869} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1993, SeqInstr_1994;

  SeqInstr_1994:
    assume assertsPassed;
    goto SeqInstr_1995;

  SeqInstr_1995:
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1993:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 1025318);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $i0 := $M.43;
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2870} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1996, SeqInstr_1997;

  SeqInstr_1997:
    assume assertsPassed;
    goto SeqInstr_1998;

  SeqInstr_1998:
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1996:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 1026350);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i0 := $M.44;
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2871} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1999, SeqInstr_2000;

  SeqInstr_2000:
    assume assertsPassed;
    goto SeqInstr_2001;

  SeqInstr_2001:
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1999:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 1027382);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i8: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2872} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_2002, SeqInstr_2003;

  SeqInstr_2003:
    assume assertsPassed;
    goto SeqInstr_2004;

  SeqInstr_2004:
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i6 := $M.31;
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i9 := $M.31;
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i8);
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2873} ldv_assert_linux_lib_idr__more_at_exit($i11);
    goto SeqInstr_2005, SeqInstr_2006;

  SeqInstr_2006:
    assume assertsPassed;
    goto SeqInstr_2007;

  SeqInstr_2007:
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2005:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  SeqInstr_2002:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 1028414);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    $i0 := $M.128;
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2874} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_2008, SeqInstr_2009;

  SeqInstr_2009:
    assume assertsPassed;
    goto SeqInstr_2010;

  SeqInstr_2010:
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2008:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 1029446);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $i0 := $M.129;
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2875} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_2011, SeqInstr_2012;

  SeqInstr_2012:
    assume assertsPassed;
    goto SeqInstr_2013;

  SeqInstr_2013:
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2011:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 1030478);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i0 := $M.130;
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2876} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_2014, SeqInstr_2015;

  SeqInstr_2015:
    assume assertsPassed;
    goto SeqInstr_2016;

  SeqInstr_2016:
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2014:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 1031510);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i0 := $M.131;
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2877} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_2017, SeqInstr_2018;

  SeqInstr_2018:
    assume assertsPassed;
    goto SeqInstr_2019;

  SeqInstr_2019:
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2017:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 1032542);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12366;

  corral_source_split_12366:
    assume {:verifier.code 0} true;
    $i0 := $M.63;
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2878} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_2020, SeqInstr_2021;

  SeqInstr_2021:
    assume assertsPassed;
    goto SeqInstr_2022;

  SeqInstr_2022:
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2020:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 1033574);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    $i0 := $M.132;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2879} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_2023, SeqInstr_2024;

  SeqInstr_2024:
    assume assertsPassed;
    goto SeqInstr_2025;

  SeqInstr_2025:
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2023:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 1034606);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2880} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2881} __VERIFIER_error();
    goto SeqInstr_2026, SeqInstr_2027;

  SeqInstr_2027:
    assume assertsPassed;
    goto SeqInstr_2028;

  SeqInstr_2028:
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2026:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 1035638);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2882} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2883} __VERIFIER_error();
    goto SeqInstr_2029, SeqInstr_2030;

  SeqInstr_2030:
    assume assertsPassed;
    goto SeqInstr_2031;

  SeqInstr_2031:
    goto corral_source_split_12388;

  corral_source_split_12388:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2029:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 1036670);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2884} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2885} __VERIFIER_error();
    goto SeqInstr_2032, SeqInstr_2033;

  SeqInstr_2033:
    assume assertsPassed;
    goto SeqInstr_2034;

  SeqInstr_2034:
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2032:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 1037702);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2886} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2887} __VERIFIER_error();
    goto SeqInstr_2035, SeqInstr_2036;

  SeqInstr_2036:
    assume assertsPassed;
    goto SeqInstr_2037;

  SeqInstr_2037:
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2035:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 1038734);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2888} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12402;

  corral_source_split_12402:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2889} __VERIFIER_error();
    goto SeqInstr_2038, SeqInstr_2039;

  SeqInstr_2039:
    assume assertsPassed;
    goto SeqInstr_2040;

  SeqInstr_2040:
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2038:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 1039766);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2890} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2891} __VERIFIER_error();
    goto SeqInstr_2041, SeqInstr_2042;

  SeqInstr_2042:
    assume assertsPassed;
    goto SeqInstr_2043;

  SeqInstr_2043:
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2041:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 1040798);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2892} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2893} __VERIFIER_error();
    goto SeqInstr_2044, SeqInstr_2045;

  SeqInstr_2045:
    assume assertsPassed;
    goto SeqInstr_2046;

  SeqInstr_2046:
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2044:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 1041830);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2894} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12420;

  corral_source_split_12420:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2895} __VERIFIER_error();
    goto SeqInstr_2047, SeqInstr_2048;

  SeqInstr_2048:
    assume assertsPassed;
    goto SeqInstr_2049;

  SeqInstr_2049:
    goto corral_source_split_12424;

  corral_source_split_12424:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2047:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 1042862);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2896} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12426;

  corral_source_split_12426:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2897} __VERIFIER_error();
    goto SeqInstr_2050, SeqInstr_2051;

  SeqInstr_2051:
    assume assertsPassed;
    goto SeqInstr_2052;

  SeqInstr_2052:
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2050:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 1043894);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2898} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2899} __VERIFIER_error();
    goto SeqInstr_2053, SeqInstr_2054;

  SeqInstr_2054:
    assume assertsPassed;
    goto SeqInstr_2055;

  SeqInstr_2055:
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2053:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 1044926);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2900} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2901} __VERIFIER_error();
    goto SeqInstr_2056, SeqInstr_2057;

  SeqInstr_2057:
    assume assertsPassed;
    goto SeqInstr_2058;

  SeqInstr_2058:
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2056:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 1045958);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2902} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2903} __VERIFIER_error();
    goto SeqInstr_2059, SeqInstr_2060;

  SeqInstr_2060:
    assume assertsPassed;
    goto SeqInstr_2061;

  SeqInstr_2061:
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2059:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 1046990);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2904} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2905} __VERIFIER_error();
    goto SeqInstr_2062, SeqInstr_2063;

  SeqInstr_2063:
    assume assertsPassed;
    goto SeqInstr_2064;

  SeqInstr_2064:
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2062:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 1048022);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2906} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2907} __VERIFIER_error();
    goto SeqInstr_2065, SeqInstr_2066;

  SeqInstr_2066:
    assume assertsPassed;
    goto SeqInstr_2067;

  SeqInstr_2067:
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2065:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 1049054);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2908} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2909} __VERIFIER_error();
    goto SeqInstr_2068, SeqInstr_2069;

  SeqInstr_2069:
    assume assertsPassed;
    goto SeqInstr_2070;

  SeqInstr_2070:
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2068:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 1050086);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2910} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2911} __VERIFIER_error();
    goto SeqInstr_2071, SeqInstr_2072;

  SeqInstr_2072:
    assume assertsPassed;
    goto SeqInstr_2073;

  SeqInstr_2073:
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2071:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 1051118);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2912} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2913} __VERIFIER_error();
    goto SeqInstr_2074, SeqInstr_2075;

  SeqInstr_2075:
    assume assertsPassed;
    goto SeqInstr_2076;

  SeqInstr_2076:
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2074:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 1052150);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2914} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2915} __VERIFIER_error();
    goto SeqInstr_2077, SeqInstr_2078;

  SeqInstr_2078:
    assume assertsPassed;
    goto SeqInstr_2079;

  SeqInstr_2079:
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2077:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 1053182);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2916} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2917} __VERIFIER_error();
    goto SeqInstr_2080, SeqInstr_2081;

  SeqInstr_2081:
    assume assertsPassed;
    goto SeqInstr_2082;

  SeqInstr_2082:
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2080:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 1054214);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2918} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2919} __VERIFIER_error();
    goto SeqInstr_2083, SeqInstr_2084;

  SeqInstr_2084:
    assume assertsPassed;
    goto SeqInstr_2085;

  SeqInstr_2085:
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2083:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 1055246);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2920} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2921} __VERIFIER_error();
    goto SeqInstr_2086, SeqInstr_2087;

  SeqInstr_2087:
    assume assertsPassed;
    goto SeqInstr_2088;

  SeqInstr_2088:
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2086:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 1056278);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2922} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2923} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 2924} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 1057310);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.135, $M.31, $M.23, $M.12, $M.13, $M.16, $M.15, $M.26, $M.40, $M.14, $M.121, $M.120, $M.0, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.33, $M.173, $M.174, $M.175, $M.176, $M.8, $M.177, $M.178, $M.1, $M.11, $M.25, $M.24, $M.3, $M.18, $M.2, $M.5, $M.132, $M.115, $M.63, $M.131, $M.130, $M.129, $M.114, $M.128, $M.43, $M.42, $M.41, $M.44, $M.127, $M.126, $M.125, $M.124, $M.62, $M.123, $M.122, $M.119, $M.29, $M.7, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $CurrAddr, $M.34, $M.27, $M.28, $M.38, $M.39, assertsPassed, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.45, $M.46, $M.47, $M.48;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 2925} $initialize();
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2926} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2927} ldv_ldv_initialize_132();
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2928} ldv_entry_EMGentry_22($0.ref);
    goto SeqInstr_2089, SeqInstr_2090;

  SeqInstr_2090:
    assume assertsPassed;
    goto SeqInstr_2091;

  SeqInstr_2091:
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_2089:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_132: ref;

axiom ldv_ldv_initialize_132 == $sub.ref(0, 1058342);

procedure ldv_ldv_initialize_132();
  free requires assertsPassed;



implementation ldv_ldv_initialize_132()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2929} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 1059374);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2930} ldv_assume($i2);
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 1060406);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2931} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 1} true;
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 1061438);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 1062470);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 1063502);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_2092, SeqInstr_2093;

  SeqInstr_2093:
    assume assertsPassed;
    goto SeqInstr_2094;

  SeqInstr_2094:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_2092:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 1064534);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 1065566);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 1066598);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 1067630);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 1068662);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 1069694);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 1070726);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 1071758);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2932} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 2933} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2934} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2935} __VERIFIER_assume($i6);
    goto corral_source_split_12538;

  corral_source_split_12538:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 1072790);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 1073822);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 1074854);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12540;

  corral_source_split_12540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2936} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2937} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2938} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12546;

  corral_source_split_12546:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2939} __VERIFIER_assume($i4);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 1075886);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 1076918);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 1077950);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 1078982);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 1080014);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2940} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2941} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2942} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2943} __VERIFIER_assume($i4);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 1081046);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 1082078);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 1083110);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 1084142);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 1085174);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2944} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2945} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2946} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2947} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2948} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2949} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2950} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2951} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2952} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_12570;

  corral_source_split_12570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2953} __VERIFIER_assume($i7);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2954} __VERIFIER_assume($i11);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_12574;

  corral_source_split_12574:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 1086206);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 1087238);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 1088270);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 1089302);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 1090334);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 1091366);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 1092398);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 1093430);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 1094462);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12582;

  corral_source_split_12582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2955} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2957} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2958} __VERIFIER_assume($i10);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 1095494);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2959} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 2960} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 2961} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 1096526);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2962} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2963} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2964} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 1097558);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2965} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2966} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 1098590);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 1099622);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2967} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2968} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 1100654);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 1101686);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 1102718);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2969} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2970} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2971} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2973} $p6 := malloc($i5);
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 2974} cmdloc_dummy_var_38 := $memset.i8(cmdloc_dummy_var_37, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_12623;

  corral_source_split_12623:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 1103750);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 1104782);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.135, $M.31, $M.23, $M.12, $M.13, $M.16, $M.15, $M.26, $M.40, $M.14, $M.121, $M.120, $M.0, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.33, $M.173, $M.174, $M.175, $M.176, $M.8, $M.177, $M.178, $M.1, $M.11, $M.25, $M.24, $M.3, $M.18, $M.2, $M.5, $M.132, $M.115, $M.63, $M.131, $M.130, $M.129, $M.114, $M.128, $M.43, $M.42, $M.41, $M.44, $M.127, $M.126, $M.125, $M.124, $M.62, $M.123, $M.122, $M.119, $M.29, $M.7, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297;



implementation __SMACK_static_init()
{

  $bb0:
    $M.135 := $store.i8($M.135, __kstrtab_fw_core_add_descriptor, 102);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(3, 1)), 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(8, 1)), 97);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(9, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(12, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(14, 1)), 115);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(15, 1)), 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(16, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(18, 1)), 112);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(20, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_fw_core_add_descriptor, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.31 := 0;
    call {:si_unique_call 2975} {:cexpr "ldv_linux_lib_idr_idr_resource_idr_of_client"} boogie_si_record_i32(0);
    $M.23 := 0;
    call {:si_unique_call 2976} {:cexpr "ldv_linux_lib_idr_idr_fw_device_idr"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 2977} {:cexpr "ldv_linux_kernel_sched_completion_completion_phy_config_done"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 2978} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_transaction_callback_data"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 2979} {:cexpr "ldv_linux_kernel_sched_completion_completion_done_of_fw_card"} boogie_si_record_i32(0);
    call {:si_unique_call 2980} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 2981} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 2982} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    $M.15 := 1;
    call {:si_unique_call 2983} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_fw_card"} boogie_si_record_i32(1);
    $M.26 := 1;
    call {:si_unique_call 2984} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_client"} boogie_si_record_i32(1);
    call {:si_unique_call 2985} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 2986} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 2987} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 2988} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.40 := 1;
    call {:si_unique_call 2989} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_address_handler_list_lock"} boogie_si_record_i32(1);
    $M.14 := 0;
    call {:si_unique_call 2990} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.121 := 0;
    call {:si_unique_call 2991} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.120 := 0;
    call {:si_unique_call 2992} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, model_textual_descriptor, 196608);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_textual_descriptor, $mul.ref(0, 16)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_textual_descriptor, $mul.ref(0, 16)), $mul.ref(2, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_textual_descriptor, $mul.ref(0, 16)), $mul.ref(3, 4)), 1249208949);
    $M.0 := $store.ref($M.0, model_id_descriptor, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(model_id_descriptor, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(model_id_descriptor, $mul.ref(0, 40)), $mul.ref(16, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_id_descriptor, $mul.ref(0, 40)), $mul.ref(24, 1)), 386021633);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(model_id_descriptor, $mul.ref(0, 40)), $mul.ref(28, 1)), $sub.i32(0, 2130706432));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(model_id_descriptor, $mul.ref(0, 40)), $mul.ref(32, 1)), model_textual_descriptor);
    $M.0 := $store.i32($M.0, vendor_textual_descriptor, 393216);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(2, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(3, 4)), 1281977973);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(4, 4)), 2015381097);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(5, 4)), 1919252329);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_textual_descriptor, $mul.ref(0, 28)), $mul.ref(6, 4)), 1919221760);
    $M.0 := $store.ref($M.0, vendor_id_descriptor, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(vendor_id_descriptor, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vendor_id_descriptor, $mul.ref(0, 40)), $mul.ref(16, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_id_descriptor, $mul.ref(0, 40)), $mul.ref(24, 1)), 50339601);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vendor_id_descriptor, $mul.ref(0, 40)), $mul.ref(28, 1)), $sub.i32(0, 2130706432));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vendor_id_descriptor, $mul.ref(0, 40)), $mul.ref(32, 1)), vendor_textual_descriptor);
    $M.0 := $store.i64($M.0, low_memory_region, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(low_memory_region, $mul.ref(0, 16)), $mul.ref(8, 1)), 4294967296);
    $M.0 := $store.i64($M.0, low_memory, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(low_memory, $mul.ref(0, 48)), $mul.ref(8, 1)), 4294967296);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(low_memory, $mul.ref(0, 48)), $mul.ref(16, 1)), handle_low_memory);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(low_memory, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(low_memory, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(low_memory, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, registers_region, 281474708275200);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(registers_region, $mul.ref(0, 16)), $mul.ref(8, 1)), 281474708276224);
    $M.0 := $store.i64($M.0, registers, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(registers, $mul.ref(0, 48)), $mul.ref(8, 1)), 1024);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(registers, $mul.ref(0, 48)), $mul.ref(16, 1)), handle_registers);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(registers, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registers, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(registers, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i64($M.0, topology_map_region, 281474708279296);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(topology_map_region, $mul.ref(0, 16)), $mul.ref(8, 1)), 281474708280320);
    $M.0 := $store.i64($M.0, topology_map, 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(topology_map, $mul.ref(0, 48)), $mul.ref(8, 1)), 1024);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(topology_map, $mul.ref(0, 48)), $mul.ref(16, 1)), handle_topology_map);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(topology_map, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(topology_map, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(topology_map, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(8, 1)), $0.ref);
    $M.143 := $store.i8($M.143, __kstrtab_fw_rcode_string, 102);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(3, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(4, 1)), 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(5, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(7, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(8, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(10, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(12, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(13, 1)), 110);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(14, 1)), 103);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_fw_rcode_string, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_fw_core_handle_response, 102);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(1, 1)), 119);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(2, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(3, 1)), 99);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(4, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(5, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(6, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(7, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(8, 1)), 104);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(9, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(10, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(11, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(12, 1)), 108);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(15, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(17, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(18, 1)), 112);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(19, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(20, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_fw_core_handle_response, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.145 := $store.i8($M.145, __kstrtab_fw_core_handle_request, 102);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(3, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(4, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(6, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(7, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(8, 1)), 104);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(10, 1)), 110);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(11, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(12, 1)), 108);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(15, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(17, 1)), 113);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(18, 1)), 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(20, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(21, 1)), 116);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_fw_core_handle_request, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.146 := $store.i8($M.146, __kstrtab_fw_get_request_speed, 102);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(3, 1)), 103);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(5, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(7, 1)), 114);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(9, 1)), 113);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(10, 1)), 117);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(19, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_fw_get_request_speed, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.147 := $store.i8($M.147, __kstrtab_fw_send_response, 102);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(1, 1)), 119);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(5, 1)), 110);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(6, 1)), 100);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(9, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(10, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(12, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(13, 1)), 110);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(14, 1)), 115);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_fw_send_response, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.148 := $store.i8($M.148, __kstrtab_fw_fill_response, 102);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(1, 1)), 119);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(2, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(3, 1)), 102);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(4, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(5, 1)), 108);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(6, 1)), 108);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(7, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(8, 1)), 114);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(9, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(10, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(11, 1)), 112);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(12, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(13, 1)), 110);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(14, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(15, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_fw_fill_response, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.149 := $store.i8($M.149, __kstrtab_fw_core_remove_address_handler, 102);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(1, 1)), 119);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(2, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(3, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(4, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(5, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(6, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(7, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(8, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(9, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(10, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(11, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(12, 1)), 118);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(13, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(14, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(15, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(16, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(17, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(18, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(19, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(20, 1)), 115);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(21, 1)), 115);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(22, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(23, 1)), 104);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(24, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(25, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(26, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(27, 1)), 108);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(28, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(29, 1)), 114);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_fw_core_remove_address_handler, $mul.ref(0, 31)), $mul.ref(30, 1)), 0);
    $M.150 := $store.i8($M.150, __kstrtab_fw_core_add_address_handler, 102);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(1, 1)), 119);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(2, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(3, 1)), 99);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(4, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(5, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(6, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(7, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(8, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(9, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(10, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(12, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(13, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(14, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(15, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(17, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(18, 1)), 115);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(19, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(20, 1)), 104);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(21, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(22, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(23, 1)), 100);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(24, 1)), 108);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(25, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(26, 1)), 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_fw_core_add_address_handler, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.ref($M.0, address_handler_list, address_handler_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(address_handler_list, $mul.ref(0, 16)), $mul.ref(8, 1)), address_handler_list);
    $M.151 := $store.i32($M.151, address_handler_list_lock, 0);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.151 := $store.ref($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.93);
    $M.151 := $store.i32($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.151 := $store.i64($M.151, $add.ref($add.ref($add.ref($add.ref($add.ref(address_handler_list_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.152 := $store.i8($M.152, __kstrtab_fw_high_memory_region, 102);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(3, 1)), 104);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(4, 1)), 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(5, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(6, 1)), 104);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(7, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(8, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(10, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(11, 1)), 111);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(13, 1)), 121);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(17, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(20, 1)), 110);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_fw_high_memory_region, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i32($M.0, phy_config_done, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.92);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $add.ref(phy_config_done, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(phy_config_done, $mul.ref(0, 96)), $mul.ref(8, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $add.ref(phy_config_done, $mul.ref(80, 1)));
    $M.0 := $store.i32($M.0, phy_config_packet, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(0, 4)), 224);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(3, 4)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(24, 1)), 12);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(60, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(64, 1)), transmit_phy_packet_callback);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(72, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(80, 1)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(phy_config_packet, $mul.ref(0, 104)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.i32($M.0, phy_config_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.90);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(phy_config_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(phy_config_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), phy_config_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.91);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(phy_config_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.153 := $store.i8($M.153, __kstrtab_fw_run_transaction, 102);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(1, 1)), 119);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(3, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(4, 1)), 117);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(5, 1)), 110);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(9, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(10, 1)), 110);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(11, 1)), 115);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(13, 1)), 99);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(14, 1)), 116);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(16, 1)), 111);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(17, 1)), 110);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_fw_run_transaction, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_fw_send_request, 102);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(3, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(5, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(10, 1)), 113);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(11, 1)), 117);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(12, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_fw_send_request, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_fw_cancel_transaction, 102);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(3, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(4, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(5, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(6, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(8, 1)), 108);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(12, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(13, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(14, 1)), 115);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(15, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(16, 1)), 99);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(20, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_fw_cancel_transaction, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_fw_core_handle_bus_reset, 102);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(1, 1)), 119);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(2, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(3, 1)), 99);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(4, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(5, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(6, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(7, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(8, 1)), 104);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(9, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(10, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(11, 1)), 100);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(12, 1)), 108);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(15, 1)), 98);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(16, 1)), 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(18, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(19, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(20, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(21, 1)), 115);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(23, 1)), 116);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_fw_core_handle_bus_reset, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_fw_iso_resource_manage, 102);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(4, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(5, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(7, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(9, 1)), 115);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(10, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(11, 1)), 117);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(13, 1)), 99);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(14, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(16, 1)), 109);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(20, 1)), 103);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_fw_iso_resource_manage, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_fw_iso_context_stop, 102);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(1, 1)), 119);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(3, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(4, 1)), 115);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(5, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(6, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(8, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(9, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(10, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(12, 1)), 120);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(15, 1)), 115);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(18, 1)), 112);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_fw_iso_context_stop, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_fw_iso_context_flush_completions, 102);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(1, 1)), 119);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(2, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(3, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(4, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(5, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(6, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(7, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(8, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(9, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(10, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(11, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(12, 1)), 120);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(13, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(14, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(15, 1)), 102);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(16, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(17, 1)), 117);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(18, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(19, 1)), 104);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(20, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(21, 1)), 99);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(22, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(23, 1)), 109);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(24, 1)), 112);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(25, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(26, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(27, 1)), 116);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(28, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(29, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(30, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(31, 1)), 115);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_fw_iso_context_flush_completions, $mul.ref(0, 33)), $mul.ref(32, 1)), 0);
    $M.160 := $store.i8($M.160, __kstrtab_fw_iso_context_queue_flush, 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(1, 1)), 119);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(2, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(3, 1)), 105);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(4, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(5, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(6, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(7, 1)), 99);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(8, 1)), 111);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(9, 1)), 110);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(10, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(12, 1)), 120);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(14, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(15, 1)), 113);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(16, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(17, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(18, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(19, 1)), 101);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(20, 1)), 95);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(21, 1)), 102);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(22, 1)), 108);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(23, 1)), 117);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(24, 1)), 115);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(25, 1)), 104);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(__kstrtab_fw_iso_context_queue_flush, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.161 := $store.i8($M.161, __kstrtab_fw_iso_context_queue, 102);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(12, 1)), 120);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(15, 1)), 113);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(16, 1)), 117);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.161 := $store.i8($M.161, $add.ref($add.ref(__kstrtab_fw_iso_context_queue, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.162 := $store.i8($M.162, __kstrtab_fw_iso_context_start, 102);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(3, 1)), 105);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(5, 1)), 111);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(12, 1)), 120);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(13, 1)), 116);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(15, 1)), 115);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.162 := $store.i8($M.162, $add.ref($add.ref(__kstrtab_fw_iso_context_start, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.163 := $store.i8($M.163, __kstrtab_fw_iso_context_destroy, 102);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(1, 1)), 119);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(2, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(3, 1)), 105);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(4, 1)), 115);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(5, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(7, 1)), 99);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(8, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(9, 1)), 110);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(10, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(12, 1)), 120);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(13, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(15, 1)), 100);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(16, 1)), 101);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(17, 1)), 115);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(19, 1)), 114);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(20, 1)), 111);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(21, 1)), 121);
    $M.163 := $store.i8($M.163, $add.ref($add.ref(__kstrtab_fw_iso_context_destroy, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.164 := $store.i8($M.164, __kstrtab_fw_iso_context_create, 102);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(8, 1)), 111);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(9, 1)), 110);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(10, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(12, 1)), 120);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(15, 1)), 99);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(17, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.164 := $store.i8($M.164, $add.ref($add.ref(__kstrtab_fw_iso_context_create, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.165 := $store.i8($M.165, __kstrtab_fw_iso_buffer_destroy, 102);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(3, 1)), 105);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(5, 1)), 111);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(8, 1)), 117);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(9, 1)), 102);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(10, 1)), 102);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(13, 1)), 95);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(16, 1)), 115);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(17, 1)), 116);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(18, 1)), 114);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(20, 1)), 121);
    $M.165 := $store.i8($M.165, $add.ref($add.ref(__kstrtab_fw_iso_buffer_destroy, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.166 := $store.i8($M.166, __kstrtab_fw_iso_buffer_init, 102);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(1, 1)), 119);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(3, 1)), 105);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(4, 1)), 115);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(5, 1)), 111);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(7, 1)), 98);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(9, 1)), 102);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(10, 1)), 102);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(11, 1)), 101);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(12, 1)), 114);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(14, 1)), 105);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(15, 1)), 110);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(16, 1)), 105);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.166 := $store.i8($M.166, $add.ref($add.ref(__kstrtab_fw_iso_buffer_init, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.0 := $store.ref($M.0, fw_unit_attributes, .str.71);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(32, 1)), modalias_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.72);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(32, 1)), rom_index_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(1, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_unit_attributes, $mul.ref(0, 144)), $mul.ref(2, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, fw_device_attributes, .str.66);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(32, 1)), config_rom_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.67);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(32, 1)), guid_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(1, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.68);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(32, 1)), is_local_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(2, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.69);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(32, 1)), units_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(3, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_attributes, $mul.ref(0, 240)), $mul.ref(4, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, config_rom_attributes, .str.58);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_immediate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(0, 56)), $mul.ref(48, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.59);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_immediate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(1, 56)), $mul.ref(48, 1)), 4);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_immediate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(2, 56)), $mul.ref(48, 1)), 18);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.61);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_immediate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(3, 56)), $mul.ref(48, 1)), 19);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.62);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_immediate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(4, 56)), $mul.ref(48, 1)), 23);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.63);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_text_leaf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(5, 56)), $mul.ref(48, 1)), 3);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.64);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_text_leaf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(6, 56)), $mul.ref(48, 1)), 23);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), .str.65);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(32, 1)), show_text_leaf);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(config_rom_attributes, $mul.ref(0, 448)), $mul.ref(7, 56)), $mul.ref(48, 1)), 4);
    $M.0 := $store.ref($M.0, fw_device_type, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_type, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_type, $mul.ref(0, 48)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_type, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_type, $mul.ref(0, 48)), $mul.ref(32, 1)), fw_device_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.167 := $store.i8($M.167, __kstrtab_fw_workqueue, 102);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(1, 1)), 119);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(3, 1)), 119);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(4, 1)), 111);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(5, 1)), 114);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(6, 1)), 107);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(7, 1)), 113);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(8, 1)), 117);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(11, 1)), 101);
    $M.167 := $store.i8($M.167, $add.ref($add.ref(__kstrtab_fw_workqueue, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.168 := $store.i8($M.168, __kstrtab_fw_device_enable_phys_dma, 102);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(1, 1)), 119);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(3, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(4, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(5, 1)), 118);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(6, 1)), 105);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(7, 1)), 99);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(11, 1)), 110);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(13, 1)), 98);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(14, 1)), 108);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(15, 1)), 101);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(17, 1)), 112);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(18, 1)), 104);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(19, 1)), 121);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(20, 1)), 115);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(21, 1)), 95);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(22, 1)), 100);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(23, 1)), 109);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(24, 1)), 97);
    $M.168 := $store.i8($M.168, $add.ref($add.ref(__kstrtab_fw_device_enable_phys_dma, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.169 := $store.i8($M.169, __kstrtab_fw_bus_type, 102);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(1, 1)), 119);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(3, 1)), 98);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(4, 1)), 117);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(5, 1)), 115);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(7, 1)), 116);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(8, 1)), 121);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(9, 1)), 112);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.169 := $store.i8($M.169, $add.ref($add.ref(__kstrtab_fw_bus_type, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.ref($M.0, fw_unit_type, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_unit_type, $mul.ref(0, 48)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_unit_type, $mul.ref(0, 48)), $mul.ref(16, 1)), fw_unit_uevent);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_unit_type, $mul.ref(0, 48)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_unit_type, $mul.ref(0, 48)), $mul.ref(32, 1)), fw_unit_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_unit_type, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.170 := $store.i8($M.170, __kstrtab_fw_csr_string, 102);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(1, 1)), 119);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(2, 1)), 95);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(3, 1)), 99);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(4, 1)), 115);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(5, 1)), 114);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(7, 1)), 115);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(8, 1)), 116);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(10, 1)), 105);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(11, 1)), 110);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(12, 1)), 103);
    $M.170 := $store.i8($M.170, $add.ref($add.ref(__kstrtab_fw_csr_string, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.171 := $store.i8($M.171, __kstrtab_fw_csr_iterator_next, 102);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(5, 1)), 114);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(16, 1)), 110);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(18, 1)), 120);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_fw_csr_iterator_next, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.172 := $store.i8($M.172, __kstrtab_fw_csr_iterator_init, 102);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(1, 1)), 119);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(2, 1)), 95);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(4, 1)), 115);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(5, 1)), 114);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(10, 1)), 114);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(13, 1)), 111);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(16, 1)), 105);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.172 := $store.i8($M.172, $add.ref($add.ref(__kstrtab_fw_csr_iterator_init, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.33 := $store.ref($M.33, ioctl_handlers, ioctl_get_info);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(1, 8)), ioctl_send_request);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(2, 8)), ioctl_allocate);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(3, 8)), ioctl_deallocate);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(4, 8)), ioctl_send_response);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(5, 8)), ioctl_initiate_bus_reset);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(6, 8)), ioctl_add_descriptor);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(7, 8)), ioctl_remove_descriptor);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(8, 8)), ioctl_create_iso_context);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(9, 8)), ioctl_queue_iso);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(10, 8)), ioctl_start_iso);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(11, 8)), ioctl_stop_iso);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(12, 8)), ioctl_get_cycle_timer);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(13, 8)), ioctl_allocate_iso_resource);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(14, 8)), ioctl_deallocate_iso_resource);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(15, 8)), ioctl_allocate_iso_resource_once);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(16, 8)), ioctl_deallocate_iso_resource_once);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(17, 8)), ioctl_get_speed);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(18, 8)), ioctl_send_broadcast_request);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(19, 8)), ioctl_send_stream_packet);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(20, 8)), ioctl_get_cycle_timer2);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(21, 8)), ioctl_send_phy_packet);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(22, 8)), ioctl_receive_phy_packets);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(23, 8)), ioctl_set_iso_channels);
    $M.33 := $store.ref($M.33, $add.ref($add.ref(ioctl_handlers, $mul.ref(0, 200)), $mul.ref(24, 8)), ioctl_flush_iso);
    $M.173 := $store.i8($M.173, __kstrtab_fw_core_remove_card, 102);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(1, 1)), 119);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(2, 1)), 95);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(4, 1)), 111);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(9, 1)), 101);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(10, 1)), 109);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(11, 1)), 111);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(12, 1)), 118);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(13, 1)), 101);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(15, 1)), 99);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(17, 1)), 114);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(18, 1)), 100);
    $M.173 := $store.i8($M.173, $add.ref($add.ref(__kstrtab_fw_core_remove_card, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.ref($M.0, dummy_driver_template, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(8, 1)), dummy_read_phy_reg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(16, 1)), dummy_update_phy_reg);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(32, 1)), dummy_send_request);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(40, 1)), dummy_send_response);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(48, 1)), dummy_cancel_packet);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(56, 1)), dummy_enable_phys_dma);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(80, 1)), dummy_allocate_iso_context);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(96, 1)), dummy_start_iso);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(104, 1)), dummy_set_iso_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(112, 1)), dummy_queue_iso);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(120, 1)), dummy_flush_queue_iso);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(128, 1)), dummy_flush_iso_completions);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dummy_driver_template, $mul.ref(0, 144)), $mul.ref(136, 1)), $0.ref);
    $M.174 := $store.i8($M.174, __kstrtab_fw_card_release, 102);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(1, 1)), 119);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(2, 1)), 95);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(3, 1)), 99);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(4, 1)), 97);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(5, 1)), 114);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(6, 1)), 100);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(7, 1)), 95);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(10, 1)), 108);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(13, 1)), 115);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.174 := $store.i8($M.174, $add.ref($add.ref(__kstrtab_fw_card_release, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.175 := $store.i8($M.175, __kstrtab_fw_card_add, 102);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(1, 1)), 119);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(2, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(3, 1)), 99);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(4, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(6, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(7, 1)), 95);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(9, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(10, 1)), 100);
    $M.175 := $store.i8($M.175, $add.ref($add.ref(__kstrtab_fw_card_add, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.ref($M.0, card_list, card_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(card_list, $mul.ref(0, 16)), $mul.ref(8, 1)), card_list);
    $M.176 := $store.i8($M.176, __kstrtab_fw_card_initialize, 102);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(1, 1)), 119);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(2, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(3, 1)), 99);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(4, 1)), 97);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(5, 1)), 114);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(6, 1)), 100);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(8, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(9, 1)), 110);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(10, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(11, 1)), 116);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(12, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(13, 1)), 97);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(15, 1)), 105);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(16, 1)), 122);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.176 := $store.i8($M.176, $add.ref($add.ref(__kstrtab_fw_card_initialize, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.8 := $store.i8($M.8, gap_count_table, 63);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(1, 1)), 5);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(2, 1)), 7);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(3, 1)), 8);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(4, 1)), 10);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(5, 1)), 13);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(6, 1)), 16);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(7, 1)), 18);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(8, 1)), 21);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(9, 1)), 24);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(10, 1)), 26);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(11, 1)), 29);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(12, 1)), 32);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(13, 1)), 35);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(14, 1)), 37);
    $M.8 := $store.i8($M.8, $add.ref($add.ref(gap_count_table, $mul.ref(0, 16)), $mul.ref(15, 1)), 40);
    $M.177 := $store.i8($M.177, __kstrtab_fw_schedule_bus_reset, 102);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(1, 1)), 119);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(2, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(3, 1)), 115);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(4, 1)), 99);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(5, 1)), 104);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(6, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(7, 1)), 100);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(8, 1)), 117);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(11, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(12, 1)), 98);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(13, 1)), 117);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(14, 1)), 115);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(16, 1)), 114);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(17, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(18, 1)), 115);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.177 := $store.i8($M.177, $add.ref($add.ref(__kstrtab_fw_schedule_bus_reset, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.178 := $store.i8($M.178, __kstrtab_fw_core_remove_descriptor, 102);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(1, 1)), 119);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(2, 1)), 95);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(3, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(4, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(5, 1)), 114);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(6, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(7, 1)), 95);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(8, 1)), 114);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(9, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(10, 1)), 109);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(11, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(12, 1)), 118);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(15, 1)), 100);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(16, 1)), 101);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(17, 1)), 115);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(18, 1)), 99);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(20, 1)), 105);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(21, 1)), 112);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.178 := $store.i8($M.178, $add.ref($add.ref(__kstrtab_fw_core_remove_descriptor, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.ref($M.0, descriptor_list, descriptor_list);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(descriptor_list, $mul.ref(0, 16)), $mul.ref(8, 1)), descriptor_list);
    $M.1 := 7;
    call {:si_unique_call 2993} {:cexpr "config_rom_length"} boogie_si_record_i64(7);
    $M.0 := $store.i32($M.0, card_mutex, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(card_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(card_mutex, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), card_mutex);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(card_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.11 := 0;
    call {:si_unique_call 2994} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_phy_config_mutex"} boogie_si_record_i8(0);
    $M.25 := 0;
    call {:si_unique_call 2995} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 2996} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 2997} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    $M.24 := 0;
    call {:si_unique_call 2998} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_client_list_mutex_of_fw_device"} boogie_si_record_i8(0);
    $M.3 := 0;
    call {:si_unique_call 2999} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_card_mutex"} boogie_si_record_i8(0);
    call {:si_unique_call 3000} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 3001} {:cexpr "fw_cdev_major"} boogie_si_record_i32(0);
    $M.0 := $store.i32($M.0, tmp_config_rom, 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(1, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(2, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(3, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(4, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(5, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(6, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(7, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(8, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(9, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(10, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(11, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(12, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(13, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(14, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(15, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(16, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(17, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(18, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(19, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(20, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(21, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(22, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(23, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(24, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(25, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(26, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(27, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(28, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(29, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(30, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(31, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(32, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(33, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(34, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(35, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(36, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(37, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(38, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(39, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(40, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(41, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(42, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(43, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(44, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(45, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(46, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(47, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(48, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(49, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(50, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(51, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(52, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(53, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(54, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(55, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(56, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(57, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(58, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(59, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(60, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(61, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(62, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(63, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(64, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(65, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(66, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(67, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(68, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(69, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(70, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(71, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(72, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(73, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(74, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(75, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(76, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(77, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(78, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(79, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(80, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(81, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(82, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(83, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(84, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(85, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(86, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(87, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(88, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(89, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(90, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(91, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(92, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(93, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(94, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(95, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(96, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(97, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(98, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(99, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(100, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(101, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(102, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(103, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(104, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(105, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(106, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(107, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(108, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(109, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(110, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(111, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(112, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(113, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(114, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(115, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(116, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(117, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(118, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(119, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(120, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(121, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(122, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(123, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(124, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(125, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(126, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(127, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(128, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(129, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(130, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(131, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(132, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(133, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(134, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(135, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(136, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(137, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(138, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(139, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(140, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(141, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(142, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(143, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(144, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(145, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(146, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(147, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(148, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(149, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(150, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(151, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(152, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(153, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(154, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(155, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(156, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(157, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(158, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(159, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(160, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(161, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(162, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(163, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(164, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(165, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(166, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(167, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(168, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(169, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(170, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(171, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(172, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(173, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(174, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(175, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(176, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(177, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(178, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(179, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(180, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(181, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(182, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(183, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(184, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(185, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(186, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(187, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(188, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(189, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(190, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(191, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(192, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(193, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(194, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(195, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(196, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(197, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(198, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(199, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(200, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(201, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(202, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(203, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(204, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(205, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(206, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(207, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(208, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(209, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(210, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(211, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(212, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(213, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(214, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(215, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(216, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(217, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(218, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(219, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(220, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(221, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(222, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(223, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(224, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(225, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(226, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(227, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(228, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(229, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(230, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(231, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(232, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(233, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(234, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(235, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(236, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(237, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(238, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(239, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(240, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(241, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(242, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(243, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(244, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(245, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(246, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(247, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(248, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(249, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(250, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(251, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(252, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(253, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(254, 4)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(tmp_config_rom, $mul.ref(0, 1024)), $mul.ref(255, 4)), 0);
    $M.2 := 0;
    call {:si_unique_call 3002} {:cexpr "descriptor_count"} boogie_si_record_i32(0);
    $M.5 := $0.ref;
    $M.132 := 0;
    call {:si_unique_call 3003} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    $M.115 := 0;
    call {:si_unique_call 3004} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 3005} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.131 := 0;
    call {:si_unique_call 3006} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.130 := 0;
    call {:si_unique_call 3007} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.129 := 0;
    call {:si_unique_call 3008} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 3009} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.128 := 0;
    call {:si_unique_call 3010} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.43 := 0;
    call {:si_unique_call 3011} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 3012} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 3013} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 3014} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.127 := 1;
    call {:si_unique_call 3015} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.126 := 1;
    call {:si_unique_call 3016} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.125 := 1;
    call {:si_unique_call 3017} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.124 := 0;
    call {:si_unique_call 3018} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 3019} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.123 := 0;
    call {:si_unique_call 3020} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.122 := 0;
    call {:si_unique_call 3021} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.119 := 0;
    call {:si_unique_call 3022} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.29 := 1;
    call {:si_unique_call 3023} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.0 := $store.ref($M.0, fw_device_idr, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_idr, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i64($M.0, fw_device_rwsem, 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $add.ref(fw_device_rwsem, $mul.ref(8, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(8, 1)), $add.ref(fw_device_rwsem, $mul.ref(8, 1)));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(24, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(96, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(fw_device_rwsem, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, fw_bus_type, .str.8);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(56, 1)), fw_unit_match);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(72, 1)), fw_unit_probe);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(80, 1)), fw_unit_remove);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(112, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(fw_bus_type, $mul.ref(0, 160)), $mul.ref(152, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, fw_device_ops, __this_module);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(8, 1)), no_llseek);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(16, 1)), fw_device_op_read);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(72, 1)), fw_device_op_poll);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(80, 1)), fw_device_op_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(88, 1)), fw_device_op_compat_ioctl);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(96, 1)), fw_device_op_mmap);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(112, 1)), fw_device_op_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(128, 1)), fw_device_op_release);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(136, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(fw_device_ops, $mul.ref(0, 240)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.i8($M.0, .str.37, 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(2, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(10, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(19, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(22, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(23, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(24, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(25, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(26, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(27, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(29, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(33, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.37, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.40, 66);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(6, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(15, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(16, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(18, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(19, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(21, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(24, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(26, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(28, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(29, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(30, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(32, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(34, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(35, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(37, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(39, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(40, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(41, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(42, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(43, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(44, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(45, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(46, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(47, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(48, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(49, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(50, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.40, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, .str.41, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(4, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(10, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(14, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(18, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(20, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(21, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(22, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(23, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(24, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(25, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(27, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(31, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(34, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(37, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.41, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.7 := $store.i8($M.7, .str.22, 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(2, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(5, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(6, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.22, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i8($M.7, .str.23, 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(2, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(3, 1)), 102);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(4, 1)), 108);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(6, 1)), 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(8, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(12, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(13, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.23, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.7 := $store.i8($M.7, .str.24, 100);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(1, 1)), 97);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(2, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(3, 1)), 97);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(4, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(8, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.24, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, .str.25, 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(1, 1)), 121);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(2, 1)), 112);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(4, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(8, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.25, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, .str.26, 97);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(3, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(5, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(6, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(10, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(11, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.26, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.7 := $store.i8($M.7, .str.27, 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(1, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(3, 1)), 100);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(4, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(5, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(7, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(8, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(9, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.27, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.7 := $store.i8($M.7, .str.28, 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(1, 1)), 105);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(2, 1)), 109);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(3, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(5, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(6, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.28, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.7 := $store.i8($M.7, .str.29, 98);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.29, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.29, $mul.ref(0, 5)), $mul.ref(2, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.29, $mul.ref(0, 5)), $mul.ref(3, 1)), 121);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.29, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.7 := $store.i8($M.7, .str.30, 98);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(1, 1)), 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(2, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(3, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(4, 1)), 114);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(5, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(6, 1)), 115);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(8, 1)), 116);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.30, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.7 := $store.i8($M.7, .str.31, 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(1, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(2, 1)), 32);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(3, 1)), 97);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(4, 1)), 99);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(5, 1)), 107);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.31, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.7 := $store.i8($M.7, .str.32, 117);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.7 := $store.i8($M.7, $add.ref($add.ref(.str.32, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.42, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(19, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(23, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(26, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(27, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(29, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(30, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(33, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(34, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(35, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(36, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.42, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.73, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(2, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(3, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(16, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(17, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(19, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.73, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.74, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(19, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(22, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(26, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(28, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(29, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(31, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(32, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(33, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(36, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(37, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.74, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(1, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(16, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(17, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(18, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(24, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(26, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(27, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(29, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(30, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(31, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(32, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(33, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(34, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(35, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(36, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.56, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(1, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(4, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(20, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(21, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(22, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(25, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(26, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(28, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(30, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(31, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(33, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(34, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(35, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(36, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(37, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(38, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(39, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(40, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.56, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, .str.50, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(2, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(17, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(18, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(19, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(20, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(25, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(26, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(27, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(28, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(30, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(32, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(33, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(34, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(35, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(37, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(38, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(39, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(40, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(41, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(42, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(43, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(44, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(45, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(46, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(47, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(48, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(49, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(50, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(51, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.50, $mul.ref(0, 53)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, .str.52, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(5, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(9, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(10, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(16, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(20, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.52, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.53, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(15, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(16, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(17, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(19, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(20, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(21, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(22, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(24, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(25, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(26, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(27, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(28, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(29, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(30, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(31, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(32, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(34, 1)), 83);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(37, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(38, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(39, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.53, $mul.ref(0, 41)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.57, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(3, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(7, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(15, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(17, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(20, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(22, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.8, 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(1, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.8, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.15, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(12, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(21, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.15, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.84, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(10, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(12, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(14, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(20, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(21, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(24, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(25, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(26, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(27, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(28, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(29, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(30, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.84, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, .str.85, 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(1, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(2, 1)), 89);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(4, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(5, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(10, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(14, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(18, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(22, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(24, 1)), 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(25, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(26, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(28, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(29, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(30, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(31, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(32, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(34, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(35, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(36, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.85, $mul.ref(0, 38)), $mul.ref(37, 1)), 0);
    $M.0 := $store.i8($M.0, .str.86, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(6, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(7, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(20, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(23, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(24, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.86, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(3, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(12, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(13, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(14, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(15, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(20, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(21, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(22, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(24, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(25, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(26, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(27, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(29, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(31, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(32, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(33, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(35, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(36, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(37, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, .str.88, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(12, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(13, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(16, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(20, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(22, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(24, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(25, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(26, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(27, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(28, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(29, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(30, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(32, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(33, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(36, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(37, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(38, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(39, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(40, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(41, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(42, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(43, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(44, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(45, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(46, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(47, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(48, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(49, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(50, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(51, 1)), 61);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(52, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(53, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(54, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.88, $mul.ref(0, 56)), $mul.ref(55, 1)), 0);
    $M.0 := $store.i8($M.0, .str.94, 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(1, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(3, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(4, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(5, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(7, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(9, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(13, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(15, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(16, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(17, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(18, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(19, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(21, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(23, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(24, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(28, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(29, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(30, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(31, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(33, 1)), 45);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(34, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(35, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(36, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(37, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(38, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(39, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(40, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(41, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(42, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(43, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(44, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(45, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(46, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(47, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(48, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(49, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.94, $mul.ref(0, 51)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(3, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(11, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(14, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(20, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(21, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(22, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(23, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(25, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(26, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(28, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(29, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(30, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(31, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(34, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(36, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(37, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(38, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(39, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(40, 1)), 37);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(41, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(42, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(43, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.292 := $store.i8($M.292, .str.79, 105);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(1, 1)), 101);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(2, 1)), 101);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(3, 1)), 101);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(4, 1)), 49);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(5, 1)), 51);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(6, 1)), 57);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(7, 1)), 52);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(8, 1)), 58);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(9, 1)), 118);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(10, 1)), 101);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(11, 1)), 110);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(12, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(13, 1)), 48);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(14, 1)), 56);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(15, 1)), 88);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(16, 1)), 109);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(17, 1)), 111);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(18, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(19, 1)), 48);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(20, 1)), 56);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(21, 1)), 88);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(22, 1)), 115);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(23, 1)), 112);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(24, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(25, 1)), 48);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(26, 1)), 56);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(27, 1)), 88);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(28, 1)), 118);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(29, 1)), 101);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(30, 1)), 114);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(31, 1)), 37);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(32, 1)), 48);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(33, 1)), 56);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(34, 1)), 88);
    $M.292 := $store.i8($M.292, $add.ref($add.ref(.str.79, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, .str.59, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.59, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.60, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(2, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.60, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.61, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.61, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.62, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.64, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(8, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.64, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.65, 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(2, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(9, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(19, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.65, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.75, 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.75, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.293 := $store.i8($M.293, .str.81, 48);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(1, 1)), 120);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(2, 1)), 37);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(3, 1)), 48);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(4, 1)), 54);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(5, 1)), 120);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(6, 1)), 10);
    $M.293 := $store.i8($M.293, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(3, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(5, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(9, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.67, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, .str.68, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(3, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(4, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.68, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 6)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 6)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.294 := $store.i8($M.294, .str.76, 48);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(1, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(2, 1)), 37);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(3, 1)), 48);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(4, 1)), 54);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(5, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(6, 1)), 58);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(7, 1)), 48);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(8, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(9, 1)), 37);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(10, 1)), 48);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(11, 1)), 54);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(12, 1)), 120);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(13, 1)), 32);
    $M.294 := $store.i8($M.294, $add.ref($add.ref(.str.76, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.295 := $store.i8($M.295, .str.78, 37);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.295 := $store.i8($M.295, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.296 := $store.i8($M.296, .str.77, 48);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(2, 1)), 37);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(3, 1)), 48);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(4, 1)), 56);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(5, 1)), 120);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(6, 1)), 37);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(7, 1)), 48);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(8, 1)), 56);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(9, 1)), 120);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(10, 1)), 10);
    $M.296 := $store.i8($M.296, $add.ref($add.ref(.str.77, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.72, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(5, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(6, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(8, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.72, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.297 := $store.i8($M.297, .str.80, 37);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.80, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.80, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.297 := $store.i8($M.297, $add.ref($add.ref(.str.80, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(2, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(3, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(10, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(12, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(16, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(17, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(18, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(20, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(21, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(22, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(24, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    call {:si_unique_call 3024} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 1105814);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref, arg2: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 1106846);

procedure devirtbounce.1(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.1(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3025} fw_core_remove_descriptor($p1);
    goto SeqInstr_2095, SeqInstr_2096;

  SeqInstr_2096:
    assume assertsPassed;
    goto SeqInstr_2097;

  SeqInstr_2097:
    return;

  SeqInstr_2095:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i20 == 1;
    call {:si_unique_call 3026} fw_card_release(arg);
    return;

  $bb4:
    assume $i21 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3027} br_work($p2);
    goto SeqInstr_2098, SeqInstr_2099;

  SeqInstr_2099:
    assume assertsPassed;
    goto SeqInstr_2100;

  SeqInstr_2100:
    return;

  SeqInstr_2098:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3028} bm_work($p3);
    goto SeqInstr_2101, SeqInstr_2102;

  SeqInstr_2102:
    assume assertsPassed;
    goto SeqInstr_2103;

  SeqInstr_2103:
    return;

  SeqInstr_2101:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3029} fw_core_remove_card($p4);
    goto SeqInstr_2104, SeqInstr_2105;

  SeqInstr_2105:
    assume assertsPassed;
    goto SeqInstr_2106;

  SeqInstr_2106:
    return;

  SeqInstr_2104:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3030} fw_device_init($p5);
    goto SeqInstr_2107, SeqInstr_2108;

  SeqInstr_2108:
    assume assertsPassed;
    goto SeqInstr_2109;

  SeqInstr_2109:
    return;

  SeqInstr_2107:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3031} fw_device_workfn($p6);
    goto SeqInstr_2110, SeqInstr_2111;

  SeqInstr_2111:
    assume assertsPassed;
    goto SeqInstr_2112;

  SeqInstr_2112:
    return;

  SeqInstr_2110:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3032} fw_device_refresh($p7);
    goto SeqInstr_2113, SeqInstr_2114;

  SeqInstr_2114:
    assume assertsPassed;
    goto SeqInstr_2115;

  SeqInstr_2115:
    return;

  SeqInstr_2113:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3033} fw_device_update($p8);
    goto SeqInstr_2116, SeqInstr_2117;

  SeqInstr_2117:
    assume assertsPassed;
    goto SeqInstr_2118;

  SeqInstr_2118:
    return;

  SeqInstr_2116:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3034} fw_device_shutdown($p9);
    goto SeqInstr_2119, SeqInstr_2120;

  SeqInstr_2120:
    assume assertsPassed;
    goto SeqInstr_2121;

  SeqInstr_2121:
    return;

  SeqInstr_2119:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3035} wake_up_client($p10);
    return;

  $bb13:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3036} queue_bus_reset_event($p11);
    goto SeqInstr_2122, SeqInstr_2123;

  SeqInstr_2123:
    assume assertsPassed;
    goto SeqInstr_2124;

  SeqInstr_2124:
    return;

  SeqInstr_2122:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    call {:si_unique_call 3037} client_release(arg);
    return;

  $bb15:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3038} fw_device_release($p12);
    goto SeqInstr_2125, SeqInstr_2126;

  SeqInstr_2126:
    assume assertsPassed;
    goto SeqInstr_2127;

  SeqInstr_2127:
    return;

  SeqInstr_2125:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3039} fw_iso_context_destroy($p13);
    goto SeqInstr_2128, SeqInstr_2129;

  SeqInstr_2129:
    assume assertsPassed;
    goto SeqInstr_2130;

  SeqInstr_2130:
    return;

  SeqInstr_2128:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3040} fw_iso_context_queue_flush($p14);
    goto SeqInstr_2131, SeqInstr_2132;

  SeqInstr_2132:
    assume assertsPassed;
    goto SeqInstr_2133;

  SeqInstr_2133:
    return;

  SeqInstr_2131:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i35 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3041} fw_core_remove_address_handler($p15);
    goto SeqInstr_2134, SeqInstr_2135;

  SeqInstr_2135:
    assume assertsPassed;
    goto SeqInstr_2136;

  SeqInstr_2136:
    return;

  SeqInstr_2134:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3042} dummy_flush_queue_iso($p16);
    return;

  $bb20:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3043} iso_resource_work($p17);
    goto SeqInstr_2137, SeqInstr_2138;

  SeqInstr_2138:
    assume assertsPassed;
    goto SeqInstr_2139;

  SeqInstr_2139:
    return;

  SeqInstr_2137:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3044} fw_unit_release($p18);
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 1107878);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dummy_read_phy_reg, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3045} $i1 := dummy_read_phy_reg(arg, arg1);
    $r := $i1;
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 1108910);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(release_address_handler, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i25 == 1);
    $i24 := $eq.ref(release_request, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i24 == 1);
    $i23 := $eq.ref(release_descriptor, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i23 == 1);
    $i22 := $eq.ref(dummy_send_response, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i22 == 1);
    $i21 := $eq.ref(dummy_send_request, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_core_handle_response, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_core_handle_request, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i19 == 1);
    $i18 := $eq.ref(release_transaction, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i18 == 1);
    $i17 := $eq.ref(fw_iso_buffer_destroy, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i17 == 1);
    $i16 := $eq.ref(fw_csr_iterator_init, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i16 == 1);
    $i15 := $eq.ref(release_iso_resource, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3046} release_iso_resource($p1, $p2);
    goto SeqInstr_2140, SeqInstr_2141;

  SeqInstr_2141:
    assume assertsPassed;
    goto SeqInstr_2142;

  SeqInstr_2142:
    return;

  SeqInstr_2140:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3047} fw_csr_iterator_init($p3, $p4);
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3048} fw_iso_buffer_destroy($p5, $p6);
    return;

  $bb5:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3049} release_transaction($p7, $p8);
    return;

  $bb6:
    assume $i19 == 1;
    call {:si_unique_call 3050} fw_core_handle_request(arg, arg1);
    goto SeqInstr_2143, SeqInstr_2144;

  SeqInstr_2144:
    assume assertsPassed;
    goto SeqInstr_2145;

  SeqInstr_2145:
    return;

  SeqInstr_2143:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    call {:si_unique_call 3051} fw_core_handle_response(arg, arg1);
    goto SeqInstr_2146, SeqInstr_2147;

  SeqInstr_2147:
    assume assertsPassed;
    goto SeqInstr_2148;

  SeqInstr_2148:
    return;

  SeqInstr_2146:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    call {:si_unique_call 3052} dummy_send_request(arg, arg1);
    goto SeqInstr_2149, SeqInstr_2150;

  SeqInstr_2150:
    assume assertsPassed;
    goto SeqInstr_2151;

  SeqInstr_2151:
    return;

  SeqInstr_2149:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    call {:si_unique_call 3053} dummy_send_response(arg, arg1);
    goto SeqInstr_2152, SeqInstr_2153;

  SeqInstr_2153:
    assume assertsPassed;
    goto SeqInstr_2154;

  SeqInstr_2154:
    return;

  SeqInstr_2152:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i23 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3054} release_descriptor($p9, $p10);
    goto SeqInstr_2155, SeqInstr_2156;

  SeqInstr_2156:
    assume assertsPassed;
    goto SeqInstr_2157;

  SeqInstr_2157:
    return;

  SeqInstr_2155:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3055} release_request($p11, $p12);
    goto SeqInstr_2158, SeqInstr_2159;

  SeqInstr_2159:
    assume assertsPassed;
    goto SeqInstr_2160;

  SeqInstr_2160:
    return;

  SeqInstr_2158:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i25 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3056} release_address_handler($p13, $p14);
    goto SeqInstr_2161, SeqInstr_2162;

  SeqInstr_2162:
    assume assertsPassed;
    goto SeqInstr_2163;

  SeqInstr_2163:
    return;

  SeqInstr_2161:
    assume !assertsPassed;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 1109942);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(dummy_start_iso, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(dummy_update_phy_reg, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(fw_iso_context_start, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fw_card_add, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $i1 := $zext.i32.i64(arg3);
    call {:si_unique_call 3057} $i2 := fw_card_add(arg, arg1, arg2, $i1);
    goto SeqInstr_2164, SeqInstr_2165;

  SeqInstr_2165:
    assume assertsPassed;
    goto SeqInstr_2166;

  SeqInstr_2166:
    $r := $i2;
    return;

  SeqInstr_2164:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3058} $i4 := fw_iso_context_start($p3, arg1, arg2, arg3);
    goto SeqInstr_2167, SeqInstr_2168;

  SeqInstr_2168:
    assume assertsPassed;
    goto SeqInstr_2169;

  SeqInstr_2169:
    $r := $i4;
    return;

  SeqInstr_2167:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 3059} $i5 := dummy_update_phy_reg(arg, arg1, arg2, arg3);
    $r := $i5;
    return;

  $bb5:
    assume $i11 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3060} $i7 := dummy_start_iso($p6, arg1, arg2, arg3);
    $r := $i7;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 1110974);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.15, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref, arg3: i64, arg4: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(complete_transaction, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(transaction_callback, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 3061} transaction_callback(arg, arg1, arg2, arg3, arg4);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 3062} complete_transaction(arg, arg1, arg2, arg3, arg4);
    goto SeqInstr_2170, SeqInstr_2171;

  SeqInstr_2171:
    assume assertsPassed;
    goto SeqInstr_2172;

  SeqInstr_2172:
    return;

  SeqInstr_2170:
    assume !assertsPassed;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 1112006);

procedure devirtbounce.6(funcPtr: ref, arg: i64);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.26, assertsPassed, $M.31, $M.1, $M.2, $M.10, $M.3, $M.23, $M.40, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.6(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(split_transaction_timeout_callback, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(delayed_work_timer_fn, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 3063} delayed_work_timer_fn(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 3064} split_transaction_timeout_callback(arg);
    goto SeqInstr_2173, SeqInstr_2174;

  SeqInstr_2174:
    assume assertsPassed;
    goto SeqInstr_2175;

  SeqInstr_2175:
    return;

  SeqInstr_2173:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 1113038);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(report_found_node, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(report_lost_node, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i4 == 1);
    $i3 := $eq.ref(fw_card_initialize, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    $p2 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3065} fw_card_initialize(arg, $p1, $p2);
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 3066} report_lost_node(arg, arg1, arg2);
    goto SeqInstr_2176, SeqInstr_2177;

  SeqInstr_2177:
    assume assertsPassed;
    goto SeqInstr_2178;

  SeqInstr_2178:
    return;

  SeqInstr_2176:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 3067} report_found_node(arg, arg1, arg2);
    goto SeqInstr_2179, SeqInstr_2180;

  SeqInstr_2180:
    assume assertsPassed;
    goto SeqInstr_2181;

  SeqInstr_2181:
    return;

  SeqInstr_2179:
    assume !assertsPassed;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 1114070);

procedure devirtbounce.8(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 1115102);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i32 == 1);
    $i31 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i31 == 1);
    $i30 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i30 == 1);
    $i29 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i29 == 1);
    $i28 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i26 == 1);
    $i25 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i25 == 1);
    $i24 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i24 == 1);
    $i23 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i23 == 1);
    $i22 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i22 == 1);
    $i21 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i18 == 1);
    $i17 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i17 == 1);
    $i16 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i16 == 1);
    $i15 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i15 == 1);
    $i14 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i14 == 1);
    $i13 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3068} fw_core_remove_descriptor($p1);
    goto SeqInstr_2182, SeqInstr_2183;

  SeqInstr_2183:
    assume assertsPassed;
    goto SeqInstr_2184;

  SeqInstr_2184:
    return;

  SeqInstr_2182:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3069} fw_card_release($p2);
    return;

  $bb4:
    assume $i15 == 1;
    call {:si_unique_call 3070} br_work(arg);
    goto SeqInstr_2185, SeqInstr_2186;

  SeqInstr_2186:
    assume assertsPassed;
    goto SeqInstr_2187;

  SeqInstr_2187:
    return;

  SeqInstr_2185:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 3071} bm_work(arg);
    goto SeqInstr_2188, SeqInstr_2189;

  SeqInstr_2189:
    assume assertsPassed;
    goto SeqInstr_2190;

  SeqInstr_2190:
    return;

  SeqInstr_2188:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i17 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3072} fw_core_remove_card($p3);
    goto SeqInstr_2191, SeqInstr_2192;

  SeqInstr_2192:
    assume assertsPassed;
    goto SeqInstr_2193;

  SeqInstr_2193:
    return;

  SeqInstr_2191:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    call {:si_unique_call 3073} fw_device_init(arg);
    goto SeqInstr_2194, SeqInstr_2195;

  SeqInstr_2195:
    assume assertsPassed;
    goto SeqInstr_2196;

  SeqInstr_2196:
    return;

  SeqInstr_2194:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    call {:si_unique_call 3074} fw_device_workfn(arg);
    goto SeqInstr_2197, SeqInstr_2198;

  SeqInstr_2198:
    assume assertsPassed;
    goto SeqInstr_2199;

  SeqInstr_2199:
    return;

  SeqInstr_2197:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    call {:si_unique_call 3075} fw_device_refresh(arg);
    goto SeqInstr_2200, SeqInstr_2201;

  SeqInstr_2201:
    assume assertsPassed;
    goto SeqInstr_2202;

  SeqInstr_2202:
    return;

  SeqInstr_2200:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 3076} fw_device_update(arg);
    goto SeqInstr_2203, SeqInstr_2204;

  SeqInstr_2204:
    assume assertsPassed;
    goto SeqInstr_2205;

  SeqInstr_2205:
    return;

  SeqInstr_2203:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    call {:si_unique_call 3077} fw_device_shutdown(arg);
    goto SeqInstr_2206, SeqInstr_2207;

  SeqInstr_2207:
    assume assertsPassed;
    goto SeqInstr_2208;

  SeqInstr_2208:
    return;

  SeqInstr_2206:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i23 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3078} wake_up_client($p4);
    return;

  $bb13:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3079} queue_bus_reset_event($p5);
    goto SeqInstr_2209, SeqInstr_2210;

  SeqInstr_2210:
    assume assertsPassed;
    goto SeqInstr_2211;

  SeqInstr_2211:
    return;

  SeqInstr_2209:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3080} client_release($p6);
    return;

  $bb15:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3081} fw_device_release($p7);
    goto SeqInstr_2212, SeqInstr_2213;

  SeqInstr_2213:
    assume assertsPassed;
    goto SeqInstr_2214;

  SeqInstr_2214:
    return;

  SeqInstr_2212:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3082} fw_iso_context_destroy($p8);
    goto SeqInstr_2215, SeqInstr_2216;

  SeqInstr_2216:
    assume assertsPassed;
    goto SeqInstr_2217;

  SeqInstr_2217:
    return;

  SeqInstr_2215:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3083} fw_iso_context_queue_flush($p9);
    goto SeqInstr_2218, SeqInstr_2219;

  SeqInstr_2219:
    assume assertsPassed;
    goto SeqInstr_2220;

  SeqInstr_2220:
    return;

  SeqInstr_2218:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3084} fw_core_remove_address_handler($p10);
    goto SeqInstr_2221, SeqInstr_2222;

  SeqInstr_2222:
    assume assertsPassed;
    goto SeqInstr_2223;

  SeqInstr_2223:
    return;

  SeqInstr_2221:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3085} dummy_flush_queue_iso($p11);
    return;

  $bb20:
    assume $i31 == 1;
    call {:si_unique_call 3086} iso_resource_work(arg);
    goto SeqInstr_2224, SeqInstr_2225;

  SeqInstr_2225:
    assume assertsPassed;
    goto SeqInstr_2226;

  SeqInstr_2226:
    return;

  SeqInstr_2224:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3087} fw_unit_release($p12);
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 1116134);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 1117166);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 1118198);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 1119230);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 1120262);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 1121294);

procedure devirtbounce.15(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.15(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3088} fw_core_remove_descriptor($p1);
    goto SeqInstr_2227, SeqInstr_2228;

  SeqInstr_2228:
    assume assertsPassed;
    goto SeqInstr_2229;

  SeqInstr_2229:
    return;

  SeqInstr_2227:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i20 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3089} fw_card_release($p2);
    return;

  $bb4:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3090} br_work($p3);
    goto SeqInstr_2230, SeqInstr_2231;

  SeqInstr_2231:
    assume assertsPassed;
    goto SeqInstr_2232;

  SeqInstr_2232:
    return;

  SeqInstr_2230:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3091} bm_work($p4);
    goto SeqInstr_2233, SeqInstr_2234;

  SeqInstr_2234:
    assume assertsPassed;
    goto SeqInstr_2235;

  SeqInstr_2235:
    return;

  SeqInstr_2233:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3092} fw_core_remove_card($p5);
    goto SeqInstr_2236, SeqInstr_2237;

  SeqInstr_2237:
    assume assertsPassed;
    goto SeqInstr_2238;

  SeqInstr_2238:
    return;

  SeqInstr_2236:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3093} fw_device_init($p6);
    goto SeqInstr_2239, SeqInstr_2240;

  SeqInstr_2240:
    assume assertsPassed;
    goto SeqInstr_2241;

  SeqInstr_2241:
    return;

  SeqInstr_2239:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3094} fw_device_workfn($p7);
    goto SeqInstr_2242, SeqInstr_2243;

  SeqInstr_2243:
    assume assertsPassed;
    goto SeqInstr_2244;

  SeqInstr_2244:
    return;

  SeqInstr_2242:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3095} fw_device_refresh($p8);
    goto SeqInstr_2245, SeqInstr_2246;

  SeqInstr_2246:
    assume assertsPassed;
    goto SeqInstr_2247;

  SeqInstr_2247:
    return;

  SeqInstr_2245:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3096} fw_device_update($p9);
    goto SeqInstr_2248, SeqInstr_2249;

  SeqInstr_2249:
    assume assertsPassed;
    goto SeqInstr_2250;

  SeqInstr_2250:
    return;

  SeqInstr_2248:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3097} fw_device_shutdown($p10);
    goto SeqInstr_2251, SeqInstr_2252;

  SeqInstr_2252:
    assume assertsPassed;
    goto SeqInstr_2253;

  SeqInstr_2253:
    return;

  SeqInstr_2251:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    call {:si_unique_call 3098} wake_up_client(arg);
    return;

  $bb13:
    assume $i30 == 1;
    call {:si_unique_call 3099} queue_bus_reset_event(arg);
    goto SeqInstr_2254, SeqInstr_2255;

  SeqInstr_2255:
    assume assertsPassed;
    goto SeqInstr_2256;

  SeqInstr_2256:
    return;

  SeqInstr_2254:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3100} client_release($p11);
    return;

  $bb15:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3101} fw_device_release($p12);
    goto SeqInstr_2257, SeqInstr_2258;

  SeqInstr_2258:
    assume assertsPassed;
    goto SeqInstr_2259;

  SeqInstr_2259:
    return;

  SeqInstr_2257:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3102} fw_iso_context_destroy($p13);
    goto SeqInstr_2260, SeqInstr_2261;

  SeqInstr_2261:
    assume assertsPassed;
    goto SeqInstr_2262;

  SeqInstr_2262:
    return;

  SeqInstr_2260:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3103} fw_iso_context_queue_flush($p14);
    goto SeqInstr_2263, SeqInstr_2264;

  SeqInstr_2264:
    assume assertsPassed;
    goto SeqInstr_2265;

  SeqInstr_2265:
    return;

  SeqInstr_2263:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i35 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3104} fw_core_remove_address_handler($p15);
    goto SeqInstr_2266, SeqInstr_2267;

  SeqInstr_2267:
    assume assertsPassed;
    goto SeqInstr_2268;

  SeqInstr_2268:
    return;

  SeqInstr_2266:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3105} dummy_flush_queue_iso($p16);
    return;

  $bb20:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3106} iso_resource_work($p17);
    goto SeqInstr_2269, SeqInstr_2270;

  SeqInstr_2270:
    assume assertsPassed;
    goto SeqInstr_2271;

  SeqInstr_2271:
    return;

  SeqInstr_2269:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3107} fw_unit_release($p18);
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 1122326);

procedure devirtbounce.16(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.16(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i40 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i40 == 1);
    $i39 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i39 == 1);
    $i38 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i38 == 1);
    $i37 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i37 == 1);
    $i36 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i36 == 1);
    $i35 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i35 == 1);
    $i34 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i34 == 1);
    $i33 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i33 == 1);
    $i32 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i32 == 1);
    $i31 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i31 == 1);
    $i30 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i30 == 1);
    $i29 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i29 == 1);
    $i28 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i26 == 1);
    $i25 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i25 == 1);
    $i24 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i24 == 1);
    $i23 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i23 == 1);
    $i22 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i22 == 1);
    $i21 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume false;
    return;

  $bb2:
    assume $i21 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3108} fw_core_remove_descriptor($p1);
    goto SeqInstr_2272, SeqInstr_2273;

  SeqInstr_2273:
    assume assertsPassed;
    goto SeqInstr_2274;

  SeqInstr_2274:
    return;

  SeqInstr_2272:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i22 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3109} fw_card_release($p2);
    return;

  $bb4:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3110} br_work($p3);
    goto SeqInstr_2275, SeqInstr_2276;

  SeqInstr_2276:
    assume assertsPassed;
    goto SeqInstr_2277;

  SeqInstr_2277:
    return;

  SeqInstr_2275:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3111} bm_work($p4);
    goto SeqInstr_2278, SeqInstr_2279;

  SeqInstr_2279:
    assume assertsPassed;
    goto SeqInstr_2280;

  SeqInstr_2280:
    return;

  SeqInstr_2278:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i25 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3112} fw_core_remove_card($p5);
    goto SeqInstr_2281, SeqInstr_2282;

  SeqInstr_2282:
    assume assertsPassed;
    goto SeqInstr_2283;

  SeqInstr_2283:
    return;

  SeqInstr_2281:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i26 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3113} fw_device_init($p6);
    goto SeqInstr_2284, SeqInstr_2285;

  SeqInstr_2285:
    assume assertsPassed;
    goto SeqInstr_2286;

  SeqInstr_2286:
    return;

  SeqInstr_2284:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i27 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3114} fw_device_workfn($p7);
    goto SeqInstr_2287, SeqInstr_2288;

  SeqInstr_2288:
    assume assertsPassed;
    goto SeqInstr_2289;

  SeqInstr_2289:
    return;

  SeqInstr_2287:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i28 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3115} fw_device_refresh($p8);
    goto SeqInstr_2290, SeqInstr_2291;

  SeqInstr_2291:
    assume assertsPassed;
    goto SeqInstr_2292;

  SeqInstr_2292:
    return;

  SeqInstr_2290:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i29 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3116} fw_device_update($p9);
    goto SeqInstr_2293, SeqInstr_2294;

  SeqInstr_2294:
    assume assertsPassed;
    goto SeqInstr_2295;

  SeqInstr_2295:
    return;

  SeqInstr_2293:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i30 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3117} fw_device_shutdown($p10);
    goto SeqInstr_2296, SeqInstr_2297;

  SeqInstr_2297:
    assume assertsPassed;
    goto SeqInstr_2298;

  SeqInstr_2298:
    return;

  SeqInstr_2296:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i31 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3118} wake_up_client($p11);
    return;

  $bb13:
    assume $i32 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3119} queue_bus_reset_event($p12);
    goto SeqInstr_2299, SeqInstr_2300;

  SeqInstr_2300:
    assume assertsPassed;
    goto SeqInstr_2301;

  SeqInstr_2301:
    return;

  SeqInstr_2299:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i33 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3120} client_release($p13);
    return;

  $bb15:
    assume $i34 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3121} fw_device_release($p14);
    goto SeqInstr_2302, SeqInstr_2303;

  SeqInstr_2303:
    assume assertsPassed;
    goto SeqInstr_2304;

  SeqInstr_2304:
    return;

  SeqInstr_2302:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i35 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3122} fw_iso_context_destroy($p15);
    goto SeqInstr_2305, SeqInstr_2306;

  SeqInstr_2306:
    assume assertsPassed;
    goto SeqInstr_2307;

  SeqInstr_2307:
    return;

  SeqInstr_2305:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3123} fw_iso_context_queue_flush($p16);
    goto SeqInstr_2308, SeqInstr_2309;

  SeqInstr_2309:
    assume assertsPassed;
    goto SeqInstr_2310;

  SeqInstr_2310:
    return;

  SeqInstr_2308:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3124} fw_core_remove_address_handler($p17);
    goto SeqInstr_2311, SeqInstr_2312;

  SeqInstr_2312:
    assume assertsPassed;
    goto SeqInstr_2313;

  SeqInstr_2313:
    return;

  SeqInstr_2311:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i38 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3125} dummy_flush_queue_iso($p18);
    return;

  $bb20:
    assume $i39 == 1;
    $p19 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3126} iso_resource_work($p19);
    goto SeqInstr_2314, SeqInstr_2315;

  SeqInstr_2315:
    assume assertsPassed;
    goto SeqInstr_2316;

  SeqInstr_2316:
    return;

  SeqInstr_2314:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i40 == 1;
    $p20 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3127} fw_unit_release($p20);
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 1123358);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.34, $CurrAddr;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(rom_index_show, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i16 == 1);
    $i15 := $eq.ref(modalias_show, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i15 == 1);
    $i14 := $eq.ref(units_show, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i14 == 1);
    $i13 := $eq.ref(is_local_show, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i13 == 1);
    $i12 := $eq.ref(guid_show, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i12 == 1);
    $i11 := $eq.ref(config_rom_show, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i11 == 1);
    $i10 := $eq.ref(show_text_leaf, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i10 == 1);
    $i9 := $eq.ref(show_immediate, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 3128} $i1 := show_immediate(arg, arg1, arg2);
    $r := $i1;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 3129} $i2 := show_text_leaf(arg, arg1, arg2);
    $r := $i2;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 3130} $i3 := config_rom_show(arg, arg1, arg2);
    $r := $i3;
    return;

  $bb5:
    assume $i12 == 1;
    call {:si_unique_call 3131} $i4 := guid_show(arg, arg1, arg2);
    $r := $i4;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 3132} $i5 := is_local_show(arg, arg1, arg2);
    $r := $i5;
    return;

  $bb7:
    assume $i14 == 1;
    call {:si_unique_call 3133} $i6 := units_show(arg, arg1, arg2);
    $r := $i6;
    return;

  $bb8:
    assume $i15 == 1;
    call {:si_unique_call 3134} $i7 := modalias_show(arg, arg1, arg2);
    $r := $i7;
    return;

  $bb9:
    assume $i16 == 1;
    call {:si_unique_call 3135} $i8 := rom_index_show(arg, arg1, arg2);
    $r := $i8;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 1124390);

procedure devirtbounce.18(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.18(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i37 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i37 == 1);
    $i36 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i36 == 1);
    $i35 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i35 == 1);
    $i34 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i34 == 1);
    $i33 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i33 == 1);
    $i32 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i32 == 1);
    $i31 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i31 == 1);
    $i30 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i30 == 1);
    $i29 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i29 == 1);
    $i28 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i26 == 1);
    $i25 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i25 == 1);
    $i24 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i23 == 1);
    $i22 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i22 == 1);
    $i21 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i21 == 1);
    $i20 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i18 == 1);
    assume false;
    return;

  $bb2:
    assume $i18 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3136} fw_core_remove_descriptor($p1);
    goto SeqInstr_2317, SeqInstr_2318;

  SeqInstr_2318:
    assume assertsPassed;
    goto SeqInstr_2319;

  SeqInstr_2319:
    return;

  SeqInstr_2317:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i19 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3137} fw_card_release($p2);
    return;

  $bb4:
    assume $i20 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3138} br_work($p3);
    goto SeqInstr_2320, SeqInstr_2321;

  SeqInstr_2321:
    assume assertsPassed;
    goto SeqInstr_2322;

  SeqInstr_2322:
    return;

  SeqInstr_2320:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i21 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3139} bm_work($p4);
    goto SeqInstr_2323, SeqInstr_2324;

  SeqInstr_2324:
    assume assertsPassed;
    goto SeqInstr_2325;

  SeqInstr_2325:
    return;

  SeqInstr_2323:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i22 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3140} fw_core_remove_card($p5);
    goto SeqInstr_2326, SeqInstr_2327;

  SeqInstr_2327:
    assume assertsPassed;
    goto SeqInstr_2328;

  SeqInstr_2328:
    return;

  SeqInstr_2326:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3141} fw_device_init($p6);
    goto SeqInstr_2329, SeqInstr_2330;

  SeqInstr_2330:
    assume assertsPassed;
    goto SeqInstr_2331;

  SeqInstr_2331:
    return;

  SeqInstr_2329:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i24 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3142} fw_device_workfn($p7);
    goto SeqInstr_2332, SeqInstr_2333;

  SeqInstr_2333:
    assume assertsPassed;
    goto SeqInstr_2334;

  SeqInstr_2334:
    return;

  SeqInstr_2332:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i25 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3143} fw_device_refresh($p8);
    goto SeqInstr_2335, SeqInstr_2336;

  SeqInstr_2336:
    assume assertsPassed;
    goto SeqInstr_2337;

  SeqInstr_2337:
    return;

  SeqInstr_2335:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i26 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3144} fw_device_update($p9);
    goto SeqInstr_2338, SeqInstr_2339;

  SeqInstr_2339:
    assume assertsPassed;
    goto SeqInstr_2340;

  SeqInstr_2340:
    return;

  SeqInstr_2338:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3145} fw_device_shutdown($p10);
    goto SeqInstr_2341, SeqInstr_2342;

  SeqInstr_2342:
    assume assertsPassed;
    goto SeqInstr_2343;

  SeqInstr_2343:
    return;

  SeqInstr_2341:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i28 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3146} wake_up_client($p11);
    return;

  $bb13:
    assume $i29 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3147} queue_bus_reset_event($p12);
    goto SeqInstr_2344, SeqInstr_2345;

  SeqInstr_2345:
    assume assertsPassed;
    goto SeqInstr_2346;

  SeqInstr_2346:
    return;

  SeqInstr_2344:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i30 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3148} client_release($p13);
    return;

  $bb15:
    assume $i31 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3149} fw_device_release($p14);
    goto SeqInstr_2347, SeqInstr_2348;

  SeqInstr_2348:
    assume assertsPassed;
    goto SeqInstr_2349;

  SeqInstr_2349:
    return;

  SeqInstr_2347:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    call {:si_unique_call 3150} fw_iso_context_destroy(arg);
    goto SeqInstr_2350, SeqInstr_2351;

  SeqInstr_2351:
    assume assertsPassed;
    goto SeqInstr_2352;

  SeqInstr_2352:
    return;

  SeqInstr_2350:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i33 == 1;
    call {:si_unique_call 3151} fw_iso_context_queue_flush(arg);
    goto SeqInstr_2353, SeqInstr_2354;

  SeqInstr_2354:
    assume assertsPassed;
    goto SeqInstr_2355;

  SeqInstr_2355:
    return;

  SeqInstr_2353:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3152} fw_core_remove_address_handler($p15);
    goto SeqInstr_2356, SeqInstr_2357;

  SeqInstr_2357:
    assume assertsPassed;
    goto SeqInstr_2358;

  SeqInstr_2358:
    return;

  SeqInstr_2356:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i35 == 1;
    call {:si_unique_call 3153} dummy_flush_queue_iso(arg);
    return;

  $bb20:
    assume $i36 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3154} iso_resource_work($p16);
    goto SeqInstr_2359, SeqInstr_2360;

  SeqInstr_2360:
    assume assertsPassed;
    goto SeqInstr_2361;

  SeqInstr_2361:
    return;

  SeqInstr_2359:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3155} fw_unit_release($p17);
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 1125422);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i23 := $eq.ref(release_address_handler, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i23 == 1);
    $i22 := $eq.ref(release_request, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i22 == 1);
    $i21 := $eq.ref(release_descriptor, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i21 == 1);
    $i20 := $eq.ref(dummy_send_response, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i20 == 1);
    $i19 := $eq.ref(dummy_send_request, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_core_handle_response, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i18 == 1);
    $i17 := $eq.ref(fw_core_handle_request, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i17 == 1);
    $i16 := $eq.ref(release_transaction, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i16 == 1);
    $i15 := $eq.ref(fw_iso_buffer_destroy, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i15 == 1);
    $i14 := $eq.ref(fw_csr_iterator_init, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i14 == 1);
    $i13 := $eq.ref(release_iso_resource, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    call {:si_unique_call 3156} release_iso_resource(arg, arg1);
    goto SeqInstr_2362, SeqInstr_2363;

  SeqInstr_2363:
    assume assertsPassed;
    goto SeqInstr_2364;

  SeqInstr_2364:
    return;

  SeqInstr_2362:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3157} fw_csr_iterator_init($p1, $p2);
    return;

  $bb4:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3158} fw_iso_buffer_destroy($p3, $p4);
    return;

  $bb5:
    assume $i16 == 1;
    call {:si_unique_call 3159} release_transaction(arg, arg1);
    return;

  $bb6:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3160} fw_core_handle_request($p5, $p6);
    goto SeqInstr_2365, SeqInstr_2366;

  SeqInstr_2366:
    assume assertsPassed;
    goto SeqInstr_2367;

  SeqInstr_2367:
    return;

  SeqInstr_2365:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3161} fw_core_handle_response($p7, $p8);
    goto SeqInstr_2368, SeqInstr_2369;

  SeqInstr_2369:
    assume assertsPassed;
    goto SeqInstr_2370;

  SeqInstr_2370:
    return;

  SeqInstr_2368:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    $p10 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3162} dummy_send_request($p9, $p10);
    goto SeqInstr_2371, SeqInstr_2372;

  SeqInstr_2372:
    assume assertsPassed;
    goto SeqInstr_2373;

  SeqInstr_2373:
    return;

  SeqInstr_2371:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3163} dummy_send_response($p11, $p12);
    goto SeqInstr_2374, SeqInstr_2375;

  SeqInstr_2375:
    assume assertsPassed;
    goto SeqInstr_2376;

  SeqInstr_2376:
    return;

  SeqInstr_2374:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i21 == 1;
    call {:si_unique_call 3164} release_descriptor(arg, arg1);
    goto SeqInstr_2377, SeqInstr_2378;

  SeqInstr_2378:
    assume assertsPassed;
    goto SeqInstr_2379;

  SeqInstr_2379:
    return;

  SeqInstr_2377:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    call {:si_unique_call 3165} release_request(arg, arg1);
    goto SeqInstr_2380, SeqInstr_2381;

  SeqInstr_2381:
    assume assertsPassed;
    goto SeqInstr_2382;

  SeqInstr_2382:
    return;

  SeqInstr_2380:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i23 == 1;
    call {:si_unique_call 3166} release_address_handler(arg, arg1);
    goto SeqInstr_2383, SeqInstr_2384;

  SeqInstr_2384:
    assume assertsPassed;
    goto SeqInstr_2385;

  SeqInstr_2385:
    return;

  SeqInstr_2383:
    assume !assertsPassed;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 1126454);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 1127486);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 1128518);

procedure devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 1129550);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 1130582);

procedure devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation devirtbounce.24(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i1;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i106 := $eq.ref(fw_unit_uevent, $p0);
    assume {:branchcond $i106} true;
    goto $bb40, $bb79;

  $bb79:
    assume !($i106 == 1);
    $i105 := $eq.ref(ioctl_flush_iso, $p0);
    assume {:branchcond $i105} true;
    goto $bb39, $bb78;

  $bb78:
    assume !($i105 == 1);
    $i104 := $eq.ref(ioctl_set_iso_channels, $p0);
    assume true;
    goto $bb38, $bb77;

  $bb77:
    assume !($i104 == 1);
    $i103 := $eq.ref(ioctl_receive_phy_packets, $p0);
    assume {:branchcond $i103} true;
    goto $bb37, $bb76;

  $bb76:
    assume !($i103 == 1);
    $i102 := $eq.ref(ioctl_send_phy_packet, $p0);
    assume true;
    goto $bb36, $bb75;

  $bb75:
    assume !($i102 == 1);
    $i101 := $eq.ref(ioctl_get_cycle_timer2, $p0);
    assume {:branchcond $i101} true;
    goto $bb35, $bb74;

  $bb74:
    assume !($i101 == 1);
    $i100 := $eq.ref(ioctl_send_stream_packet, $p0);
    assume {:branchcond $i100} true;
    goto $bb34, $bb73;

  $bb73:
    assume !($i100 == 1);
    $i99 := $eq.ref(ioctl_send_broadcast_request, $p0);
    assume {:branchcond $i99} true;
    goto $bb33, $bb72;

  $bb72:
    assume !($i99 == 1);
    $i98 := $eq.ref(ioctl_get_speed, $p0);
    assume {:branchcond $i98} true;
    goto $bb32, $bb71;

  $bb71:
    assume !($i98 == 1);
    $i97 := $eq.ref(ioctl_deallocate_iso_resource_once, $p0);
    assume {:branchcond $i97} true;
    goto $bb31, $bb70;

  $bb70:
    assume !($i97 == 1);
    $i96 := $eq.ref(ioctl_allocate_iso_resource_once, $p0);
    assume true;
    goto $bb30, $bb69;

  $bb69:
    assume !($i96 == 1);
    $i95 := $eq.ref(ioctl_deallocate_iso_resource, $p0);
    assume {:branchcond $i95} true;
    goto $bb29, $bb68;

  $bb68:
    assume !($i95 == 1);
    $i94 := $eq.ref(ioctl_allocate_iso_resource, $p0);
    assume {:branchcond $i94} true;
    goto $bb28, $bb67;

  $bb67:
    assume !($i94 == 1);
    $i93 := $eq.ref(ioctl_get_cycle_timer, $p0);
    assume {:branchcond $i93} true;
    goto $bb27, $bb66;

  $bb66:
    assume !($i93 == 1);
    $i92 := $eq.ref(ioctl_stop_iso, $p0);
    assume {:branchcond $i92} true;
    goto $bb26, $bb65;

  $bb65:
    assume !($i92 == 1);
    $i91 := $eq.ref(ioctl_start_iso, $p0);
    assume true;
    goto $bb25, $bb64;

  $bb64:
    assume !($i91 == 1);
    $i90 := $eq.ref(ioctl_queue_iso, $p0);
    assume true;
    goto $bb24, $bb63;

  $bb63:
    assume !($i90 == 1);
    $i89 := $eq.ref(ioctl_create_iso_context, $p0);
    assume {:branchcond $i89} true;
    goto $bb23, $bb62;

  $bb62:
    assume !($i89 == 1);
    $i88 := $eq.ref(ioctl_remove_descriptor, $p0);
    assume {:branchcond $i88} true;
    goto $bb22, $bb61;

  $bb61:
    assume !($i88 == 1);
    $i87 := $eq.ref(ioctl_add_descriptor, $p0);
    assume {:branchcond $i87} true;
    goto $bb21, $bb60;

  $bb60:
    assume !($i87 == 1);
    $i86 := $eq.ref(ioctl_initiate_bus_reset, $p0);
    assume {:branchcond $i86} true;
    goto $bb20, $bb59;

  $bb59:
    assume !($i86 == 1);
    $i85 := $eq.ref(ioctl_send_response, $p0);
    assume {:branchcond $i85} true;
    goto $bb19, $bb58;

  $bb58:
    assume !($i85 == 1);
    $i84 := $eq.ref(ioctl_deallocate, $p0);
    assume true;
    goto $bb18, $bb57;

  $bb57:
    assume !($i84 == 1);
    $i83 := $eq.ref(ioctl_allocate, $p0);
    assume true;
    goto $bb17, $bb56;

  $bb56:
    assume !($i83 == 1);
    $i82 := $eq.ref(ioctl_send_request, $p0);
    assume {:branchcond $i82} true;
    goto $bb16, $bb55;

  $bb55:
    assume !($i82 == 1);
    $i81 := $eq.ref(ioctl_get_info, $p0);
    assume {:branchcond $i81} true;
    goto $bb15, $bb54;

  $bb54:
    assume !($i81 == 1);
    $i80 := $eq.ref(dummy_set_iso_channels, $p0);
    assume true;
    goto $bb14, $bb53;

  $bb53:
    assume !($i80 == 1);
    $i79 := $eq.ref(dummy_cancel_packet, $p0);
    assume true;
    goto $bb13, $bb52;

  $bb52:
    assume !($i79 == 1);
    $i78 := $eq.ref(fw_core_add_address_handler, $p0);
    assume true;
    goto $bb12, $bb51;

  $bb51:
    assume !($i78 == 1);
    $i77 := $eq.ref(fw_cancel_transaction, $p0);
    assume {:branchcond $i77} true;
    goto $bb11, $bb50;

  $bb50:
    assume !($i77 == 1);
    $i76 := $eq.ref(fw_unit_match, $p0);
    assume true;
    goto $bb10, $bb49;

  $bb49:
    assume !($i76 == 1);
    $i75 := $eq.ref(fw_device_op_release, $p0);
    assume {:branchcond $i75} true;
    goto $bb9, $bb48;

  $bb48:
    assume !($i75 == 1);
    $i74 := $eq.ref(fw_device_op_open, $p0);
    assume true;
    goto $bb8, $bb47;

  $bb47:
    assume !($i74 == 1);
    $i73 := $eq.ref(fw_device_op_mmap, $p0);
    assume {:branchcond $i73} true;
    goto $bb7, $bb46;

  $bb46:
    assume !($i73 == 1);
    $i72 := $eq.ref(fw_device_op_poll, $p0);
    assume {:branchcond $i72} true;
    goto $bb6, $bb45;

  $bb45:
    assume !($i72 == 1);
    $i71 := $eq.ref(lookup_existing_device, $p0);
    assume {:branchcond $i71} true;
    goto $bb5, $bb44;

  $bb44:
    assume !($i71 == 1);
    $i70 := $eq.ref(update_unit, $p0);
    assume true;
    goto $bb4, $bb43;

  $bb43:
    assume !($i70 == 1);
    $i69 := $eq.ref(shutdown_unit, $p0);
    assume {:branchcond $i69} true;
    goto $bb3, $bb42;

  $bb42:
    assume !($i69 == 1);
    $i68 := $eq.ref(fw_device_set_broadcast_channel, $p0);
    assume {:branchcond $i68} true;
    goto $bb2, $bb41;

  $bb41:
    assume !($i68 == 1);
    assume false;
    return;

  $bb2:
    assume $i68 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3167} $i3 := fw_device_set_broadcast_channel($p1, $p2);
    goto SeqInstr_2386, SeqInstr_2387;

  SeqInstr_2387:
    assume assertsPassed;
    goto SeqInstr_2388;

  SeqInstr_2388:
    $r := $i3;
    return;

  SeqInstr_2386:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i69 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3168} $i6 := shutdown_unit($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i70 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3169} $i9 := update_unit($p7, $p8);
    goto SeqInstr_2389, SeqInstr_2390;

  SeqInstr_2390:
    assume assertsPassed;
    goto SeqInstr_2391;

  SeqInstr_2391:
    $r := $i9;
    return;

  SeqInstr_2389:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i71 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3170} $i12 := lookup_existing_device($p10, $p11);
    goto SeqInstr_2392, SeqInstr_2393;

  SeqInstr_2393:
    assume assertsPassed;
    goto SeqInstr_2394;

  SeqInstr_2394:
    $r := $i12;
    return;

  SeqInstr_2392:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i72 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3171} $i15 := fw_device_op_poll($p13, $p14);
    goto SeqInstr_2395, SeqInstr_2396;

  SeqInstr_2396:
    assume assertsPassed;
    goto SeqInstr_2397;

  SeqInstr_2397:
    $r := $i15;
    return;

  SeqInstr_2395:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i73 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3172} $i18 := fw_device_op_mmap($p16, $p17);
    goto SeqInstr_2398, SeqInstr_2399;

  SeqInstr_2399:
    assume assertsPassed;
    goto SeqInstr_2400;

  SeqInstr_2400:
    $r := $i18;
    return;

  SeqInstr_2398:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i74 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3173} $i21 := fw_device_op_open($p19, $p20);
    goto SeqInstr_2401, SeqInstr_2402;

  SeqInstr_2402:
    assume assertsPassed;
    goto SeqInstr_2403;

  SeqInstr_2403:
    $r := $i21;
    return;

  SeqInstr_2401:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i75 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3174} $i24 := fw_device_op_release($p22, $p23);
    goto SeqInstr_2404, SeqInstr_2405;

  SeqInstr_2405:
    assume assertsPassed;
    goto SeqInstr_2406;

  SeqInstr_2406:
    $r := $i24;
    return;

  SeqInstr_2404:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i76 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3175} $i27 := fw_unit_match($p25, $p26);
    $r := $i27;
    return;

  $bb11:
    assume $i77 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3176} $i30 := fw_cancel_transaction($p28, $p29);
    goto SeqInstr_2407, SeqInstr_2408;

  SeqInstr_2408:
    assume assertsPassed;
    goto SeqInstr_2409;

  SeqInstr_2409:
    $r := $i30;
    return;

  SeqInstr_2407:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i78 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3177} $i33 := fw_core_add_address_handler($p31, $p32);
    goto SeqInstr_2410, SeqInstr_2411;

  SeqInstr_2411:
    assume assertsPassed;
    goto SeqInstr_2412;

  SeqInstr_2412:
    $r := $i33;
    return;

  SeqInstr_2410:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i79 == 1;
    $p34 := $bitcast.ref.ref(arg);
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3178} $i36 := dummy_cancel_packet($p34, $p35);
    $r := $i36;
    return;

  $bb14:
    assume $i80 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3179} $i39 := dummy_set_iso_channels($p37, $p38);
    $r := $i39;
    return;

  $bb15:
    assume $i81 == 1;
    call {:si_unique_call 3180} $i40 := ioctl_get_info(arg, arg1);
    goto SeqInstr_2413, SeqInstr_2414;

  SeqInstr_2414:
    assume assertsPassed;
    goto SeqInstr_2415;

  SeqInstr_2415:
    $r := $i40;
    return;

  SeqInstr_2413:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i82 == 1;
    call {:si_unique_call 3181} $i41 := ioctl_send_request(arg, arg1);
    goto SeqInstr_2416, SeqInstr_2417;

  SeqInstr_2417:
    assume assertsPassed;
    goto SeqInstr_2418;

  SeqInstr_2418:
    $r := $i41;
    return;

  SeqInstr_2416:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i83 == 1;
    call {:si_unique_call 3182} $i42 := ioctl_allocate(arg, arg1);
    goto SeqInstr_2419, SeqInstr_2420;

  SeqInstr_2420:
    assume assertsPassed;
    goto SeqInstr_2421;

  SeqInstr_2421:
    $r := $i42;
    return;

  SeqInstr_2419:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i84 == 1;
    call {:si_unique_call 3183} $i43 := ioctl_deallocate(arg, arg1);
    goto SeqInstr_2422, SeqInstr_2423;

  SeqInstr_2423:
    assume assertsPassed;
    goto SeqInstr_2424;

  SeqInstr_2424:
    $r := $i43;
    return;

  SeqInstr_2422:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i85 == 1;
    call {:si_unique_call 3184} $i44 := ioctl_send_response(arg, arg1);
    goto SeqInstr_2425, SeqInstr_2426;

  SeqInstr_2426:
    assume assertsPassed;
    goto SeqInstr_2427;

  SeqInstr_2427:
    $r := $i44;
    return;

  SeqInstr_2425:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i86 == 1;
    call {:si_unique_call 3185} $i45 := ioctl_initiate_bus_reset(arg, arg1);
    goto SeqInstr_2428, SeqInstr_2429;

  SeqInstr_2429:
    assume assertsPassed;
    goto SeqInstr_2430;

  SeqInstr_2430:
    $r := $i45;
    return;

  SeqInstr_2428:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i87 == 1;
    call {:si_unique_call 3186} $i46 := ioctl_add_descriptor(arg, arg1);
    goto SeqInstr_2431, SeqInstr_2432;

  SeqInstr_2432:
    assume assertsPassed;
    goto SeqInstr_2433;

  SeqInstr_2433:
    $r := $i46;
    return;

  SeqInstr_2431:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i88 == 1;
    call {:si_unique_call 3187} $i47 := ioctl_remove_descriptor(arg, arg1);
    goto SeqInstr_2434, SeqInstr_2435;

  SeqInstr_2435:
    assume assertsPassed;
    goto SeqInstr_2436;

  SeqInstr_2436:
    $r := $i47;
    return;

  SeqInstr_2434:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i89 == 1;
    call {:si_unique_call 3188} $i48 := ioctl_create_iso_context(arg, arg1);
    goto SeqInstr_2437, SeqInstr_2438;

  SeqInstr_2438:
    assume assertsPassed;
    goto SeqInstr_2439;

  SeqInstr_2439:
    $r := $i48;
    return;

  SeqInstr_2437:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i90 == 1;
    call {:si_unique_call 3189} $i49 := ioctl_queue_iso(arg, arg1);
    goto SeqInstr_2440, SeqInstr_2441;

  SeqInstr_2441:
    assume assertsPassed;
    goto SeqInstr_2442;

  SeqInstr_2442:
    $r := $i49;
    return;

  SeqInstr_2440:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i91 == 1;
    call {:si_unique_call 3190} $i50 := ioctl_start_iso(arg, arg1);
    goto SeqInstr_2443, SeqInstr_2444;

  SeqInstr_2444:
    assume assertsPassed;
    goto SeqInstr_2445;

  SeqInstr_2445:
    $r := $i50;
    return;

  SeqInstr_2443:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i92 == 1;
    call {:si_unique_call 3191} $i51 := ioctl_stop_iso(arg, arg1);
    goto SeqInstr_2446, SeqInstr_2447;

  SeqInstr_2447:
    assume assertsPassed;
    goto SeqInstr_2448;

  SeqInstr_2448:
    $r := $i51;
    return;

  SeqInstr_2446:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i93 == 1;
    call {:si_unique_call 3192} $i52 := ioctl_get_cycle_timer(arg, arg1);
    $r := $i52;
    return;

  $bb28:
    assume $i94 == 1;
    call {:si_unique_call 3193} $i53 := ioctl_allocate_iso_resource(arg, arg1);
    goto SeqInstr_2449, SeqInstr_2450;

  SeqInstr_2450:
    assume assertsPassed;
    goto SeqInstr_2451;

  SeqInstr_2451:
    $r := $i53;
    return;

  SeqInstr_2449:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i95 == 1;
    call {:si_unique_call 3194} $i54 := ioctl_deallocate_iso_resource(arg, arg1);
    goto SeqInstr_2452, SeqInstr_2453;

  SeqInstr_2453:
    assume assertsPassed;
    goto SeqInstr_2454;

  SeqInstr_2454:
    $r := $i54;
    return;

  SeqInstr_2452:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i96 == 1;
    call {:si_unique_call 3195} $i55 := ioctl_allocate_iso_resource_once(arg, arg1);
    goto SeqInstr_2455, SeqInstr_2456;

  SeqInstr_2456:
    assume assertsPassed;
    goto SeqInstr_2457;

  SeqInstr_2457:
    $r := $i55;
    return;

  SeqInstr_2455:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i97 == 1;
    call {:si_unique_call 3196} $i56 := ioctl_deallocate_iso_resource_once(arg, arg1);
    goto SeqInstr_2458, SeqInstr_2459;

  SeqInstr_2459:
    assume assertsPassed;
    goto SeqInstr_2460;

  SeqInstr_2460:
    $r := $i56;
    return;

  SeqInstr_2458:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i98 == 1;
    call {:si_unique_call 3197} $i57 := ioctl_get_speed(arg, arg1);
    $r := $i57;
    return;

  $bb33:
    assume $i99 == 1;
    call {:si_unique_call 3198} $i58 := ioctl_send_broadcast_request(arg, arg1);
    goto SeqInstr_2461, SeqInstr_2462;

  SeqInstr_2462:
    assume assertsPassed;
    goto SeqInstr_2463;

  SeqInstr_2463:
    $r := $i58;
    return;

  SeqInstr_2461:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i100 == 1;
    call {:si_unique_call 3199} $i59 := ioctl_send_stream_packet(arg, arg1);
    goto SeqInstr_2464, SeqInstr_2465;

  SeqInstr_2465:
    assume assertsPassed;
    goto SeqInstr_2466;

  SeqInstr_2466:
    $r := $i59;
    return;

  SeqInstr_2464:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i101 == 1;
    call {:si_unique_call 3200} $i60 := ioctl_get_cycle_timer2(arg, arg1);
    $r := $i60;
    return;

  $bb36:
    assume $i102 == 1;
    call {:si_unique_call 3201} $i61 := ioctl_send_phy_packet(arg, arg1);
    goto SeqInstr_2467, SeqInstr_2468;

  SeqInstr_2468:
    assume assertsPassed;
    goto SeqInstr_2469;

  SeqInstr_2469:
    $r := $i61;
    return;

  SeqInstr_2467:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i103 == 1;
    call {:si_unique_call 3202} $i62 := ioctl_receive_phy_packets(arg, arg1);
    goto SeqInstr_2470, SeqInstr_2471;

  SeqInstr_2471:
    assume assertsPassed;
    goto SeqInstr_2472;

  SeqInstr_2472:
    $r := $i62;
    return;

  SeqInstr_2470:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i104 == 1;
    call {:si_unique_call 3203} $i63 := ioctl_set_iso_channels(arg, arg1);
    goto SeqInstr_2473, SeqInstr_2474;

  SeqInstr_2474:
    assume assertsPassed;
    goto SeqInstr_2475;

  SeqInstr_2475:
    $r := $i63;
    return;

  SeqInstr_2473:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i105 == 1;
    call {:si_unique_call 3204} $i64 := ioctl_flush_iso(arg, arg1);
    goto SeqInstr_2476, SeqInstr_2477;

  SeqInstr_2477:
    assume assertsPassed;
    goto SeqInstr_2478;

  SeqInstr_2478:
    $r := $i64;
    return;

  SeqInstr_2476:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i106 == 1;
    $p65 := $bitcast.ref.ref(arg);
    $p66 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3205} $i67 := fw_unit_uevent($p65, $p66);
    $r := $i67;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 1131614);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i12 := $eq.ref(report_found_node, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(report_lost_node, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i11 == 1);
    $i10 := $eq.ref(fw_card_initialize, $p0);
    assume true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume false;
    return;

  $bb2:
    assume $i10 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3206} fw_card_initialize($p1, $p2, $p3);
    return;

  $bb3:
    assume $i11 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    $p6 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3207} report_lost_node($p4, $p5, $p6);
    goto SeqInstr_2479, SeqInstr_2480;

  SeqInstr_2480:
    assume assertsPassed;
    goto SeqInstr_2481;

  SeqInstr_2481:
    return;

  SeqInstr_2479:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i12 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    $p9 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3208} report_found_node($p7, $p8, $p9);
    goto SeqInstr_2482, SeqInstr_2483;

  SeqInstr_2483:
    assume assertsPassed;
    goto SeqInstr_2484;

  SeqInstr_2484:
    return;

  SeqInstr_2482:
    assume !assertsPassed;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 1132646);

procedure devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;
  var $i155: i1;
  var $i156: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i156 := $eq.ref(fw_unit_uevent, $p0);
    assume {:branchcond $i156} true;
    goto $bb40, $bb79;

  $bb79:
    assume !($i156 == 1);
    $i155 := $eq.ref(ioctl_flush_iso, $p0);
    assume {:branchcond $i155} true;
    goto $bb39, $bb78;

  $bb78:
    assume !($i155 == 1);
    $i154 := $eq.ref(ioctl_set_iso_channels, $p0);
    assume {:branchcond $i154} true;
    goto $bb38, $bb77;

  $bb77:
    assume !($i154 == 1);
    $i153 := $eq.ref(ioctl_receive_phy_packets, $p0);
    assume {:branchcond $i153} true;
    goto $bb37, $bb76;

  $bb76:
    assume !($i153 == 1);
    $i152 := $eq.ref(ioctl_send_phy_packet, $p0);
    assume true;
    goto $bb36, $bb75;

  $bb75:
    assume !($i152 == 1);
    $i151 := $eq.ref(ioctl_get_cycle_timer2, $p0);
    assume {:branchcond $i151} true;
    goto $bb35, $bb74;

  $bb74:
    assume !($i151 == 1);
    $i150 := $eq.ref(ioctl_send_stream_packet, $p0);
    assume {:branchcond $i150} true;
    goto $bb34, $bb73;

  $bb73:
    assume !($i150 == 1);
    $i149 := $eq.ref(ioctl_send_broadcast_request, $p0);
    assume {:branchcond $i149} true;
    goto $bb33, $bb72;

  $bb72:
    assume !($i149 == 1);
    $i148 := $eq.ref(ioctl_get_speed, $p0);
    assume true;
    goto $bb32, $bb71;

  $bb71:
    assume !($i148 == 1);
    $i147 := $eq.ref(ioctl_deallocate_iso_resource_once, $p0);
    assume true;
    goto $bb31, $bb70;

  $bb70:
    assume !($i147 == 1);
    $i146 := $eq.ref(ioctl_allocate_iso_resource_once, $p0);
    assume true;
    goto $bb30, $bb69;

  $bb69:
    assume !($i146 == 1);
    $i145 := $eq.ref(ioctl_deallocate_iso_resource, $p0);
    assume {:branchcond $i145} true;
    goto $bb29, $bb68;

  $bb68:
    assume !($i145 == 1);
    $i144 := $eq.ref(ioctl_allocate_iso_resource, $p0);
    assume {:branchcond $i144} true;
    goto $bb28, $bb67;

  $bb67:
    assume !($i144 == 1);
    $i143 := $eq.ref(ioctl_get_cycle_timer, $p0);
    assume true;
    goto $bb27, $bb66;

  $bb66:
    assume !($i143 == 1);
    $i142 := $eq.ref(ioctl_stop_iso, $p0);
    assume {:branchcond $i142} true;
    goto $bb26, $bb65;

  $bb65:
    assume !($i142 == 1);
    $i141 := $eq.ref(ioctl_start_iso, $p0);
    assume true;
    goto $bb25, $bb64;

  $bb64:
    assume !($i141 == 1);
    $i140 := $eq.ref(ioctl_queue_iso, $p0);
    assume true;
    goto $bb24, $bb63;

  $bb63:
    assume !($i140 == 1);
    $i139 := $eq.ref(ioctl_create_iso_context, $p0);
    assume {:branchcond $i139} true;
    goto $bb23, $bb62;

  $bb62:
    assume !($i139 == 1);
    $i138 := $eq.ref(ioctl_remove_descriptor, $p0);
    assume true;
    goto $bb22, $bb61;

  $bb61:
    assume !($i138 == 1);
    $i137 := $eq.ref(ioctl_add_descriptor, $p0);
    assume {:branchcond $i137} true;
    goto $bb21, $bb60;

  $bb60:
    assume !($i137 == 1);
    $i136 := $eq.ref(ioctl_initiate_bus_reset, $p0);
    assume {:branchcond $i136} true;
    goto $bb20, $bb59;

  $bb59:
    assume !($i136 == 1);
    $i135 := $eq.ref(ioctl_send_response, $p0);
    assume true;
    goto $bb19, $bb58;

  $bb58:
    assume !($i135 == 1);
    $i134 := $eq.ref(ioctl_deallocate, $p0);
    assume true;
    goto $bb18, $bb57;

  $bb57:
    assume !($i134 == 1);
    $i133 := $eq.ref(ioctl_allocate, $p0);
    assume {:branchcond $i133} true;
    goto $bb17, $bb56;

  $bb56:
    assume !($i133 == 1);
    $i132 := $eq.ref(ioctl_send_request, $p0);
    assume {:branchcond $i132} true;
    goto $bb16, $bb55;

  $bb55:
    assume !($i132 == 1);
    $i131 := $eq.ref(ioctl_get_info, $p0);
    assume {:branchcond $i131} true;
    goto $bb15, $bb54;

  $bb54:
    assume !($i131 == 1);
    $i130 := $eq.ref(dummy_set_iso_channels, $p0);
    assume {:branchcond $i130} true;
    goto $bb14, $bb53;

  $bb53:
    assume !($i130 == 1);
    $i129 := $eq.ref(dummy_cancel_packet, $p0);
    assume {:branchcond $i129} true;
    goto $bb13, $bb52;

  $bb52:
    assume !($i129 == 1);
    $i128 := $eq.ref(fw_core_add_address_handler, $p0);
    assume true;
    goto $bb12, $bb51;

  $bb51:
    assume !($i128 == 1);
    $i127 := $eq.ref(fw_cancel_transaction, $p0);
    assume {:branchcond $i127} true;
    goto $bb11, $bb50;

  $bb50:
    assume !($i127 == 1);
    $i126 := $eq.ref(fw_unit_match, $p0);
    assume {:branchcond $i126} true;
    goto $bb10, $bb49;

  $bb49:
    assume !($i126 == 1);
    $i125 := $eq.ref(fw_device_op_release, $p0);
    assume true;
    goto $bb9, $bb48;

  $bb48:
    assume !($i125 == 1);
    $i124 := $eq.ref(fw_device_op_open, $p0);
    assume {:branchcond $i124} true;
    goto $bb8, $bb47;

  $bb47:
    assume !($i124 == 1);
    $i123 := $eq.ref(fw_device_op_mmap, $p0);
    assume true;
    goto $bb7, $bb46;

  $bb46:
    assume !($i123 == 1);
    $i122 := $eq.ref(fw_device_op_poll, $p0);
    assume true;
    goto $bb6, $bb45;

  $bb45:
    assume !($i122 == 1);
    $i121 := $eq.ref(lookup_existing_device, $p0);
    assume {:branchcond $i121} true;
    goto $bb5, $bb44;

  $bb44:
    assume !($i121 == 1);
    $i120 := $eq.ref(update_unit, $p0);
    assume {:branchcond $i120} true;
    goto $bb4, $bb43;

  $bb43:
    assume !($i120 == 1);
    $i119 := $eq.ref(shutdown_unit, $p0);
    assume {:branchcond $i119} true;
    goto $bb3, $bb42;

  $bb42:
    assume !($i119 == 1);
    $i118 := $eq.ref(fw_device_set_broadcast_channel, $p0);
    assume true;
    goto $bb2, $bb41;

  $bb41:
    assume !($i118 == 1);
    assume false;
    return;

  $bb2:
    assume $i118 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3209} $i3 := fw_device_set_broadcast_channel($p1, $p2);
    goto SeqInstr_2485, SeqInstr_2486;

  SeqInstr_2486:
    assume assertsPassed;
    goto SeqInstr_2487;

  SeqInstr_2487:
    $r := $i3;
    return;

  SeqInstr_2485:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i119 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3210} $i6 := shutdown_unit($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i120 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3211} $i9 := update_unit($p7, $p8);
    goto SeqInstr_2488, SeqInstr_2489;

  SeqInstr_2489:
    assume assertsPassed;
    goto SeqInstr_2490;

  SeqInstr_2490:
    $r := $i9;
    return;

  SeqInstr_2488:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i121 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3212} $i12 := lookup_existing_device($p10, $p11);
    goto SeqInstr_2491, SeqInstr_2492;

  SeqInstr_2492:
    assume assertsPassed;
    goto SeqInstr_2493;

  SeqInstr_2493:
    $r := $i12;
    return;

  SeqInstr_2491:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i122 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3213} $i15 := fw_device_op_poll($p13, $p14);
    goto SeqInstr_2494, SeqInstr_2495;

  SeqInstr_2495:
    assume assertsPassed;
    goto SeqInstr_2496;

  SeqInstr_2496:
    $r := $i15;
    return;

  SeqInstr_2494:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i123 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3214} $i18 := fw_device_op_mmap($p16, $p17);
    goto SeqInstr_2497, SeqInstr_2498;

  SeqInstr_2498:
    assume assertsPassed;
    goto SeqInstr_2499;

  SeqInstr_2499:
    $r := $i18;
    return;

  SeqInstr_2497:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i124 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3215} $i21 := fw_device_op_open($p19, $p20);
    goto SeqInstr_2500, SeqInstr_2501;

  SeqInstr_2501:
    assume assertsPassed;
    goto SeqInstr_2502;

  SeqInstr_2502:
    $r := $i21;
    return;

  SeqInstr_2500:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i125 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3216} $i24 := fw_device_op_release($p22, $p23);
    goto SeqInstr_2503, SeqInstr_2504;

  SeqInstr_2504:
    assume assertsPassed;
    goto SeqInstr_2505;

  SeqInstr_2505:
    $r := $i24;
    return;

  SeqInstr_2503:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i126 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3217} $i27 := fw_unit_match($p25, $p26);
    $r := $i27;
    return;

  $bb11:
    assume $i127 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3218} $i30 := fw_cancel_transaction($p28, $p29);
    goto SeqInstr_2506, SeqInstr_2507;

  SeqInstr_2507:
    assume assertsPassed;
    goto SeqInstr_2508;

  SeqInstr_2508:
    $r := $i30;
    return;

  SeqInstr_2506:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i128 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3219} $i33 := fw_core_add_address_handler($p31, $p32);
    goto SeqInstr_2509, SeqInstr_2510;

  SeqInstr_2510:
    assume assertsPassed;
    goto SeqInstr_2511;

  SeqInstr_2511:
    $r := $i33;
    return;

  SeqInstr_2509:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i129 == 1;
    $p34 := $bitcast.ref.ref(arg);
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3220} $i36 := dummy_cancel_packet($p34, $p35);
    $r := $i36;
    return;

  $bb14:
    assume $i130 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3221} $i39 := dummy_set_iso_channels($p37, $p38);
    $r := $i39;
    return;

  $bb15:
    assume $i131 == 1;
    $p40 := $bitcast.ref.ref(arg);
    $p41 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3222} $i42 := ioctl_get_info($p40, $p41);
    goto SeqInstr_2512, SeqInstr_2513;

  SeqInstr_2513:
    assume assertsPassed;
    goto SeqInstr_2514;

  SeqInstr_2514:
    $r := $i42;
    return;

  SeqInstr_2512:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i132 == 1;
    $p43 := $bitcast.ref.ref(arg);
    $p44 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3223} $i45 := ioctl_send_request($p43, $p44);
    goto SeqInstr_2515, SeqInstr_2516;

  SeqInstr_2516:
    assume assertsPassed;
    goto SeqInstr_2517;

  SeqInstr_2517:
    $r := $i45;
    return;

  SeqInstr_2515:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i133 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3224} $i48 := ioctl_allocate($p46, $p47);
    goto SeqInstr_2518, SeqInstr_2519;

  SeqInstr_2519:
    assume assertsPassed;
    goto SeqInstr_2520;

  SeqInstr_2520:
    $r := $i48;
    return;

  SeqInstr_2518:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i134 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3225} $i51 := ioctl_deallocate($p49, $p50);
    goto SeqInstr_2521, SeqInstr_2522;

  SeqInstr_2522:
    assume assertsPassed;
    goto SeqInstr_2523;

  SeqInstr_2523:
    $r := $i51;
    return;

  SeqInstr_2521:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i135 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3226} $i54 := ioctl_send_response($p52, $p53);
    goto SeqInstr_2524, SeqInstr_2525;

  SeqInstr_2525:
    assume assertsPassed;
    goto SeqInstr_2526;

  SeqInstr_2526:
    $r := $i54;
    return;

  SeqInstr_2524:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i136 == 1;
    $p55 := $bitcast.ref.ref(arg);
    $p56 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3227} $i57 := ioctl_initiate_bus_reset($p55, $p56);
    goto SeqInstr_2527, SeqInstr_2528;

  SeqInstr_2528:
    assume assertsPassed;
    goto SeqInstr_2529;

  SeqInstr_2529:
    $r := $i57;
    return;

  SeqInstr_2527:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i137 == 1;
    $p58 := $bitcast.ref.ref(arg);
    $p59 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3228} $i60 := ioctl_add_descriptor($p58, $p59);
    goto SeqInstr_2530, SeqInstr_2531;

  SeqInstr_2531:
    assume assertsPassed;
    goto SeqInstr_2532;

  SeqInstr_2532:
    $r := $i60;
    return;

  SeqInstr_2530:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i138 == 1;
    $p61 := $bitcast.ref.ref(arg);
    $p62 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3229} $i63 := ioctl_remove_descriptor($p61, $p62);
    goto SeqInstr_2533, SeqInstr_2534;

  SeqInstr_2534:
    assume assertsPassed;
    goto SeqInstr_2535;

  SeqInstr_2535:
    $r := $i63;
    return;

  SeqInstr_2533:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i139 == 1;
    $p64 := $bitcast.ref.ref(arg);
    $p65 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3230} $i66 := ioctl_create_iso_context($p64, $p65);
    goto SeqInstr_2536, SeqInstr_2537;

  SeqInstr_2537:
    assume assertsPassed;
    goto SeqInstr_2538;

  SeqInstr_2538:
    $r := $i66;
    return;

  SeqInstr_2536:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i140 == 1;
    $p67 := $bitcast.ref.ref(arg);
    $p68 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3231} $i69 := ioctl_queue_iso($p67, $p68);
    goto SeqInstr_2539, SeqInstr_2540;

  SeqInstr_2540:
    assume assertsPassed;
    goto SeqInstr_2541;

  SeqInstr_2541:
    $r := $i69;
    return;

  SeqInstr_2539:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i141 == 1;
    $p70 := $bitcast.ref.ref(arg);
    $p71 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3232} $i72 := ioctl_start_iso($p70, $p71);
    goto SeqInstr_2542, SeqInstr_2543;

  SeqInstr_2543:
    assume assertsPassed;
    goto SeqInstr_2544;

  SeqInstr_2544:
    $r := $i72;
    return;

  SeqInstr_2542:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i142 == 1;
    $p73 := $bitcast.ref.ref(arg);
    $p74 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3233} $i75 := ioctl_stop_iso($p73, $p74);
    goto SeqInstr_2545, SeqInstr_2546;

  SeqInstr_2546:
    assume assertsPassed;
    goto SeqInstr_2547;

  SeqInstr_2547:
    $r := $i75;
    return;

  SeqInstr_2545:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i143 == 1;
    $p76 := $bitcast.ref.ref(arg);
    $p77 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3234} $i78 := ioctl_get_cycle_timer($p76, $p77);
    $r := $i78;
    return;

  $bb28:
    assume $i144 == 1;
    $p79 := $bitcast.ref.ref(arg);
    $p80 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3235} $i81 := ioctl_allocate_iso_resource($p79, $p80);
    goto SeqInstr_2548, SeqInstr_2549;

  SeqInstr_2549:
    assume assertsPassed;
    goto SeqInstr_2550;

  SeqInstr_2550:
    $r := $i81;
    return;

  SeqInstr_2548:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i145 == 1;
    $p82 := $bitcast.ref.ref(arg);
    $p83 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3236} $i84 := ioctl_deallocate_iso_resource($p82, $p83);
    goto SeqInstr_2551, SeqInstr_2552;

  SeqInstr_2552:
    assume assertsPassed;
    goto SeqInstr_2553;

  SeqInstr_2553:
    $r := $i84;
    return;

  SeqInstr_2551:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i146 == 1;
    $p85 := $bitcast.ref.ref(arg);
    $p86 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3237} $i87 := ioctl_allocate_iso_resource_once($p85, $p86);
    goto SeqInstr_2554, SeqInstr_2555;

  SeqInstr_2555:
    assume assertsPassed;
    goto SeqInstr_2556;

  SeqInstr_2556:
    $r := $i87;
    return;

  SeqInstr_2554:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i147 == 1;
    $p88 := $bitcast.ref.ref(arg);
    $p89 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3238} $i90 := ioctl_deallocate_iso_resource_once($p88, $p89);
    goto SeqInstr_2557, SeqInstr_2558;

  SeqInstr_2558:
    assume assertsPassed;
    goto SeqInstr_2559;

  SeqInstr_2559:
    $r := $i90;
    return;

  SeqInstr_2557:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i148 == 1;
    $p91 := $bitcast.ref.ref(arg);
    $p92 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3239} $i93 := ioctl_get_speed($p91, $p92);
    $r := $i93;
    return;

  $bb33:
    assume $i149 == 1;
    $p94 := $bitcast.ref.ref(arg);
    $p95 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3240} $i96 := ioctl_send_broadcast_request($p94, $p95);
    goto SeqInstr_2560, SeqInstr_2561;

  SeqInstr_2561:
    assume assertsPassed;
    goto SeqInstr_2562;

  SeqInstr_2562:
    $r := $i96;
    return;

  SeqInstr_2560:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i150 == 1;
    $p97 := $bitcast.ref.ref(arg);
    $p98 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3241} $i99 := ioctl_send_stream_packet($p97, $p98);
    goto SeqInstr_2563, SeqInstr_2564;

  SeqInstr_2564:
    assume assertsPassed;
    goto SeqInstr_2565;

  SeqInstr_2565:
    $r := $i99;
    return;

  SeqInstr_2563:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i151 == 1;
    $p100 := $bitcast.ref.ref(arg);
    $p101 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3242} $i102 := ioctl_get_cycle_timer2($p100, $p101);
    $r := $i102;
    return;

  $bb36:
    assume $i152 == 1;
    $p103 := $bitcast.ref.ref(arg);
    $p104 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3243} $i105 := ioctl_send_phy_packet($p103, $p104);
    goto SeqInstr_2566, SeqInstr_2567;

  SeqInstr_2567:
    assume assertsPassed;
    goto SeqInstr_2568;

  SeqInstr_2568:
    $r := $i105;
    return;

  SeqInstr_2566:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i153 == 1;
    $p106 := $bitcast.ref.ref(arg);
    $p107 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3244} $i108 := ioctl_receive_phy_packets($p106, $p107);
    goto SeqInstr_2569, SeqInstr_2570;

  SeqInstr_2570:
    assume assertsPassed;
    goto SeqInstr_2571;

  SeqInstr_2571:
    $r := $i108;
    return;

  SeqInstr_2569:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i154 == 1;
    $p109 := $bitcast.ref.ref(arg);
    $p110 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3245} $i111 := ioctl_set_iso_channels($p109, $p110);
    goto SeqInstr_2572, SeqInstr_2573;

  SeqInstr_2573:
    assume assertsPassed;
    goto SeqInstr_2574;

  SeqInstr_2574:
    $r := $i111;
    return;

  SeqInstr_2572:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i155 == 1;
    $p112 := $bitcast.ref.ref(arg);
    $p113 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3246} $i114 := ioctl_flush_iso($p112, $p113);
    goto SeqInstr_2575, SeqInstr_2576;

  SeqInstr_2576:
    assume assertsPassed;
    goto SeqInstr_2577;

  SeqInstr_2577:
    $r := $i114;
    return;

  SeqInstr_2575:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i156 == 1;
    $p115 := $bitcast.ref.ref(arg);
    $p116 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3247} $i117 := fw_unit_uevent($p115, $p116);
    $r := $i117;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 1133678);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dummy_enable_phys_dma, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3248} $i1 := dummy_enable_phys_dma(arg, arg1, arg2);
    $r := $i1;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 1134710);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i64) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(dummy_allocate_iso_context, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3249} $p1 := dummy_allocate_iso_context(arg, arg1, arg2, arg3);
    $r := $p1;
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 1135742);

procedure devirtbounce.29(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, assertsPassed;



implementation devirtbounce.29(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i11 := $eq.ref(dummy_start_iso, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(dummy_update_phy_reg, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(fw_iso_context_start, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(fw_card_add, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg3);
    call {:si_unique_call 3250} $i3 := fw_card_add($p1, arg1, arg2, $i2);
    goto SeqInstr_2578, SeqInstr_2579;

  SeqInstr_2579:
    assume assertsPassed;
    goto SeqInstr_2580;

  SeqInstr_2580:
    $r := $i3;
    return;

  SeqInstr_2578:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i9 == 1;
    call {:si_unique_call 3251} $i4 := fw_iso_context_start(arg, arg1, arg2, arg3);
    goto SeqInstr_2581, SeqInstr_2582;

  SeqInstr_2582:
    assume assertsPassed;
    goto SeqInstr_2583;

  SeqInstr_2583:
    $r := $i4;
    return;

  SeqInstr_2581:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3252} $i6 := dummy_update_phy_reg($p5, arg1, arg2, arg3);
    $r := $i6;
    return;

  $bb5:
    assume $i11 == 1;
    call {:si_unique_call 3253} $i7 := dummy_start_iso(arg, arg1, arg2, arg3);
    $r := $i7;
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 1136774);

procedure devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.30(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(dummy_queue_iso, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(fw_iso_context_queue, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 3254} $i1 := fw_iso_context_queue(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 3255} $i2 := dummy_queue_iso(arg, arg1, arg2, arg3);
    $r := $i2;
    return;
}



const devirtbounce.31: ref;

axiom devirtbounce.31 == $sub.ref(0, 1137806);

procedure devirtbounce.31(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.34, $M.0, $M.49, $M.50, $M.51, $M.55, $M.56, $M.10, $M.3, $M.15, $M.26, $M.24, $M.38, $M.39, $M.23, $M.40, $M.31, $CurrAddr, $M.27, $M.28, assertsPassed, $M.45, $M.46, $M.16, $M.13, $M.25, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation devirtbounce.31(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(dummy_flush_iso_completions, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_get_request_speed, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_iso_context_stop, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_iso_context_flush_completions, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i18 == 1);
    $i17 := $eq.ref(fw_device_enable_phys_dma, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i17 == 1);
    $i16 := $eq.ref(fw_unit_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i16 == 1);
    $i15 := $eq.ref(fw_unit_probe, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i15 == 1);
    $i14 := $eq.ref(fw_core_add_descriptor, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i14 == 1);
    assume false;
    return;

  $bb2:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3256} $i2 := fw_core_add_descriptor($p1);
    goto SeqInstr_2584, SeqInstr_2585;

  SeqInstr_2585:
    assume assertsPassed;
    goto SeqInstr_2586;

  SeqInstr_2586:
    $r := $i2;
    return;

  SeqInstr_2584:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i15 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3257} $i4 := fw_unit_probe($p3);
    goto SeqInstr_2587, SeqInstr_2588;

  SeqInstr_2588:
    assume assertsPassed;
    goto SeqInstr_2589;

  SeqInstr_2589:
    $r := $i4;
    return;

  SeqInstr_2587:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i16 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3258} $i6 := fw_unit_remove($p5);
    goto SeqInstr_2590, SeqInstr_2591;

  SeqInstr_2591:
    assume assertsPassed;
    goto SeqInstr_2592;

  SeqInstr_2592:
    $r := $i6;
    return;

  SeqInstr_2590:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3259} $i8 := fw_device_enable_phys_dma($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i18 == 1;
    call {:si_unique_call 3260} $i9 := fw_iso_context_flush_completions(arg);
    goto SeqInstr_2593, SeqInstr_2594;

  SeqInstr_2594:
    assume assertsPassed;
    goto SeqInstr_2595;

  SeqInstr_2595:
    $r := $i9;
    return;

  SeqInstr_2593:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    call {:si_unique_call 3261} $i10 := fw_iso_context_stop(arg);
    goto SeqInstr_2596, SeqInstr_2597;

  SeqInstr_2597:
    assume assertsPassed;
    goto SeqInstr_2598;

  SeqInstr_2598:
    $r := $i10;
    return;

  SeqInstr_2596:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i20 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3262} $i12 := fw_get_request_speed($p11);
    $r := $i12;
    return;

  $bb9:
    assume $i21 == 1;
    call {:si_unique_call 3263} $i13 := dummy_flush_iso_completions(arg);
    $r := $i13;
    return;
}



const devirtbounce.32: ref;

axiom devirtbounce.32 == $sub.ref(0, 1138838);

procedure devirtbounce.32(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation devirtbounce.32(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i153 := $eq.ref(fw_unit_uevent, $p0);
    assume {:branchcond $i153} true;
    goto $bb40, $bb79;

  $bb79:
    assume !($i153 == 1);
    $i152 := $eq.ref(ioctl_flush_iso, $p0);
    assume true;
    goto $bb39, $bb78;

  $bb78:
    assume !($i152 == 1);
    $i151 := $eq.ref(ioctl_set_iso_channels, $p0);
    assume {:branchcond $i151} true;
    goto $bb38, $bb77;

  $bb77:
    assume !($i151 == 1);
    $i150 := $eq.ref(ioctl_receive_phy_packets, $p0);
    assume {:branchcond $i150} true;
    goto $bb37, $bb76;

  $bb76:
    assume !($i150 == 1);
    $i149 := $eq.ref(ioctl_send_phy_packet, $p0);
    assume {:branchcond $i149} true;
    goto $bb36, $bb75;

  $bb75:
    assume !($i149 == 1);
    $i148 := $eq.ref(ioctl_get_cycle_timer2, $p0);
    assume true;
    goto $bb35, $bb74;

  $bb74:
    assume !($i148 == 1);
    $i147 := $eq.ref(ioctl_send_stream_packet, $p0);
    assume true;
    goto $bb34, $bb73;

  $bb73:
    assume !($i147 == 1);
    $i146 := $eq.ref(ioctl_send_broadcast_request, $p0);
    assume true;
    goto $bb33, $bb72;

  $bb72:
    assume !($i146 == 1);
    $i145 := $eq.ref(ioctl_get_speed, $p0);
    assume {:branchcond $i145} true;
    goto $bb32, $bb71;

  $bb71:
    assume !($i145 == 1);
    $i144 := $eq.ref(ioctl_deallocate_iso_resource_once, $p0);
    assume {:branchcond $i144} true;
    goto $bb31, $bb70;

  $bb70:
    assume !($i144 == 1);
    $i143 := $eq.ref(ioctl_allocate_iso_resource_once, $p0);
    assume true;
    goto $bb30, $bb69;

  $bb69:
    assume !($i143 == 1);
    $i142 := $eq.ref(ioctl_deallocate_iso_resource, $p0);
    assume {:branchcond $i142} true;
    goto $bb29, $bb68;

  $bb68:
    assume !($i142 == 1);
    $i141 := $eq.ref(ioctl_allocate_iso_resource, $p0);
    assume true;
    goto $bb28, $bb67;

  $bb67:
    assume !($i141 == 1);
    $i140 := $eq.ref(ioctl_get_cycle_timer, $p0);
    assume true;
    goto $bb27, $bb66;

  $bb66:
    assume !($i140 == 1);
    $i139 := $eq.ref(ioctl_stop_iso, $p0);
    assume {:branchcond $i139} true;
    goto $bb26, $bb65;

  $bb65:
    assume !($i139 == 1);
    $i138 := $eq.ref(ioctl_start_iso, $p0);
    assume true;
    goto $bb25, $bb64;

  $bb64:
    assume !($i138 == 1);
    $i137 := $eq.ref(ioctl_queue_iso, $p0);
    assume {:branchcond $i137} true;
    goto $bb24, $bb63;

  $bb63:
    assume !($i137 == 1);
    $i136 := $eq.ref(ioctl_create_iso_context, $p0);
    assume {:branchcond $i136} true;
    goto $bb23, $bb62;

  $bb62:
    assume !($i136 == 1);
    $i135 := $eq.ref(ioctl_remove_descriptor, $p0);
    assume true;
    goto $bb22, $bb61;

  $bb61:
    assume !($i135 == 1);
    $i134 := $eq.ref(ioctl_add_descriptor, $p0);
    assume true;
    goto $bb21, $bb60;

  $bb60:
    assume !($i134 == 1);
    $i133 := $eq.ref(ioctl_initiate_bus_reset, $p0);
    assume {:branchcond $i133} true;
    goto $bb20, $bb59;

  $bb59:
    assume !($i133 == 1);
    $i132 := $eq.ref(ioctl_send_response, $p0);
    assume {:branchcond $i132} true;
    goto $bb19, $bb58;

  $bb58:
    assume !($i132 == 1);
    $i131 := $eq.ref(ioctl_deallocate, $p0);
    assume {:branchcond $i131} true;
    goto $bb18, $bb57;

  $bb57:
    assume !($i131 == 1);
    $i130 := $eq.ref(ioctl_allocate, $p0);
    assume {:branchcond $i130} true;
    goto $bb17, $bb56;

  $bb56:
    assume !($i130 == 1);
    $i129 := $eq.ref(ioctl_send_request, $p0);
    assume {:branchcond $i129} true;
    goto $bb16, $bb55;

  $bb55:
    assume !($i129 == 1);
    $i128 := $eq.ref(ioctl_get_info, $p0);
    assume true;
    goto $bb15, $bb54;

  $bb54:
    assume !($i128 == 1);
    $i127 := $eq.ref(dummy_set_iso_channels, $p0);
    assume {:branchcond $i127} true;
    goto $bb14, $bb53;

  $bb53:
    assume !($i127 == 1);
    $i126 := $eq.ref(dummy_cancel_packet, $p0);
    assume {:branchcond $i126} true;
    goto $bb13, $bb52;

  $bb52:
    assume !($i126 == 1);
    $i125 := $eq.ref(fw_core_add_address_handler, $p0);
    assume true;
    goto $bb12, $bb51;

  $bb51:
    assume !($i125 == 1);
    $i124 := $eq.ref(fw_cancel_transaction, $p0);
    assume {:branchcond $i124} true;
    goto $bb11, $bb50;

  $bb50:
    assume !($i124 == 1);
    $i123 := $eq.ref(fw_unit_match, $p0);
    assume true;
    goto $bb10, $bb49;

  $bb49:
    assume !($i123 == 1);
    $i122 := $eq.ref(fw_device_op_release, $p0);
    assume true;
    goto $bb9, $bb48;

  $bb48:
    assume !($i122 == 1);
    $i121 := $eq.ref(fw_device_op_open, $p0);
    assume {:branchcond $i121} true;
    goto $bb8, $bb47;

  $bb47:
    assume !($i121 == 1);
    $i120 := $eq.ref(fw_device_op_mmap, $p0);
    assume {:branchcond $i120} true;
    goto $bb7, $bb46;

  $bb46:
    assume !($i120 == 1);
    $i119 := $eq.ref(fw_device_op_poll, $p0);
    assume {:branchcond $i119} true;
    goto $bb6, $bb45;

  $bb45:
    assume !($i119 == 1);
    $i118 := $eq.ref(lookup_existing_device, $p0);
    assume true;
    goto $bb5, $bb44;

  $bb44:
    assume !($i118 == 1);
    $i117 := $eq.ref(update_unit, $p0);
    assume {:branchcond $i117} true;
    goto $bb4, $bb43;

  $bb43:
    assume !($i117 == 1);
    $i116 := $eq.ref(shutdown_unit, $p0);
    assume {:branchcond $i116} true;
    goto $bb3, $bb42;

  $bb42:
    assume !($i116 == 1);
    $i115 := $eq.ref(fw_device_set_broadcast_channel, $p0);
    assume true;
    goto $bb2, $bb41;

  $bb41:
    assume !($i115 == 1);
    assume false;
    return;

  $bb2:
    assume $i115 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3264} $i3 := fw_device_set_broadcast_channel($p1, $p2);
    goto SeqInstr_2599, SeqInstr_2600;

  SeqInstr_2600:
    assume assertsPassed;
    goto SeqInstr_2601;

  SeqInstr_2601:
    $r := $i3;
    return;

  SeqInstr_2599:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i116 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3265} $i6 := shutdown_unit($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i117 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3266} $i9 := update_unit($p7, $p8);
    goto SeqInstr_2602, SeqInstr_2603;

  SeqInstr_2603:
    assume assertsPassed;
    goto SeqInstr_2604;

  SeqInstr_2604:
    $r := $i9;
    return;

  SeqInstr_2602:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i118 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3267} $i12 := lookup_existing_device($p10, $p11);
    goto SeqInstr_2605, SeqInstr_2606;

  SeqInstr_2606:
    assume assertsPassed;
    goto SeqInstr_2607;

  SeqInstr_2607:
    $r := $i12;
    return;

  SeqInstr_2605:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i119 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3268} $i15 := fw_device_op_poll($p13, $p14);
    goto SeqInstr_2608, SeqInstr_2609;

  SeqInstr_2609:
    assume assertsPassed;
    goto SeqInstr_2610;

  SeqInstr_2610:
    $r := $i15;
    return;

  SeqInstr_2608:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i120 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3269} $i18 := fw_device_op_mmap($p16, $p17);
    goto SeqInstr_2611, SeqInstr_2612;

  SeqInstr_2612:
    assume assertsPassed;
    goto SeqInstr_2613;

  SeqInstr_2613:
    $r := $i18;
    return;

  SeqInstr_2611:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i121 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3270} $i21 := fw_device_op_open($p19, $p20);
    goto SeqInstr_2614, SeqInstr_2615;

  SeqInstr_2615:
    assume assertsPassed;
    goto SeqInstr_2616;

  SeqInstr_2616:
    $r := $i21;
    return;

  SeqInstr_2614:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i122 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3271} $i24 := fw_device_op_release($p22, $p23);
    goto SeqInstr_2617, SeqInstr_2618;

  SeqInstr_2618:
    assume assertsPassed;
    goto SeqInstr_2619;

  SeqInstr_2619:
    $r := $i24;
    return;

  SeqInstr_2617:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i123 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3272} $i27 := fw_unit_match($p25, $p26);
    $r := $i27;
    return;

  $bb11:
    assume $i124 == 1;
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3273} $i29 := fw_cancel_transaction(arg, $p28);
    goto SeqInstr_2620, SeqInstr_2621;

  SeqInstr_2621:
    assume assertsPassed;
    goto SeqInstr_2622;

  SeqInstr_2622:
    $r := $i29;
    return;

  SeqInstr_2620:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i125 == 1;
    $p30 := $bitcast.ref.ref(arg);
    $p31 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3274} $i32 := fw_core_add_address_handler($p30, $p31);
    goto SeqInstr_2623, SeqInstr_2624;

  SeqInstr_2624:
    assume assertsPassed;
    goto SeqInstr_2625;

  SeqInstr_2625:
    $r := $i32;
    return;

  SeqInstr_2623:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i126 == 1;
    call {:si_unique_call 3275} $i33 := dummy_cancel_packet(arg, arg1);
    $r := $i33;
    return;

  $bb14:
    assume $i127 == 1;
    $p34 := $bitcast.ref.ref(arg);
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3276} $i36 := dummy_set_iso_channels($p34, $p35);
    $r := $i36;
    return;

  $bb15:
    assume $i128 == 1;
    $p37 := $bitcast.ref.ref(arg);
    $p38 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3277} $i39 := ioctl_get_info($p37, $p38);
    goto SeqInstr_2626, SeqInstr_2627;

  SeqInstr_2627:
    assume assertsPassed;
    goto SeqInstr_2628;

  SeqInstr_2628:
    $r := $i39;
    return;

  SeqInstr_2626:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i129 == 1;
    $p40 := $bitcast.ref.ref(arg);
    $p41 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3278} $i42 := ioctl_send_request($p40, $p41);
    goto SeqInstr_2629, SeqInstr_2630;

  SeqInstr_2630:
    assume assertsPassed;
    goto SeqInstr_2631;

  SeqInstr_2631:
    $r := $i42;
    return;

  SeqInstr_2629:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i130 == 1;
    $p43 := $bitcast.ref.ref(arg);
    $p44 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3279} $i45 := ioctl_allocate($p43, $p44);
    goto SeqInstr_2632, SeqInstr_2633;

  SeqInstr_2633:
    assume assertsPassed;
    goto SeqInstr_2634;

  SeqInstr_2634:
    $r := $i45;
    return;

  SeqInstr_2632:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i131 == 1;
    $p46 := $bitcast.ref.ref(arg);
    $p47 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3280} $i48 := ioctl_deallocate($p46, $p47);
    goto SeqInstr_2635, SeqInstr_2636;

  SeqInstr_2636:
    assume assertsPassed;
    goto SeqInstr_2637;

  SeqInstr_2637:
    $r := $i48;
    return;

  SeqInstr_2635:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i132 == 1;
    $p49 := $bitcast.ref.ref(arg);
    $p50 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3281} $i51 := ioctl_send_response($p49, $p50);
    goto SeqInstr_2638, SeqInstr_2639;

  SeqInstr_2639:
    assume assertsPassed;
    goto SeqInstr_2640;

  SeqInstr_2640:
    $r := $i51;
    return;

  SeqInstr_2638:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i133 == 1;
    $p52 := $bitcast.ref.ref(arg);
    $p53 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3282} $i54 := ioctl_initiate_bus_reset($p52, $p53);
    goto SeqInstr_2641, SeqInstr_2642;

  SeqInstr_2642:
    assume assertsPassed;
    goto SeqInstr_2643;

  SeqInstr_2643:
    $r := $i54;
    return;

  SeqInstr_2641:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i134 == 1;
    $p55 := $bitcast.ref.ref(arg);
    $p56 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3283} $i57 := ioctl_add_descriptor($p55, $p56);
    goto SeqInstr_2644, SeqInstr_2645;

  SeqInstr_2645:
    assume assertsPassed;
    goto SeqInstr_2646;

  SeqInstr_2646:
    $r := $i57;
    return;

  SeqInstr_2644:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i135 == 1;
    $p58 := $bitcast.ref.ref(arg);
    $p59 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3284} $i60 := ioctl_remove_descriptor($p58, $p59);
    goto SeqInstr_2647, SeqInstr_2648;

  SeqInstr_2648:
    assume assertsPassed;
    goto SeqInstr_2649;

  SeqInstr_2649:
    $r := $i60;
    return;

  SeqInstr_2647:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i136 == 1;
    $p61 := $bitcast.ref.ref(arg);
    $p62 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3285} $i63 := ioctl_create_iso_context($p61, $p62);
    goto SeqInstr_2650, SeqInstr_2651;

  SeqInstr_2651:
    assume assertsPassed;
    goto SeqInstr_2652;

  SeqInstr_2652:
    $r := $i63;
    return;

  SeqInstr_2650:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i137 == 1;
    $p64 := $bitcast.ref.ref(arg);
    $p65 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3286} $i66 := ioctl_queue_iso($p64, $p65);
    goto SeqInstr_2653, SeqInstr_2654;

  SeqInstr_2654:
    assume assertsPassed;
    goto SeqInstr_2655;

  SeqInstr_2655:
    $r := $i66;
    return;

  SeqInstr_2653:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i138 == 1;
    $p67 := $bitcast.ref.ref(arg);
    $p68 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3287} $i69 := ioctl_start_iso($p67, $p68);
    goto SeqInstr_2656, SeqInstr_2657;

  SeqInstr_2657:
    assume assertsPassed;
    goto SeqInstr_2658;

  SeqInstr_2658:
    $r := $i69;
    return;

  SeqInstr_2656:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i139 == 1;
    $p70 := $bitcast.ref.ref(arg);
    $p71 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3288} $i72 := ioctl_stop_iso($p70, $p71);
    goto SeqInstr_2659, SeqInstr_2660;

  SeqInstr_2660:
    assume assertsPassed;
    goto SeqInstr_2661;

  SeqInstr_2661:
    $r := $i72;
    return;

  SeqInstr_2659:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i140 == 1;
    $p73 := $bitcast.ref.ref(arg);
    $p74 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3289} $i75 := ioctl_get_cycle_timer($p73, $p74);
    $r := $i75;
    return;

  $bb28:
    assume $i141 == 1;
    $p76 := $bitcast.ref.ref(arg);
    $p77 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3290} $i78 := ioctl_allocate_iso_resource($p76, $p77);
    goto SeqInstr_2662, SeqInstr_2663;

  SeqInstr_2663:
    assume assertsPassed;
    goto SeqInstr_2664;

  SeqInstr_2664:
    $r := $i78;
    return;

  SeqInstr_2662:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i142 == 1;
    $p79 := $bitcast.ref.ref(arg);
    $p80 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3291} $i81 := ioctl_deallocate_iso_resource($p79, $p80);
    goto SeqInstr_2665, SeqInstr_2666;

  SeqInstr_2666:
    assume assertsPassed;
    goto SeqInstr_2667;

  SeqInstr_2667:
    $r := $i81;
    return;

  SeqInstr_2665:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i143 == 1;
    $p82 := $bitcast.ref.ref(arg);
    $p83 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3292} $i84 := ioctl_allocate_iso_resource_once($p82, $p83);
    goto SeqInstr_2668, SeqInstr_2669;

  SeqInstr_2669:
    assume assertsPassed;
    goto SeqInstr_2670;

  SeqInstr_2670:
    $r := $i84;
    return;

  SeqInstr_2668:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i144 == 1;
    $p85 := $bitcast.ref.ref(arg);
    $p86 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3293} $i87 := ioctl_deallocate_iso_resource_once($p85, $p86);
    goto SeqInstr_2671, SeqInstr_2672;

  SeqInstr_2672:
    assume assertsPassed;
    goto SeqInstr_2673;

  SeqInstr_2673:
    $r := $i87;
    return;

  SeqInstr_2671:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i145 == 1;
    $p88 := $bitcast.ref.ref(arg);
    $p89 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3294} $i90 := ioctl_get_speed($p88, $p89);
    $r := $i90;
    return;

  $bb33:
    assume $i146 == 1;
    $p91 := $bitcast.ref.ref(arg);
    $p92 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3295} $i93 := ioctl_send_broadcast_request($p91, $p92);
    goto SeqInstr_2674, SeqInstr_2675;

  SeqInstr_2675:
    assume assertsPassed;
    goto SeqInstr_2676;

  SeqInstr_2676:
    $r := $i93;
    return;

  SeqInstr_2674:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i147 == 1;
    $p94 := $bitcast.ref.ref(arg);
    $p95 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3296} $i96 := ioctl_send_stream_packet($p94, $p95);
    goto SeqInstr_2677, SeqInstr_2678;

  SeqInstr_2678:
    assume assertsPassed;
    goto SeqInstr_2679;

  SeqInstr_2679:
    $r := $i96;
    return;

  SeqInstr_2677:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i148 == 1;
    $p97 := $bitcast.ref.ref(arg);
    $p98 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3297} $i99 := ioctl_get_cycle_timer2($p97, $p98);
    $r := $i99;
    return;

  $bb36:
    assume $i149 == 1;
    $p100 := $bitcast.ref.ref(arg);
    $p101 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3298} $i102 := ioctl_send_phy_packet($p100, $p101);
    goto SeqInstr_2680, SeqInstr_2681;

  SeqInstr_2681:
    assume assertsPassed;
    goto SeqInstr_2682;

  SeqInstr_2682:
    $r := $i102;
    return;

  SeqInstr_2680:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i150 == 1;
    $p103 := $bitcast.ref.ref(arg);
    $p104 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3299} $i105 := ioctl_receive_phy_packets($p103, $p104);
    goto SeqInstr_2683, SeqInstr_2684;

  SeqInstr_2684:
    assume assertsPassed;
    goto SeqInstr_2685;

  SeqInstr_2685:
    $r := $i105;
    return;

  SeqInstr_2683:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i151 == 1;
    $p106 := $bitcast.ref.ref(arg);
    $p107 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3300} $i108 := ioctl_set_iso_channels($p106, $p107);
    goto SeqInstr_2686, SeqInstr_2687;

  SeqInstr_2687:
    assume assertsPassed;
    goto SeqInstr_2688;

  SeqInstr_2688:
    $r := $i108;
    return;

  SeqInstr_2686:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i152 == 1;
    $p109 := $bitcast.ref.ref(arg);
    $p110 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3301} $i111 := ioctl_flush_iso($p109, $p110);
    goto SeqInstr_2689, SeqInstr_2690;

  SeqInstr_2690:
    assume assertsPassed;
    goto SeqInstr_2691;

  SeqInstr_2691:
    $r := $i111;
    return;

  SeqInstr_2689:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i153 == 1;
    $p112 := $bitcast.ref.ref(arg);
    $p113 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3302} $i114 := fw_unit_uevent($p112, $p113);
    $r := $i114;
    return;
}



const devirtbounce.33: ref;

axiom devirtbounce.33 == $sub.ref(0, 1139870);

procedure devirtbounce.33(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i64, arg7: ref, arg8: i64, arg9: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed, $M.1, $M.2, $M.15, $M.31, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation devirtbounce.33(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i64, arg7: ref, arg8: i64, arg9: ref)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(handle_low_memory, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i4 == 1);
    $i3 := $eq.ref(handle_registers, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i3 == 1);
    $i2 := $eq.ref(handle_topology_map, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i2 == 1);
    $i1 := $eq.ref(handle_request, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 3303} handle_request(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    goto SeqInstr_2692, SeqInstr_2693;

  SeqInstr_2693:
    assume assertsPassed;
    goto SeqInstr_2694;

  SeqInstr_2694:
    return;

  SeqInstr_2692:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 3304} handle_topology_map(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    goto SeqInstr_2695, SeqInstr_2696;

  SeqInstr_2696:
    assume assertsPassed;
    goto SeqInstr_2697;

  SeqInstr_2697:
    return;

  SeqInstr_2695:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    call {:si_unique_call 3305} handle_registers(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    goto SeqInstr_2698, SeqInstr_2699;

  SeqInstr_2699:
    assume assertsPassed;
    goto SeqInstr_2700;

  SeqInstr_2700:
    return;

  SeqInstr_2698:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i4 == 1;
    call {:si_unique_call 3306} handle_low_memory(arg, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
    goto SeqInstr_2701, SeqInstr_2702;

  SeqInstr_2702:
    assume assertsPassed;
    goto SeqInstr_2703;

  SeqInstr_2703:
    return;

  SeqInstr_2701:
    assume !assertsPassed;
    return;
}



const devirtbounce.34: ref;

axiom devirtbounce.34 == $sub.ref(0, 1140902);

procedure devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation devirtbounce.34(funcPtr: ref, arg: ref, arg1: ref, arg2: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(transmit_phy_packet_callback, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i7 == 1);
    $i6 := $eq.ref(outbound_phy_packet_callback, $p0);
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i6 == 1);
    $i5 := $eq.ref(free_response_callback, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i5 == 1);
    $i4 := $eq.ref(fw_send_response, $p0);
    assume true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i4 == 1);
    $i3 := $eq.ref(transmit_complete_callback, $p0);
    assume true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 3307} transmit_complete_callback(arg, arg1, arg2);
    goto SeqInstr_2704, SeqInstr_2705;

  SeqInstr_2705:
    assume assertsPassed;
    goto SeqInstr_2706;

  SeqInstr_2706:
    return;

  SeqInstr_2704:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3308} fw_send_response($p1, $p2, arg2);
    goto SeqInstr_2707, SeqInstr_2708;

  SeqInstr_2708:
    assume assertsPassed;
    goto SeqInstr_2709;

  SeqInstr_2709:
    return;

  SeqInstr_2707:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i5 == 1;
    call {:si_unique_call 3309} free_response_callback(arg, arg1, arg2);
    return;

  $bb5:
    assume $i6 == 1;
    call {:si_unique_call 3310} outbound_phy_packet_callback(arg, arg1, arg2);
    goto SeqInstr_2710, SeqInstr_2711;

  SeqInstr_2711:
    assume assertsPassed;
    goto SeqInstr_2712;

  SeqInstr_2712:
    return;

  SeqInstr_2710:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i7 == 1;
    call {:si_unique_call 3311} transmit_phy_packet_callback(arg, arg1, arg2);
    return;
}



const devirtbounce.35: ref;

axiom devirtbounce.35 == $sub.ref(0, 1141934);

procedure devirtbounce.35(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.35(funcPtr: ref, arg: ref, arg1: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.36: ref;

axiom devirtbounce.36 == $sub.ref(0, 1142966);

procedure devirtbounce.36(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.26, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $CurrAddr, assertsPassed, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation devirtbounce.36(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $i141: i1;
  var $i142: i1;
  var $i143: i1;
  var $i144: i1;
  var $i145: i1;
  var $i146: i1;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i1;
  var $i151: i1;
  var $i152: i1;
  var $i153: i1;
  var $i154: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i154 := $eq.ref(fw_unit_uevent, $p0);
    assume {:branchcond $i154} true;
    goto $bb40, $bb79;

  $bb79:
    assume !($i154 == 1);
    $i153 := $eq.ref(ioctl_flush_iso, $p0);
    assume {:branchcond $i153} true;
    goto $bb39, $bb78;

  $bb78:
    assume !($i153 == 1);
    $i152 := $eq.ref(ioctl_set_iso_channels, $p0);
    assume true;
    goto $bb38, $bb77;

  $bb77:
    assume !($i152 == 1);
    $i151 := $eq.ref(ioctl_receive_phy_packets, $p0);
    assume {:branchcond $i151} true;
    goto $bb37, $bb76;

  $bb76:
    assume !($i151 == 1);
    $i150 := $eq.ref(ioctl_send_phy_packet, $p0);
    assume {:branchcond $i150} true;
    goto $bb36, $bb75;

  $bb75:
    assume !($i150 == 1);
    $i149 := $eq.ref(ioctl_get_cycle_timer2, $p0);
    assume {:branchcond $i149} true;
    goto $bb35, $bb74;

  $bb74:
    assume !($i149 == 1);
    $i148 := $eq.ref(ioctl_send_stream_packet, $p0);
    assume true;
    goto $bb34, $bb73;

  $bb73:
    assume !($i148 == 1);
    $i147 := $eq.ref(ioctl_send_broadcast_request, $p0);
    assume true;
    goto $bb33, $bb72;

  $bb72:
    assume !($i147 == 1);
    $i146 := $eq.ref(ioctl_get_speed, $p0);
    assume true;
    goto $bb32, $bb71;

  $bb71:
    assume !($i146 == 1);
    $i145 := $eq.ref(ioctl_deallocate_iso_resource_once, $p0);
    assume {:branchcond $i145} true;
    goto $bb31, $bb70;

  $bb70:
    assume !($i145 == 1);
    $i144 := $eq.ref(ioctl_allocate_iso_resource_once, $p0);
    assume {:branchcond $i144} true;
    goto $bb30, $bb69;

  $bb69:
    assume !($i144 == 1);
    $i143 := $eq.ref(ioctl_deallocate_iso_resource, $p0);
    assume true;
    goto $bb29, $bb68;

  $bb68:
    assume !($i143 == 1);
    $i142 := $eq.ref(ioctl_allocate_iso_resource, $p0);
    assume {:branchcond $i142} true;
    goto $bb28, $bb67;

  $bb67:
    assume !($i142 == 1);
    $i141 := $eq.ref(ioctl_get_cycle_timer, $p0);
    assume true;
    goto $bb27, $bb66;

  $bb66:
    assume !($i141 == 1);
    $i140 := $eq.ref(ioctl_stop_iso, $p0);
    assume true;
    goto $bb26, $bb65;

  $bb65:
    assume !($i140 == 1);
    $i139 := $eq.ref(ioctl_start_iso, $p0);
    assume {:branchcond $i139} true;
    goto $bb25, $bb64;

  $bb64:
    assume !($i139 == 1);
    $i138 := $eq.ref(ioctl_queue_iso, $p0);
    assume true;
    goto $bb24, $bb63;

  $bb63:
    assume !($i138 == 1);
    $i137 := $eq.ref(ioctl_create_iso_context, $p0);
    assume {:branchcond $i137} true;
    goto $bb23, $bb62;

  $bb62:
    assume !($i137 == 1);
    $i136 := $eq.ref(ioctl_remove_descriptor, $p0);
    assume {:branchcond $i136} true;
    goto $bb22, $bb61;

  $bb61:
    assume !($i136 == 1);
    $i135 := $eq.ref(ioctl_add_descriptor, $p0);
    assume true;
    goto $bb21, $bb60;

  $bb60:
    assume !($i135 == 1);
    $i134 := $eq.ref(ioctl_initiate_bus_reset, $p0);
    assume true;
    goto $bb20, $bb59;

  $bb59:
    assume !($i134 == 1);
    $i133 := $eq.ref(ioctl_send_response, $p0);
    assume {:branchcond $i133} true;
    goto $bb19, $bb58;

  $bb58:
    assume !($i133 == 1);
    $i132 := $eq.ref(ioctl_deallocate, $p0);
    assume {:branchcond $i132} true;
    goto $bb18, $bb57;

  $bb57:
    assume !($i132 == 1);
    $i131 := $eq.ref(ioctl_allocate, $p0);
    assume {:branchcond $i131} true;
    goto $bb17, $bb56;

  $bb56:
    assume !($i131 == 1);
    $i130 := $eq.ref(ioctl_send_request, $p0);
    assume {:branchcond $i130} true;
    goto $bb16, $bb55;

  $bb55:
    assume !($i130 == 1);
    $i129 := $eq.ref(ioctl_get_info, $p0);
    assume {:branchcond $i129} true;
    goto $bb15, $bb54;

  $bb54:
    assume !($i129 == 1);
    $i128 := $eq.ref(dummy_set_iso_channels, $p0);
    assume true;
    goto $bb14, $bb53;

  $bb53:
    assume !($i128 == 1);
    $i127 := $eq.ref(dummy_cancel_packet, $p0);
    assume {:branchcond $i127} true;
    goto $bb13, $bb52;

  $bb52:
    assume !($i127 == 1);
    $i126 := $eq.ref(fw_core_add_address_handler, $p0);
    assume {:branchcond $i126} true;
    goto $bb12, $bb51;

  $bb51:
    assume !($i126 == 1);
    $i125 := $eq.ref(fw_cancel_transaction, $p0);
    assume true;
    goto $bb11, $bb50;

  $bb50:
    assume !($i125 == 1);
    $i124 := $eq.ref(fw_unit_match, $p0);
    assume {:branchcond $i124} true;
    goto $bb10, $bb49;

  $bb49:
    assume !($i124 == 1);
    $i123 := $eq.ref(fw_device_op_release, $p0);
    assume true;
    goto $bb9, $bb48;

  $bb48:
    assume !($i123 == 1);
    $i122 := $eq.ref(fw_device_op_open, $p0);
    assume true;
    goto $bb8, $bb47;

  $bb47:
    assume !($i122 == 1);
    $i121 := $eq.ref(fw_device_op_mmap, $p0);
    assume {:branchcond $i121} true;
    goto $bb7, $bb46;

  $bb46:
    assume !($i121 == 1);
    $i120 := $eq.ref(fw_device_op_poll, $p0);
    assume {:branchcond $i120} true;
    goto $bb6, $bb45;

  $bb45:
    assume !($i120 == 1);
    $i119 := $eq.ref(lookup_existing_device, $p0);
    assume {:branchcond $i119} true;
    goto $bb5, $bb44;

  $bb44:
    assume !($i119 == 1);
    $i118 := $eq.ref(update_unit, $p0);
    assume true;
    goto $bb4, $bb43;

  $bb43:
    assume !($i118 == 1);
    $i117 := $eq.ref(shutdown_unit, $p0);
    assume {:branchcond $i117} true;
    goto $bb3, $bb42;

  $bb42:
    assume !($i117 == 1);
    $i116 := $eq.ref(fw_device_set_broadcast_channel, $p0);
    assume {:branchcond $i116} true;
    goto $bb2, $bb41;

  $bb41:
    assume !($i116 == 1);
    assume false;
    return;

  $bb2:
    assume $i116 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3312} $i3 := fw_device_set_broadcast_channel($p1, $p2);
    goto SeqInstr_2713, SeqInstr_2714;

  SeqInstr_2714:
    assume assertsPassed;
    goto SeqInstr_2715;

  SeqInstr_2715:
    $r := $i3;
    return;

  SeqInstr_2713:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i117 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3313} $i6 := shutdown_unit($p4, $p5);
    $r := $i6;
    return;

  $bb4:
    assume $i118 == 1;
    $p7 := $bitcast.ref.ref(arg);
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3314} $i9 := update_unit($p7, $p8);
    goto SeqInstr_2716, SeqInstr_2717;

  SeqInstr_2717:
    assume assertsPassed;
    goto SeqInstr_2718;

  SeqInstr_2718:
    $r := $i9;
    return;

  SeqInstr_2716:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i119 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3315} $i12 := lookup_existing_device($p10, $p11);
    goto SeqInstr_2719, SeqInstr_2720;

  SeqInstr_2720:
    assume assertsPassed;
    goto SeqInstr_2721;

  SeqInstr_2721:
    $r := $i12;
    return;

  SeqInstr_2719:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i120 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3316} $i15 := fw_device_op_poll($p13, $p14);
    goto SeqInstr_2722, SeqInstr_2723;

  SeqInstr_2723:
    assume assertsPassed;
    goto SeqInstr_2724;

  SeqInstr_2724:
    $r := $i15;
    return;

  SeqInstr_2722:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i121 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3317} $i18 := fw_device_op_mmap($p16, $p17);
    goto SeqInstr_2725, SeqInstr_2726;

  SeqInstr_2726:
    assume assertsPassed;
    goto SeqInstr_2727;

  SeqInstr_2727:
    $r := $i18;
    return;

  SeqInstr_2725:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i122 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3318} $i21 := fw_device_op_open($p19, $p20);
    goto SeqInstr_2728, SeqInstr_2729;

  SeqInstr_2729:
    assume assertsPassed;
    goto SeqInstr_2730;

  SeqInstr_2730:
    $r := $i21;
    return;

  SeqInstr_2728:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i123 == 1;
    $p22 := $bitcast.ref.ref(arg);
    $p23 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3319} $i24 := fw_device_op_release($p22, $p23);
    goto SeqInstr_2731, SeqInstr_2732;

  SeqInstr_2732:
    assume assertsPassed;
    goto SeqInstr_2733;

  SeqInstr_2733:
    $r := $i24;
    return;

  SeqInstr_2731:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i124 == 1;
    $p25 := $bitcast.ref.ref(arg);
    $p26 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3320} $i27 := fw_unit_match($p25, $p26);
    $r := $i27;
    return;

  $bb11:
    assume $i125 == 1;
    $p28 := $bitcast.ref.ref(arg);
    $p29 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3321} $i30 := fw_cancel_transaction($p28, $p29);
    goto SeqInstr_2734, SeqInstr_2735;

  SeqInstr_2735:
    assume assertsPassed;
    goto SeqInstr_2736;

  SeqInstr_2736:
    $r := $i30;
    return;

  SeqInstr_2734:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i126 == 1;
    $p31 := $bitcast.ref.ref(arg);
    $p32 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3322} $i33 := fw_core_add_address_handler($p31, $p32);
    goto SeqInstr_2737, SeqInstr_2738;

  SeqInstr_2738:
    assume assertsPassed;
    goto SeqInstr_2739;

  SeqInstr_2739:
    $r := $i33;
    return;

  SeqInstr_2737:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i127 == 1;
    $p34 := $bitcast.ref.ref(arg);
    $p35 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3323} $i36 := dummy_cancel_packet($p34, $p35);
    $r := $i36;
    return;

  $bb14:
    assume $i128 == 1;
    call {:si_unique_call 3324} $i37 := dummy_set_iso_channels(arg, arg1);
    $r := $i37;
    return;

  $bb15:
    assume $i129 == 1;
    $p38 := $bitcast.ref.ref(arg);
    $p39 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3325} $i40 := ioctl_get_info($p38, $p39);
    goto SeqInstr_2740, SeqInstr_2741;

  SeqInstr_2741:
    assume assertsPassed;
    goto SeqInstr_2742;

  SeqInstr_2742:
    $r := $i40;
    return;

  SeqInstr_2740:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i130 == 1;
    $p41 := $bitcast.ref.ref(arg);
    $p42 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3326} $i43 := ioctl_send_request($p41, $p42);
    goto SeqInstr_2743, SeqInstr_2744;

  SeqInstr_2744:
    assume assertsPassed;
    goto SeqInstr_2745;

  SeqInstr_2745:
    $r := $i43;
    return;

  SeqInstr_2743:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i131 == 1;
    $p44 := $bitcast.ref.ref(arg);
    $p45 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3327} $i46 := ioctl_allocate($p44, $p45);
    goto SeqInstr_2746, SeqInstr_2747;

  SeqInstr_2747:
    assume assertsPassed;
    goto SeqInstr_2748;

  SeqInstr_2748:
    $r := $i46;
    return;

  SeqInstr_2746:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i132 == 1;
    $p47 := $bitcast.ref.ref(arg);
    $p48 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3328} $i49 := ioctl_deallocate($p47, $p48);
    goto SeqInstr_2749, SeqInstr_2750;

  SeqInstr_2750:
    assume assertsPassed;
    goto SeqInstr_2751;

  SeqInstr_2751:
    $r := $i49;
    return;

  SeqInstr_2749:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i133 == 1;
    $p50 := $bitcast.ref.ref(arg);
    $p51 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3329} $i52 := ioctl_send_response($p50, $p51);
    goto SeqInstr_2752, SeqInstr_2753;

  SeqInstr_2753:
    assume assertsPassed;
    goto SeqInstr_2754;

  SeqInstr_2754:
    $r := $i52;
    return;

  SeqInstr_2752:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i134 == 1;
    $p53 := $bitcast.ref.ref(arg);
    $p54 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3330} $i55 := ioctl_initiate_bus_reset($p53, $p54);
    goto SeqInstr_2755, SeqInstr_2756;

  SeqInstr_2756:
    assume assertsPassed;
    goto SeqInstr_2757;

  SeqInstr_2757:
    $r := $i55;
    return;

  SeqInstr_2755:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i135 == 1;
    $p56 := $bitcast.ref.ref(arg);
    $p57 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3331} $i58 := ioctl_add_descriptor($p56, $p57);
    goto SeqInstr_2758, SeqInstr_2759;

  SeqInstr_2759:
    assume assertsPassed;
    goto SeqInstr_2760;

  SeqInstr_2760:
    $r := $i58;
    return;

  SeqInstr_2758:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i136 == 1;
    $p59 := $bitcast.ref.ref(arg);
    $p60 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3332} $i61 := ioctl_remove_descriptor($p59, $p60);
    goto SeqInstr_2761, SeqInstr_2762;

  SeqInstr_2762:
    assume assertsPassed;
    goto SeqInstr_2763;

  SeqInstr_2763:
    $r := $i61;
    return;

  SeqInstr_2761:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i137 == 1;
    $p62 := $bitcast.ref.ref(arg);
    $p63 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3333} $i64 := ioctl_create_iso_context($p62, $p63);
    goto SeqInstr_2764, SeqInstr_2765;

  SeqInstr_2765:
    assume assertsPassed;
    goto SeqInstr_2766;

  SeqInstr_2766:
    $r := $i64;
    return;

  SeqInstr_2764:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i138 == 1;
    $p65 := $bitcast.ref.ref(arg);
    $p66 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3334} $i67 := ioctl_queue_iso($p65, $p66);
    goto SeqInstr_2767, SeqInstr_2768;

  SeqInstr_2768:
    assume assertsPassed;
    goto SeqInstr_2769;

  SeqInstr_2769:
    $r := $i67;
    return;

  SeqInstr_2767:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i139 == 1;
    $p68 := $bitcast.ref.ref(arg);
    $p69 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3335} $i70 := ioctl_start_iso($p68, $p69);
    goto SeqInstr_2770, SeqInstr_2771;

  SeqInstr_2771:
    assume assertsPassed;
    goto SeqInstr_2772;

  SeqInstr_2772:
    $r := $i70;
    return;

  SeqInstr_2770:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i140 == 1;
    $p71 := $bitcast.ref.ref(arg);
    $p72 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3336} $i73 := ioctl_stop_iso($p71, $p72);
    goto SeqInstr_2773, SeqInstr_2774;

  SeqInstr_2774:
    assume assertsPassed;
    goto SeqInstr_2775;

  SeqInstr_2775:
    $r := $i73;
    return;

  SeqInstr_2773:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i141 == 1;
    $p74 := $bitcast.ref.ref(arg);
    $p75 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3337} $i76 := ioctl_get_cycle_timer($p74, $p75);
    $r := $i76;
    return;

  $bb28:
    assume $i142 == 1;
    $p77 := $bitcast.ref.ref(arg);
    $p78 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3338} $i79 := ioctl_allocate_iso_resource($p77, $p78);
    goto SeqInstr_2776, SeqInstr_2777;

  SeqInstr_2777:
    assume assertsPassed;
    goto SeqInstr_2778;

  SeqInstr_2778:
    $r := $i79;
    return;

  SeqInstr_2776:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i143 == 1;
    $p80 := $bitcast.ref.ref(arg);
    $p81 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3339} $i82 := ioctl_deallocate_iso_resource($p80, $p81);
    goto SeqInstr_2779, SeqInstr_2780;

  SeqInstr_2780:
    assume assertsPassed;
    goto SeqInstr_2781;

  SeqInstr_2781:
    $r := $i82;
    return;

  SeqInstr_2779:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i144 == 1;
    $p83 := $bitcast.ref.ref(arg);
    $p84 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3340} $i85 := ioctl_allocate_iso_resource_once($p83, $p84);
    goto SeqInstr_2782, SeqInstr_2783;

  SeqInstr_2783:
    assume assertsPassed;
    goto SeqInstr_2784;

  SeqInstr_2784:
    $r := $i85;
    return;

  SeqInstr_2782:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i145 == 1;
    $p86 := $bitcast.ref.ref(arg);
    $p87 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3341} $i88 := ioctl_deallocate_iso_resource_once($p86, $p87);
    goto SeqInstr_2785, SeqInstr_2786;

  SeqInstr_2786:
    assume assertsPassed;
    goto SeqInstr_2787;

  SeqInstr_2787:
    $r := $i88;
    return;

  SeqInstr_2785:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i146 == 1;
    $p89 := $bitcast.ref.ref(arg);
    $p90 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3342} $i91 := ioctl_get_speed($p89, $p90);
    $r := $i91;
    return;

  $bb33:
    assume $i147 == 1;
    $p92 := $bitcast.ref.ref(arg);
    $p93 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3343} $i94 := ioctl_send_broadcast_request($p92, $p93);
    goto SeqInstr_2788, SeqInstr_2789;

  SeqInstr_2789:
    assume assertsPassed;
    goto SeqInstr_2790;

  SeqInstr_2790:
    $r := $i94;
    return;

  SeqInstr_2788:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i148 == 1;
    $p95 := $bitcast.ref.ref(arg);
    $p96 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3344} $i97 := ioctl_send_stream_packet($p95, $p96);
    goto SeqInstr_2791, SeqInstr_2792;

  SeqInstr_2792:
    assume assertsPassed;
    goto SeqInstr_2793;

  SeqInstr_2793:
    $r := $i97;
    return;

  SeqInstr_2791:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i149 == 1;
    $p98 := $bitcast.ref.ref(arg);
    $p99 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3345} $i100 := ioctl_get_cycle_timer2($p98, $p99);
    $r := $i100;
    return;

  $bb36:
    assume $i150 == 1;
    $p101 := $bitcast.ref.ref(arg);
    $p102 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3346} $i103 := ioctl_send_phy_packet($p101, $p102);
    goto SeqInstr_2794, SeqInstr_2795;

  SeqInstr_2795:
    assume assertsPassed;
    goto SeqInstr_2796;

  SeqInstr_2796:
    $r := $i103;
    return;

  SeqInstr_2794:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i151 == 1;
    $p104 := $bitcast.ref.ref(arg);
    $p105 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3347} $i106 := ioctl_receive_phy_packets($p104, $p105);
    goto SeqInstr_2797, SeqInstr_2798;

  SeqInstr_2798:
    assume assertsPassed;
    goto SeqInstr_2799;

  SeqInstr_2799:
    $r := $i106;
    return;

  SeqInstr_2797:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i152 == 1;
    $p107 := $bitcast.ref.ref(arg);
    $p108 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3348} $i109 := ioctl_set_iso_channels($p107, $p108);
    goto SeqInstr_2800, SeqInstr_2801;

  SeqInstr_2801:
    assume assertsPassed;
    goto SeqInstr_2802;

  SeqInstr_2802:
    $r := $i109;
    return;

  SeqInstr_2800:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i153 == 1;
    $p110 := $bitcast.ref.ref(arg);
    $p111 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3349} $i112 := ioctl_flush_iso($p110, $p111);
    goto SeqInstr_2803, SeqInstr_2804;

  SeqInstr_2804:
    assume assertsPassed;
    goto SeqInstr_2805;

  SeqInstr_2805:
    $r := $i112;
    return;

  SeqInstr_2803:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i154 == 1;
    $p113 := $bitcast.ref.ref(arg);
    $p114 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3350} $i115 := fw_unit_uevent($p113, $p114);
    $r := $i115;
    return;
}



const devirtbounce.37: ref;

axiom devirtbounce.37 == $sub.ref(0, 1143998);

procedure devirtbounce.37(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.37(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.38: ref;

axiom devirtbounce.38 == $sub.ref(0, 1145030);

procedure devirtbounce.38(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $CurrAddr, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation devirtbounce.38(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i32 := $eq.ref(release_address_handler, $p0);
    assume true;
    goto $bb12, $bb23;

  $bb23:
    assume !($i32 == 1);
    $i31 := $eq.ref(release_request, $p0);
    assume true;
    goto $bb11, $bb22;

  $bb22:
    assume !($i31 == 1);
    $i30 := $eq.ref(release_descriptor, $p0);
    assume true;
    goto $bb10, $bb21;

  $bb21:
    assume !($i30 == 1);
    $i29 := $eq.ref(dummy_send_response, $p0);
    assume true;
    goto $bb9, $bb20;

  $bb20:
    assume !($i29 == 1);
    $i28 := $eq.ref(dummy_send_request, $p0);
    assume true;
    goto $bb8, $bb19;

  $bb19:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_core_handle_response, $p0);
    assume true;
    goto $bb7, $bb18;

  $bb18:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_core_handle_request, $p0);
    assume true;
    goto $bb6, $bb17;

  $bb17:
    assume !($i26 == 1);
    $i25 := $eq.ref(release_transaction, $p0);
    assume true;
    goto $bb5, $bb16;

  $bb16:
    assume !($i25 == 1);
    $i24 := $eq.ref(fw_iso_buffer_destroy, $p0);
    assume true;
    goto $bb4, $bb15;

  $bb15:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_csr_iterator_init, $p0);
    assume true;
    goto $bb3, $bb14;

  $bb14:
    assume !($i23 == 1);
    $i22 := $eq.ref(release_iso_resource, $p0);
    assume true;
    goto $bb2, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume false;
    return;

  $bb2:
    assume $i22 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3351} release_iso_resource($p1, $p2);
    goto SeqInstr_2806, SeqInstr_2807;

  SeqInstr_2807:
    assume assertsPassed;
    goto SeqInstr_2808;

  SeqInstr_2808:
    return;

  SeqInstr_2806:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i23 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3352} fw_csr_iterator_init($p3, arg1);
    return;

  $bb4:
    assume $i24 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3353} fw_iso_buffer_destroy($p4, $p5);
    return;

  $bb5:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    $p7 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3354} release_transaction($p6, $p7);
    return;

  $bb6:
    assume $i26 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3355} fw_core_handle_request($p8, $p9);
    goto SeqInstr_2809, SeqInstr_2810;

  SeqInstr_2810:
    assume assertsPassed;
    goto SeqInstr_2811;

  SeqInstr_2811:
    return;

  SeqInstr_2809:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i27 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3356} fw_core_handle_response($p10, $p11);
    goto SeqInstr_2812, SeqInstr_2813;

  SeqInstr_2813:
    assume assertsPassed;
    goto SeqInstr_2814;

  SeqInstr_2814:
    return;

  SeqInstr_2812:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i28 == 1;
    $p12 := $bitcast.ref.ref(arg);
    $p13 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3357} dummy_send_request($p12, $p13);
    goto SeqInstr_2815, SeqInstr_2816;

  SeqInstr_2816:
    assume assertsPassed;
    goto SeqInstr_2817;

  SeqInstr_2817:
    return;

  SeqInstr_2815:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i29 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3358} dummy_send_response($p14, $p15);
    goto SeqInstr_2818, SeqInstr_2819;

  SeqInstr_2819:
    assume assertsPassed;
    goto SeqInstr_2820;

  SeqInstr_2820:
    return;

  SeqInstr_2818:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i30 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3359} release_descriptor($p16, $p17);
    goto SeqInstr_2821, SeqInstr_2822;

  SeqInstr_2822:
    assume assertsPassed;
    goto SeqInstr_2823;

  SeqInstr_2823:
    return;

  SeqInstr_2821:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i31 == 1;
    $p18 := $bitcast.ref.ref(arg);
    $p19 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3360} release_request($p18, $p19);
    goto SeqInstr_2824, SeqInstr_2825;

  SeqInstr_2825:
    assume assertsPassed;
    goto SeqInstr_2826;

  SeqInstr_2826:
    return;

  SeqInstr_2824:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i32 == 1;
    $p20 := $bitcast.ref.ref(arg);
    $p21 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 3361} release_address_handler($p20, $p21);
    goto SeqInstr_2827, SeqInstr_2828;

  SeqInstr_2828:
    assume assertsPassed;
    goto SeqInstr_2829;

  SeqInstr_2829:
    return;

  SeqInstr_2827:
    assume !assertsPassed;
    return;
}



const devirtbounce.39: ref;

axiom devirtbounce.39 == $sub.ref(0, 1146062);

procedure devirtbounce.39(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.26, assertsPassed;



implementation devirtbounce.39(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(iso_mc_callback, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $i2 := $zext.i32.i64(arg1);
    $p3 := $bitcast.ref.ref(arg2);
    call {:si_unique_call 3362} iso_mc_callback($p1, $i2, $p3);
    goto SeqInstr_2830, SeqInstr_2831;

  SeqInstr_2831:
    assume assertsPassed;
    goto SeqInstr_2832;

  SeqInstr_2832:
    return;

  SeqInstr_2830:
    assume !assertsPassed;
    return;
}



const devirtbounce.40: ref;

axiom devirtbounce.40 == $sub.ref(0, 1147094);

procedure devirtbounce.40(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.40(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.41: ref;

axiom devirtbounce.41 == $sub.ref(0, 1148126);

procedure devirtbounce.41(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.41(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.42: ref;

axiom devirtbounce.42 == $sub.ref(0, 1149158);

procedure devirtbounce.42(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.42(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.43: ref;

axiom devirtbounce.43 == $sub.ref(0, 1150190);

procedure devirtbounce.43(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.43(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.44: ref;

axiom devirtbounce.44 == $sub.ref(0, 1151222);

procedure devirtbounce.44(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.44(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.45: ref;

axiom devirtbounce.45 == $sub.ref(0, 1152254);

procedure devirtbounce.45(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.45(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.46: ref;

axiom devirtbounce.46 == $sub.ref(0, 1153286);

procedure devirtbounce.46(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.46(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.47: ref;

axiom devirtbounce.47 == $sub.ref(0, 1154318);

procedure devirtbounce.47(funcPtr: ref, arg: ref, arg1: i32, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce.47(funcPtr: ref, arg: ref, arg1: i32, arg2: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.48: ref;

axiom devirtbounce.48 == $sub.ref(0, 1155350);

procedure devirtbounce.48(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.26, $CurrAddr, assertsPassed;



implementation devirtbounce.48(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(fw_device_op_read, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 3363} $i1 := fw_device_op_read(arg, arg1, arg2, arg3);
    goto SeqInstr_2833, SeqInstr_2834;

  SeqInstr_2834:
    assume assertsPassed;
    goto SeqInstr_2835;

  SeqInstr_2835:
    $r := $i1;
    return;

  SeqInstr_2833:
    assume !assertsPassed;
    return;
}



const devirtbounce.49: ref;

axiom devirtbounce.49 == $sub.ref(0, 1156382);

procedure devirtbounce.49(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation devirtbounce.49(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i22 := $eq.ref(fw_get_request_speed, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i22 == 1);
    $i21 := $eq.ref(fw_core_add_descriptor, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_iso_context_flush_completions, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_iso_context_stop, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_unit_probe, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i18 == 1);
    $i17 := $eq.ref(fw_unit_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i17 == 1);
    $i16 := $eq.ref(fw_device_enable_phys_dma, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i16 == 1);
    $i15 := $eq.ref(dummy_flush_iso_completions, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3364} $i2 := dummy_flush_iso_completions($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3365} $i4 := fw_device_enable_phys_dma($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 3366} $i5 := fw_unit_remove(arg);
    goto SeqInstr_2836, SeqInstr_2837;

  SeqInstr_2837:
    assume assertsPassed;
    goto SeqInstr_2838;

  SeqInstr_2838:
    $r := $i5;
    return;

  SeqInstr_2836:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 3367} $i6 := fw_unit_probe(arg);
    goto SeqInstr_2839, SeqInstr_2840;

  SeqInstr_2840:
    assume assertsPassed;
    goto SeqInstr_2841;

  SeqInstr_2841:
    $r := $i6;
    return;

  SeqInstr_2839:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3368} $i8 := fw_iso_context_stop($p7);
    goto SeqInstr_2842, SeqInstr_2843;

  SeqInstr_2843:
    assume assertsPassed;
    goto SeqInstr_2844;

  SeqInstr_2844:
    $r := $i8;
    return;

  SeqInstr_2842:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3369} $i10 := fw_iso_context_flush_completions($p9);
    goto SeqInstr_2845, SeqInstr_2846;

  SeqInstr_2846:
    assume assertsPassed;
    goto SeqInstr_2847;

  SeqInstr_2847:
    $r := $i10;
    return;

  SeqInstr_2845:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i21 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3370} $i12 := fw_core_add_descriptor($p11);
    goto SeqInstr_2848, SeqInstr_2849;

  SeqInstr_2849:
    assume assertsPassed;
    goto SeqInstr_2850;

  SeqInstr_2850:
    $r := $i12;
    return;

  SeqInstr_2848:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i22 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3371} $i14 := fw_get_request_speed($p13);
    $r := $i14;
    return;
}



const devirtbounce.50: ref;

axiom devirtbounce.50 == $sub.ref(0, 1157414);

procedure devirtbounce.50(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.10, $M.1, $M.2, $M.15, $M.23, $M.3, $M.26, $M.31, $M.40, $CurrAddr, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.16, $M.24, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.11, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation devirtbounce.50(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i38 := $eq.ref(fw_unit_release, $p0);
    assume true;
    goto $bb21, $bb41;

  $bb41:
    assume !($i38 == 1);
    $i37 := $eq.ref(client_release, $p0);
    assume true;
    goto $bb20, $bb40;

  $bb40:
    assume !($i37 == 1);
    $i36 := $eq.ref(fw_core_remove_address_handler, $p0);
    assume true;
    goto $bb19, $bb39;

  $bb39:
    assume !($i36 == 1);
    $i35 := $eq.ref(wake_up_client, $p0);
    assume true;
    goto $bb18, $bb38;

  $bb38:
    assume !($i35 == 1);
    $i34 := $eq.ref(fw_core_remove_card, $p0);
    assume true;
    goto $bb17, $bb37;

  $bb37:
    assume !($i34 == 1);
    $i33 := $eq.ref(fw_iso_context_queue_flush, $p0);
    assume true;
    goto $bb16, $bb36;

  $bb36:
    assume !($i33 == 1);
    $i32 := $eq.ref(iso_resource_work, $p0);
    assume true;
    goto $bb15, $bb35;

  $bb35:
    assume !($i32 == 1);
    $i31 := $eq.ref(fw_core_remove_descriptor, $p0);
    assume true;
    goto $bb14, $bb34;

  $bb34:
    assume !($i31 == 1);
    $i30 := $eq.ref(br_work, $p0);
    assume true;
    goto $bb13, $bb33;

  $bb33:
    assume !($i30 == 1);
    $i29 := $eq.ref(bm_work, $p0);
    assume true;
    goto $bb12, $bb32;

  $bb32:
    assume !($i29 == 1);
    $i28 := $eq.ref(fw_device_init, $p0);
    assume true;
    goto $bb11, $bb31;

  $bb31:
    assume !($i28 == 1);
    $i27 := $eq.ref(fw_device_workfn, $p0);
    assume true;
    goto $bb10, $bb30;

  $bb30:
    assume !($i27 == 1);
    $i26 := $eq.ref(fw_device_refresh, $p0);
    assume true;
    goto $bb9, $bb29;

  $bb29:
    assume !($i26 == 1);
    $i25 := $eq.ref(fw_device_update, $p0);
    assume true;
    goto $bb8, $bb28;

  $bb28:
    assume !($i25 == 1);
    $i24 := $eq.ref(fw_device_shutdown, $p0);
    assume true;
    goto $bb7, $bb27;

  $bb27:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_device_release, $p0);
    assume true;
    goto $bb6, $bb26;

  $bb26:
    assume !($i23 == 1);
    $i22 := $eq.ref(fw_iso_context_destroy, $p0);
    assume true;
    goto $bb5, $bb25;

  $bb25:
    assume !($i22 == 1);
    $i21 := $eq.ref(fw_card_release, $p0);
    assume true;
    goto $bb4, $bb24;

  $bb24:
    assume !($i21 == 1);
    $i20 := $eq.ref(dummy_flush_queue_iso, $p0);
    assume true;
    goto $bb3, $bb23;

  $bb23:
    assume !($i20 == 1);
    $i19 := $eq.ref(queue_bus_reset_event, $p0);
    assume true;
    goto $bb2, $bb22;

  $bb22:
    assume !($i19 == 1);
    assume false;
    return;

  $bb2:
    assume $i19 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3372} queue_bus_reset_event($p1);
    goto SeqInstr_2851, SeqInstr_2852;

  SeqInstr_2852:
    assume assertsPassed;
    goto SeqInstr_2853;

  SeqInstr_2853:
    return;

  SeqInstr_2851:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i20 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3373} dummy_flush_queue_iso($p2);
    return;

  $bb4:
    assume $i21 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3374} fw_card_release($p3);
    return;

  $bb5:
    assume $i22 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3375} fw_iso_context_destroy($p4);
    goto SeqInstr_2854, SeqInstr_2855;

  SeqInstr_2855:
    assume assertsPassed;
    goto SeqInstr_2856;

  SeqInstr_2856:
    return;

  SeqInstr_2854:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i23 == 1;
    call {:si_unique_call 3376} fw_device_release(arg);
    goto SeqInstr_2857, SeqInstr_2858;

  SeqInstr_2858:
    assume assertsPassed;
    goto SeqInstr_2859;

  SeqInstr_2859:
    return;

  SeqInstr_2857:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3377} fw_device_shutdown($p5);
    goto SeqInstr_2860, SeqInstr_2861;

  SeqInstr_2861:
    assume assertsPassed;
    goto SeqInstr_2862;

  SeqInstr_2862:
    return;

  SeqInstr_2860:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i25 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3378} fw_device_update($p6);
    goto SeqInstr_2863, SeqInstr_2864;

  SeqInstr_2864:
    assume assertsPassed;
    goto SeqInstr_2865;

  SeqInstr_2865:
    return;

  SeqInstr_2863:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i26 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3379} fw_device_refresh($p7);
    goto SeqInstr_2866, SeqInstr_2867;

  SeqInstr_2867:
    assume assertsPassed;
    goto SeqInstr_2868;

  SeqInstr_2868:
    return;

  SeqInstr_2866:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i27 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3380} fw_device_workfn($p8);
    goto SeqInstr_2869, SeqInstr_2870;

  SeqInstr_2870:
    assume assertsPassed;
    goto SeqInstr_2871;

  SeqInstr_2871:
    return;

  SeqInstr_2869:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i28 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3381} fw_device_init($p9);
    goto SeqInstr_2872, SeqInstr_2873;

  SeqInstr_2873:
    assume assertsPassed;
    goto SeqInstr_2874;

  SeqInstr_2874:
    return;

  SeqInstr_2872:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i29 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3382} bm_work($p10);
    goto SeqInstr_2875, SeqInstr_2876;

  SeqInstr_2876:
    assume assertsPassed;
    goto SeqInstr_2877;

  SeqInstr_2877:
    return;

  SeqInstr_2875:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i30 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3383} br_work($p11);
    goto SeqInstr_2878, SeqInstr_2879;

  SeqInstr_2879:
    assume assertsPassed;
    goto SeqInstr_2880;

  SeqInstr_2880:
    return;

  SeqInstr_2878:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i31 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3384} fw_core_remove_descriptor($p12);
    goto SeqInstr_2881, SeqInstr_2882;

  SeqInstr_2882:
    assume assertsPassed;
    goto SeqInstr_2883;

  SeqInstr_2883:
    return;

  SeqInstr_2881:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i32 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3385} iso_resource_work($p13);
    goto SeqInstr_2884, SeqInstr_2885;

  SeqInstr_2885:
    assume assertsPassed;
    goto SeqInstr_2886;

  SeqInstr_2886:
    return;

  SeqInstr_2884:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i33 == 1;
    $p14 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3386} fw_iso_context_queue_flush($p14);
    goto SeqInstr_2887, SeqInstr_2888;

  SeqInstr_2888:
    assume assertsPassed;
    goto SeqInstr_2889;

  SeqInstr_2889:
    return;

  SeqInstr_2887:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i34 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3387} fw_core_remove_card($p15);
    goto SeqInstr_2890, SeqInstr_2891;

  SeqInstr_2891:
    assume assertsPassed;
    goto SeqInstr_2892;

  SeqInstr_2892:
    return;

  SeqInstr_2890:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i35 == 1;
    $p16 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3388} wake_up_client($p16);
    return;

  $bb19:
    assume $i36 == 1;
    $p17 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3389} fw_core_remove_address_handler($p17);
    goto SeqInstr_2893, SeqInstr_2894;

  SeqInstr_2894:
    assume assertsPassed;
    goto SeqInstr_2895;

  SeqInstr_2895:
    return;

  SeqInstr_2893:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i37 == 1;
    $p18 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3390} client_release($p18);
    return;

  $bb21:
    assume $i38 == 1;
    call {:si_unique_call 3391} fw_unit_release(arg);
    return;
}



const devirtbounce.51: ref;

axiom devirtbounce.51 == $sub.ref(0, 1158446);

procedure devirtbounce.51(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.51(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.52: ref;

axiom devirtbounce.52 == $sub.ref(0, 1159478);

procedure devirtbounce.52(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation devirtbounce.52(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(fw_get_request_speed, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(fw_core_add_descriptor, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(fw_iso_context_flush_completions, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(fw_iso_context_stop, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(fw_unit_probe, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(fw_unit_remove, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(fw_device_enable_phys_dma, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(dummy_flush_iso_completions, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3392} $i2 := dummy_flush_iso_completions($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3393} $i4 := fw_device_enable_phys_dma($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3394} $i6 := fw_unit_remove($p5);
    goto SeqInstr_2896, SeqInstr_2897;

  SeqInstr_2897:
    assume assertsPassed;
    goto SeqInstr_2898;

  SeqInstr_2898:
    $r := $i6;
    return;

  SeqInstr_2896:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3395} $i8 := fw_unit_probe($p7);
    goto SeqInstr_2899, SeqInstr_2900;

  SeqInstr_2900:
    assume assertsPassed;
    goto SeqInstr_2901;

  SeqInstr_2901:
    $r := $i8;
    return;

  SeqInstr_2899:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3396} $i10 := fw_iso_context_stop($p9);
    goto SeqInstr_2902, SeqInstr_2903;

  SeqInstr_2903:
    assume assertsPassed;
    goto SeqInstr_2904;

  SeqInstr_2904:
    $r := $i10;
    return;

  SeqInstr_2902:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3397} $i12 := fw_iso_context_flush_completions($p11);
    goto SeqInstr_2905, SeqInstr_2906;

  SeqInstr_2906:
    assume assertsPassed;
    goto SeqInstr_2907;

  SeqInstr_2907:
    $r := $i12;
    return;

  SeqInstr_2905:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3398} $i14 := fw_core_add_descriptor($p13);
    goto SeqInstr_2908, SeqInstr_2909;

  SeqInstr_2909:
    assume assertsPassed;
    goto SeqInstr_2910;

  SeqInstr_2910:
    $r := $i14;
    return;

  SeqInstr_2908:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 3399} $i16 := fw_get_request_speed($p15);
    $r := $i16;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u16: ref;

const $u17: ref;

const $u18: ref;

const $u19: ref;

const $u2: ref;

const $u20: ref;

const $u21: ref;

const $u22: ref;

const $u23: ref;

const $u24: ref;

const $u25: ref;

const $u26: ref;

const $u27: ref;

const $u28: ref;

const $u29: ref;

const $u3: i8;

const $u30: ref;

const $u31: ref;

const $u32: ref;

const $u33: ref;

const $u34: ref;

const $u35: ref;

const $u36: ref;

const $u37: ref;

const $u38: ref;

const $u39: ref;

const $u4: i32;

const $u40: ref;

const $u41: ref;

const $u42: ref;

const $u43: ref;

const $u44: ref;

const $u45: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.135, $M.31, $M.23, $M.12, $M.13, $M.16, $M.15, $M.26, $M.40, $M.14, $M.121, $M.120, $M.0, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.33, $M.173, $M.174, $M.175, $M.176, $M.8, $M.177, $M.178, $M.1, $M.11, $M.25, $M.24, $M.3, $M.18, $M.2, $M.5, $M.132, $M.115, $M.63, $M.131, $M.130, $M.129, $M.114, $M.128, $M.43, $M.42, $M.41, $M.44, $M.127, $M.126, $M.125, $M.124, $M.62, $M.123, $M.122, $M.119, $M.29, $M.7, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 3400} __SMACK_static_init();
    call {:si_unique_call 3401} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.135, $M.31, $M.23, $M.12, $M.13, $M.16, $M.15, $M.26, $M.40, $M.14, $M.121, $M.120, $M.0, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.33, $M.173, $M.174, $M.175, $M.176, $M.8, $M.177, $M.178, $M.1, $M.11, $M.25, $M.24, $M.3, $M.18, $M.2, $M.5, $M.132, $M.115, $M.63, $M.131, $M.130, $M.129, $M.114, $M.128, $M.43, $M.42, $M.41, $M.44, $M.127, $M.126, $M.125, $M.124, $M.62, $M.123, $M.122, $M.119, $M.29, $M.7, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $CurrAddr, $M.34, $M.27, $M.28, $M.38, $M.39, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.45, $M.46, $M.47, $M.48;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation fw_core_add_descriptor_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i5: i64, in_$i16: i64) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i5: i64, out_$i16: i64)
{

  entry:
    out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5, out_$i16 := in_$p6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i5, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  $bb6:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i13;
    assume true;
    goto $bb6;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    out_$i15 := $ult.i64(out_$i13, out_$i14);
    goto corral_source_split_19;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i64($M.0, in_$p1);
    goto corral_source_split_18;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i64(out_$i5, out_$i12);
    call {:si_unique_call 0} {:cexpr "i"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_17;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i11);
    goto corral_source_split_16;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, 1);
    goto corral_source_split_15;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    out_$i10 := $lshr.i32(out_$i9, 16);
    goto corral_source_split_14;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_13;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p7, $mul.ref(out_$i5, 4));
    goto corral_source_split_12;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_11;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5, out_$i16 := fw_core_add_descriptor_loop_$bb4(in_$p0, in_$p1, out_$p6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i5, out_$i16);
    return;

  exit:
    return;
}



procedure fw_core_add_descriptor_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i64, in_$i13: i64, in_$i14: i64, in_$i15: i1, in_$i5: i64, in_$i16: i64) returns (out_$p6: ref, out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i64, out_$i13: i64, out_$i14: i64, out_$i15: i1, out_$i5: i64, out_$i16: i64);



implementation update_config_roms_loop_$bb4(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref, in_vslice_dummy_var_39: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref, out_vslice_dummy_var_39: i32)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6, out_vslice_dummy_var_39 := in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$p6, in_vslice_dummy_var_39;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_89;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$p6 := out_$p17;
    goto $bb6_dummy;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, $p2i.ref.i64(card_list));
    goto corral_source_split_103;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_102;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p16, $mul.ref($sub.ref(0, 320), 1856)), $mul.ref(320, 1));
    goto corral_source_split_101;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(out_$p16, $mul.ref($sub.ref(0, 320), 1856));
    goto corral_source_split_100;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_99;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_98;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p6, $mul.ref(0, 1856)), $mul.ref(320, 1)), $mul.ref(0, 1));
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i11 := $M.1;
    call {:si_unique_call 15} out_vslice_dummy_var_39 := devirtbounce(out_$p10, out_$p6, tmp_config_rom, out_$i11);
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 144)), $mul.ref(24, 1));
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 1856)), $mul.ref(0, 1));
    goto corral_source_split_92;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} generate_config_rom(out_$p6, tmp_config_rom);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6, out_vslice_dummy_var_39 := update_config_roms_loop_$bb4(out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$p6, out_vslice_dummy_var_39);
    return;

  exit:
    return;
}



procedure update_config_roms_loop_$bb4(in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p6: ref, in_vslice_dummy_var_39: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p6: ref, out_vslice_dummy_var_39: i32);
  modifies $M.0;



implementation generate_config_rom_loop_$bb31(in_$p1: ref, in_$i42: i32, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i117: i32) returns (out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i117: i32)
{

  entry:
    out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i117 := in_$i118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i117;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  $bb33:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i117 := out_$i122;
    goto $bb33_dummy;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i122, in_$i42);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i117, out_$i121);
    call {:si_unique_call 44} {:cexpr "i"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i121 := $add.i32(out_$i120, 1);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$i120 := fw_compute_block_crc(out_$p119);
    call {:si_unique_call 43} {:cexpr "length"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref(in_$p1, $mul.ref(out_$i118, 4));
    goto corral_source_split_271;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i117);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i117 := generate_config_rom_loop_$bb31(in_$p1, in_$i42, out_$i118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i117);
    return;

  exit:
    return;
}



procedure generate_config_rom_loop_$bb31(in_$p1: ref, in_$i42: i32, in_$i118: i64, in_$p119: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i117: i32) returns (out_$i118: i64, out_$p119: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i117: i32);
  modifies $M.0;



implementation generate_config_rom_loop_$bb20(in_$p1: ref, in_$p88: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i91: i32, in_$p86: ref, in_$i87: i32) returns (out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i91: i32)
{

  entry:
    out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91 := in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i91;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  $bb22:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i101;
    goto $bb22_dummy;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i104 := $ult.i64(out_$i102, out_$i103);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.0, in_$p88);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i91, 1);
    call {:si_unique_call 40} {:cexpr "k"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p100, out_$i97);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(in_$p1, $mul.ref(out_$i99, 4));
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i98);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(in_$i87, out_$i91);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i97 := __fswab32(out_$i96);
    call {:si_unique_call 39} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(out_$i94, 4));
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i91);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_235;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p86, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91 := generate_config_rom_loop_$bb20(in_$p1, in_$p88, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91, in_$p86, in_$i87);
    return;

  exit:
    return;
}



procedure generate_config_rom_loop_$bb20(in_$p1: ref, in_$p88: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i91: i32, in_$p86: ref, in_$i87: i32) returns (out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i91: i32);
  modifies $M.0;



implementation generate_config_rom_loop_$bb15(in_$p1: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i91: i32, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$i108: i32, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p86: ref, in_$i87: i32) returns (out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i91: i32, out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$i108: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p86: ref, out_$i87: i32)
{

  entry:
    out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p86, out_$i87 := in_$p88, in_$i89, in_$i90, in_$p92, in_$p93, in_$i94, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i91, in_$p105, in_$i106, in_$i107, in_$i108, in_$p110, in_$p111, in_$p112, in_$p113, in_$i114, in_$i115, in_$p86, in_$i87;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_224;

  $bb25:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$p86, out_$i87 := out_$p111, out_$i108;
    goto $bb25_dummy;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p112, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$p112 := $bitcast.ref.ref(out_$p111);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref($add.ref(out_$p86, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i87, out_$i107);
    call {:si_unique_call 41} {:cexpr "i"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i107 := $trunc.i64.i32(out_$i106);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i64($M.0, out_$p105);
    goto corral_source_split_252;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p86, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_251;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i90 == 1);
    goto $bb19;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume !(out_$i104 == 1);
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i104 := $ult.i64(out_$i102, out_$i103);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i64($M.0, out_$p88);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i101);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i91, 1);
    call {:si_unique_call 40} {:cexpr "k"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p100, out_$i97);
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref(in_$p1, $mul.ref(out_$i99, 4));
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i98);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i32(out_$i87, out_$i91);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} out_$i97 := __fswab32(out_$i96);
    call {:si_unique_call 39} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref(out_$p93, $mul.ref(out_$i94, 4));
    goto corral_source_split_237;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i91);
    goto corral_source_split_236;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_235;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p86, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_234;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb20:
    call out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91 := generate_config_rom_loop_$bb20(in_$p1, out_$p88, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91, out_$p86, out_$i87);
    goto $bb20_last;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    out_$i91 := 0;
    goto $bb20;

  $bb22:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := out_$i101;
    assume false;
    return;

  $bb17:
    assume out_$i90 == 1;
    goto corral_source_split_230;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    out_$i90 := $ult.i64(0, out_$i89);
    goto corral_source_split_228;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i64($M.0, out_$p88);
    goto corral_source_split_227;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p86, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_226;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p86, out_$i87 := generate_config_rom_loop_$bb15(in_$p1, out_$p88, out_$i89, out_$i90, out_$p92, out_$p93, out_$i94, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i91, out_$p105, out_$i106, out_$i107, out_$i108, out_$p110, out_$p111, out_$p112, out_$p113, out_$i114, out_$i115, out_$p86, out_$i87);
    return;

  exit:
    return;
}



procedure generate_config_rom_loop_$bb15(in_$p1: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i91: i32, in_$p105: ref, in_$i106: i64, in_$i107: i32, in_$i108: i32, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p86: ref, in_$i87: i32) returns (out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i91: i32, out_$p105: ref, out_$i106: i64, out_$i107: i32, out_$i108: i32, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p86: ref, out_$i87: i32);
  modifies $M.0;



implementation generate_config_rom_loop_$bb4(in_$p1: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i75: i32, in_$i76: i32) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i75: i32, out_$i76: i32)
{

  entry:
    out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i43, out_$p44, out_$i45, out_$i75, out_$i76 := in_$p46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$p62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i67, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i43, in_$p44, in_$i45, in_$i75, in_$i76;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  $bb9:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i43, out_$p44, out_$i45 := out_$i67, out_$p70, out_$i63;
    goto $bb9_dummy;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76 := out_$i63, out_$i67;
    assume true;
    goto $bb9;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, $p2i.ref.i64(descriptor_list));
    goto corral_source_split_207;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    out_$i73 := $p2i.ref.i64(out_$p72);
    goto corral_source_split_206;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_205;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(out_$p70);
    goto corral_source_split_204;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.0, out_$p69);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p44, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i43, out_$i66);
    call {:si_unique_call 35} {:cexpr "j"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i64.i32(out_$i65);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i64($M.0, out_$p64);
    goto corral_source_split_199;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p44, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i55, 1);
    call {:si_unique_call 34} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_197;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p62, out_$i60);
    goto corral_source_split_196;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(in_$p1, $mul.ref(out_$i61, 4));
    goto corral_source_split_195;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i55);
    goto corral_source_split_194;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} out_$i60 := __fswab32(out_$i59);
    call {:si_unique_call 33} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_193;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    out_$i59 := $or.i32(out_$i57, out_$i58);
    goto corral_source_split_192;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(out_$i43, out_$i55);
    goto corral_source_split_191;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p44, $mul.ref(0, 40)), $mul.ref(28, 1));
    goto corral_source_split_189;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  $bb7:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := out_$i45;
    goto $bb8;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    out_$i55 := out_$i49;
    goto $bb8;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i52);
    goto corral_source_split_186;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(in_$p1, $mul.ref(out_$i53, 4));
    goto corral_source_split_185;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    out_$i53 := $sext.i32.i64(out_$i45);
    goto corral_source_split_184;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} out_$i52 := __fswab32(out_$i51);
    call {:si_unique_call 31} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_183;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_182;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p44, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_181;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i45, 1);
    call {:si_unique_call 29} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_180;

  $bb6:
    assume out_$i48 == 1;
    goto corral_source_split_179;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_177;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p46);
    goto corral_source_split_176;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p44, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_175;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i43, out_$p44, out_$i45, out_$i75, out_$i76 := generate_config_rom_loop_$bb4(in_$p1, out_$p46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$p62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i67, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i43, out_$p44, out_$i45, out_$i75, out_$i76);
    return;

  exit:
    return;
}



procedure generate_config_rom_loop_$bb4(in_$p1: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$i53: i64, in_$p54: ref, in_$i55: i32, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$p64: ref, in_$i65: i64, in_$i66: i32, in_$i67: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i1, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i75: i32, in_$i76: i32) returns (out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$i53: i64, out_$p54: ref, out_$i55: i32, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$p64: ref, out_$i65: i64, out_$i66: i32, out_$i67: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i1, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i75: i32, out_$i76: i32);
  modifies $M.0;



implementation manage_channel_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i4: i64, in_$p6: ref, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i35: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i58: i32, in_$i59: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i60: i32) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i35: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i58: i32, out_$i59: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i60: i32)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i35, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i17, out_$i18, out_$i19, out_$i20, out_$i58, out_$i59, out_$i10, out_$i11, out_$i12, out_$i13, out_$i60 := in_$i14, in_$i15, in_$i16, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$p45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i35, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i17, in_$i18, in_$i19, in_$i20, in_$i58, in_$i59, in_$i10, in_$i11, in_$i12, in_$i13, in_$i60;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1540;

  $bb33:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12, out_$i13 := out_$i20, out_$i19, out_$i58, out_$i17;
    goto $bb33_dummy;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i19;
    assume true;
    goto $bb33;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    out_$i59 := $sle.i32(out_$i58, 31);
    goto corral_source_split_1550;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i18, 1);
    call {:si_unique_call 376} {:cexpr "channel"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_1549;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$i19, out_$i20 := out_$i35, out_$i55, out_$i56, out_$i57;
    goto $bb5;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$i19, out_$i20 := out_$i44, out_$i12, $sub.i32(0, 16), out_$i10;
    goto $bb5;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$i19, out_$i20 := out_$i13, out_$i12, $sub.i32(0, 16), out_$i10;
    goto $bb5;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$i19, out_$i20 := out_$i13, out_$i12, out_$i11, out_$i10;
    goto $bb5;

  $bb3:
    assume out_$i16 == 1;
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 0);
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i15 := $and.i32(in_$i3, out_$i14);
    goto corral_source_split_1543;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i14 := $shl.i32(1, out_$i12);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7:
    assume out_$i26 == 1;
    goto corral_source_split_1559;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i25, 0);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$i25 := $and.i32(out_$i24, out_$i23);
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$i24 := $xor.i32(out_$i13, in_$i9);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} out_$i23 := __fswab32(out_$i22);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$i22 := $shl.i32(1, out_$i21);
    goto corral_source_split_1553;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(31, out_$i12);
    goto corral_source_split_1552;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb26:
    assume out_$i51 == 1;
    goto corral_source_split_1605;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_1603;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    out_$i50 := $and.i32(out_$i49, out_$i23);
    goto corral_source_split_1602;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    out_$i49 := $xor.i32(out_$i46, out_$i48);
    goto corral_source_split_1601;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i32($M.0, out_$p47);
    goto corral_source_split_1600;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1599;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_1598;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1597;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    call {:si_unique_call 381} {:cexpr "old"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_1596;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1595;

  $bb24:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i12;
    assume true;
    goto $bb24;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, out_$i13);
    goto corral_source_split_1580;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_1579;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1578;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i34 == 1;
    goto corral_source_split_1576;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 0);
    goto corral_source_split_1574;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i12;
    assume true;
    goto $bb11;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 19);
    goto corral_source_split_1568;

  SeqInstr_198:
    call {:si_unique_call 380} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_1567;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} out_$i31 := fw_run_transaction(in_$p0, 18, in_$i1, in_$i2, 0, in_$i4, out_$p30, 8);
    goto SeqInstr_197;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p6);
    goto corral_source_split_1566;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1564;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i28 := $xor.i32(out_$i13, out_$i23);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, out_$i13);
    goto corral_source_split_1562;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p6, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1561;

  $bb8:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1611;

  $bb30:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    out_$i55, out_$i56, out_$i57 := out_$i12, $sub.i32(0, 5), out_$i10;
    goto $bb31;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    out_$i55, out_$i56, out_$i57 := out_$i54, $sub.i32(0, 16), out_$i53;
    goto $bb31;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i12, 1);
    call {:si_unique_call 383} {:cexpr "channel"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1609;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 382} {:cexpr "retry"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_1608;

  $bb29:
    assume out_$i52 == 1;
    goto corral_source_split_1607;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i10, 0);
    goto corral_source_split_1583;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i13;
    goto $bb18;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i44;
    goto $bb18;

  $bb27:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb15:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i35, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i17, out_$i18, out_$i19, out_$i20, out_$i58, out_$i59, out_$i10, out_$i11, out_$i12, out_$i13, out_$i60 := manage_channel_loop_$bb1(in_$p0, in_$i1, in_$i2, in_$i3, in_$i4, in_$p6, in_$i9, out_$i14, out_$i15, out_$i16, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$p45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i35, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i17, out_$i18, out_$i19, out_$i20, out_$i58, out_$i59, out_$i10, out_$i11, out_$i12, out_$i13, out_$i60);
    return;

  exit:
    return;
}



procedure manage_channel_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i4: i64, in_$p6: ref, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i34: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i35: i32, in_$i52: i1, in_$i53: i32, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i58: i32, in_$i59: i1, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i60: i32) returns (out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i34: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i35: i32, out_$i52: i1, out_$i53: i32, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i58: i32, out_$i59: i1, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i60: i32);
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation allocate_tlabel_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32) returns (out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32)
{

  entry:
    out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i11, out_$i24 := in_$i12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i11, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1916;

  $bb10:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i13;
    goto $bb10_dummy;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i13;
    assume true;
    goto $bb10;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_1933;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i32(out_$i21, 1);
    goto corral_source_split_1932;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i64.i32(out_$i20);
    goto corral_source_split_1931;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    out_$i20 := $lshr.i64(out_$i18, out_$i19);
    goto corral_source_split_1930;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i32.i64(out_$i13);
    goto corral_source_split_1929;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.0, in_$p3);
    goto corral_source_split_1928;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i13, out_$i15);
    goto corral_source_split_1922;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.0, out_$p14);
    goto corral_source_split_1921;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1856)), $mul.ref(128, 1));
    goto corral_source_split_1920;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i12, 63);
    call {:si_unique_call 459} {:cexpr "tlabel"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1919;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i11, 1);
    goto corral_source_split_1918;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i11, out_$i24 := allocate_tlabel_loop_$bb4(in_$p0, in_$p3, out_$i12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i11, out_$i24);
    return;

  exit:
    return;
}



procedure allocate_tlabel_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i12: i32, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i11: i32, in_$i24: i32) returns (out_$i12: i32, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i11: i32, out_$i24: i32);



implementation close_transaction_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p15: ref, in_$p42: ref) returns (out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p15: ref, out_$p42: ref)
{

  entry:
    out_$i16, out_$i17, out_$i18, out_$p19, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p15, out_$p42 := in_$i16, in_$i17, in_$i18, in_$p19, in_$p35, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p15, in_$p42;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2163;

  $bb14:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p38;
    goto $bb14_dummy;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p38;
    assume true;
    goto $bb14;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i12);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p37, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p37, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_2202;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_2200;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 288)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_2199;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$p19 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i64(out_$i16, out_$i17);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2166;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i16, out_$i17, out_$i18, out_$p19, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p15, out_$p42 := close_transaction_loop_$bb4(in_$p0, in_$i12, out_$i16, out_$i17, out_$i18, out_$p19, out_$p35, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p15, out_$p42);
    return;

  exit:
    return;
}



procedure close_transaction_loop_$bb4(in_$p0: ref, in_$i12: i64, in_$i16: i64, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p15: ref, in_$p42: ref) returns (out_$i16: i64, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p15: ref, out_$p42: ref);



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation for_each_fw_node_loop_$bb27(in_$i67: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p69: ref, in_$p70: ref) returns (out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p69: ref, out_$p70: ref)
{

  entry:
    out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p69, out_$p70 := in_$p72, in_$p73, in_$p74, in_$p75, in_$p76, in_$i77, in_$i78, in_$p69, in_$p70;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  $bb29:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$p69, out_$p70 := out_$p75, out_$p69;
    goto $bb29_dummy;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i64(out_$i77, in_$i67);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i77 := $p2i.ref.i64(out_$p76);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p69, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref(out_$p74, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p69, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2735;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} fw_node_put___1(out_$p70);
    goto corral_source_split_2734;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p69, out_$p70 := for_each_fw_node_loop_$bb27(in_$i67, out_$p72, out_$p73, out_$p74, out_$p75, out_$p76, out_$i77, out_$i78, out_$p69, out_$p70);
    return;

  exit:
    return;
}



procedure for_each_fw_node_loop_$bb27(in_$i67: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$i78: i1, in_$p69: ref, in_$p70: ref) returns (out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$i78: i1, out_$p69: ref, out_$p70: ref);
  modifies $M.0;



implementation for_each_fw_node_loop_$bb9(in_$p0: ref, in_$p3: ref, in_$p19: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$p42: ref, in_$p40: ref, in_$p32: ref, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$p25: ref, in_$p47: ref, in_$p15: ref, in_vslice_dummy_var_73: ref) returns (out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$p42: ref, out_$p40: ref, out_$p32: ref, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$p25: ref, out_$p47: ref, out_vslice_dummy_var_73: ref)
{

  entry:
    out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_vslice_dummy_var_73 := in_$i26, in_$p28, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p42, in_$p40, in_$p32, in_$i43, in_$i44, in_$i45, in_$i46, in_$i24, in_$p25, in_$p47, in_vslice_dummy_var_73;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  $bb18:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i43, out_$p32;
    goto $bb18_dummy;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p32;
    assume true;
    goto $bb18;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i43, out_$i45);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, in_$p19);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i24, 1);
    call {:si_unique_call 636} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2683;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p40;
    goto $bb13;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p25;
    goto $bb13;

  $bb11:
    assume out_$i31 == 1;
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p15, $mul.ref(0, 40)), $mul.ref(40, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_2675;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} list_add_tail(out_$p42, in_$p3);
    assume {:verifier.code 0} true;
    out_$p40 := out_$p25;
    goto $bb17;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p29;
    goto $bb17;

  $bb15:
    assume out_$i39 == 1;
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i35, out_$i38);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_2689;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p29, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2688;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_vslice_dummy_var_73 := fw_node_get___1(out_$p29);
    goto corral_source_split_2699;

  $bb16:
    assume !(out_$i39 == 1);
    goto corral_source_split_2698;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_vslice_dummy_var_73 := for_each_fw_node_loop_$bb9(in_$p0, in_$p3, in_$p19, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, in_$p15, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure for_each_fw_node_loop_$bb9(in_$p0: ref, in_$p3: ref, in_$p19: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$p42: ref, in_$p40: ref, in_$p32: ref, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$p25: ref, in_$p47: ref, in_$p15: ref, in_vslice_dummy_var_73: ref) returns (out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$p42: ref, out_$p40: ref, out_$p32: ref, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$p25: ref, out_$p47: ref, out_vslice_dummy_var_73: ref);
  modifies $M.0;



implementation for_each_fw_node_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i12: i64, in_$p16: ref, in_$i17: i8, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$p42: ref, in_$p40: ref, in_$p32: ref, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$p25: ref, in_$p47: ref, in_$p23: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p14: ref, in_$p15: ref, in_vslice_dummy_var_73: ref) returns (out_$p16: ref, out_$i17: i8, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$p42: ref, out_$p40: ref, out_$p32: ref, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$p25: ref, out_$p47: ref, out_$p23: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p14: ref, out_$p15: ref, out_vslice_dummy_var_73: ref)
{

  entry:
    out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_$p23, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p14, out_$p15, out_vslice_dummy_var_73 := in_$p16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i26, in_$p28, in_$p29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$p42, in_$p40, in_$p32, in_$i43, in_$i44, in_$i45, in_$i46, in_$i24, in_$p25, in_$p47, in_$p23, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$p14, in_$p15, in_vslice_dummy_var_73;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2659;

  $bb21:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$p14, out_$p15 := out_$p23, out_$p52;
    goto $bb21_dummy;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i64(out_$i54, in_$i12);
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref($sub.ref(0, 16), 40)), $mul.ref(16, 1));
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p51, $mul.ref($sub.ref(0, 16), 40));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  SeqInstr_399:
    goto corral_source_split_2706;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  $bb20:
    call {:si_unique_call 639} devirtbounce.7(in_$p2, in_$p0, out_$p15, out_$p23);
    goto SeqInstr_398;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p47;
    goto $bb8;

  $bb19:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2704;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$p47 := out_$p32;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i43, out_$i45);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p19);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$i43 := $add.i32(out_$i24, 1);
    call {:si_unique_call 636} {:cexpr "i"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_2683;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p40;
    goto $bb13;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p25;
    goto $bb13;

  $bb11:
    assume out_$i31 == 1;
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(40, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_2675;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i24);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_vslice_dummy_var_73 := for_each_fw_node_loop_$bb9(in_$p0, in_$p3, out_$p19, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_$p15, out_vslice_dummy_var_73);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2672;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := 0, out_$p14;
    goto $bb9;

  $bb18:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i43, out_$p32;
    assume false;
    return;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_2670;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    out_$p23 := out_$p14;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(0, out_$i21);
    goto corral_source_split_2668;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i8.i32(out_$i20);
    goto corral_source_split_2667;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i8($M.0, out_$p19);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(3, 1));
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p18, out_$i17);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i8($M.0, out_$p16);
    goto corral_source_split_2662;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2661;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} list_add_tail(out_$p42, in_$p3);
    assume {:verifier.code 0} true;
    out_$p40 := out_$p25;
    goto $bb17;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p29;
    goto $bb17;

  $bb15:
    assume out_$i39 == 1;
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i35, out_$i38);
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i32(out_$i37);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.0, out_$p36);
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1856)), $mul.ref(304, 1));
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_2689;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p29, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_2688;

  $bb12:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} out_vslice_dummy_var_73 := fw_node_get___1(out_$p29);
    goto corral_source_split_2699;

  $bb16:
    assume !(out_$i39 == 1);
    goto corral_source_split_2698;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_$p23, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p14, out_$p15, out_vslice_dummy_var_73 := for_each_fw_node_loop_$bb4(in_$p0, in_$p2, in_$p3, in_$i12, out_$p16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$p28, out_$p29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$p42, out_$p40, out_$p32, out_$i43, out_$i44, out_$i45, out_$i46, out_$i24, out_$p25, out_$p47, out_$p23, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$p14, out_$p15, out_vslice_dummy_var_73);
    return;

  exit:
    return;
}



procedure for_each_fw_node_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$i12: i64, in_$p16: ref, in_$i17: i8, in_$p18: ref, in_$p19: ref, in_$i20: i8, in_$i21: i32, in_$i22: i1, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$p36: ref, in_$i37: i8, in_$i38: i32, in_$i39: i1, in_$p42: ref, in_$p40: ref, in_$p32: ref, in_$i43: i32, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$p25: ref, in_$p47: ref, in_$p23: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p14: ref, in_$p15: ref, in_vslice_dummy_var_73: ref) returns (out_$p16: ref, out_$i17: i8, out_$p18: ref, out_$p19: ref, out_$i20: i8, out_$i21: i32, out_$i22: i1, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$p36: ref, out_$i37: i8, out_$i38: i32, out_$i39: i1, out_$p42: ref, out_$p40: ref, out_$p32: ref, out_$i43: i32, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$p25: ref, out_$p47: ref, out_$p23: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p14: ref, out_$p15: ref, out_vslice_dummy_var_73: ref);
  modifies $M.0, $CurrAddr, $M.16, assertsPassed;



implementation for_each_client_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p13: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p13: ref)
{

  entry:
    out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p13 := in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3364;

  $bb6:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p18;
    goto $bb6_dummy;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, in_$i11);
    goto corral_source_split_3373;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_3372;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p17, $mul.ref($sub.ref(0, 488), 512)), $mul.ref(488, 1));
    goto corral_source_split_3371;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p17, $mul.ref($sub.ref(0, 488), 512));
    goto corral_source_split_3370;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_3369;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_3368;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 512)), $mul.ref(488, 1)), $mul.ref(0, 1));
    goto corral_source_split_3367;

  SeqInstr_486:
    goto corral_source_split_3366;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  $bb5:
    call {:si_unique_call 797} devirtbounce.15(in_$p1, out_$p13);
    goto SeqInstr_485;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p13 := for_each_client_loop_$bb4(in_$p1, in_$i11, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p13);
    return;

  exit:
    return;
}



procedure for_each_client_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p13: ref) returns (out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p13: ref);
  modifies $M.1, $M.2, $M.0, $M.10, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $CurrAddr, $M.16, $M.27, $M.28, $M.34, $M.13, assertsPassed, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.24, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation read_config_rom_loop_$bb61(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i66: i32, in_$i100: i32, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i120: i64, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i119: i32, in_$i142: i32, in_$i143: i1, in_$i105: i32, in_$i106: i32, in_$i144: i32, in_$i145: i32) returns (out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i120: i64, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i119: i32, out_$i142: i32, out_$i143: i1, out_$i105: i32, out_$i106: i32, out_$i144: i32, out_$i145: i32)
{

  entry:
    out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145 := in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i119, in_$i142, in_$i143, in_$i105, in_$i106, in_$i144, in_$i145;
    goto $bb61, exit;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  $bb76:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i142, out_$i119;
    goto $bb76_dummy;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$i144, out_$i145 := out_$i119, out_$i142;
    assume true;
    goto $bb76;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i142, in_$i100);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i105, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_4004;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_4003;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i134;
    goto $bb71;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i106;
    goto $bb71;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i106;
    goto $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    assume out_$i118 == 1;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    assume out_$i113 == 1;
    goto $bb67;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 3);
    goto corral_source_split_3994;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i112 := $lshr.i32(in_$i66, 30);
    goto corral_source_split_3993;

  $bb64:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i109;
    assume true;
    goto $bb64;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_3989;

  SeqInstr_636:
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_3988;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i109 := read_rom(in_$p0, in_$i1, out_$i105, out_$p108);
    goto SeqInstr_635;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(in_$p6, $mul.ref(out_$i107, 4));
    goto corral_source_split_3987;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i32.i64(out_$i105);
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i118 := $ule.i32(out_$i117, 1);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i117 := $lshr.i32(out_$i116, 30);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(in_$p6, $mul.ref(out_$i114, 4));
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i105);
    goto corral_source_split_3997;

  $bb68:
    assume !(out_$i113 == 1);
    goto corral_source_split_3996;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, 0);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(in_$p6, $mul.ref(out_$i132, 4));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} fw_err.ref.ref.i32.i64(in_$p4, .str.56, out_$i128, out_$i131);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i131 := $or.i64(out_$i130, 281474708276224);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i129);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i129 := $mul.i32(out_$i105, 4);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p6, $mul.ref(out_$i126, 4));
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4015;

  $bb73:
    assume out_$i125 == 1;
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$i125 := $ugt.i32(out_$i124, 255);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i32(out_$i105, out_$i123);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i32(out_$i122, 16777215);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p6, $mul.ref(out_$i120, 4));
    goto corral_source_split_4008;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4007;

  $bb70:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, out_$i138);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(in_$p6, $mul.ref(out_$i140, 4));
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i32.i64(out_$i106);
    out_$i140 := $add.i64(256, out_$i139);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i138 := $add.i32(out_$i105, out_$i137);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(in_$p6, $mul.ref(out_$i135, 4));
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4027;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i106, 1);
    call {:si_unique_call 928} {:cexpr "sp"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_4026;

  $bb74:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb76_dummy:
    call {:si_unique_call 1} out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145 := read_config_rom_loop_$bb61(in_$p0, in_$i1, in_$p4, in_$p6, in_$i66, in_$i100, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure read_config_rom_loop_$bb61(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i66: i32, in_$i100: i32, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i120: i64, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i119: i32, in_$i142: i32, in_$i143: i1, in_$i105: i32, in_$i106: i32, in_$i144: i32, in_$i145: i32) returns (out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i120: i64, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i119: i32, out_$i142: i32, out_$i143: i1, out_$i105: i32, out_$i106: i32, out_$i144: i32, out_$i145: i32);
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation read_config_rom_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i120: i64, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i119: i32, in_$i142: i32, in_$i143: i1, in_$i105: i32, in_$i106: i32, in_$i144: i32, in_$i145: i32, in_$i103: i32, in_$i104: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i60: i32, in_$i61: i32, in_$i149: i32) returns (out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i120: i64, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i119: i32, out_$i142: i32, out_$i143: i1, out_$i105: i32, out_$i106: i32, out_$i144: i32, out_$i145: i32, out_$i103: i32, out_$i104: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i60: i32, out_$i61: i32, out_$i149: i32)
{

  entry:
    out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145, out_$i103, out_$i104, out_$i146, out_$i147, out_$i148, out_$i60, out_$i61, out_$i149 := in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i107, in_$p108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i140, in_$p141, in_$i119, in_$i142, in_$i143, in_$i105, in_$i106, in_$i144, in_$i145, in_$i103, in_$i104, in_$i146, in_$i147, in_$i148, in_$i60, in_$i61, in_$i149;
    goto $bb44, exit;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3925;

  $bb82:
    assume out_$i148 == 1;
    assume {:verifier.code 0} true;
    out_$i60, out_$i61 := out_$i147, out_$i103;
    goto $bb82_dummy;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$i149 := out_$i147;
    assume true;
    goto $bb82;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$i148 := $ne.i32(out_$i103, 0);
    goto corral_source_split_4042;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_4041;

  $bb80:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i147 := out_$i60;
    goto $bb81;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i104;
    goto $bb81;

  $bb79:
    assume out_$i146 == 1;
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i146 := $slt.i32(out_$i60, out_$i104);
    goto corral_source_split_4037;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb59:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb60;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104 := out_$i144, out_$i145;
    goto $bb60;

  $bb77:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4035;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$i144, out_$i145 := out_$i119, out_$i142;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$i143 := $slt.i32(out_$i142, out_$i100);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i105, 1);
    call {:si_unique_call 926} {:cexpr "i"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_4004;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_4003;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i134;
    goto $bb71;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i106;
    goto $bb71;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i119 := out_$i106;
    goto $bb71;

  $bb69:
    assume {:verifier.code 0} true;
    assume out_$i118 == 1;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    assume out_$i113 == 1;
    goto $bb67;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb68;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    out_$i113 := $ne.i32(out_$i112, 3);
    goto corral_source_split_3994;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i112 := $lshr.i32(out_$i66, 30);
    goto corral_source_split_3993;

  $bb64:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i111 := out_$i109;
    assume true;
    goto $bb64;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i110 := $ne.i32(out_$i109, 0);
    goto corral_source_split_3989;

  SeqInstr_636:
    call {:si_unique_call 925} {:cexpr "ret"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_3988;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i109 := read_rom(in_$p0, in_$i1, out_$i105, out_$p108);
    goto SeqInstr_635;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(in_$p6, $mul.ref(out_$i107, 4));
    goto corral_source_split_3987;

  $bb62:
    assume {:verifier.code 0} true;
    out_$i107 := $sext.i32.i64(out_$i105);
    goto corral_source_split_3986;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    call out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145 := read_config_rom_loop_$bb61(in_$p0, in_$i1, in_$p4, in_$p6, out_$i66, out_$i100, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145);
    goto $bb61_last;

  $bb61_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3984;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i101, out_$i62;
    goto $bb61;

  $bb76:
    assume out_$i143 == 1;
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i142, out_$i119;
    assume false;
    return;

  $bb58:
    assume out_$i102 == 1;
    goto corral_source_split_3982;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    out_$i103, out_$i104 := out_$i62, out_$i101;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    out_$i102 := $slt.i32(out_$i101, out_$i100);
    goto corral_source_split_3980;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i67, 1);
    call {:si_unique_call 923} {:cexpr "i"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_3979;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3978;

  $bb56:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := out_$i90;
    goto $bb57;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    out_$i100 := out_$i67;
    goto $bb57;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p99, 0);
    goto corral_source_split_3976;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(in_$p6, $mul.ref(out_$i98, 4));
    goto corral_source_split_3975;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i67);
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} fw_err.ref.ref.i32.i64(in_$p4, .str.55, out_$i94, out_$i97);
    goto corral_source_split_3973;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    out_$i97 := $or.i64(out_$i96, 281474708276224);
    goto corral_source_split_3972;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_3971;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    out_$i95 := $mul.i32(out_$i67, 4);
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i32($M.0, out_$p93);
    goto corral_source_split_3969;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref(in_$p6, $mul.ref(out_$i92, 4));
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i67);
    goto corral_source_split_3967;

  $bb55:
    assume out_$i91 == 1;
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i91 := $sgt.i32(out_$i90, 256);
    goto corral_source_split_3964;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i32(out_$i89, 1);
    call {:si_unique_call 921} {:cexpr "end"} boogie_si_record_i32(out_$i90);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    out_$i89 := $add.i32(out_$i67, out_$i88);
    goto corral_source_split_3962;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    out_$i88 := $lshr.i32(out_$i87, 16);
    goto corral_source_split_3961;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_3960;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref(in_$p6, $mul.ref(out_$i85, 4));
    goto corral_source_split_3959;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i67);
    goto corral_source_split_3958;

  $bb53:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    out_$i84 := out_$i82;
    assume true;
    goto $bb53;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_3954;

  SeqInstr_633:
    call {:si_unique_call 920} {:cexpr "ret"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_3953;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_$i82 := read_rom(in_$p0, in_$i1, out_$i67, out_$p81);
    goto SeqInstr_632;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(in_$p6, $mul.ref(out_$i80, 4));
    goto corral_source_split_3952;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i67);
    goto corral_source_split_3951;

  $bb50:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i64(out_$i78, 0);
    goto corral_source_split_3947;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_$i78 := ldv__builtin_expect(out_$i77, 0);
    call {:si_unique_call 918} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i78);
    goto corral_source_split_3946;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i76);
    goto corral_source_split_3945;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i1.i32(out_$i75);
    goto corral_source_split_3944;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i69, 0);
    goto corral_source_split_3943;

  $bb47:
    assume !(out_$i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} warn_slowpath_null(.str.54, 604);
    goto corral_source_split_3941;

  $bb46:
    assume out_$i74 == 1;
    goto corral_source_split_3940;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i64(out_$i73, 0);
    goto corral_source_split_3938;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i73 := ldv__builtin_expect(out_$i72, 0);
    call {:si_unique_call 915} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i73);
    goto corral_source_split_3937;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i1.i32(out_$i70);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i32(out_$i69, 0);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i32(out_$i68);
    call {:si_unique_call 913} {:cexpr "__ret_warn_on"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, 255);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i67 := $and.i32(out_$i66, 16777215);
    call {:si_unique_call 912} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, out_$p65);
    call {:si_unique_call 911} {:cexpr "key"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(in_$p6, $mul.ref(out_$i64, 4));
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i32.i64(out_$i62);
    out_$i64 := $add.i64(256, out_$i63);
    goto corral_source_split_3928;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i61, 1);
    call {:si_unique_call 910} {:cexpr "sp"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    out_$i118 := $ule.i32(out_$i117, 1);
    goto corral_source_split_4001;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    out_$i117 := $lshr.i32(out_$i116, 30);
    goto corral_source_split_4000;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i32($M.0, out_$p115);
    goto corral_source_split_3999;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(in_$p6, $mul.ref(out_$i114, 4));
    goto corral_source_split_3998;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i105);
    goto corral_source_split_3997;

  $bb68:
    assume !(out_$i113 == 1);
    goto corral_source_split_3996;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p133, 0);
    goto corral_source_split_4024;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref(in_$p6, $mul.ref(out_$i132, 4));
    goto corral_source_split_4023;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i132 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} fw_err.ref.ref.i32.i64(in_$p4, .str.56, out_$i128, out_$i131);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$i131 := $or.i64(out_$i130, 281474708276224);
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i129);
    goto corral_source_split_4019;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    out_$i129 := $mul.i32(out_$i105, 4);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    out_$i128 := $load.i32($M.0, out_$p127);
    goto corral_source_split_4017;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(in_$p6, $mul.ref(out_$i126, 4));
    goto corral_source_split_4016;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4015;

  $bb73:
    assume out_$i125 == 1;
    goto corral_source_split_4014;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    out_$i125 := $ugt.i32(out_$i124, 255);
    goto corral_source_split_4012;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    out_$i124 := $add.i32(out_$i105, out_$i123);
    goto corral_source_split_4011;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i32(out_$i122, 16777215);
    goto corral_source_split_4010;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i32($M.0, out_$p121);
    goto corral_source_split_4009;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(in_$p6, $mul.ref(out_$i120, 4));
    goto corral_source_split_4008;

  $bb72:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4007;

  $bb70:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p141, out_$i138);
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(in_$p6, $mul.ref(out_$i140, 4));
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i139 := $zext.i32.i64(out_$i106);
    out_$i140 := $add.i64(256, out_$i139);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i138 := $add.i32(out_$i105, out_$i137);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_4029;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref(in_$p6, $mul.ref(out_$i135, 4));
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i105);
    goto corral_source_split_4027;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i134 := $add.i32(out_$i106, 1);
    call {:si_unique_call 928} {:cexpr "sp"} boogie_si_record_i32(out_$i134);
    goto corral_source_split_4026;

  $bb74:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb82_dummy:
    call {:si_unique_call 1} out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145, out_$i103, out_$i104, out_$i146, out_$i147, out_$i148, out_$i60, out_$i61, out_$i149 := read_config_rom_loop_$bb44(in_$p0, in_$i1, in_$p4, in_$p6, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i107, out_$p108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i140, out_$p141, out_$i119, out_$i142, out_$i143, out_$i105, out_$i106, out_$i144, out_$i145, out_$i103, out_$i104, out_$i146, out_$i147, out_$i148, out_$i60, out_$i61, out_$i149);
    return;

  exit:
    return;
}



procedure read_config_rom_loop_$bb44(in_$p0: ref, in_$i1: i32, in_$p4: ref, in_$p6: ref, in_$i62: i32, in_$i63: i64, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i69: i32, in_$i70: i1, in_$i71: i32, in_$i72: i64, in_$i73: i64, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i64, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$i92: i64, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i107: i64, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i64, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i120: i64, in_$p121: ref, in_$i122: i32, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$i131: i64, in_$i132: i64, in_$p133: ref, in_$i134: i32, in_$i135: i64, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i64, in_$i140: i64, in_$p141: ref, in_$i119: i32, in_$i142: i32, in_$i143: i1, in_$i105: i32, in_$i106: i32, in_$i144: i32, in_$i145: i32, in_$i103: i32, in_$i104: i32, in_$i146: i1, in_$i147: i32, in_$i148: i1, in_$i60: i32, in_$i61: i32, in_$i149: i32) returns (out_$i62: i32, out_$i63: i64, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i69: i32, out_$i70: i1, out_$i71: i32, out_$i72: i64, out_$i73: i64, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i64, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$i92: i64, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i107: i64, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i64, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i120: i64, out_$p121: ref, out_$i122: i32, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$i131: i64, out_$i132: i64, out_$p133: ref, out_$i134: i32, out_$i135: i64, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i64, out_$i140: i64, out_$p141: ref, out_$i119: i32, out_$i142: i32, out_$i143: i1, out_$i105: i32, out_$i106: i32, out_$i144: i32, out_$i145: i32, out_$i103: i32, out_$i104: i32, out_$i146: i1, out_$i147: i32, out_$i148: i1, out_$i60: i32, out_$i61: i32, out_$i149: i32);
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation read_config_rom_loop_$bb34(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p45: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1) returns (out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1)
{

  entry:
    out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55 := in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i54, in_$i55;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i55 == 1;
    goto $bb40_dummy;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    out_$i55 := $ne.i32(out_$i54, 0);
    goto corral_source_split_3916;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.0, in_$p45);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p53, out_$i52);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i52 := $sub.i32(out_$i51, 1);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.0, out_$p50);
    goto corral_source_split_3911;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_3910;

  $bb37:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 0);
    goto corral_source_split_3906;

  SeqInstr_630:
    call {:si_unique_call 908} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_3905;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i48 := read_rom(in_$p0, in_$i1, 0, in_$p2);
    goto SeqInstr_629;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55 := read_config_rom_loop_$bb34(in_$p0, in_$i1, in_$p2, in_$p45, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i54, out_$i55);
    return;

  exit:
    return;
}



procedure read_config_rom_loop_$bb34(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p45: ref, in_$i48: i32, in_$i49: i1, in_$p50: ref, in_$i51: i32, in_$i52: i32, in_$p53: ref, in_$i54: i32, in_$i55: i1) returns (out_$i48: i32, out_$i49: i1, out_$p50: ref, out_$i51: i32, out_$i52: i32, out_$p53: ref, out_$i54: i32, out_$i55: i1);
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation create_units_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18 := in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    goto $bb9_dummy;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_4155;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_$i12 := fw_csr_iterator_next(in_$p1, in_$p2, in_$p3);
    call {:si_unique_call 943} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4154;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 209);
    goto corral_source_split_4150;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.27, in_$p2);
    goto corral_source_split_4149;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_4164;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p14;
    assume true;
    goto $bb13;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, 0);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4160;

  SeqInstr_648:
    goto corral_source_split_4159;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_$p14 := kzalloc(1568, 208);
    goto SeqInstr_647;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18 := create_units_loop_$bb10(in_$p1, in_$p2, in_$p3, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18);
    return;

  exit:
    return;
}



procedure create_units_loop_$bb10(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref);
  modifies $M.27, $M.28, $M.0, assertsPassed, $CurrAddr;



implementation create_units_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i9: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i9: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: ref)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i9, out_vslice_dummy_var_85, out_vslice_dummy_var_86 := in_$i10, in_$i11, in_$i12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$p27, in_$p29, in_$p30, in_$p32, in_$i33, in_$p34, in_$p35, in_$p36, in_$i38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p45, in_$i46, in_$i47, in_$i9, in_vslice_dummy_var_85, in_vslice_dummy_var_86;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;

  $bb24:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i33;
    goto $bb24_dummy;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i46, 0);
    goto corral_source_split_4206;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} out_$i46 := fw_csr_iterator_next(in_$p1, in_$p2, in_$p3);
    call {:si_unique_call 955} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} kfree(out_$p45);
    goto corral_source_split_4201;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p18);
    goto corral_source_split_4200;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume out_$i43 == 1;
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i32(out_$i42, 0);
    goto corral_source_split_4196;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} out_$i42 := device_register(out_$p41);
    call {:si_unique_call 951} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_4195;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4194;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} init_fw_attribute_group(out_$p39, fw_unit_attributes, out_$p40);
    goto corral_source_split_4193;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(1424, 1));
    goto corral_source_split_4192;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4191;

  $bb17:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} __compiletime_assert_730();
    goto corral_source_split_4189;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_4188;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i8.i1(0);
    goto corral_source_split_4186;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} out_vslice_dummy_var_85 := dev_set_name.ref.ref.ref.i32(out_$p36, .str.70, out_$p35, out_$i9);
    goto corral_source_split_4185;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1));
    goto corral_source_split_4184;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} out_$p35 := dev_name(out_$p34);
    goto corral_source_split_4183;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_4182;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i9, 1);
    call {:si_unique_call 945} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_4181;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p32, out_$p30);
    goto corral_source_split_4180;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4179;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_4178;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p29, fw_unit_type);
    goto corral_source_split_4177;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(320, 1));
    goto corral_source_split_4176;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p27, fw_bus_type);
    goto corral_source_split_4175;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(0, 1)), $mul.ref(488, 1));
    goto corral_source_split_4174;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, out_$p24);
    goto corral_source_split_4173;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p18, $mul.ref(0, 1576)), $mul.ref(1416, 1));
    goto corral_source_split_4172;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref(out_$p20, $mul.ref(out_$i23, 4));
    goto corral_source_split_4171;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, $sub.i64(0, 1));
    goto corral_source_split_4170;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i21);
    goto corral_source_split_4169;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.28, in_$p3);
    goto corral_source_split_4168;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_4167;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4166;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p14;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, 0);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_4160;

  SeqInstr_648:
    goto corral_source_split_4159;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} out_$p14 := kzalloc(1568, 208);
    goto SeqInstr_647;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$i11 := $ne.i32(out_$i10, 209);
    goto corral_source_split_4150;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.27, in_$p2);
    goto corral_source_split_4149;

  $bb10:
    call out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18 := create_units_loop_$bb10(in_$p1, in_$p2, in_$p3, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i13 == 1;
    assume false;
    return;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i32(out_$i12, 0);
    goto corral_source_split_4155;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_$i12 := fw_csr_iterator_next(in_$p1, in_$p2, in_$p3);
    call {:si_unique_call 943} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_4154;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_4152;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_4164;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} out_vslice_dummy_var_86 := fw_device_get(in_$p0);
    goto corral_source_split_4203;

  $bb20:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i9, out_vslice_dummy_var_85, out_vslice_dummy_var_86 := create_units_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, out_$i10, out_$i11, out_$i12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$p27, out_$p29, out_$p30, out_$p32, out_$i33, out_$p34, out_$p35, out_$p36, out_$i38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p45, out_$i46, out_$i47, out_$i9, out_vslice_dummy_var_85, out_vslice_dummy_var_86);
    return;

  exit:
    return;
}



procedure create_units_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i10: i32, in_$i11: i1, in_$i12: i32, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i64, in_$i23: i64, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$p30: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$i43: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$i9: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: ref) returns (out_$i10: i32, out_$i11: i1, out_$i12: i32, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i64, out_$i23: i64, out_$p24: ref, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$p30: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$i43: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$i9: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: ref);
  modifies $M.27, $M.28, $M.0, $M.34, $CurrAddr, assertsPassed;



implementation init_fw_attribute_group_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i9: i32, in_$i24: i32) returns (out_$i10: i64, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i9: i32, out_$i24: i32)
{

  entry:
    out_$i10, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i9, out_$i24 := in_$i10, in_$p12, in_$i13, in_$p15, in_$i16, in_$i17, in_$p20, in_$p21, in_$i22, in_$i23, in_$i9, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4242;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i16;
    assume true;
    goto $bb6;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_4256;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_4254;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(out_$i17, 48)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4253;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto corral_source_split_4252;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_4251;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i9, 1);
    call {:si_unique_call 963} {:cexpr "j"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p15, out_$p12);
    goto corral_source_split_4249;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 152)), $mul.ref(48, 1)), $mul.ref(out_$i13, 8));
    goto corral_source_split_4248;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i9);
    goto corral_source_split_4247;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i10, 48)), $mul.ref(0, 1));
    goto corral_source_split_4246;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    goto corral_source_split_4245;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i9);
    goto corral_source_split_4244;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i9, out_$i24 := init_fw_attribute_group_loop_$bb4(in_$p1, in_$p2, out_$i10, out_$p12, out_$i13, out_$p15, out_$i16, out_$i17, out_$p20, out_$p21, out_$i22, out_$i23, out_$i9, out_$i24);
    return;

  exit:
    return;
}



procedure init_fw_attribute_group_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$i10: i64, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$i9: i32, in_$i24: i32) returns (out_$i10: i64, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$i9: i32, out_$i24: i32);
  modifies $M.0;



implementation read_rom_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_$i7: i32, in_$i21: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_$i7: i32, out_$i21: i32)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i7, out_$i21 := in_$p8, in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i19, in_$i20, in_$i7, in_$i21;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_4420;

  $bb7:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i19;
    goto $bb7_dummy;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i15;
    assume true;
    goto $bb7;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i20 := $sle.i32(out_$i19, 99);
    goto corral_source_split_4439;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i7, 10);
    call {:si_unique_call 993} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4438;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} msleep(out_$i7);
    goto corral_source_split_4437;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb4;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i32(out_$i15, 18);
    goto corral_source_split_4430;

  SeqInstr_654:
    call {:si_unique_call 990} {:cexpr "rcode"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4429;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} out_$i15 := fw_run_transaction(out_$p9, 4, out_$i11, in_$i1, out_$i13, in_$i6, out_$p14, 4);
    goto SeqInstr_653;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(24, 1));
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, out_$p10);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(16, 1));
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_4423;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i7, out_$i21 := read_rom_loop_$bb1(in_$p0, in_$i1, in_$p3, in_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i19, out_$i20, out_$i7, out_$i21);
    return;

  exit:
    return;
}



procedure read_rom_loop_$bb1(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_$i7: i32, in_$i21: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_$i7: i32, out_$i21: i32);
  modifies $M.0, $CurrAddr, $M.13, $M.26, $M.1, $M.2, $M.15, assertsPassed, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.31, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.27, $M.28, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation fw_device_op_release_loop_$bb14(in_$p2: ref, in_$p5: ref, in_$p47: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1) returns (out_$i51: i64, out_$i52: i32, out_$i53: i1)
{

  entry:
    out_$i51, out_$i52, out_$i53 := in_$i51, in_$i52, in_$i53;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb18_dummy;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 0);
    goto corral_source_split_5119;

  SeqInstr_780:
    call {:si_unique_call 1199} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_5118;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} out_$i52 := has_outbound_transactions(in_$p5);
    goto SeqInstr_779;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} out_$i51 := prepare_to_wait_event(in_$p47, in_$p2, 2);
    call {:si_unique_call 1197} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_5117;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} schedule();
    goto corral_source_split_5116;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i51, out_$i52, out_$i53 := fw_device_op_release_loop_$bb14(in_$p2, in_$p5, in_$p47, out_$i51, out_$i52, out_$i53);
    return;

  exit:
    return;
}



procedure fw_device_op_release_loop_$bb14(in_$p2: ref, in_$p5: ref, in_$p47: ref, in_$i51: i64, in_$i52: i32, in_$i53: i1) returns (out_$i51: i64, out_$i52: i32, out_$i53: i1);
  modifies $M.26, assertsPassed;



implementation fw_device_op_release_loop_$bb22(in_$i72: i64, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p74: ref, in_$p75: ref) returns (out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p74: ref, out_$p75: ref)
{

  entry:
    out_$p76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p74, out_$p75 := in_$p76, in_$p78, in_$p79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p74, in_$p75;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5123;

  $bb24:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$p74, out_$p75 := out_$p81, out_$p74;
    goto $bb24_dummy;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, in_$i72);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p74, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref(out_$p80, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(out_$p79);
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p74, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} kfree(out_$p76);
    goto corral_source_split_5126;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb24_dummy:
    call {:si_unique_call 1} out_$p76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p74, out_$p75 := fw_device_op_release_loop_$bb22(in_$i72, out_$p76, out_$p78, out_$p79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p74, out_$p75);
    return;

  exit:
    return;
}



procedure fw_device_op_release_loop_$bb22(in_$i72: i64, in_$p76: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p74: ref, in_$p75: ref) returns (out_$p76: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p74: ref, out_$p75: ref);



implementation fw_iso_buffer_destroy_loop_$bb12(in_$p0: ref, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i24: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i24: i32)
{

  entry:
    out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i24 := in_$p25, in_$p26, in_$i27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i24;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5187;

  $bb14:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i30;
    goto $bb14_dummy;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p21);
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1209} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5195;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __free_pages(out_$p29, 0);
    goto corral_source_split_5194;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_5193;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref(out_$p26, $mul.ref(out_$i27, 8));
    goto corral_source_split_5192;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_5190;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5189;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i24 := fw_iso_buffer_destroy_loop_$bb12(in_$p0, in_$p21, out_$p25, out_$p26, out_$i27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i24);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_destroy_loop_$bb12(in_$p0: ref, in_$p21: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i24: i32) returns (out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i24: i32);



implementation fw_iso_buffer_destroy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i5 := in_$p6, in_$p7, in_$i8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5160;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i18;
    goto $bb6_dummy;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i18, out_$i19);
    goto corral_source_split_5177;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p2);
    goto corral_source_split_5176;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1207} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5175;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} dma_unmap_page(out_$p15, out_$i13, 4096, out_$i17);
    goto corral_source_split_5174;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_5173;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5172;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5171;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5170;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.0, out_$p12);
    call {:si_unique_call 1205} {:cexpr "address"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_5169;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_5168;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5167;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5166;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p7, $mul.ref(out_$i8, 8));
    goto corral_source_split_5165;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_5164;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_5163;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i5 := fw_iso_buffer_destroy_loop_$bb4(in_$p0, in_$p1, in_$p2, out_$p6, out_$p7, out_$i8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i5);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_destroy_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i5: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i5: i32);



implementation fw_iso_buffer_alloc_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i16: i32, in_$i33: i32) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i16: i32, out_$i33: i32)
{

  entry:
    out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i16, out_$i33 := in_$p17, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$p23, in_$i24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i16, in_$i33;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5378;

  $bb14:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i31;
    goto $bb14_dummy;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb14;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, in_$i1);
    goto corral_source_split_5402;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1266} {:cexpr "i"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_5401;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i16;
    assume true;
    goto $bb11;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i64(out_$i27, 0);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p23, $mul.ref(out_$i24, 8));
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p21, out_$p17);
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p19, $mul.ref(out_$i20, 8));
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i16);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5381;

  SeqInstr_834:
    goto corral_source_split_5380;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} out_$p17 := alloc_pages(32980, 0);
    goto SeqInstr_833;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i16, out_$i33 := fw_iso_buffer_alloc_loop_$bb8(in_$p0, in_$i1, out_$p17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$p23, out_$i24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i16, out_$i33);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_alloc_loop_$bb8(in_$p0: ref, in_$i1: i32, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i16: i32, in_$i33: i32) returns (out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i16: i32, out_$i33: i32);
  modifies $M.0, assertsPassed;



implementation fw_iso_buffer_map_dma_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i8: i32, in_$i33: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i8: i32, out_$i33: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i8, out_$i33 := in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i8, in_$i33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  $bb10:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i30;
    goto $bb10_dummy;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i30;
    assume true;
    goto $bb10;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i30, out_$i31);
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, in_$p4);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1273} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p29, out_$i16);
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p28);
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 8));
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_5454;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5453;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    out_$i21 := out_$i8;
    assume true;
    goto $bb7;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_5442;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} out_$i19 := dma_mapping_error(out_$p18, out_$i16);
    call {:si_unique_call 1272} {:cexpr "tmp"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_5441;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} out_$i16 := dma_map_page(out_$p10, out_$p15, 0, 4096, in_$i2);
    call {:si_unique_call 1270} {:cexpr "address"} boogie_si_record_i64(out_$i16);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 8));
    goto corral_source_split_5436;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5435;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5434;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5432;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p1, $mul.ref(0, 1856)), $mul.ref(8, 1));
    goto corral_source_split_5431;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i8, out_$i33 := fw_iso_buffer_map_dma_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p4, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i8, out_$i33);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_map_dma_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i21: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i1, in_$i8: i32, in_$i33: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i21: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i1, out_$i8: i32, out_$i33: i32);
  modifies $M.0;



implementation fw_iso_buffer_map_vma_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i64, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$i8: i64) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i64, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$i8: i64)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i18, in_$i19, in_$i20, in_$i21, in_$i7, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i19, out_$i18;
    goto $bb10_dummy;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i19, out_$i20);
    goto corral_source_split_5497;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, in_$p4);
    goto corral_source_split_5496;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1278} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_5495;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i8, 4096);
    call {:si_unique_call 1277} {:cexpr "uaddr"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_5494;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    out_$i16 := out_$i14;
    assume true;
    goto $bb7;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} out_$i14 := vm_insert_page(in_$p1, out_$i8, out_$p13);
    call {:si_unique_call 1276} {:cexpr "err"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_5487;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_5486;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 8));
    goto corral_source_split_5485;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_5483;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8 := fw_iso_buffer_map_vma_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i18, out_$i19, out_$i20, out_$i21, out_$i7, out_$i8);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_map_vma_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i18: i64, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$i8: i64) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i18: i64, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$i8: i64);



implementation dequeue_event_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p13: ref, in_$p15: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i1) returns (out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i1)
{

  entry:
    out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := in_$i18, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;

  $bb18:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := out_$i26;
    goto $bb18_dummy;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i27, 0);
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} out_$i27 := list_empty(in_$p15);
    call {:si_unique_call 1373} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_$i26 := prepare_to_wait_event(in_$p13, in_$p3, 1);
    call {:si_unique_call 1371} {:cexpr "tmp"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_5752;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} schedule();
    goto corral_source_split_5751;

  $bb16:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i18;
    assume true;
    goto $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i18, 0);
    goto corral_source_split_5747;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} out_$i22 := fw_device_is_shutdown(out_$p21);
    call {:si_unique_call 1366} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_5734;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5733;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28 := dequeue_event_loop_$bb8(in_$p0, in_$p3, in_$p13, in_$p15, out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28);
    return;

  exit:
    return;
}



procedure dequeue_event_loop_$bb8(in_$p0: ref, in_$p3: ref, in_$p13: ref, in_$p15: ref, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$i22: i32, in_$i23: i1, in_$i24: i1, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i1) returns (out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$i22: i32, out_$i23: i1, out_$i24: i1, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i1);



implementation search_leaf_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i7: i32) returns (out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$i9, out_$i10, out_$i18, out_$i19, out_$i20, out_$i7 := in_$i8, in_$i9, in_$i10, in_$i18, in_$i19, in_$i20, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5850;

  $bb13:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i18;
    goto $bb13_dummy;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_5870;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} out_$i19 := fw_csr_iterator_next(in_$p2, in_$p3, in_$p4);
    call {:si_unique_call 1403} {:cexpr "tmp"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_5869;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.27, in_$p3);
    call {:si_unique_call 1401} {:cexpr "last_key"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5868;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb8;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 129);
    goto corral_source_split_5856;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.27, in_$p3);
    goto corral_source_split_5855;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_5854;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, in_$i1);
    goto corral_source_split_5852;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9, out_$i10, out_$i18, out_$i19, out_$i20, out_$i7 := search_leaf_loop_$bb4(in_$i1, in_$p2, in_$p3, in_$p4, out_$i8, out_$i9, out_$i10, out_$i18, out_$i19, out_$i20, out_$i7);
    return;

  exit:
    return;
}



procedure search_leaf_loop_$bb4(in_$i1: i32, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i7: i32) returns (out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i7: i32);
  modifies $M.27, $M.28, $M.0;



implementation textual_leaf_to_string_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i20: i32, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i23: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i42: i32) returns (out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i23: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i42: i32)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i23, out_$i43, out_$i44, out_$i45, out_$i46, out_$i42 := in_$i24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i38, in_$p39, in_$i40, in_$i41, in_$i23, in_$i43, in_$i44, in_$i45, in_$i46, in_$i42;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5912;

  $bb29:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i40;
    goto $bb29_dummy;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    assume true;
    goto $bb29;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    out_$i41 := $ult.i32(out_$i40, in_$i20);
    goto corral_source_split_5940;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i23, 1);
    call {:si_unique_call 1408} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_5939;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, out_$i33);
    goto corral_source_split_5938;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref(in_$p1, $mul.ref(out_$i38, 1));
    goto corral_source_split_5937;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i32.i64(out_$i23);
    goto corral_source_split_5936;

  $bb26:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i23;
    assume true;
    goto $bb26;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 0);
    goto corral_source_split_5927;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i8.i32(out_$i33);
    goto corral_source_split_5926;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    out_$i33 := $trunc.i32.i8(out_$i32);
    call {:si_unique_call 1407} {:cexpr "c"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_5925;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    out_$i32 := $lshr.i32(out_$i28, out_$i31);
    goto corral_source_split_5924;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    out_$i31 := $mul.i32(out_$i30, 8);
    goto corral_source_split_5923;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i32(out_$i29, 3);
    goto corral_source_split_5922;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    out_$i29 := $xor.i32(out_$i23, $sub.i32(0, 1));
    goto corral_source_split_5921;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_5920;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p0, $mul.ref(out_$i26, 4));
    goto corral_source_split_5919;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i24);
    out_$i26 := $add.i64(3, out_$i25);
    goto corral_source_split_5918;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i24 := $udiv.i32(out_$i23, 4);
    goto corral_source_split_5917;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume out_$i45 == 1;
    goto corral_source_split_5944;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i23;
    assume true;
    goto $bb31;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    out_$i45 := $ult.i64(out_$i43, out_$i44);
    goto corral_source_split_5915;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    out_$i44 := $sub.i64(in_$i2, 1);
    goto corral_source_split_5914;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i32.i64(out_$i23);
    goto corral_source_split_5913;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i23, out_$i43, out_$i44, out_$i45, out_$i46, out_$i42 := textual_leaf_to_string_loop_$bb23(in_$p0, in_$p1, in_$i2, in_$i20, out_$i24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i38, out_$p39, out_$i40, out_$i41, out_$i23, out_$i43, out_$i44, out_$i45, out_$i46, out_$i42);
    return;

  exit:
    return;
}



procedure textual_leaf_to_string_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$i2: i64, in_$i20: i32, in_$i24: i32, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i8, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i23: i32, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$i42: i32) returns (out_$i24: i32, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i8, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i23: i32, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$i42: i32);
  modifies $M.0;



implementation unit_match_loop_$bb4(in_$p2: ref, in_$p16: ref, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15 := in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p22, in_$p23, in_$i24, in_$i25, in_$p15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6004;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p22;
    goto $bb10_dummy;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_6018;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, out_$p23);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p15, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_6016;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p15, $mul.ref(1, 32));
    goto corral_source_split_6015;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p15;
    assume true;
    goto $bb7;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i8(out_$i17);
    call {:si_unique_call 1422} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_6008;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} out_$i17 := match_ids(out_$p15, out_$p16);
    goto corral_source_split_6007;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15 := unit_match_loop_$bb4(in_$p2, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$i24, out_$i25, out_$p15);
    return;

  exit:
    return;
}



procedure unit_match_loop_$bb4(in_$p2: ref, in_$p16: ref, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i1, in_$p15: ref) returns (out_$p16: ref, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i1, out_$p15: ref);



implementation get_ids_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1) returns (out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23 := in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$p19, in_$i20, in_$p21, in_$i22, in_$i23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb24:
    assume {:verifier.code 0} true;
    assume out_$i23 == 1;
    goto $bb24_dummy;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i22, 0);
    goto corral_source_split_6127;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} out_$i22 := fw_csr_iterator_next(in_$p2, in_$p3, in_$p4);
    call {:si_unique_call 1438} {:cexpr "tmp"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_6126;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, in_$p1, out_$i15);
    goto corral_source_split_6097;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.28, in_$p4);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i7, 3);
    goto corral_source_split_6092;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.27, in_$p3);
    goto corral_source_split_6091;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, out_$p17, out_$i16);
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p1, $mul.ref(1, 4));
    goto corral_source_split_6105;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.28, in_$p4);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i10 == 1;
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i9, 23);
    goto corral_source_split_6100;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.27, in_$p3);
    goto corral_source_split_6099;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, out_$p19, out_$i18);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p1, $mul.ref(2, 4));
    goto corral_source_split_6114;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.28, in_$p4);
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i12 == 1;
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 18);
    goto corral_source_split_6109;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.27, in_$p3);
    goto corral_source_split_6108;

  $bb11:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $M.34 := $store.i32($M.34, out_$p21, out_$i20);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(in_$p1, $mul.ref(3, 4));
    goto corral_source_split_6123;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.28, in_$p4);
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i14 == 1;
    goto corral_source_split_6120;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 19);
    goto corral_source_split_6118;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.27, in_$p3);
    goto corral_source_split_6117;

  $bb15:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23 := get_ids_loop_$bb4(in_$p1, in_$p2, in_$p3, in_$p4, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$p19, out_$i20, out_$p21, out_$i22, out_$i23);
    return;

  exit:
    return;
}



procedure get_ids_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i7: i32, in_$i8: i1, in_$i9: i32, in_$i10: i1, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i32, in_$p17: ref, in_$i18: i32, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$i22: i32, in_$i23: i1) returns (out_$i7: i32, out_$i8: i1, out_$i9: i32, out_$i10: i1, out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i32, out_$p17: ref, out_$i18: i32, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$i22: i32, out_$i23: i1);
  modifies $M.27, $M.28, $M.0, $M.34;



implementation fw_core_add_address_handler_loop_$bb17(in_$p0: ref, in_$p25: ref, in_$p27: ref, in_$p30: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p40: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1) returns (out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p40: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1)
{

  entry:
    out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p40, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60 := in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p41, in_$i42, in_$p43, in_$i44, in_$p45, in_$p40, in_$i46, in_$i47, in_$p48, in_$i49, in_$p50, in_$i51, in_$i52, in_$p53, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb26:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb26_dummy;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    out_$i60 := $ule.i64(out_$i58, out_$i59);
    goto corral_source_split_6408;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.0, in_$p30);
    goto corral_source_split_6407;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i64(out_$i56, out_$i57);
    goto corral_source_split_6406;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, in_$p27);
    goto corral_source_split_6405;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i64($M.0, in_$p25);
    goto corral_source_split_6404;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p53, out_$i52);
    goto corral_source_split_6398;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6397;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i49, out_$i51);
    goto corral_source_split_6396;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i64($M.0, out_$p50);
    goto corral_source_split_6395;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p40, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6394;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i64($M.0, out_$p48);
    goto corral_source_split_6393;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6392;

  $bb22:
    assume out_$i47 == 1;
    goto corral_source_split_6391;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_6389;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p40);
    goto corral_source_split_6388;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6387;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_$p45 := lookup_overlapping_address_handler(address_handler_list, out_$i42, out_$i44);
    assume {:verifier.code 0} true;
    out_$p40 := out_$p45;
    goto $bb21;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    out_$p40 := $0.ref;
    goto $bb21;

  $bb19:
    assume out_$i39 == 1;
    goto corral_source_split_6379;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i8.i1(out_$i38);
    goto corral_source_split_6377;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i1.i8(out_$i37);
    call {:si_unique_call 1473} {:cexpr "tmp"} boogie_si_record_i8(out_$i38);
    goto corral_source_split_6376;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_$i37 := is_in_fcp_region(out_$i34, out_$i36);
    goto corral_source_split_6375;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i64($M.0, out_$p35);
    goto corral_source_split_6374;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6373;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.0, out_$p33);
    goto corral_source_split_6372;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6371;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.0, out_$p43);
    goto corral_source_split_6385;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6384;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_6383;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6382;

  $bb20:
    assume !(out_$i39 == 1);
    goto corral_source_split_6381;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p40, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60 := fw_core_add_address_handler_loop_$bb17(in_$p0, in_$p25, in_$p27, in_$p30, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$p43, out_$i44, out_$p45, out_$p40, out_$i46, out_$i47, out_$p48, out_$i49, out_$p50, out_$i51, out_$i52, out_$p53, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60);
    return;

  exit:
    return;
}



procedure fw_core_add_address_handler_loop_$bb17(in_$p0: ref, in_$p25: ref, in_$p27: ref, in_$p30: ref, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i1, in_$i38: i8, in_$i39: i1, in_$p41: ref, in_$i42: i64, in_$p43: ref, in_$i44: i64, in_$p45: ref, in_$p40: ref, in_$i46: i64, in_$i47: i1, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$i51: i64, in_$i52: i64, in_$p53: ref, in_$i56: i64, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1) returns (out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i1, out_$i38: i8, out_$i39: i1, out_$p41: ref, out_$i42: i64, out_$p43: ref, out_$i44: i64, out_$p45: ref, out_$p40: ref, out_$i46: i64, out_$i47: i1, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$i51: i64, out_$i52: i64, out_$p53: ref, out_$i56: i64, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1);
  modifies $M.0, $M.38, $M.39, $CurrAddr;



implementation lookup_overlapping_address_handler_loop_$bb10(in_$i1: i64, in_$i2: i64, in_$p4: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p18: ref, in_vslice_dummy_var_97: i32) returns (out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p18: ref, out_vslice_dummy_var_97: i32)
{

  entry:
    out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p18, out_vslice_dummy_var_97 := in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$p25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p18, in_vslice_dummy_var_97;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  $bb25:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p40;
    goto $bb25_dummy;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i64(out_$i42, in_$i16);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p39, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref(out_$p39, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_6483;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_6482;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} out_vslice_dummy_var_97 := rcu_read_lock_held();
    goto corral_source_split_6480;

  $bb23:
    assume !(out_$i37 == 1);
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i37 := $trunc.i8.i1($u3);
    goto corral_source_split_6477;

  $bb19:
    assume out_$i36 == 1;
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_$i35 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1489} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.39, in_$p4);
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, in_$p4, out_$p33);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_6470;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_6469;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb14;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb14;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p18;
    assume true;
    goto $bb16;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i64(in_$i1, out_$i27);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i64(out_$i24, out_$i26);
    goto corral_source_split_6462;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.0, out_$p25);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6460;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.0, out_$p23);
    goto corral_source_split_6459;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6458;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_6457;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    out_$i22 := $ult.i64(out_$i20, out_$i21);
    goto corral_source_split_6455;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(in_$i1, in_$i2);
    goto corral_source_split_6454;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_6453;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6452;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i37 == 1;
    goto $bb21;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p18, out_vslice_dummy_var_97 := lookup_overlapping_address_handler_loop_$bb10(in_$i1, in_$i2, in_$p4, in_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$p25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p18, out_vslice_dummy_var_97);
    return;

  exit:
    return;
}



procedure lookup_overlapping_address_handler_loop_$bb10(in_$i1: i64, in_$i2: i64, in_$p4: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$i24: i64, in_$p25: ref, in_$i26: i64, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p18: ref, in_vslice_dummy_var_97: i32) returns (out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$i24: i64, out_$p25: ref, out_$i26: i64, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p18: ref, out_vslice_dummy_var_97: i32);
  modifies $M.39;



implementation fw_cdev_handle_phy_packet_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p23: ref, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p13: ref)
{

  entry:
    out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p29, out_$i30, out_$p33, out_$p35, out_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p13 := in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$i19, in_$p21, in_$p23, in_$p25, in_$p27, in_$p29, in_$i30, in_$p33, in_$p35, in_$i36, in_$p39, in_$p40, in_$p41, in_$p42, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$p13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6928;

  $bb10:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$p13 := out_$p47;
    goto $bb10_dummy;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, in_$i11);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i49 := $p2i.ref.i64(out_$p48);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p46, $mul.ref($sub.ref(0, 464), 512)), $mul.ref(464, 1));
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref(out_$p46, $mul.ref($sub.ref(0, 464), 512));
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_6963;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 512)), $mul.ref(464, 1)), $mul.ref(0, 1));
    goto corral_source_split_6962;

  SeqInstr_984:
    goto corral_source_split_6961;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} queue_event(out_$p13, out_$p40, out_$p42, 32, $0.ref, 0);
    goto SeqInstr_983;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p41);
    goto corral_source_split_6960;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_6959;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6958;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i36);
    goto corral_source_split_6957;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(20, 1)), $mul.ref(1, 4));
    goto corral_source_split_6956;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_6955;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(2, 4));
    goto corral_source_split_6954;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p33, out_$i30);
    goto corral_source_split_6953;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(20, 1)), $mul.ref(0, 4));
    goto corral_source_split_6952;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, out_$p29);
    goto corral_source_split_6951;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(8, 1)), $mul.ref(1, 4));
    goto corral_source_split_6950;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, 8);
    goto corral_source_split_6949;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(16, 1));
    goto corral_source_split_6948;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p25, 0);
    goto corral_source_split_6947;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(12, 1));
    goto corral_source_split_6946;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, 8);
    goto corral_source_split_6945;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(8, 1));
    goto corral_source_split_6944;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p21, out_$i19);
    goto corral_source_split_6943;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 72)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_6942;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    goto corral_source_split_6941;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p13, $mul.ref(0, 512)), $mul.ref(480, 1));
    goto corral_source_split_6940;

  $bb7:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i16, 0);
    goto corral_source_split_6933;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_6932;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_6931;

  SeqInstr_978:
    goto corral_source_split_6930;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$p14 := kmalloc(80, 32);
    goto SeqInstr_977;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p29, out_$i30, out_$p33, out_$p35, out_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p13 := fw_cdev_handle_phy_packet_loop_$bb4(in_$p1, in_$i11, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$p21, out_$p23, out_$p25, out_$p27, out_$p29, out_$i30, out_$p33, out_$p35, out_$i36, out_$p39, out_$p40, out_$p41, out_$p42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$p13);
    return;

  exit:
    return;
}



procedure fw_cdev_handle_phy_packet_loop_$bb4(in_$p1: ref, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$p23: ref, in_$p25: ref, in_$p27: ref, in_$p29: ref, in_$i30: i32, in_$p33: ref, in_$p35: ref, in_$i36: i32, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$i50: i1, in_$p13: ref) returns (out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$p23: ref, out_$p25: ref, out_$p27: ref, out_$p29: ref, out_$i30: i32, out_$p33: ref, out_$p35: ref, out_$i36: i32, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$i50: i1, out_$p13: ref);
  modifies $M.0, $M.26, assertsPassed;



implementation handle_fcp_region_request_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p5: ref, in_$i15: i32, in_$i19: i32, in_$i23: i32, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p36: ref, in_vslice_dummy_var_101: i32) returns (out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p36: ref, out_vslice_dummy_var_101: i32)
{

  entry:
    out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p36, out_vslice_dummy_var_101 := in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$i60, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p36, in_vslice_dummy_var_101;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_7167;

  $bb34:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$p36 := out_$p63;
    goto $bb34_dummy;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i64(out_$i65, $p2i.ref.i64(address_handler_list));
    goto corral_source_split_7206;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_7205;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p62, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7204;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7203;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_7202;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_vslice_dummy_var_101 := rcu_read_lock_held();
    goto corral_source_split_7200;

  $bb32:
    assume !(out_$i60 == 1);
    goto corral_source_split_7199;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    out_$i60 := $trunc.i8.i1($u3);
    goto corral_source_split_7197;

  $bb28:
    assume out_$i59 == 1;
    goto corral_source_split_7196;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_7194;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_$i58 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1611} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7193;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.46, in_$p5);
    goto corral_source_split_7192;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.46 := $store.ref($M.46, in_$p5, out_$p56);
    goto corral_source_split_7191;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_7190;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7189;

  $bb26:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_1005:
    goto corral_source_split_7187;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    call {:si_unique_call 1609} devirtbounce.33(out_$p44, in_$p0, $0.ref, in_$i15, in_$i19, in_$i23, out_$i46, in_$i3, out_$p48, out_$i51, out_$p53);
    goto SeqInstr_1004;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p36, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i32.i64(out_$i50);
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_7182;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p2, $mul.ref(0, 128)), $mul.ref(128, 1));
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.0, out_$p45);
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 104)), $mul.ref(4, 1));
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p36, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_7177;

  $bb25:
    assume out_$i42 == 1;
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i8.i1(out_$i41);
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i1.i8(out_$i40);
    call {:si_unique_call 1608} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i41);
    goto corral_source_split_7173;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_$i40 := is_enclosing_handler(out_$p36, in_$i3, out_$i39);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(out_$i38);
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_7170;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p2, $mul.ref(0, 128)), $mul.ref(124, 1));
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i59 == 1);
    goto $bb30;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i60 == 1;
    goto $bb30;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p36, out_vslice_dummy_var_101 := handle_fcp_region_request_loop_$bb23(in_$p0, in_$p1, in_$p2, in_$i3, in_$p5, in_$i15, in_$i19, in_$i23, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$i60, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p36, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure handle_fcp_region_request_loop_$bb23(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i64, in_$p5: ref, in_$i15: i32, in_$i19: i32, in_$i23: i32, in_$p37: ref, in_$i38: i32, in_$i39: i64, in_$i40: i1, in_$i41: i8, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i64, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p36: ref, in_vslice_dummy_var_101: i32) returns (out_$p37: ref, out_$i38: i32, out_$i39: i64, out_$i40: i1, out_$i41: i8, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i64, out_$p52: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p36: ref, out_vslice_dummy_var_101: i32);
  modifies $M.46, $M.0, $M.26, assertsPassed, $M.1, $M.2, $M.15, $M.31, $M.45, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, $M.10, $M.47, $M.48, $CurrAddr, $M.24, $M.34, $M.38, $M.39, $M.23, $M.43, $M.27, $M.28, $M.16, $M.13, $M.25, $M.11, $M.12, $M.14;



implementation lookup_enclosing_address_handler_loop_$bb10(in_$i1: i64, in_$i2: i64, in_$p4: ref, in_$i16: i64, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p18: ref, in_vslice_dummy_var_103: i32) returns (out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p18: ref, out_vslice_dummy_var_103: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p18, out_vslice_dummy_var_103 := in_$i19, in_$i20, in_$i21, in_$p22, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p18, in_vslice_dummy_var_103;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7277;

  $bb22:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$p18 := out_$p33;
    goto $bb22_dummy;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, in_$i16);
    goto corral_source_split_7304;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p32, $mul.ref($sub.ref(0, 32), 48)), $mul.ref(32, 1));
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p32, $mul.ref($sub.ref(0, 32), 48));
    goto corral_source_split_7301;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_7300;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} out_vslice_dummy_var_103 := rcu_read_lock_held();
    goto corral_source_split_7298;

  $bb20:
    assume !(out_$i30 == 1);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i8.i1($u3);
    goto corral_source_split_7295;

  $bb16:
    assume out_$i29 == 1;
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} out_$i28 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1634} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.48, in_$p4);
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, in_$p4, out_$p26);
    goto corral_source_split_7289;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_7288;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p18, $mul.ref(0, 48)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_7287;

  $bb13:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$p22 := out_$p18;
    assume true;
    goto $bb13;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i8.i1(out_$i20);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i8(out_$i19);
    call {:si_unique_call 1632} {:cexpr "tmp___0"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_7280;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} out_$i19 := is_enclosing_handler(out_$p18, in_$i1, in_$i2);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i29 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i30 == 1;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p18, out_vslice_dummy_var_103 := lookup_enclosing_address_handler_loop_$bb10(in_$i1, in_$i2, in_$p4, in_$i16, out_$i19, out_$i20, out_$i21, out_$p22, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p18, out_vslice_dummy_var_103);
    return;

  exit:
    return;
}



procedure lookup_enclosing_address_handler_loop_$bb10(in_$i1: i64, in_$i2: i64, in_$p4: ref, in_$i16: i64, in_$i19: i1, in_$i20: i8, in_$i21: i1, in_$p22: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$i29: i1, in_$i30: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p18: ref, in_vslice_dummy_var_103: i32) returns (out_$i19: i1, out_$i20: i8, out_$i21: i1, out_$p22: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$i29: i1, out_$i30: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p18: ref, out_vslice_dummy_var_103: i32);
  modifies $M.48;



implementation fw_core_handle_response_loop_$bb4(in_$i11: i32, in_$i15: i32, in_$i30: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p33: ref, in_$p63: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p33: ref, out_$p63: ref)
{

  entry:
    out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p33, out_$p63 := in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p56, in_$p57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p33, in_$p63;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7359;

  $bb17:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p59;
    goto $bb17_dummy;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    out_$p63 := out_$p59;
    assume true;
    goto $bb17;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i64(out_$i61, in_$i30);
    goto corral_source_split_7408;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    out_$i61 := $p2i.ref.i64(out_$p60);
    goto corral_source_split_7407;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p58, $mul.ref($sub.ref(0, 8), 288)), $mul.ref(8, 1));
    goto corral_source_split_7406;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref(out_$p58, $mul.ref($sub.ref(0, 8), 288));
    goto corral_source_split_7405;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_7404;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_7403;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 288)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_7402;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb8;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    out_$p40 := out_$p33;
    assume true;
    goto $bb10;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, in_$i11);
    goto corral_source_split_7368;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_7367;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p33, $mul.ref(0, 288)), $mul.ref(4, 1));
    goto corral_source_split_7366;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_7365;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, in_$i15);
    goto corral_source_split_7363;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_7362;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 288)), $mul.ref(0, 1));
    goto corral_source_split_7361;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p33, out_$p63 := fw_core_handle_response_loop_$bb4(in_$i11, in_$i15, in_$i30, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p56, out_$p57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p33, out_$p63);
    return;

  exit:
    return;
}



procedure fw_core_handle_response_loop_$bb4(in_$i11: i32, in_$i15: i32, in_$i30: i64, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i64, in_$i62: i1, in_$p33: ref, in_$p63: ref) returns (out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i64, out_$i62: i1, out_$p33: ref, out_$p63: ref);



implementation ioctl_queue_iso_loop_$bb31(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i32: i64, in_$p60: ref, in_$i62: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i16, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i32, in_$i86: i8, in_$p88: ref, in_$i89: i8, in_$i90: i8, in_$i91: i8, in_$i92: i8, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p99: ref, in_$i100: i8, in_$i101: i8, in_$i102: i8, in_$i103: i8, in_$i104: i8, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$p111: ref, in_$i112: i8, in_$i113: i8, in_$i114: i8, in_$i115: i8, in_$i116: i8, in_$i117: i32, in_$i118: i8, in_$i119: i32, in_$i120: i32, in_$i121: i8, in_$p123: ref, in_$i124: i8, in_$i125: i8, in_$i126: i8, in_$i127: i8, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p143: ref, in_$i144: i8, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p149: ref, in_$i150: i8, in_$i151: i64, in_$p154: ref, in_$i155: i8, in_$i156: i32, in_$i157: i1, in_$p159: ref, in_$i160: i8, in_$i161: i64, in_$p162: ref, in_$i163: i64, in_$i164: i64, in_$i165: i1, in_$p167: ref, in_$i168: i16, in_$i169: i32, in_$i170: i1, in_$p172: ref, in_$i173: i16, in_$i174: i32, in_$i175: i32, in_$i176: i1, in_$i152: i64, in_$p177: ref, in_$p178: ref, in_$i179: i64, in_$p180: ref, in_$i181: i64, in_$i182: i64, in_$i183: i1, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i194: i8, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$p205: ref, in_$i206: i16, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$p211: ref, in_$i212: i16, in_$i213: i64, in_$i214: i64, in_$i215: i1, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i220: i64, in_$p221: ref, in_$i222: i32, in_$p227: ref, in_$i228: i16, in_$i229: i64, in_$i230: i64, in_$i231: i32, in_$i232: i64, in_$i233: i1, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i234: i64, in_$p235: ref, in_$i236: i32) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i16, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i32, out_$i86: i8, out_$p88: ref, out_$i89: i8, out_$i90: i8, out_$i91: i8, out_$i92: i8, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p99: ref, out_$i100: i8, out_$i101: i8, out_$i102: i8, out_$i103: i8, out_$i104: i8, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$p111: ref, out_$i112: i8, out_$i113: i8, out_$i114: i8, out_$i115: i8, out_$i116: i8, out_$i117: i32, out_$i118: i8, out_$i119: i32, out_$i120: i32, out_$i121: i8, out_$p123: ref, out_$i124: i8, out_$i125: i8, out_$i126: i8, out_$i127: i8, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p143: ref, out_$i144: i8, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p149: ref, out_$i150: i8, out_$i151: i64, out_$p154: ref, out_$i155: i8, out_$i156: i32, out_$i157: i1, out_$p159: ref, out_$i160: i8, out_$i161: i64, out_$p162: ref, out_$i163: i64, out_$i164: i64, out_$i165: i1, out_$p167: ref, out_$i168: i16, out_$i169: i32, out_$i170: i1, out_$p172: ref, out_$i173: i16, out_$i174: i32, out_$i175: i32, out_$i176: i1, out_$i152: i64, out_$p177: ref, out_$p178: ref, out_$i179: i64, out_$p180: ref, out_$i181: i64, out_$i182: i64, out_$i183: i1, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i194: i8, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$p205: ref, out_$i206: i16, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$p211: ref, out_$i212: i16, out_$i213: i64, out_$i214: i64, out_$i215: i1, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i220: i64, out_$p221: ref, out_$i222: i32, out_$p227: ref, out_$i228: i16, out_$i229: i64, out_$i230: i64, out_$i231: i32, out_$i232: i64, out_$i233: i1, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i234: i64, out_$p235: ref, out_$i236: i32)
{

  entry:
    out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$i151, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i152, out_$p177, out_$p178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p201, out_$i202, out_$i203, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i67, out_$i68, out_$p69, out_$i70, out_$i234, out_$p235, out_$i236 := in_$p71, in_$p72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p132, in_$p133, in_$i134, in_$i135, in_$p136, in_$i137, in_$i138, in_$p139, in_$i140, in_$i141, in_$p143, in_$i144, in_$i145, in_$i146, in_$i147, in_$p149, in_$i150, in_$i151, in_$p154, in_$i155, in_$i156, in_$i157, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$i165, in_$p167, in_$i168, in_$i169, in_$i170, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i152, in_$p177, in_$p178, in_$i179, in_$p180, in_$i181, in_$i182, in_$i183, in_$p185, in_$p186, in_$p187, in_$p188, in_$i189, in_$i190, in_$i191, in_$p192, in_$p193, in_$i194, in_$i195, in_$i196, in_$p197, in_$i198, in_$i199, in_$p201, in_$i202, in_$i203, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$p216, in_$p217, in_$i218, in_$i219, in_$i220, in_$p221, in_$i222, in_$p227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i67, in_$i68, in_$p69, in_$i70, in_$i234, in_$p235, in_$i236;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8156;

  $bb86:
    assume out_$i233 == 1;
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$p69, out_$i70 := out_$i231, out_$i152, out_$p180, out_$i230;
    goto $bb86_dummy;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$i234, out_$p235, out_$i236 := out_$i230, out_$p180, out_$i231;
    assume true;
    goto $bb86;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$i233 := $ult.i64(out_$i232, in_$i62);
    goto corral_source_split_8368;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    out_$i232 := $p2i.ref.i64(out_$p180);
    goto corral_source_split_8367;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    out_$i231 := $add.i32(out_$i67, 1);
    call {:si_unique_call 1777} {:cexpr "count"} boogie_si_record_i32(out_$i231);
    goto corral_source_split_8366;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i230 := $add.i64(out_$i70, out_$i229);
    call {:si_unique_call 1776} {:cexpr "payload"} boogie_si_record_i64(out_$i230);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i229 := $zext.i16.i64(out_$i228);
    goto corral_source_split_8364;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i16($M.0, out_$p227);
    goto corral_source_split_8363;

  $bb85:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8362;

  $bb83:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i220, out_$p221, out_$i222 := out_$i70, out_$p69, out_$i67;
    assume true;
    goto $bb83;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i32(out_$i218, 0);
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} out_$i218 := fw_iso_context_queue(in_$p5, out_$p216, out_$p217, out_$i70);
    call {:si_unique_call 1771} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i218);
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p0, $mul.ref(0, 512)), $mul.ref(424, 1));
    goto corral_source_split_8332;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p216 := $add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1));
    goto corral_source_split_8331;

  $bb80:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i215 := $ugt.i64(out_$i214, in_$i32);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i214 := $add.i64(out_$i70, out_$i213);
    goto corral_source_split_8326;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    out_$i213 := $zext.i16.i64(out_$i212);
    goto corral_source_split_8325;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i16($M.0, out_$p211);
    goto corral_source_split_8324;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8323;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i196 == 1);
    goto $bb73;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i199 == 1);
    goto $bb73;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i209 == 1);
    goto $bb73;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i209 := $sgt.i32(out_$i208, 0);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i208 := $add.i32(out_$i203, out_$i207);
    goto corral_source_split_8318;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$i207 := $zext.i16.i32(out_$i206);
    goto corral_source_split_8317;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i16($M.0, out_$p205);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i8.i32(out_$i202);
    goto corral_source_split_8314;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    out_$i202 := $load.i8($M.0, out_$p201);
    goto corral_source_split_8313;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8312;

  $bb74:
    assume out_$i199 == 1;
    goto corral_source_split_8311;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 0);
    goto corral_source_split_8309;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i32($M.0, out_$p197);
    goto corral_source_split_8308;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(in_$p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8307;

  $bb71:
    assume out_$i196 == 1;
    goto corral_source_split_8306;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    out_$i196 := $ne.i32(out_$i195, 0);
    goto corral_source_split_8304;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    out_$i195 := $zext.i8.i32(out_$i194);
    goto corral_source_split_8303;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i8($M.0, out_$p193);
    goto corral_source_split_8302;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref(out_$p192, $mul.ref(2, 1));
    goto corral_source_split_8301;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p192 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_8300;

  $bb69:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i191 := $ne.i32(out_$i190, 0);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} out_$i190 := __copy_from_user(out_$p186, out_$p188, out_$i189);
    call {:si_unique_call 1769} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i189 := $trunc.i64.i32(out_$i152);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$p188 := $bitcast.ref.ref(out_$p187);
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(out_$p69, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$p186 := $bitcast.ref.ref(out_$p185);
    goto corral_source_split_8291;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8290;

  $bb66:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$i183 := $ugt.i64(out_$i181, out_$i182);
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    out_$i182 := $p2i.ref.i64(in_$p60);
    goto corral_source_split_8269;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    out_$i181 := $p2i.ref.i64(out_$p180);
    goto corral_source_split_8268;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    out_$p180 := $add.ref(out_$p178, $mul.ref(out_$i179, 4));
    goto corral_source_split_8267;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    out_$i179 := $udiv.i64(out_$i152, 4);
    goto corral_source_split_8266;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$p178 := $bitcast.ref.ref(out_$p177);
    goto corral_source_split_8265;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p69, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_8264;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_8263;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i68;
    goto $bb52;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i68;
    goto $bb52;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i68;
    goto $bb52;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i152 := out_$i151;
    goto $bb52;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i64(out_$i150);
    call {:si_unique_call 1767} {:cexpr "transmit_header_bytes"} boogie_si_record_i64(out_$i151);
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.0, out_$p149);
    goto corral_source_split_8260;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8259;

  $bb50:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    out_$i147 := $ne.i32(out_$i146, 0);
    goto corral_source_split_8233;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    out_$i146 := $and.i32(out_$i145, 3);
    goto corral_source_split_8232;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    out_$i145 := $zext.i8.i32(out_$i144);
    goto corral_source_split_8231;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i8($M.0, out_$p143);
    goto corral_source_split_8230;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i135 == 1;
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 0);
    goto corral_source_split_8225;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    out_$i134 := $load.i32($M.0, out_$p133);
    goto corral_source_split_8224;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8223;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p132, out_$i130);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8221;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    out_$i130 := $trunc.i32.i8(out_$i129);
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    out_$i129 := $lshr.i32(out_$i77, 24);
    goto corral_source_split_8219;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p123, out_$i128);
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i128 := $or.i8(out_$i127, out_$i126);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$i127 := $and.i8(out_$i124, 15);
    goto corral_source_split_8216;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    out_$i126 := $shl.i8(out_$i125, 4);
    goto corral_source_split_8215;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    out_$i125 := $and.i8(out_$i121, 15);
    goto corral_source_split_8214;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.0, out_$p123);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i121 := $trunc.i32.i8(out_$i120);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i120 := $and.i32(out_$i119, 15);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_8209;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i8(out_$i117);
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    out_$i117 := $lshr.i32(out_$i77, 20);
    goto corral_source_split_8207;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p111, out_$i116);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i116 := $or.i8(out_$i115, out_$i114);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$i115 := $and.i8(out_$i112, $sub.i8(0, 13));
    goto corral_source_split_8204;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i114 := $shl.i8(out_$i113, 2);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i113 := $and.i8(out_$i109, 3);
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i8($M.0, out_$p111);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i109 := $trunc.i32.i8(out_$i108);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$i108 := $and.i32(out_$i107, 3);
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i8.i32(out_$i106);
    goto corral_source_split_8197;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i8(out_$i105);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$i105 := $lshr.i32(out_$i77, 18);
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p99, out_$i104);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i104 := $or.i8(out_$i103, out_$i102);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$i103 := $and.i8(out_$i100, $sub.i8(0, 3));
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$i102 := $shl.i8(out_$i101, 1);
    goto corral_source_split_8191;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i8(out_$i97, 1);
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.0, out_$p99);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i32.i8(out_$i96);
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i95, 1);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$i93 := $lshr.i32(out_$i77, 17);
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p88, out_$i92);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i8(out_$i91, out_$i90);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i8(out_$i89, $sub.i8(0, 2));
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$i90 := $and.i8(out_$i86, 1);
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i8($M.0, out_$p88);
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8177;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i8(out_$i85);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i85 := $and.i32(out_$i84, 1);
    goto corral_source_split_8175;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    out_$i84 := $zext.i8.i32(out_$i83);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$i83 := $trunc.i32.i8(out_$i82);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$i82 := $lshr.i32(out_$i77, 16);
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p81, out_$i79);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8170;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i16(out_$i77);
    goto corral_source_split_8169;

  $bb34:
    assume !(out_$i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i78 := $ne.i32(out_$i76, 0);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i77 := $trunc.i64.i32(out_$i74);
    call {:si_unique_call 1766} {:cexpr "control"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i64.i32(out_$i75);
    call {:si_unique_call 1765} {:cexpr "__ret_gu"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p73);
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    out_$i74 := $extractvalue(out_$p72, 1);
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    out_$p73 := $extractvalue(out_$p72, 0);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p69, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 1764} out_$p72 := devirtbounce.35(0, out_$p71, 4);
    goto corral_source_split_8159;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} might_fault();
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb57:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    out_$i165 := $ne.i64(out_$i164, 0);
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$i164 := $urem.i64(out_$i161, out_$i163);
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i64($M.0, out_$p162);
    goto corral_source_split_8277;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i8.i64(out_$i160);
    goto corral_source_split_8275;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i160 := $load.i8($M.0, out_$p159);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8273;

  $bb55:
    assume !(out_$i157 == 1);
    goto corral_source_split_8272;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 0);
    goto corral_source_split_8244;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i8.i32(out_$i155);
    goto corral_source_split_8243;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i8($M.0, out_$p154);
    goto corral_source_split_8242;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_8241;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i138 == 1;
    goto corral_source_split_8239;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_8237;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    out_$i137 := $load.i32($M.0, out_$p136);
    goto corral_source_split_8236;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8235;

  $bb37:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb63:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i32(out_$i175, 0);
    goto corral_source_split_8286;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    out_$i175 := $and.i32(out_$i174, 3);
    goto corral_source_split_8285;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(out_$i173);
    goto corral_source_split_8284;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i16($M.0, out_$p172);
    goto corral_source_split_8283;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8282;

  $bb61:
    assume !(out_$i170 == 1);
    goto corral_source_split_8281;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    out_$i170 := $eq.i32(out_$i169, 0);
    goto corral_source_split_8255;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i16.i32(out_$i168);
    goto corral_source_split_8254;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i16($M.0, out_$p167);
    goto corral_source_split_8253;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 260)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8252;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb44:
    assume out_$i141 == 1;
    goto corral_source_split_8250;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_8248;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i32($M.0, out_$p139);
    goto corral_source_split_8247;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8246;

  $bb41:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb86_dummy:
    call {:si_unique_call 1} out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$i151, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i152, out_$p177, out_$p178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p201, out_$i202, out_$i203, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i67, out_$i68, out_$p69, out_$i70, out_$i234, out_$p235, out_$i236 := ioctl_queue_iso_loop_$bb31(in_$p0, in_$p2, in_$p5, in_$i32, in_$p60, in_$i62, out_$p71, out_$p72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$p133, out_$i134, out_$i135, out_$p136, out_$i137, out_$i138, out_$p139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i145, out_$i146, out_$i147, out_$p149, out_$i150, out_$i151, out_$p154, out_$i155, out_$i156, out_$i157, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$i165, out_$p167, out_$i168, out_$i169, out_$i170, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i152, out_$p177, out_$p178, out_$i179, out_$p180, out_$i181, out_$i182, out_$i183, out_$p185, out_$p186, out_$p187, out_$p188, out_$i189, out_$i190, out_$i191, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p201, out_$i202, out_$i203, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$p216, out_$p217, out_$i218, out_$i219, out_$i220, out_$p221, out_$i222, out_$p227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i67, out_$i68, out_$p69, out_$i70, out_$i234, out_$p235, out_$i236);
    return;

  exit:
    return;
}



procedure ioctl_queue_iso_loop_$bb31(in_$p0: ref, in_$p2: ref, in_$p5: ref, in_$i32: i64, in_$p60: ref, in_$i62: i64, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i64, in_$i75: i64, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i79: i16, in_$p81: ref, in_$i82: i32, in_$i83: i8, in_$i84: i32, in_$i85: i32, in_$i86: i8, in_$p88: ref, in_$i89: i8, in_$i90: i8, in_$i91: i8, in_$i92: i8, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p99: ref, in_$i100: i8, in_$i101: i8, in_$i102: i8, in_$i103: i8, in_$i104: i8, in_$i105: i32, in_$i106: i8, in_$i107: i32, in_$i108: i32, in_$i109: i8, in_$p111: ref, in_$i112: i8, in_$i113: i8, in_$i114: i8, in_$i115: i8, in_$i116: i8, in_$i117: i32, in_$i118: i8, in_$i119: i32, in_$i120: i32, in_$i121: i8, in_$p123: ref, in_$i124: i8, in_$i125: i8, in_$i126: i8, in_$i127: i8, in_$i128: i8, in_$i129: i32, in_$i130: i8, in_$p132: ref, in_$p133: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i32, in_$i141: i1, in_$p143: ref, in_$i144: i8, in_$i145: i32, in_$i146: i32, in_$i147: i1, in_$p149: ref, in_$i150: i8, in_$i151: i64, in_$p154: ref, in_$i155: i8, in_$i156: i32, in_$i157: i1, in_$p159: ref, in_$i160: i8, in_$i161: i64, in_$p162: ref, in_$i163: i64, in_$i164: i64, in_$i165: i1, in_$p167: ref, in_$i168: i16, in_$i169: i32, in_$i170: i1, in_$p172: ref, in_$i173: i16, in_$i174: i32, in_$i175: i32, in_$i176: i1, in_$i152: i64, in_$p177: ref, in_$p178: ref, in_$i179: i64, in_$p180: ref, in_$i181: i64, in_$i182: i64, in_$i183: i1, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$p188: ref, in_$i189: i32, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i194: i8, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$p201: ref, in_$i202: i8, in_$i203: i32, in_$p205: ref, in_$i206: i16, in_$i207: i32, in_$i208: i32, in_$i209: i1, in_$p211: ref, in_$i212: i16, in_$i213: i64, in_$i214: i64, in_$i215: i1, in_$p216: ref, in_$p217: ref, in_$i218: i32, in_$i219: i1, in_$i220: i64, in_$p221: ref, in_$i222: i32, in_$p227: ref, in_$i228: i16, in_$i229: i64, in_$i230: i64, in_$i231: i32, in_$i232: i64, in_$i233: i1, in_$i67: i32, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i234: i64, in_$p235: ref, in_$i236: i32) returns (out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i64, out_$i75: i64, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i79: i16, out_$p81: ref, out_$i82: i32, out_$i83: i8, out_$i84: i32, out_$i85: i32, out_$i86: i8, out_$p88: ref, out_$i89: i8, out_$i90: i8, out_$i91: i8, out_$i92: i8, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p99: ref, out_$i100: i8, out_$i101: i8, out_$i102: i8, out_$i103: i8, out_$i104: i8, out_$i105: i32, out_$i106: i8, out_$i107: i32, out_$i108: i32, out_$i109: i8, out_$p111: ref, out_$i112: i8, out_$i113: i8, out_$i114: i8, out_$i115: i8, out_$i116: i8, out_$i117: i32, out_$i118: i8, out_$i119: i32, out_$i120: i32, out_$i121: i8, out_$p123: ref, out_$i124: i8, out_$i125: i8, out_$i126: i8, out_$i127: i8, out_$i128: i8, out_$i129: i32, out_$i130: i8, out_$p132: ref, out_$p133: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i32, out_$i141: i1, out_$p143: ref, out_$i144: i8, out_$i145: i32, out_$i146: i32, out_$i147: i1, out_$p149: ref, out_$i150: i8, out_$i151: i64, out_$p154: ref, out_$i155: i8, out_$i156: i32, out_$i157: i1, out_$p159: ref, out_$i160: i8, out_$i161: i64, out_$p162: ref, out_$i163: i64, out_$i164: i64, out_$i165: i1, out_$p167: ref, out_$i168: i16, out_$i169: i32, out_$i170: i1, out_$p172: ref, out_$i173: i16, out_$i174: i32, out_$i175: i32, out_$i176: i1, out_$i152: i64, out_$p177: ref, out_$p178: ref, out_$i179: i64, out_$p180: ref, out_$i181: i64, out_$i182: i64, out_$i183: i1, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$p188: ref, out_$i189: i32, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i194: i8, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$p201: ref, out_$i202: i8, out_$i203: i32, out_$p205: ref, out_$i206: i16, out_$i207: i32, out_$i208: i32, out_$i209: i1, out_$p211: ref, out_$i212: i16, out_$i213: i64, out_$i214: i64, out_$i215: i1, out_$p216: ref, out_$p217: ref, out_$i218: i32, out_$i219: i1, out_$i220: i64, out_$p221: ref, out_$i222: i32, out_$p227: ref, out_$i228: i16, out_$i229: i64, out_$i230: i64, out_$i231: i32, out_$i232: i64, out_$i233: i1, out_$i67: i32, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i234: i64, out_$p235: ref, out_$i236: i32);
  modifies $M.0;



implementation fw_iso_buffer_lookup_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i18: i64, in_$i22: i64, in_$i23: i32, in_$i24: i64, in_$i25: i1, in_$i6: i64) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i18: i64, out_$i22: i64, out_$i23: i32, out_$i24: i64, out_$i25: i1, out_$i6: i64)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i6 := in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i22, in_$i23, in_$i24, in_$i25, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_9870;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i22;
    goto $bb10_dummy;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i64(out_$i22, out_$i24);
    goto corral_source_split_9892;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    out_$i24 := $sext.i32.i64(out_$i23);
    goto corral_source_split_9891;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, in_$p2);
    goto corral_source_split_9890;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i6, 1);
    call {:si_unique_call 2035} {:cexpr "i"} boogie_si_record_i64(out_$i22);
    goto corral_source_split_9889;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i6, out_$i14;
    assume true;
    goto $bb7;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    out_$i16 := $ule.i64(out_$i15, 4095);
    goto corral_source_split_9881;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i64(out_$i14, 1);
    goto corral_source_split_9880;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i64(in_$i1, out_$i13);
    call {:si_unique_call 2034} {:cexpr "offset"} boogie_si_record_i64(out_$i14);
    goto corral_source_split_9879;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i64($M.0, out_$p12);
    call {:si_unique_call 2033} {:cexpr "address"} boogie_si_record_i64(out_$i13);
    goto corral_source_split_9878;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_9877;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_9876;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_9875;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref(out_$p8, $mul.ref(out_$i6, 8));
    goto corral_source_split_9874;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_9873;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_9872;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i6 := fw_iso_buffer_lookup_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$p7, out_$p8, out_$p9, out_$p10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i22, out_$i23, out_$i24, out_$i25, out_$i6);
    return;

  exit:
    return;
}



procedure fw_iso_buffer_lookup_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i64, in_$i15: i64, in_$i16: i1, in_$i17: i64, in_$i18: i64, in_$i22: i64, in_$i23: i32, in_$i24: i64, in_$i25: i1, in_$i6: i64) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i64, out_$i15: i64, out_$i16: i1, out_$i17: i64, out_$i18: i64, out_$i22: i64, out_$i23: i32, out_$i24: i64, out_$i25: i1, out_$i6: i64);



implementation show_immediate_loop_$bb7(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i30: i32, in_$i31: i1) returns (out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$p20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31 := in_$p20, in_$i21, in_$i22, in_$i23, in_$i30, in_$i31;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb13_dummy;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_10177;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} out_$i30 := fw_csr_iterator_next(in_$p3, in_$p4, in_$p5);
    call {:si_unique_call 2103} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_10176;

  $bb10:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, out_$i22);
    goto corral_source_split_10163;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.27, in_$p4);
    goto corral_source_split_10162;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_10161;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p6, $mul.ref(0, 56)), $mul.ref(48, 1));
    goto corral_source_split_10160;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31 := show_immediate_loop_$bb7(in_$p3, in_$p4, in_$p5, in_$p6, out_$p20, out_$i21, out_$i22, out_$i23, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure show_immediate_loop_$bb7(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i30: i32, in_$i31: i1) returns (out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i30: i32, out_$i31: i1);
  modifies $M.27, $M.28, $M.0;



implementation show_text_leaf_loop_$bb12(in_$p18: ref, in_$i28: i32, in_$i29: i1, in_$i27: i32, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i30: i32) returns (out_$i28: i32, out_$i29: i1, out_$i27: i32, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i30: i32)
{

  entry:
    out_$i28, out_$i29, out_$i27, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i30 := in_$i28, in_$i29, in_$i27, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i30;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10217;

  $bb14:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i27 := out_$i28;
    goto $bb14_dummy;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i28;
    assume true;
    goto $bb14;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    out_$i29 := $sgt.i32(out_$i28, 0);
    goto corral_source_split_10231;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i28 := $sub.i32(out_$i27, 1);
    call {:si_unique_call 2112} {:cexpr "ret"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_10230;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume out_$i41 == 1;
    goto corral_source_split_10235;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i27;
    assume true;
    goto $bb16;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_10228;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    out_$i40 := $and.i32(out_$i39, 32);
    goto corral_source_split_10227;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_10226;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.0, out_$p37);
    goto corral_source_split_10225;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(_ctype, $mul.ref(0, 0)), $mul.ref(out_$i36, 1));
    goto corral_source_split_10224;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i35);
    goto corral_source_split_10223;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i34);
    goto corral_source_split_10222;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i8($M.0, out_$p33);
    goto corral_source_split_10221;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(in_$p18, $mul.ref(out_$i32, 1));
    goto corral_source_split_10220;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i64(out_$i31, $sub.i64(0, 1));
    goto corral_source_split_10219;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i27);
    goto corral_source_split_10218;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i28, out_$i29, out_$i27, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i30 := show_text_leaf_loop_$bb12(in_$p18, out_$i28, out_$i29, out_$i27, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i30);
    return;

  exit:
    return;
}



procedure show_text_leaf_loop_$bb12(in_$p18: ref, in_$i28: i32, in_$i29: i1, in_$i27: i32, in_$i31: i64, in_$i32: i64, in_$p33: ref, in_$i34: i8, in_$i35: i32, in_$i36: i64, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i30: i32) returns (out_$i28: i32, out_$i29: i1, out_$i27: i32, out_$i31: i64, out_$i32: i64, out_$p33: ref, out_$i34: i8, out_$i35: i32, out_$i36: i64, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i30: i32);



implementation units_show_loop_$bb15(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i14: i32, in_$i15: i1, in_$i13: i32, in_$i32: i32, in_$i33: i1, in_$i34: i32) returns (out_$i14: i32, out_$i15: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32)
{

  entry:
    out_$i14, out_$i15, out_$i32, out_$i33, out_$i34 := in_$i14, in_$i15, in_$i32, in_$i33, in_$i34;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    goto $bb16_dummy;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$i34 := in_$i13;
    assume true;
    goto $bb16;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} out_$i32 := fw_csr_iterator_next(in_$p3, in_$p4, in_$p5);
    call {:si_unique_call 2138} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_10304;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 209);
    goto corral_source_split_10301;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.27, in_$p4);
    goto corral_source_split_10300;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i32, out_$i33, out_$i34 := units_show_loop_$bb15(in_$p3, in_$p4, in_$p5, out_$i14, out_$i15, in_$i13, out_$i32, out_$i33, out_$i34);
    return;

  exit:
    return;
}



procedure units_show_loop_$bb15(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i14: i32, in_$i15: i1, in_$i13: i32, in_$i32: i32, in_$i33: i1, in_$i34: i32) returns (out_$i14: i32, out_$i15: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32);
  modifies $M.27, $M.28, $M.0;



implementation units_show_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i14: i32, in_$i15: i1, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i13: i32, in_$i32: i32, in_$i33: i1, in_$i31: i32, in_$i34: i32) returns (out_$i14: i32, out_$i15: i1, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i13: i32, out_$i32: i32, out_$i33: i1, out_$i31: i32, out_$i34: i32)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i13, out_$i32, out_$i33, out_$i31, out_$i34 := in_$i14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i30, in_$i13, in_$i32, in_$i33, in_$i31, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_10298;

  $bb13:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i25;
    goto $bb13_dummy;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i25;
    assume true;
    goto $bb13;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_10326;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} out_$i29 := fw_csr_iterator_next(in_$p3, in_$p4, in_$p5);
    call {:si_unique_call 2144} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_10325;

  $bb10:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i25;
    assume true;
    goto $bb10;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, 4077);
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i13, out_$i24);
    call {:si_unique_call 2141} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_10316;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} out_$i24 := units_sprintf(out_$p17, out_$p23);
    call {:si_unique_call 2140} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p19, $mul.ref(out_$i22, 4));
    goto corral_source_split_10314;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i64(out_$i21, $sub.i64(0, 1));
    goto corral_source_split_10313;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_10312;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.28, in_$p5);
    goto corral_source_split_10311;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_10310;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p2, $mul.ref(out_$i16, 1));
    goto corral_source_split_10308;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i13);
    goto corral_source_split_10307;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i14, 209);
    goto corral_source_split_10301;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.27, in_$p4);
    goto corral_source_split_10300;

  $bb15:
    call out_$i14, out_$i15, out_$i32, out_$i33, out_$i34 := units_show_loop_$bb15(in_$p3, in_$p4, in_$p5, out_$i14, out_$i15, out_$i13, out_$i32, out_$i33, out_$i34);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i33 == 1;
    assume false;
    return;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i13;
    assume true;
    goto $bb16;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} out_$i32 := fw_csr_iterator_next(in_$p3, in_$p4, in_$p5);
    call {:si_unique_call 2138} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_10304;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_10303;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i13, out_$i32, out_$i33, out_$i31, out_$i34 := units_show_loop_$bb4(in_$p2, in_$p3, in_$p4, in_$p5, out_$i14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$i13, out_$i32, out_$i33, out_$i31, out_$i34);
    return;

  exit:
    return;
}



procedure units_show_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i14: i32, in_$i15: i1, in_$i16: i64, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i29: i32, in_$i30: i1, in_$i13: i32, in_$i32: i32, in_$i33: i1, in_$i31: i32, in_$i34: i32) returns (out_$i14: i32, out_$i15: i1, out_$i16: i64, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i29: i32, out_$i30: i1, out_$i13: i32, out_$i32: i32, out_$i33: i1, out_$i31: i32, out_$i34: i32);
  modifies $M.27, $M.28, $M.0, $CurrAddr;



implementation units_sprintf_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i18: i32, in_$i16: i32, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_$i9: i32, in_$i10: i32, in_$i21: i32, in_$i22: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i18: i32, out_$i16: i32, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_$i9: i32, out_$i10: i32, out_$i21: i32, out_$i22: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i18, out_$i16, out_$i17, out_$i19, out_$i20, out_$i9, out_$i10, out_$i21, out_$i22 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i18, in_$i16, in_$i17, in_$i19, in_$i20, in_$i9, in_$i10, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10347;

  $bb16:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i17, out_$i16;
    goto $bb16_dummy;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i16, out_$i17;
    assume true;
    goto $bb16;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_10365;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} out_$i19 := fw_csr_iterator_next(in_$p2, in_$p3, in_$p4);
    call {:si_unique_call 2154} {:cexpr "tmp"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10364;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10363;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i10, out_$i9;
    goto $bb15;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i10, out_$i18;
    goto $bb15;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i15, out_$i9;
    goto $bb15;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.28, in_$p4);
    call {:si_unique_call 2151} {:cexpr "specifier_id"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_10354;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_10352;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i11, 18);
    goto corral_source_split_10350;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.27, in_$p3);
    goto corral_source_split_10349;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.28, in_$p4);
    call {:si_unique_call 2152} {:cexpr "version"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_10361;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_10359;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 19);
    goto corral_source_split_10357;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.27, in_$p3);
    goto corral_source_split_10356;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i18, out_$i16, out_$i17, out_$i19, out_$i20, out_$i9, out_$i10, out_$i21, out_$i22 := units_sprintf_loop_$bb4(in_$p2, in_$p3, in_$p4, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i18, out_$i16, out_$i17, out_$i19, out_$i20, out_$i9, out_$i10, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure units_sprintf_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i18: i32, in_$i16: i32, in_$i17: i32, in_$i19: i32, in_$i20: i1, in_$i9: i32, in_$i10: i32, in_$i21: i32, in_$i22: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i18: i32, out_$i16: i32, out_$i17: i32, out_$i19: i32, out_$i20: i1, out_$i9: i32, out_$i10: i32, out_$i21: i32, out_$i22: i32);
  modifies $M.27, $M.28, $M.0;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref)
{

  entry:
    out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60 := in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2273} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_10766;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb30_dummy;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} ldv_free(out_$p47);
    goto corral_source_split_10812;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10811;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} ldv_free(out_$p35);
    goto corral_source_split_10810;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1455:
    goto corral_source_split_10808;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} ldv_file_operations_instance_write_0_4(out_$p46, in_$p9, out_$p35, $u0, out_$p37);
    goto SeqInstr_1454;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10806;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_10805;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_10785;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} ldv_assume(out_$i40);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_10781;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i64(out_$i38, 2147479552);
    goto corral_source_split_10780;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_10779;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10777;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_10774;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_10767;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1458:
    goto corral_source_split_10816;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} ldv_file_operations_instance_callback_0_30($u10, in_$p9, $u4, $u0);
    goto SeqInstr_1457;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i51 == 1;
    goto corral_source_split_10814;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 1);
    goto corral_source_split_10801;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} out_$i50 := ldv_undef_int();
    call {:si_unique_call 2281} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_10796;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_10788;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_free(out_$p60);
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} ldv_free(out_$p57);
    goto corral_source_split_10826;

  SeqInstr_1461:
    goto corral_source_split_10825;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_file_operations_instance_callback_0_27($u11, in_$p9, out_$p57, $u0, out_$p59);
    goto SeqInstr_1460;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_10824;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} out_$p58 := ldv_xmalloc(8);
    goto corral_source_split_10823;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} out_$p57 := ldv_xmalloc(1);
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i52 == 1;
    goto corral_source_split_10820;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i50, 2);
    goto corral_source_split_10818;

  $bb32:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1464:
    goto corral_source_split_10834;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_file_operations_instance_callback_0_26($u12, in_$p9, in_$p14);
    goto SeqInstr_1463;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i53 == 1;
    goto corral_source_split_10832;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i50, 3);
    goto corral_source_split_10830;

  $bb36:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1467:
    goto corral_source_split_10840;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_file_operations_instance_callback_0_25($u13, in_$p9, $u14);
    goto SeqInstr_1466;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i54 == 1;
    goto corral_source_split_10838;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i50, 4);
    goto corral_source_split_10836;

  $bb40:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_file_operations_instance_callback_0_22($u15, in_$p9, $u0, $u4);
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i55 == 1;
    goto corral_source_split_10844;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i50, 5);
    goto corral_source_split_10842;

  $bb44:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1470:
    goto corral_source_split_10852;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} ldv_file_operations_instance_callback_0_5($u10, in_$p9, $u4, $u0);
    goto SeqInstr_1469;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i56 == 1;
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i50, 6);
    goto corral_source_split_10848;

  $bb48:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} ldv_stop();
    goto corral_source_split_10854;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} ldv_stop();
    goto corral_source_split_10803;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7: ref, in_$p9: ref, in_$p14: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref);
  modifies $M.0, $M.26, $CurrAddr, assertsPassed, $M.49, $M.50, $M.1, $M.2, $M.51, $M.55, $M.56, $M.10, $M.15, $M.24, $M.34, $M.38, $M.39, $M.3, $M.23, $M.40, $M.31, $M.45, $M.46, $M.27, $M.28, $M.13, $M.25, $M.16, $M.47, $M.48, $M.11, $M.12, $M.43, $M.14;



implementation ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref)
{

  entry:
    out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60 := in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$i44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(112, 1));
    goto corral_source_split_10749;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i28 == 1;
    goto $bb12_dummy;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_10770;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} out_$i27 := ldv_undef_int();
    call {:si_unique_call 2275} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_10769;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_1452:
    goto corral_source_split_10794;

  SeqInstr_1451:
    assume assertsPassed;
    goto SeqInstr_1452;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} ldv_file_operations_instance_release_0_2(out_$p49, in_$p11, in_$p9);
    goto SeqInstr_1451;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_10793;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(128, 1));
    goto corral_source_split_10792;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i33 == 1;
    goto corral_source_split_10790;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_10788;

  $bb15:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_10767;

  $bb10:
    call out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60 := ldv_file_operations_file_operations_instance_0_loop_$bb10(in_$p7, in_$p9, in_$p14, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60);
    goto $bb10_last;

  $bb10_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2273} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_10766;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb30:
    assume {:verifier.code 0} true;
    assume false;
    return;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} ldv_free(out_$p47);
    goto corral_source_split_10812;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_10811;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} ldv_free(out_$p35);
    goto corral_source_split_10810;

  $bb28:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    goto $bb29;

  SeqInstr_1455:
    goto corral_source_split_10808;

  SeqInstr_1454:
    assume assertsPassed;
    goto SeqInstr_1455;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} ldv_file_operations_instance_write_0_4(out_$p46, in_$p9, out_$p35, $u0, out_$p37);
    goto SeqInstr_1454;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_10807;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10806;

  $bb27:
    assume out_$i44 == 1;
    goto corral_source_split_10805;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_10786;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_10785;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p7, $mul.ref(0, 240)), $mul.ref(24, 1));
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} ldv_assume(out_$i40);
    goto corral_source_split_10782;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i1.i32(out_$i39);
    goto corral_source_split_10781;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    out_$i39 := $ule.i64(out_$i38, 2147479552);
    goto corral_source_split_10780;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(in_$p14);
    goto corral_source_split_10779;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} out_$p36 := ldv_xmalloc(8);
    goto corral_source_split_10777;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} out_$p35 := ldv_xmalloc(1);
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i32 == 1;
    goto corral_source_split_10774;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb56;

  SeqInstr_1458:
    goto corral_source_split_10816;

  SeqInstr_1457:
    assume assertsPassed;
    goto SeqInstr_1458;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} ldv_file_operations_instance_callback_0_30($u10, in_$p9, $u4, $u0);
    goto SeqInstr_1457;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i51 == 1;
    goto corral_source_split_10814;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 1);
    goto corral_source_split_10801;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} out_$i50 := ldv_undef_int();
    call {:si_unique_call 2281} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_10800;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i34 == 1;
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_10796;

  $bb19:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2291} ldv_free(out_$p60);
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    out_$p60 := $bitcast.ref.ref(out_$p59);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2290} ldv_free(out_$p57);
    goto corral_source_split_10826;

  SeqInstr_1461:
    goto corral_source_split_10825;

  SeqInstr_1460:
    assume assertsPassed;
    goto SeqInstr_1461;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2289} ldv_file_operations_instance_callback_0_27($u11, in_$p9, out_$p57, $u0, out_$p59);
    goto SeqInstr_1460;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_10824;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} out_$p58 := ldv_xmalloc(8);
    goto corral_source_split_10823;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} out_$p57 := ldv_xmalloc(1);
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i52 == 1;
    goto corral_source_split_10820;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i50, 2);
    goto corral_source_split_10818;

  $bb32:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_1464:
    goto corral_source_split_10834;

  SeqInstr_1463:
    assume assertsPassed;
    goto SeqInstr_1464;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2292} ldv_file_operations_instance_callback_0_26($u12, in_$p9, in_$p14);
    goto SeqInstr_1463;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i53 == 1;
    goto corral_source_split_10832;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i50, 3);
    goto corral_source_split_10830;

  $bb36:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_1467:
    goto corral_source_split_10840;

  SeqInstr_1466:
    assume assertsPassed;
    goto SeqInstr_1467;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2293} ldv_file_operations_instance_callback_0_25($u13, in_$p9, $u14);
    goto SeqInstr_1466;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i54 == 1;
    goto corral_source_split_10838;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i50, 4);
    goto corral_source_split_10836;

  $bb40:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2294} ldv_file_operations_instance_callback_0_22($u15, in_$p9, $u0, $u4);
    goto corral_source_split_10846;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume out_$i55 == 1;
    goto corral_source_split_10844;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i50, 5);
    goto corral_source_split_10842;

  $bb44:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_1470:
    goto corral_source_split_10852;

  SeqInstr_1469:
    assume assertsPassed;
    goto SeqInstr_1470;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2295} ldv_file_operations_instance_callback_0_5($u10, in_$p9, $u4, $u0);
    goto SeqInstr_1469;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i56 == 1;
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i50, 6);
    goto corral_source_split_10848;

  $bb48:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2296} ldv_stop();
    goto corral_source_split_10854;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb52:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} ldv_stop();
    goto corral_source_split_10803;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} ldv_assume(out_$i24);
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_10758;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i20, 0);
    goto corral_source_split_10757;

  $bb8:
    assume out_$i22 == 1;
    goto corral_source_split_10756;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} out_$i21 := ldv_undef_int();
    call {:si_unique_call 2269} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_10753;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} out_$i20 := ldv_filter_err_code(out_$i19);
    call {:si_unique_call 2267} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_10752;

  SeqInstr_1449:
    call {:si_unique_call 2265} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10751;

  SeqInstr_1448:
    assume assertsPassed;
    goto SeqInstr_1449;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} out_$i19 := ldv_file_operations_instance_probe_0_12(out_$p18, in_$p11, in_$p9);
    goto SeqInstr_1448;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_10750;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} ldv_assume(out_$i26);
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i20, 0);
    goto corral_source_split_10762;

  $bb9:
    assume !(out_$i22 == 1);
    goto corral_source_split_10761;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60 := ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7, in_$p9, in_$p11, in_$p14, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$i44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60);
    return;

  exit:
    return;
}



procedure ldv_file_operations_file_operations_instance_0_loop_$bb7(in_$p7: ref, in_$p9: ref, in_$p11: ref, in_$p14: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i32, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref) returns (out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i32, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref);
  modifies $M.0, $M.15, $M.24, $M.26, $CurrAddr, assertsPassed, $M.1, $M.2, $M.10, $M.31, $M.3, $M.23, $M.40, $M.16, $M.27, $M.28, $M.34, $M.13, $M.11, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.12, $M.47, $M.48, $M.38, $M.39, $M.43, $M.25, $M.14;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation ldv_pm_pm_ops_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref)
{

  entry:
    out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$p85, in_$p86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$p98, in_$p99, in_$p100, in_$i101, in_$i102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$i108, in_$p109, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p115, in_$p116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p136, in_$p137, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p143, in_$p144, in_$i145, in_$i146, in_$p147, in_$p148, in_$p149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2430} out_$i1 := ldv_undef_int();
    call {:si_unique_call 2431} {:cexpr "tmp"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_11148;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb22_dummy;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_1587:
    goto corral_source_split_11185;

  SeqInstr_1586:
    assume assertsPassed;
    goto SeqInstr_1587;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} ldv_pm_ops_instance_runtime_idle_1_27(out_$p12, $u17);
    goto SeqInstr_1586;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.65, out_$p11);
    goto corral_source_split_11184;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_11183;

  $bb19:
    assume out_$i10 == 1;
    goto corral_source_split_11182;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i64(out_$i9, 0);
    goto corral_source_split_11156;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_11155;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.64, out_$p7);
    goto corral_source_split_11154;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(176, 1));
    goto corral_source_split_11153;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb2:
    assume out_$i2 == 1;
    goto corral_source_split_11151;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    out_$i2 := $eq.i32(out_$i1, 1);
    goto corral_source_split_11149;

  $bb27:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_1593:
    goto corral_source_split_11200;

  SeqInstr_1592:
    assume assertsPassed;
    goto SeqInstr_1593;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} ldv_pm_ops_instance_runtime_resume_1_24(out_$p24, $u17);
    goto SeqInstr_1592;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.69, out_$p23);
    goto corral_source_split_11199;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_11198;

  $bb26:
    assume out_$i22 == 1;
    goto corral_source_split_11197;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_11195;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_11194;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.68, out_$p19);
    goto corral_source_split_11193;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_11192;

  $bb24:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1590:
    goto corral_source_split_11190;

  SeqInstr_1589:
    assume assertsPassed;
    goto SeqInstr_1590;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} ldv_pm_ops_instance_runtime_suspend_1_25(out_$p18, $u17);
    goto SeqInstr_1589;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.67, out_$p17);
    goto corral_source_split_11189;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_11188;

  $bb23:
    assume out_$i16 == 1;
    goto corral_source_split_11187;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_11165;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_11164;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.66, out_$p13);
    goto corral_source_split_11163;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(160, 1));
    goto corral_source_split_11162;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i3 == 1;
    goto corral_source_split_11160;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i3 := $eq.i32(out_$i1, 2);
    goto corral_source_split_11158;

  $bb3:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb111:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    goto $bb112;

  SeqInstr_1653:
    goto corral_source_split_11425;

  SeqInstr_1652:
    assume assertsPassed;
    goto SeqInstr_1653;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} ldv_pm_ops_instance_complete_1_3(out_$p154, $u17);
    goto SeqInstr_1652;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.109, out_$p153);
    goto corral_source_split_11424;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_11423;

  $bb110:
    assume out_$i152 == 1;
    goto corral_source_split_11422;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i64(out_$i151, 0);
    goto corral_source_split_11300;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    out_$i151 := $p2i.ref.i64(out_$p150);
    goto corral_source_split_11299;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.108, out_$p149);
    goto corral_source_split_11298;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_11297;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb64:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_1614:
    goto corral_source_split_11295;

  SeqInstr_1613:
    assume assertsPassed;
    goto SeqInstr_1614;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} ldv_pm_ops_instance_resume_1_16(out_$p72, $u17);
    goto SeqInstr_1613;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.83, out_$p71);
    goto corral_source_split_11294;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_11293;

  $bb63:
    assume out_$i70 == 1;
    goto corral_source_split_11292;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    out_$i70 := $ne.i64(out_$i69, 0);
    goto corral_source_split_11275;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_11274;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.82, out_$p67);
    goto corral_source_split_11273;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_11272;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_1605:
    goto corral_source_split_11270;

  SeqInstr_1604:
    assume assertsPassed;
    goto SeqInstr_1605;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} ldv_pm_ops_instance_resume_noirq_1_19(out_$p54, $u17);
    goto SeqInstr_1604;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.77, out_$p53);
    goto corral_source_split_11269;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_11268;

  $bb53:
    assume out_$i52 == 1;
    goto corral_source_split_11267;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_11265;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_11264;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.76, out_$p49);
    goto corral_source_split_11263;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(120, 1));
    goto corral_source_split_11262;

  $bb51:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_1602:
    goto corral_source_split_11260;

  SeqInstr_1601:
    assume assertsPassed;
    goto SeqInstr_1602;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} ldv_pm_ops_instance_suspend_noirq_1_20(out_$p48, $u17);
    goto SeqInstr_1601;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.75, out_$p47);
    goto corral_source_split_11259;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_11258;

  $bb50:
    assume out_$i46 == 1;
    goto corral_source_split_11257;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_11249;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_11248;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.74, out_$p43);
    goto corral_source_split_11247;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(112, 1));
    goto corral_source_split_11246;

  $bb48:
    assume out_$i42 == 1;
    goto corral_source_split_11245;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_11243;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} out_$i41 := ldv_undef_int();
    call {:si_unique_call 2442} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_11242;

  $bb46:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    goto $bb47;

  SeqInstr_1599:
    goto corral_source_split_11240;

  SeqInstr_1598:
    assume assertsPassed;
    goto SeqInstr_1599;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} ldv_pm_ops_instance_suspend_1_21(out_$p40, $u17);
    goto SeqInstr_1598;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.73, out_$p39);
    goto corral_source_split_11239;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_11238;

  $bb45:
    assume out_$i38 == 1;
    goto corral_source_split_11237;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_11215;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_11214;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.72, out_$p35);
    goto corral_source_split_11213;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_11212;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i32 == 1;
    goto corral_source_split_11210;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i32(out_$i31, 1);
    goto corral_source_split_11208;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} out_$i31 := ldv_undef_int();
    call {:si_unique_call 2438} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_11207;

  $bb30:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_1596:
    goto corral_source_split_11205;

  SeqInstr_1595:
    assume assertsPassed;
    goto SeqInstr_1596;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} ldv_pm_ops_instance_prepare_1_22(out_$p30, $u17);
    goto SeqInstr_1595;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.71, out_$p29);
    goto corral_source_split_11204;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_11203;

  $bb29:
    assume out_$i28 == 1;
    goto corral_source_split_11202;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_11174;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_11173;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.70, out_$p25);
    goto corral_source_split_11172;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_11171;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb10:
    assume out_$i4 == 1;
    goto corral_source_split_11169;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    out_$i5 := out_$i1;
    assume true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i1, 3);
    goto corral_source_split_11167;

  $bb7:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb61:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_1611:
    goto corral_source_split_11290;

  SeqInstr_1610:
    assume assertsPassed;
    goto SeqInstr_1611;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} ldv_pm_ops_instance_resume_early_1_17(out_$p66, $u17);
    goto SeqInstr_1610;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.81, out_$p65);
    goto corral_source_split_11289;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_11288;

  $bb60:
    assume out_$i64 == 1;
    goto corral_source_split_11287;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_11285;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_11284;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.80, out_$p61);
    goto corral_source_split_11283;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(72, 1));
    goto corral_source_split_11282;

  $bb58:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_1608:
    goto corral_source_split_11280;

  SeqInstr_1607:
    assume assertsPassed;
    goto SeqInstr_1608;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} ldv_pm_ops_instance_suspend_late_1_18(out_$p60, $u17);
    goto SeqInstr_1607;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.79, out_$p59);
    goto corral_source_split_11279;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_11278;

  $bb57:
    assume out_$i58 == 1;
    goto corral_source_split_11277;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_11255;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_11254;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.78, out_$p55);
    goto corral_source_split_11253;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(64, 1));
    goto corral_source_split_11252;

  $bb49:
    assume !(out_$i42 == 1);
    goto corral_source_split_11251;

  $bb86:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_1632:
    goto corral_source_split_11360;

  SeqInstr_1631:
    assume assertsPassed;
    goto SeqInstr_1632;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} ldv_pm_ops_instance_thaw_1_10(out_$p110, $u17);
    goto SeqInstr_1631;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.95, out_$p109);
    goto corral_source_split_11359;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_11358;

  $bb85:
    assume out_$i108 == 1;
    goto corral_source_split_11357;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    out_$i108 := $ne.i64(out_$i107, 0);
    goto corral_source_split_11340;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_11339;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    out_$p106 := $load.ref($M.94, out_$p105);
    goto corral_source_split_11338;

  $bb78:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(40, 1));
    goto corral_source_split_11337;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_1623:
    goto corral_source_split_11335;

  SeqInstr_1622:
    assume assertsPassed;
    goto SeqInstr_1623;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} ldv_pm_ops_instance_thaw_early_1_13(out_$p92, $u17);
    goto SeqInstr_1622;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.89, out_$p91);
    goto corral_source_split_11334;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_11333;

  $bb75:
    assume out_$i90 == 1;
    goto corral_source_split_11332;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i64(out_$i89, 0);
    goto corral_source_split_11330;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    out_$i89 := $p2i.ref.i64(out_$p88);
    goto corral_source_split_11329;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.88, out_$p87);
    goto corral_source_split_11328;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(88, 1));
    goto corral_source_split_11327;

  $bb73:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_1620:
    goto corral_source_split_11325;

  SeqInstr_1619:
    assume assertsPassed;
    goto SeqInstr_1620;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} ldv_pm_ops_instance_freeze_late_1_14(out_$p86, $u17);
    goto SeqInstr_1619;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.87, out_$p85);
    goto corral_source_split_11324;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_11323;

  $bb72:
    assume out_$i84 == 1;
    goto corral_source_split_11322;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i64(out_$i83, 0);
    goto corral_source_split_11314;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_11313;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.86, out_$p81);
    goto corral_source_split_11312;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_11311;

  $bb70:
    assume out_$i80 == 1;
    goto corral_source_split_11310;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_11308;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} out_$i79 := ldv_undef_int();
    call {:si_unique_call 2450} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_11307;

  $bb68:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_1617:
    goto corral_source_split_11305;

  SeqInstr_1616:
    assume assertsPassed;
    goto SeqInstr_1617;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} ldv_pm_ops_instance_freeze_1_15(out_$p78, $u17);
    goto SeqInstr_1616;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.85, out_$p77);
    goto corral_source_split_11304;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11303;

  $bb67:
    assume out_$i76 == 1;
    goto corral_source_split_11302;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_11224;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_11223;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.84, out_$p73);
    goto corral_source_split_11222;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_11221;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i33 == 1;
    goto corral_source_split_11219;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i31, 2);
    goto corral_source_split_11217;

  $bb33:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb83:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_1629:
    goto corral_source_split_11355;

  SeqInstr_1628:
    assume assertsPassed;
    goto SeqInstr_1629;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} ldv_pm_ops_instance_thaw_noirq_1_11(out_$p104, $u17);
    goto SeqInstr_1628;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.93, out_$p103);
    goto corral_source_split_11354;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_11353;

  $bb82:
    assume out_$i102 == 1;
    goto corral_source_split_11352;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i64(out_$i101, 0);
    goto corral_source_split_11350;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    out_$i101 := $p2i.ref.i64(out_$p100);
    goto corral_source_split_11349;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    out_$p100 := $load.ref($M.92, out_$p99);
    goto corral_source_split_11348;

  $bb81:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(136, 1));
    goto corral_source_split_11347;

  $bb80:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_1626:
    goto corral_source_split_11345;

  SeqInstr_1625:
    assume assertsPassed;
    goto SeqInstr_1626;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} ldv_pm_ops_instance_freeze_noirq_1_12(out_$p98, $u17);
    goto SeqInstr_1625;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.91, out_$p97);
    goto corral_source_split_11344;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_11343;

  $bb79:
    assume out_$i96 == 1;
    goto corral_source_split_11342;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_11320;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_11319;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.90, out_$p93);
    goto corral_source_split_11318;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(128, 1));
    goto corral_source_split_11317;

  $bb71:
    assume !(out_$i80 == 1);
    goto corral_source_split_11316;

  $bb107:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_1650:
    goto corral_source_split_11420;

  SeqInstr_1649:
    assume assertsPassed;
    goto SeqInstr_1650;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} ldv_pm_ops_instance_restore_1_4(out_$p148, $u17);
    goto SeqInstr_1649;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    out_$p148 := $load.ref($M.107, out_$p147);
    goto corral_source_split_11419;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11418;

  $bb106:
    assume out_$i146 == 1;
    goto corral_source_split_11417;

  corral_source_split_11400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_11400;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    out_$i145 := $p2i.ref.i64(out_$p144);
    goto corral_source_split_11399;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    out_$p144 := $load.ref($M.106, out_$p143);
    goto corral_source_split_11398;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_11397;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb97:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_1641:
    goto corral_source_split_11395;

  SeqInstr_1640:
    assume assertsPassed;
    goto SeqInstr_1641;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} ldv_pm_ops_instance_restore_early_1_7(out_$p130, $u17);
    goto SeqInstr_1640;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    out_$p130 := $load.ref($M.101, out_$p129);
    goto corral_source_split_11394;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_11393;

  $bb96:
    assume out_$i128 == 1;
    goto corral_source_split_11392;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i127, 0);
    goto corral_source_split_11390;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_11389;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.100, out_$p125);
    goto corral_source_split_11388;

  $bb95:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_11387;

  $bb94:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_1638:
    goto corral_source_split_11385;

  SeqInstr_1637:
    assume assertsPassed;
    goto SeqInstr_1638;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} ldv_pm_ops_instance_poweroff_late_1_8(out_$p124, $u17);
    goto SeqInstr_1637;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.99, out_$p123);
    goto corral_source_split_11384;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_11383;

  $bb93:
    assume out_$i122 == 1;
    goto corral_source_split_11382;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_11374;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_11373;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.98, out_$p119);
    goto corral_source_split_11372;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(96, 1));
    goto corral_source_split_11371;

  $bb91:
    assume out_$i118 == 1;
    goto corral_source_split_11370;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_11368;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} out_$i117 := ldv_undef_int();
    call {:si_unique_call 2458} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_11367;

  $bb89:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_1635:
    goto corral_source_split_11365;

  SeqInstr_1634:
    assume assertsPassed;
    goto SeqInstr_1635;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} ldv_pm_ops_instance_poweroff_1_9(out_$p116, $u17);
    goto SeqInstr_1634;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    out_$p116 := $load.ref($M.97, out_$p115);
    goto corral_source_split_11364;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11363;

  $bb88:
    assume out_$i114 == 1;
    goto corral_source_split_11362;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_11233;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_11232;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.96, out_$p111);
    goto corral_source_split_11231;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_11230;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i34 == 1;
    goto corral_source_split_11228;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i32(out_$i31, 3);
    goto corral_source_split_11226;

  $bb37:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb104:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_1647:
    goto corral_source_split_11415;

  SeqInstr_1646:
    assume assertsPassed;
    goto SeqInstr_1647;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} ldv_pm_ops_instance_restore_noirq_1_5(out_$p142, $u17);
    goto SeqInstr_1646;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    out_$p142 := $load.ref($M.105, out_$p141);
    goto corral_source_split_11414;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11413;

  $bb103:
    assume out_$i140 == 1;
    goto corral_source_split_11412;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    out_$i140 := $ne.i64(out_$i139, 0);
    goto corral_source_split_11410;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    out_$i139 := $p2i.ref.i64(out_$p138);
    goto corral_source_split_11409;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.104, out_$p137);
    goto corral_source_split_11408;

  $bb102:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_11407;

  $bb101:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_1644:
    goto corral_source_split_11405;

  SeqInstr_1643:
    assume assertsPassed;
    goto SeqInstr_1644;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} ldv_pm_ops_instance_poweroff_noirq_1_6(out_$p136, $u17);
    goto SeqInstr_1643;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    out_$p136 := $load.ref($M.103, out_$p135);
    goto corral_source_split_11404;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_11403;

  $bb100:
    assume out_$i134 == 1;
    goto corral_source_split_11402;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    out_$i134 := $ne.i64(out_$i133, 0);
    goto corral_source_split_11380;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    out_$i133 := $p2i.ref.i64(out_$p132);
    goto corral_source_split_11379;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    out_$p132 := $load.ref($M.102, out_$p131);
    goto corral_source_split_11378;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref($u16, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_11377;

  $bb92:
    assume !(out_$i118 == 1);
    goto corral_source_split_11376;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} ldv_stop();
    goto corral_source_split_11235;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154 := ldv_pm_pm_ops_instance_1_loop_$bb1(out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$p85, out_$p86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$p98, out_$p99, out_$p100, out_$i101, out_$i102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$i108, out_$p109, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p115, out_$p116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p136, out_$p137, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p143, out_$p144, out_$i145, out_$i146, out_$p147, out_$p148, out_$p149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154);
    return;

  exit:
    return;
}



procedure ldv_pm_pm_ops_instance_1_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i32, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$i31: i32, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i1, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$p100: ref, in_$i101: i64, in_$i102: i1, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i64, in_$i134: i1, in_$p135: ref, in_$p136: ref, in_$p137: ref, in_$p138: ref, in_$i139: i64, in_$i140: i1, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$i146: i1, in_$p147: ref, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$i151: i64, in_$i152: i1, in_$p153: ref, in_$p154: ref) returns (out_$i1: i32, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i32, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$i31: i32, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i1, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$p100: ref, out_$i101: i64, out_$i102: i1, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i64, out_$i134: i1, out_$p135: ref, out_$p136: ref, out_$p137: ref, out_$p138: ref, out_$i139: i64, out_$i140: i1, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$i146: i1, out_$p147: ref, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$i151: i64, out_$i152: i1, out_$p153: ref, out_$p154: ref);
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$i6 := in_$p3, in_$p4, in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11493;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb5_dummy;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_11499;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} out_$i5 := ldv_undef_int();
    call {:si_unique_call 2502} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_11498;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} ldv_free(out_$p4);
    goto corral_source_split_11497;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} ldv_free(out_$p3);
    goto corral_source_split_11496;

  SeqInstr_1734:
    goto corral_source_split_11495;

  SeqInstr_1733:
    assume assertsPassed;
    goto SeqInstr_1734;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} ldv_dummy_resourceless_instance_callback_12_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, out_$p3, $u0, out_$p4);
    goto SeqInstr_1733;

  corral_source_split_11493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} out_$p4 := ldv_xmalloc(1);
    goto corral_source_split_11494;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_12_loop_$bb4(out_$p3, out_$p4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_12_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$i6 := in_$p3, in_$p4, in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11509;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb5_dummy;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_11515;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} out_$i5 := ldv_undef_int();
    call {:si_unique_call 2511} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_11514;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} ldv_free(out_$p4);
    goto corral_source_split_11513;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} ldv_free(out_$p3);
    goto corral_source_split_11512;

  SeqInstr_1737:
    goto corral_source_split_11511;

  SeqInstr_1736:
    assume assertsPassed;
    goto SeqInstr_1737;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} ldv_dummy_resourceless_instance_callback_13_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, out_$p3, $u0, out_$p4);
    goto SeqInstr_1736;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} out_$p4 := ldv_xmalloc(1);
    goto corral_source_split_11510;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_13_loop_$bb4(out_$p3, out_$p4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_13_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.2, $M.15, $M.26, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_address_handler_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$p3, out_$p4, out_$i5, out_$i6 := in_$p3, in_$p4, in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11525;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb5_dummy;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_11531;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} out_$i5 := ldv_undef_int();
    call {:si_unique_call 2520} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_11530;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} ldv_free(out_$p4);
    goto corral_source_split_11529;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} ldv_free(out_$p3);
    goto corral_source_split_11528;

  SeqInstr_1740:
    goto corral_source_split_11527;

  SeqInstr_1739:
    assume assertsPassed;
    goto SeqInstr_1740;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} ldv_dummy_resourceless_instance_callback_14_3($u18, $u19, $u20, $u4, $u4, $u4, $u4, $u0, out_$p3, $u0, out_$p4);
    goto SeqInstr_1739;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} out_$p4 := ldv_xmalloc(1);
    goto corral_source_split_11526;

  $bb5_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$i5, out_$i6 := ldv_struct_fw_address_handler_dummy_resourceless_instance_14_loop_$bb4(out_$p3, out_$p4, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure ldv_struct_fw_address_handler_dummy_resourceless_instance_14_loop_$bb4(in_$p3: ref, in_$p4: ref, in_$i5: i32, in_$i6: i1) returns (out_$p3: ref, out_$p4: ref, out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.2, $M.26, $M.45, $M.46, $M.15, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.43, $M.23, $M.31, $M.27, $M.28, $M.13, $M.25, $M.16, $M.11, $M.12, $M.14;



implementation ldv_struct_fw_card_driver_dummy_resourceless_instance_15_loop_$bb4(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} out_$i3 := ldv_undef_int();
    call {:si_unique_call 2547} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_11556;

  $bb56:
    assume {:verifier.code 0} true;
    assume out_$i20 == 1;
    goto $bb56_dummy;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56;

  corral_source_split_11635:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_11636;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} out_$i19 := ldv_undef_int();
    call {:si_unique_call 2564} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_11635;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11607:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} ldv_dummy_resourceless_instance_callback_15_29($u21, $u19, $u4, $u4, $u4);
    goto corral_source_split_11561;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb5:
    assume out_$i4 == 1;
    goto corral_source_split_11559;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    out_$i4 := $eq.i32(out_$i3, 1);
    goto corral_source_split_11557;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} ldv_dummy_resourceless_instance_callback_15_26($u22, $u23, $u4, $u4, $u4);
    goto corral_source_split_11567;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb9:
    assume out_$i5 == 1;
    goto corral_source_split_11565;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i3, 2);
    goto corral_source_split_11563;

  $bb6:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} ldv_free(out_$p18);
    goto corral_source_split_11577;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    out_$p18 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_11576;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} ldv_dummy_resourceless_instance_callback_15_23($u24, $u23, out_$p17);
    goto corral_source_split_11575;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p16);
    goto corral_source_split_11574;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} out_$p16 := ldv_xmalloc(8);
    goto corral_source_split_11573;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume out_$i6 == 1;
    goto corral_source_split_11571;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i6 := $eq.i32(out_$i3, 3);
    goto corral_source_split_11569;

  $bb10:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_1755:
    goto corral_source_split_11583;

  SeqInstr_1754:
    assume assertsPassed;
    goto SeqInstr_1755;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} ldv_dummy_resourceless_instance_callback_15_22($u25, $u19, $u26);
    goto SeqInstr_1754;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume out_$i7 == 1;
    goto corral_source_split_11581;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i7 := $eq.i32(out_$i3, 4);
    goto corral_source_split_11579;

  $bb14:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_1758:
    goto corral_source_split_11589;

  SeqInstr_1757:
    assume assertsPassed;
    goto SeqInstr_1758;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} ldv_dummy_resourceless_instance_callback_15_21($u25, $u19, $u26);
    goto SeqInstr_1757;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i8 == 1;
    goto corral_source_split_11587;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i32(out_$i3, 5);
    goto corral_source_split_11585;

  $bb18:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} ldv_dummy_resourceless_instance_callback_15_18($u27, $u19, $u4);
    goto corral_source_split_11595;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i9 == 1;
    goto corral_source_split_11593;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i9 := $eq.i32(out_$i3, 6);
    goto corral_source_split_11591;

  $bb22:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} ldv_dummy_resourceless_instance_callback_15_15($u28, $u23, $u29, $u30, $u0);
    goto corral_source_split_11601;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb29:
    assume out_$i10 == 1;
    goto corral_source_split_11599;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i3, 7);
    goto corral_source_split_11597;

  $bb26:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} ldv_dummy_resourceless_instance_callback_15_14($u31, $u23);
    goto corral_source_split_11607;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume out_$i11 == 1;
    goto corral_source_split_11605;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i3, 8);
    goto corral_source_split_11603;

  $bb30:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} ldv_dummy_resourceless_instance_callback_15_13($u32, $u23);
    goto corral_source_split_11613;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume out_$i12 == 1;
    goto corral_source_split_11611;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i3, 9);
    goto corral_source_split_11609;

  $bb34:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} ldv_dummy_resourceless_instance_callback_15_10($u33, $u19, $u4, $u4);
    goto corral_source_split_11619;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume out_$i13 == 1;
    goto corral_source_split_11617;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i3, 10);
    goto corral_source_split_11615;

  $bb38:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} ldv_dummy_resourceless_instance_callback_15_9($u34, $u19, $u26);
    goto corral_source_split_11625;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume out_$i14 == 1;
    goto corral_source_split_11623;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb44:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i3, 11);
    goto corral_source_split_11621;

  $bb42:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} ldv_dummy_resourceless_instance_callback_15_3($u35, $u19, $u4, $u4, $u0);
    goto corral_source_split_11631;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume out_$i15 == 1;
    goto corral_source_split_11629;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i3, 12);
    goto corral_source_split_11627;

  $bb46:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} ldv_stop();
    goto corral_source_split_11633;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb56_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20 := ldv_struct_fw_card_driver_dummy_resourceless_instance_15_loop_$bb4(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20);
    return;

  exit:
    return;
}



procedure ldv_struct_fw_card_driver_dummy_resourceless_instance_15_loop_$bb4(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1);
  modifies $CurrAddr, $M.0, $M.1, $M.2, $M.26, $M.15, $M.45, $M.46, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.40, assertsPassed, $M.47, $M.48, $M.10, $M.24, $M.34, $M.38, $M.39, $M.31, $M.43, $M.23, $M.27, $M.28, $M.13, $M.25, $M.16, $M.14, $M.11, $M.12;



implementation ldv_struct_fw_packet_dummy_resourceless_instance_16_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1)
{

  entry:
    out_$i3, out_$i4 := in_$i3, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} ldv_dummy_resourceless_instance_callback_16_3($u36, $u26, $u19, $u4);
    goto corral_source_split_11652;

  $bb5:
    assume {:verifier.code 0} true;
    assume out_$i4 == 1;
    goto $bb5_dummy;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    out_$i4 := $ne.i32(out_$i3, 0);
    goto corral_source_split_11654;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} out_$i3 := ldv_undef_int();
    call {:si_unique_call 2571} {:cexpr "tmp"} boogie_si_record_i32(out_$i3);
    goto corral_source_split_11653;

  $bb5_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4 := ldv_struct_fw_packet_dummy_resourceless_instance_16_loop_$bb4(out_$i3, out_$i4);
    return;

  exit:
    return;
}



procedure ldv_struct_fw_packet_dummy_resourceless_instance_16_loop_$bb4(in_$i3: i32, in_$i4: i1) returns (out_$i3: i32, out_$i4: i1);



implementation ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11701;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11719;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2601} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11718;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} ldv_free(out_$p3);
    goto corral_source_split_11717;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} ldv_dummy_resourceless_instance_callback_4_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} ldv_free(out_$p6);
    goto corral_source_split_11715;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} ldv_dummy_resourceless_instance_callback_4_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11713;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11712;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11708;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11707;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11706;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11705;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11703;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2594} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11702;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11710;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_4_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.0;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11729;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11747;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2613} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11746;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} ldv_free(out_$p3);
    goto corral_source_split_11745;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} ldv_dummy_resourceless_instance_callback_5_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} ldv_free(out_$p6);
    goto corral_source_split_11743;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} ldv_dummy_resourceless_instance_callback_5_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11741;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11740;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11736;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11735;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11734;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11733;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11731;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2606} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11730;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11738;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_5_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11757;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11775;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2625} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11774;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} ldv_free(out_$p3);
    goto corral_source_split_11773;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} ldv_dummy_resourceless_instance_callback_6_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} ldv_free(out_$p6);
    goto corral_source_split_11771;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} ldv_dummy_resourceless_instance_callback_6_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11769;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11768;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11764;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11763;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11762;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11761;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11759;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2618} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11758;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11766;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_6_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11785;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11803;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2637} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11802;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} ldv_free(out_$p3);
    goto corral_source_split_11801;

  corral_source_split_11794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} ldv_dummy_resourceless_instance_callback_7_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} ldv_free(out_$p6);
    goto corral_source_split_11799;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} ldv_dummy_resourceless_instance_callback_7_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11797;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11796;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11792;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11791;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11790;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11789;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11787;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2630} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11786;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11794;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_7_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.34, $M.0, $M.27, $M.28;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11813;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11831;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2649} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11830;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} ldv_free(out_$p3);
    goto corral_source_split_11829;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} ldv_dummy_resourceless_instance_callback_8_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} ldv_free(out_$p6);
    goto corral_source_split_11827;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} ldv_dummy_resourceless_instance_callback_8_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11825;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11824;

  corral_source_split_11820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11820;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11819;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11818;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11817;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11815;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2642} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11814;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11822;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_8_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11841;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11859;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2661} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11858;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} ldv_free(out_$p3);
    goto corral_source_split_11857;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} ldv_dummy_resourceless_instance_callback_9_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} ldv_free(out_$p6);
    goto corral_source_split_11855;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} ldv_dummy_resourceless_instance_callback_9_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11853;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11852;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11848;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11847;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11846;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11845;

  corral_source_split_11843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11843;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2654} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11842;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11850;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_9_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.0, $M.27, $M.28;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11869;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11887;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2673} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11886;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} ldv_free(out_$p3);
    goto corral_source_split_11885;

  corral_source_split_11878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} ldv_dummy_resourceless_instance_callback_10_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} ldv_free(out_$p6);
    goto corral_source_split_11883;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} ldv_dummy_resourceless_instance_callback_10_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11881;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11880;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11876;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11875;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11874;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11873;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11871;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2666} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11870;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11878;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_10_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.0, $M.27, $M.28;



implementation ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1)
{

  entry:
    out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := in_$p3, in_$i4, in_$i5, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} out_$p3 := ldv_xmalloc(1);
    goto corral_source_split_11897;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i10 == 1;
    goto $bb11_dummy;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_11915;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} out_$i9 := ldv_undef_int();
    call {:si_unique_call 2685} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_11914;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} ldv_free(out_$p3);
    goto corral_source_split_11913;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} ldv_dummy_resourceless_instance_callback_11_3($u39, $u17, $u38, out_$p3);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} ldv_free(out_$p6);
    goto corral_source_split_11911;

  $bb8:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_11908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} ldv_dummy_resourceless_instance_callback_11_9($u37, $u17, $u38, out_$p6, $u0);
    goto corral_source_split_11909;

  $bb7:
    assume out_$i8 == 1;
    goto corral_source_split_11908;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_11904;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64($u37);
    goto corral_source_split_11903;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} out_$p6 := ldv_xmalloc(1);
    goto corral_source_split_11902;

  $bb5:
    assume out_$i5 == 1;
    goto corral_source_split_11901;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    out_$i5 := $ne.i32(out_$i4, 0);
    goto corral_source_split_11899;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} out_$i4 := ldv_undef_int();
    call {:si_unique_call 2678} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i4);
    goto corral_source_split_11898;

  $bb6:
    assume !(out_$i5 == 1);
    goto corral_source_split_11906;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10 := ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(out_$p3, out_$i4, out_$i5, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10);
    return;

  exit:
    return;
}



procedure ldv_struct_device_attribute_dummy_resourceless_instance_11_loop_$bb4(in_$p3: ref, in_$i4: i32, in_$i5: i1, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i32, in_$i10: i1) returns (out_$p3: ref, out_$i4: i32, out_$i5: i1, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i32, out_$i10: i1);
  modifies $CurrAddr, $M.0, $M.27, $M.28;



implementation ldv_pm_platform_instance_2_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := in_$i22, in_$i28, in_$i29, in_$i39, in_$i40;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    goto $bb34_dummy;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_12019;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2728} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12018;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_11999;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_11997;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_12006;

  SeqInstr_1770:
    goto corral_source_split_12005;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_1769;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_12003;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_12001;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_2_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_2_loop_$bb13(in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$i39: i32, in_$i40: i1) returns (out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$i39: i32, out_$i40: i1);
  modifies $CurrAddr, $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.15, $M.23, $M.3, $M.26, $M.31, $M.40, $M.24, $M.38, $M.39, $M.27, $M.28, $M.13, assertsPassed, $M.16, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;



implementation ldv_pm_platform_instance_2_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i22, in_$i28, in_$i29, in_$p30, in_$p31, in_$p32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_11947;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i25;
    goto $bb15_dummy;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_11984;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} out_$i26 := ldv_undef_int();
    call {:si_unique_call 2720} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_11983;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_11982;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i14;
    goto $bb14;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    out_$i25 := 1;
    goto $bb14;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_free(out_$p38);
    goto corral_source_split_12016;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_12015;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_1773:
    goto corral_source_split_12013;

  SeqInstr_1772:
    assume assertsPassed;
    goto SeqInstr_1773;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2725} ldv_platform_instance_release_2_3(out_$p37, out_$p31);
    goto SeqInstr_1772;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.113, out_$p36);
    goto corral_source_split_12012;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_12011;

  $bb30:
    assume out_$i35 == 1;
    goto corral_source_split_12010;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i64(out_$i34, 0);
    goto corral_source_split_11995;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    out_$i34 := $p2i.ref.i64(out_$p33);
    goto corral_source_split_11994;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.112, out_$p32);
    goto corral_source_split_11993;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_11992;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_11991;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2721} out_$p30 := ldv_xmalloc(1464);
    goto corral_source_split_11990;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb11;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 1);
    goto corral_source_split_11973;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2716} out_$i20 := ldv_undef_int();
    call {:si_unique_call 2717} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_11972;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} ldv_assume(out_$i19);
    goto corral_source_split_11971;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_11970;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 0);
    goto corral_source_split_11969;

  $bb8:
    assume out_$i17 == 1;
    goto corral_source_split_11968;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_11966;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} out_$i16 := ldv_undef_int();
    call {:si_unique_call 2714} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_11965;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} ldv_free(out_$p15);
    goto corral_source_split_11964;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_11963;

  SeqInstr_1767:
    call {:si_unique_call 2711} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_11962;

  SeqInstr_1766:
    assume assertsPassed;
    goto SeqInstr_1767;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} out_$i14 := ldv_ldv_post_probe_134(out_$i13);
    goto SeqInstr_1766;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_11961;

  $bb6:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i3;
    goto $bb7;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    out_$i13 := out_$i12;
    goto $bb7;

  SeqInstr_1764:
    call {:si_unique_call 2709} {:cexpr "ldv_2_probed_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_11959;

  SeqInstr_1763:
    assume assertsPassed;
    goto SeqInstr_1764;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} out_$i12 := ldv_platform_instance_probe_2_14(out_$p11, out_$p5);
    goto SeqInstr_1763;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.111, out_$p10);
    goto corral_source_split_11958;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_11957;

  $bb5:
    assume out_$i9 == 1;
    goto corral_source_split_11956;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i64(out_$i8, 0);
    goto corral_source_split_11954;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    out_$i8 := $p2i.ref.i64(out_$p7);
    goto corral_source_split_11953;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.110, out_$p6);
    goto corral_source_split_11952;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref($u40, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_11951;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2707} ldv_ldv_pre_probe_133();
    goto corral_source_split_11950;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    out_$p5 := $bitcast.ref.ref(out_$p4);
    goto corral_source_split_11949;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} out_$p4 := ldv_xmalloc(1464);
    goto corral_source_split_11948;

  $bb18:
    assume out_$i40 == 1;
    goto corral_source_split_11988;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb34;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 1);
    goto corral_source_split_12019;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2727} out_$i39 := ldv_undef_int();
    call {:si_unique_call 2728} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_12018;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb21:
    assume out_$i28 == 1;
    goto corral_source_split_11999;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i22, 2);
    goto corral_source_split_11997;

  $bb13:
    call out_$i22, out_$i28, out_$i29, out_$i39, out_$i40 := ldv_pm_platform_instance_2_loop_$bb13(out_$i22, out_$i28, out_$i29, out_$i39, out_$i40);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i20;
    goto $bb13;

  $bb34:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i39;
    assume false;
    return;

  $bb12:
    assume !(out_$i21 == 1);
    goto corral_source_split_11980;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2723} ldv_dispatch_pm_deregister_2_5();
    goto corral_source_split_12006;

  SeqInstr_1770:
    goto corral_source_split_12005;

  SeqInstr_1769:
    assume assertsPassed;
    goto SeqInstr_1770;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2722} ldv_dispatch_pm_register_2_6();
    goto SeqInstr_1769;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume out_$i29 == 1;
    goto corral_source_split_12003;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i22, 3);
    goto corral_source_split_12001;

  $bb22:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2718} ldv_assume(out_$i24);
    goto corral_source_split_11978;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    goto corral_source_split_11977;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i32(out_$i14, 0);
    goto corral_source_split_11976;

  $bb9:
    assume !(out_$i17 == 1);
    goto corral_source_split_11975;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40 := ldv_pm_platform_instance_2_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i22, out_$i28, out_$i29, out_$p30, out_$p31, out_$p32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure ldv_pm_platform_instance_2_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i1, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i22: i32, in_$i28: i1, in_$i29: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$i34: i64, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i1) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i1, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i22: i32, out_$i28: i1, out_$i29: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$i34: i64, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i1);
  modifies $M.1, $M.2, $M.0, $M.10, $M.34, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $CurrAddr, $M.16, $M.27, $M.28, $M.13, assertsPassed, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14, $M.114, $M.115;



implementation ldv_rtc_rtc_class_instance_3_loop_$bb13(in_$i23: i32, in_$i24: i1) returns (out_$i23: i32, out_$i24: i1)
{

  entry:
    out_$i23, out_$i24 := in_$i23, in_$i24;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} ldv_rtc_class_instance_callback_3_4($u42, $u17, $u43);
    goto corral_source_split_12127;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    goto $bb17_dummy;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_12129;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} out_$i23 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_12128;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24 := ldv_rtc_rtc_class_instance_3_loop_$bb13(out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_3_loop_$bb13(in_$i23: i32, in_$i24: i1) returns (out_$i23: i32, out_$i24: i1);
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28;



implementation ldv_rtc_rtc_class_instance_3_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref)
{

  entry:
    out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26 := in_$i3, in_$p4, in_$p5, in_$i6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$p25, in_$p26;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_12092;

  $bb15:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i12;
    goto $bb15_dummy;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_12132;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2774} out_$i21 := ldv_undef_int();
    call {:si_unique_call 2775} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_12131;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2770} ldv_rtc_class_instance_release_3_2(out_$p26, $u17);
    goto corral_source_split_12125;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.118, out_$p25);
    goto corral_source_split_12124;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_12123;

  $bb11:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb12;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb18:
    assume !(out_$i24 == 1);
    goto corral_source_split_12136;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_12129;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2772} out_$i23 := ldv_undef_int();
    call {:si_unique_call 2773} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_12128;

  $bb13:
    call out_$i23, out_$i24 := ldv_rtc_rtc_class_instance_3_loop_$bb13(out_$i23, out_$i24);
    goto $bb13_last;

  $bb13_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2771} ldv_rtc_class_instance_callback_3_4($u42, $u17, $u43);
    goto corral_source_split_12127;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume out_$i24 == 1;
    assume false;
    return;

  $bb10:
    assume out_$i18 == 1;
    goto corral_source_split_12121;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_12114;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2767} out_$i17 := ldv_undef_int();
    call {:si_unique_call 2768} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_12113;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2766} ldv_assume(out_$i16);
    goto corral_source_split_12112;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_12111;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i12, 0);
    goto corral_source_split_12110;

  $bb8:
    assume out_$i14 == 1;
    goto corral_source_split_12109;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_12107;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2764} out_$i13 := ldv_undef_int();
    call {:si_unique_call 2765} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_12106;

  SeqInstr_1806:
    call {:si_unique_call 2763} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_12105;

  SeqInstr_1805:
    assume assertsPassed;
    goto SeqInstr_1806;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2762} out_$i12 := ldv_ldv_post_probe_136(out_$i11);
    goto SeqInstr_1805;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_12104;

  $bb6:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i11 := out_$i3;
    goto $bb7;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i10;
    goto $bb7;

  SeqInstr_1803:
    call {:si_unique_call 2761} {:cexpr "ldv_3_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_12102;

  SeqInstr_1802:
    assume assertsPassed;
    goto SeqInstr_1803;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2760} out_$i10 := ldv_rtc_class_instance_probe_3_10(out_$p9, $u17);
    goto SeqInstr_1802;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.117, out_$p8);
    goto corral_source_split_12101;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_12100;

  $bb5:
    assume out_$i7 == 1;
    goto corral_source_split_12099;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i64(out_$i6, 0);
    goto corral_source_split_12097;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    out_$i6 := $p2i.ref.i64(out_$p5);
    goto corral_source_split_12096;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    out_$p5 := $load.ref($M.116, out_$p4);
    goto corral_source_split_12095;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    out_$p4 := $add.ref($add.ref($u41, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_12094;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2759} ldv_ldv_pre_probe_135();
    goto corral_source_split_12093;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2769} ldv_assume(out_$i20);
    goto corral_source_split_12119;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i1.i32(out_$i19);
    goto corral_source_split_12118;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i12, 0);
    goto corral_source_split_12117;

  $bb9:
    assume !(out_$i14 == 1);
    goto corral_source_split_12116;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26 := ldv_rtc_rtc_class_instance_3_loop_$bb4(out_$i3, out_$p4, out_$p5, out_$i6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$p25, out_$p26);
    return;

  exit:
    return;
}



procedure ldv_rtc_rtc_class_instance_3_loop_$bb4(in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$i6: i64, in_$i7: i1, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i19: i1, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref) returns (out_$i3: i32, out_$p4: ref, out_$p5: ref, out_$i6: i64, out_$i7: i1, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i19: i1, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref);
  modifies $M.34, $CurrAddr, $M.0, $M.27, $M.28, $M.114, $M.115, assertsPassed, $M.1, $M.2, $M.10, $M.49, $M.50, $M.51, $M.55, $M.56, $M.3, $M.23, $M.15, $M.40, $M.26, $M.31, $M.24, $M.38, $M.39, $M.16, $M.13, $M.45, $M.46, $M.11, $M.12, $M.25, $M.47, $M.48, $M.43, $M.14;


