var $M.0: [ref]ref;

var $M.1: [ref]i32;

var $M.2: [ref]i8;

var $M.3: [ref]i32;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]i24;

var $M.13: [ref]i8;

var $M.14: [ref]ref;

var $M.15: [ref]i8;

var $M.16: i32;

var $M.17: [ref]i32;

var $M.18: [ref]i32;

var $M.19: ref;

var $M.20: [ref]i32;

var $M.21: [ref]i64;

var $M.22: [ref]i64;

var $M.25: i32;

var $M.26: i32;

var $M.27: i32;

var $M.28: [ref]i64;

var $M.29: ref;

var $M.31: i32;

var $M.32: i32;

var $M.33: i32;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i8;

var $M.74: [ref]i8;

var $M.75: [ref]i8;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 592790);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const tcm_vhost_list: ref;

axiom tcm_vhost_list == $sub.ref(0, 2068);

const tcm_vhost_mutex: ref;

axiom tcm_vhost_mutex == $sub.ref(0, 3260);

const tcm_vhost_fabric_configfs: ref;

axiom tcm_vhost_fabric_configfs == $sub.ref(0, 4292);

const tcm_vhost_tpg_nexus: ref;

axiom tcm_vhost_tpg_nexus == $sub.ref(0, 5356);

const {:count 2} tcm_vhost_tpg_attrs: ref;

axiom tcm_vhost_tpg_attrs == $sub.ref(0, 6396);

const tcm_vhost_wwn_version: ref;

axiom tcm_vhost_wwn_version == $sub.ref(0, 7460);

const {:count 2} tcm_vhost_wwn_attrs: ref;

axiom tcm_vhost_wwn_attrs == $sub.ref(0, 8500);

const tcm_vhost_ops: ref;

axiom tcm_vhost_ops == $sub.ref(0, 9860);

const vhost_scsi_fops: ref;

axiom vhost_scsi_fops == $sub.ref(0, 11092);

const vhost_scsi_misc: ref;

axiom vhost_scsi_misc == $sub.ref(0, 12188);

const tcm_vhost_workqueue: ref;

axiom tcm_vhost_workqueue == $sub.ref(0, 13220);

const ldv_mutex_tv_tpg_mutex: ref;

axiom ldv_mutex_tv_tpg_mutex == $sub.ref(0, 14248);

const ldv_mutex_tcm_vhost_mutex: ref;

axiom ldv_mutex_tcm_vhost_mutex == $sub.ref(0, 15276);

const ldv_mutex_mutex: ref;

axiom ldv_mutex_mutex == $sub.ref(0, 16304);

const ldv_mutex_mtx: ref;

axiom ldv_mutex_mtx == $sub.ref(0, 17332);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 18360);

const ldv_mutex_cred_guard_mutex: ref;

axiom ldv_mutex_cred_guard_mutex == $sub.ref(0, 19388);

const vhost_zcopy_mask: ref;

axiom vhost_zcopy_mask == $sub.ref(0, 20416);

const {:count 11} .str.51: ref;

axiom .str.51 == $sub.ref(0, 21451);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 93} .str.4: ref;

axiom .str.4 == $sub.ref(0, 22568);

const {:count 45} .str.5: ref;

axiom .str.5 == $sub.ref(0, 23637);

const {:count 10} .str.6: ref;

axiom .str.6 == $sub.ref(0, 24671);

const {:count 13} .str.47: ref;

axiom .str.47 == $sub.ref(0, 25708);

const {:count 20} .str.48: ref;

axiom .str.48 == $sub.ref(0, 26752);

const {:count 29} .str.49: ref;

axiom .str.49 == $sub.ref(0, 27805);

const {:count 15} .str.18: ref;

axiom .str.18 == $sub.ref(0, 28844);

const {:count 24} .str.19: ref;

axiom .str.19 == $sub.ref(0, 29892);

const {:count 25} .str.20: ref;

axiom .str.20 == $sub.ref(0, 30941);

const {:count 29} .str.21: ref;

axiom .str.21 == $sub.ref(0, 31994);

const kernel_stack: ref;

axiom kernel_stack == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 33039);

const {:count 105} .str.115: ref;

axiom .str.115 == $sub.ref(0, 34168);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 35225);

const {:count 12} .str.1: ref;

axiom .str.1 == $sub.ref(0, 36261);

const {:count 26} .str.2: ref;

axiom .str.2 == $sub.ref(0, 37311);

const {:count 19} .str.3: ref;

axiom .str.3 == $sub.ref(0, 38354);

const {:count 22} .str.95: ref;

axiom .str.95 == $sub.ref(0, 39400);

const {:count 21} .str.96: ref;

axiom .str.96 == $sub.ref(0, 40445);

const {:count 204} .str.53: ref;

axiom .str.53 == $sub.ref(0, 41673);

const {:count 45} .str.97: ref;

axiom .str.97 == $sub.ref(0, 42742);

const {:count 38} .str.98: ref;

axiom .str.98 == $sub.ref(0, 43804);

const {:count 47} .str.99: ref;

axiom .str.99 == $sub.ref(0, 44875);

const {:count 46} .str.100: ref;

axiom .str.100 == $sub.ref(0, 45945);

const {:count 61} .str.101: ref;

axiom .str.101 == $sub.ref(0, 47030);

const {:count 32} .str.102: ref;

axiom .str.102 == $sub.ref(0, 48086);

const {:count 36} .str.103: ref;

axiom .str.103 == $sub.ref(0, 49146);

const {:count 59} .str.104: ref;

axiom .str.104 == $sub.ref(0, 50229);

const {:count 64} .str.105: ref;

axiom .str.105 == $sub.ref(0, 51317);

const {:count 83} .str.106: ref;

axiom .str.106 == $sub.ref(0, 52424);

const {:count 47} .str.107: ref;

axiom .str.107 == $sub.ref(0, 53495);

const {:count 26} .str.108: ref;

axiom .str.108 == $sub.ref(0, 54545);

const {:count 16} .str.109: ref;

axiom .str.109 == $sub.ref(0, 55585);

const {:count 26} .str.112: ref;

axiom .str.112 == $sub.ref(0, 56635);

const {:count 33} .str.113: ref;

axiom .str.113 == $sub.ref(0, 57692);

const {:count 32} .str.114: ref;

axiom .str.114 == $sub.ref(0, 58748);

const {:count 28} .str.90: ref;

axiom .str.90 == $sub.ref(0, 59800);

const scsi_command_size_tbl: ref;

axiom scsi_command_size_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 49} .str.110: ref;

axiom .str.110 == $sub.ref(0, 60873);

const {:count 42} .str.111: ref;

axiom .str.111 == $sub.ref(0, 61939);

const {:count 20} .str.23: ref;

axiom .str.23 == $sub.ref(0, 62983);

const {:count 41} .str.24: ref;

axiom .str.24 == $sub.ref(0, 64048);

const {:count 46} .str.25: ref;

axiom .str.25 == $sub.ref(0, 65118);

const {:count 37} .str.26: ref;

axiom .str.26 == $sub.ref(0, 66179);

const {:count 18} .str.7: ref;

axiom .str.7 == $sub.ref(0, 67221);

const {:count 34} .str.8: ref;

axiom .str.8 == $sub.ref(0, 68279);

const {:count 37} .str.9: ref;

axiom .str.9 == $sub.ref(0, 69340);

const {:count 40} .str.10: ref;

axiom .str.10 == $sub.ref(0, 70404);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 71466);

const {:count 33} .str.12: ref;

axiom .str.12 == $sub.ref(0, 72523);

const {:count 50} .str.13: ref;

axiom .str.13 == $sub.ref(0, 73597);

const {:count 42} .str.14: ref;

axiom .str.14 == $sub.ref(0, 74663);

const {:count 51} .str.15: ref;

axiom .str.15 == $sub.ref(0, 75738);

const {:count 42} .str.16: ref;

axiom .str.16 == $sub.ref(0, 76804);

const {:count 37} .str.17: ref;

axiom .str.17 == $sub.ref(0, 77865);

const {:count 41} .str.41: ref;

axiom .str.41 == $sub.ref(0, 78930);

const {:count 25} .str.42: ref;

axiom .str.42 == $sub.ref(0, 79979);

const {:count 44} .str.44: ref;

axiom .str.44 == $sub.ref(0, 81047);

const rcu_lock_map: ref;

axiom rcu_lock_map == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 42} .str.43: ref;

axiom .str.43 == $sub.ref(0, 82113);

const {:count 13} .str.32: ref;

axiom .str.32 == $sub.ref(0, 83150);

const {:count 73} .str.33: ref;

axiom .str.33 == $sub.ref(0, 84247);

const {:count 37} .str.34: ref;

axiom .str.34 == $sub.ref(0, 85308);

const {:count 36} .str.35: ref;

axiom .str.35 == $sub.ref(0, 86368);

const {:count 48} .str.36: ref;

axiom .str.36 == $sub.ref(0, 87440);

const {:count 41} .str.37: ref;

axiom .str.37 == $sub.ref(0, 88505);

const {:count 41} .str.38: ref;

axiom .str.38 == $sub.ref(0, 89570);

const {:count 40} .str.39: ref;

axiom .str.39 == $sub.ref(0, 90634);

const {:count 46} .str.40: ref;

axiom .str.40 == $sub.ref(0, 91704);

const {:count 21} .str.27: ref;

axiom .str.27 == $sub.ref(0, 92749);

const {:count 27} .str.93: ref;

axiom .str.93 == $sub.ref(0, 93800);

const {:count 40} .str.94: ref;

axiom .str.94 == $sub.ref(0, 94864);

const {:count 27} .str.91: ref;

axiom .str.91 == $sub.ref(0, 95915);

const {:count 42} .str.92: ref;

axiom .str.92 == $sub.ref(0, 96981);

const .str: ref;

axiom .str == $sub.ref(0, 98017);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 99070);

const {:count 36} .str.88: ref;

axiom .str.88 == $sub.ref(0, 100130);

const {:count 34} .str.89: ref;

axiom .str.89 == $sub.ref(0, 101188);

const {:count 9} .str.29: ref;

axiom .str.29 == $sub.ref(0, 102221);

const {:count 105} .str.30: ref;

axiom .str.30 == $sub.ref(0, 103350);

const {:count 27} .str.31: ref;

axiom .str.31 == $sub.ref(0, 104401);

const {:count 70} .str.74: ref;

axiom .str.74 == $sub.ref(0, 105495);

const {:count 71} .str.75: ref;

axiom .str.75 == $sub.ref(0, 106590);

const {:count 21} .str.76: ref;

axiom .str.76 == $sub.ref(0, 107635);

const {:count 74} .str.77: ref;

axiom .str.77 == $sub.ref(0, 108733);

const {:count 4} .str.78: ref;

axiom .str.78 == $sub.ref(0, 109761);

const {:count 4} .str.79: ref;

axiom .str.79 == $sub.ref(0, 110789);

const {:count 6} .str.80: ref;

axiom .str.80 == $sub.ref(0, 111819);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 112851);

const {:count 6} .str.127: ref;

axiom .str.127 == $sub.ref(0, 113881);

const {:count 41} .str.128: ref;

axiom .str.128 == $sub.ref(0, 114946);

const {:count 19} .str.129: ref;

axiom .str.129 == $sub.ref(0, 115989);

const {:count 21} .str.125: ref;

axiom .str.125 == $sub.ref(0, 117034);

const {:count 65} .str.126: ref;

axiom .str.126 == $sub.ref(0, 118123);

const {:count 43} .str.120: ref;

axiom .str.120 == $sub.ref(0, 119190);

const {:count 5} .str.67: ref;

axiom .str.67 == $sub.ref(0, 120219);

const {:count 4} .str.69: ref;

axiom .str.69 == $sub.ref(0, 121247);

const {:count 5} .str.71: ref;

axiom .str.71 == $sub.ref(0, 122276);

const {:count 55} .str.121: ref;

axiom .str.121 == $sub.ref(0, 123355);

const {:count 43} .str.122: ref;

axiom .str.122 == $sub.ref(0, 124422);

const {:count 3} .str.66: ref;

axiom .str.66 == $sub.ref(0, 125449);

const {:count 21} .str.123: ref;

axiom .str.123 == $sub.ref(0, 126494);

const {:count 62} .str.124: ref;

axiom .str.124 == $sub.ref(0, 127580);

const {:count 42} .str.119: ref;

axiom .str.119 == $sub.ref(0, 128646);

const {:count 54} .str.118: ref;

axiom .str.118 == $sub.ref(0, 129724);

const {:count 6} .str.56: ref;

axiom .str.56 == $sub.ref(0, 130754);

const {:count 8} .str.60: ref;

axiom .str.60 == $sub.ref(0, 131786);

const {:count 45} .str.61: ref;

axiom .str.61 == $sub.ref(0, 132855);

const {:count 5} .str.55: ref;

axiom .str.55 == $sub.ref(0, 133884);

const {:count 6} .str.62: ref;

axiom .str.62 == $sub.ref(0, 134914);

const {:count 5} .str.64: ref;

axiom .str.64 == $sub.ref(0, 135943);

const {:count 48} .str.65: ref;

axiom .str.65 == $sub.ref(0, 137015);

const {:count 70} .str.68: ref;

axiom .str.68 == $sub.ref(0, 138109);

const {:count 70} .str.70: ref;

axiom .str.70 == $sub.ref(0, 139203);

const {:count 72} .str.72: ref;

axiom .str.72 == $sub.ref(0, 140299);

const {:count 58} .str.73: ref;

axiom .str.73 == $sub.ref(0, 141381);

const {:count 21} .str.82: ref;

axiom .str.82 == $sub.ref(0, 142426);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 143484);

const {:count 44} .str.84: ref;

axiom .str.84 == $sub.ref(0, 144552);

const {:count 51} .str.85: ref;

axiom .str.85 == $sub.ref(0, 145627);

const {:count 4} .str.63: ref;

axiom .str.63 == $sub.ref(0, 146655);

const {:count 26} .str.116: ref;

axiom .str.116 == $sub.ref(0, 147705);

const {:count 16} .str.117: ref;

axiom .str.117 == $sub.ref(0, 148745);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 149786);

const {:count 19} .str.45: ref;

axiom .str.45 == $sub.ref(0, 150829);

const {:count 21} .str.46: ref;

axiom .str.46 == $sub.ref(0, 151874);

const {:count 13} .str.28: ref;

axiom .str.28 == $sub.ref(0, 152911);

const {:count 30} .str.130: ref;

axiom .str.130 == $sub.ref(0, 153965);

const {:count 50} .str.131: ref;

axiom .str.131 == $sub.ref(0, 155039);

const {:count 28} .str.52: ref;

axiom .str.52 == $sub.ref(0, 156091);

const {:count 46} .str.54: ref;

axiom .str.54 == $sub.ref(0, 157161);

const {:count 39} .str.57: ref;

axiom .str.57 == $sub.ref(0, 158224);

const {:count 57} .str.58: ref;

axiom .str.58 == $sub.ref(0, 159305);

const {:count 56} .str.59: ref;

axiom .str.59 == $sub.ref(0, 160385);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 161417);

const {:count 3} .str.1.278: ref;

axiom .str.1.278 == $sub.ref(0, 162444);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 163482);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 164510);

const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 165542);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547521);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 166574);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 167606);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);



const vhost_scsi_ioctl: ref;

axiom vhost_scsi_ioctl == $sub.ref(0, 168638);

procedure vhost_scsi_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, $CurrAddr, assertsPassed, $M.26, $M.27, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_scsi_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i64;
  var $i50: i32;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i32;
  var $p58: ref;
  var $i59: i64;
  var $i22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p3 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 3} {:cexpr "vhost_scsi_ioctl:arg:ioctl"} boogie_si_record_i32($i1);
    call {:si_unique_call 4} {:cexpr "vhost_scsi_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p9 := $i2p.i64.ref($i2);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p5, 0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 1074310912);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 1088991040);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 1088991041);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i1, 1088991041);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} ldv_mutex_lock_44($p53);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i55 := vhost_dev_ioctl($p54, $i1, $i2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 23} {:cexpr "tmp___7"} boogie_si_record_i64($i55);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i64.i32($i55);
    call {:si_unique_call 24} {:cexpr "r"} boogie_si_record_i32($i56);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} ldv_mutex_unlock_45($p58);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i56);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i22 := $i59;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p3);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i30 := copy_from_user($p29, $p9, 232);
    call {:si_unique_call 8} {:cexpr "tmp___1"} boogie_si_record_i64($i30);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(230, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.2, $p32);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i36 := vhost_scsi_clear_endpoint($p8, $p3);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 18} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i22 := $i37;
    goto $bb21;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i35 == 1;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 95);
    goto $bb21;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb21;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i20 := copy_from_user($p19, $p9, 232);
    call {:si_unique_call 6} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 232)), $mul.ref(230, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.2, $p23);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $i27 := vhost_scsi_set_endpoint($p8, $p3);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 16} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i22 := $i28;
    goto $bb21;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i26 == 1;
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 95);
    goto $bb21;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb21;

  $bb4:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, 1074310912);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p10);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i47 := copy_from_user($p45, $p46, 8);
    call {:si_unique_call 10} {:cexpr "tmp___5"} boogie_si_record_i64($i47);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.2, $p4);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i50 := vhost_scsi_set_features($p8, $i49);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 20} {:cexpr "tmp___6"} boogie_si_record_i32($i50);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i50);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i22 := $i51;
    goto $bb21;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i48 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb21;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 1074048834);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 1074048834);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb10;

  $bb15:
    assume $i17 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $i39 := copy_to_user($p9, $p38, 4);
    call {:si_unique_call 12} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb21;

  $bb32:
    assume $i40 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb21;

  $bb13:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, $sub.i32(0, 2146914560));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p4, 889192448);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p10);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p4);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i43 := copy_to_user($p41, $p42, 8);
    call {:si_unique_call 14} {:cexpr "tmp___4"} boogie_si_record_i32($i43);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb21;

  $bb35:
    assume $i44 == 1;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64(0, 14);
    goto $bb21;
}



const vhost_scsi_compat_ioctl: ref;

axiom vhost_scsi_compat_ioctl == $sub.ref(0, 169670);

procedure vhost_scsi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.16, $CurrAddr, assertsPassed, $M.26, $M.27, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_scsi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} {:cexpr "vhost_scsi_compat_ioctl:arg:ioctl"} boogie_si_record_i32($i1);
    call {:si_unique_call 27} {:cexpr "vhost_scsi_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p4 := compat_ptr($i3);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i6 := vhost_scsi_ioctl($p0, $i1, $i5);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 30} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const vhost_scsi_open: ref;

axiom vhost_scsi_open == $sub.ref(0, 170702);

procedure vhost_scsi_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_scsi_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p13: ref;
  var $p14: ref;
  var $p17: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $i7: i32;
  var vslice_dummy_var_26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p3 := kzalloc(52000, 208);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(51784, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vhost_work_init($p8, vhost_scsi_complete_cmd_work);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(51912, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} INIT_LIST_HEAD($p9);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} vslice_dummy_var_26 := spinlock_check($p10);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(51928, 1)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} __raw_spin_lock_init($p14, .str.86, $p2);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(328, 1)), $mul.ref(0, 17152)), $mul.ref(464, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, vhost_scsi_ctl_handle_kick);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(328, 1)), $mul.ref(1, 17152)), $mul.ref(464, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, vhost_scsi_evt_handle_kick);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(328, 1)), $mul.ref(2, 17152)), $mul.ref(464, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, vhost_scsi_handle_kick);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i27 := vhost_dev_init($p24, $p26, 3);
    call {:si_unique_call 38} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i32($i27);
    call {:si_unique_call 39} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, $p3);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p4);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} kfree($p30);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i7 := $i28;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const vhost_scsi_release: ref;

axiom vhost_scsi_release == $sub.ref(0, 171734);

procedure vhost_scsi_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.16, assertsPassed, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22, $M.27;



implementation vhost_scsi_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $p37: ref;
  var $p39: ref;
  var $p40: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $p2 := $alloc($mul.ref(232, $zext.i32.i64(1)));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(296, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} vhost_dev_cleanup($p39, 0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} kfree($p40);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64(224, 63);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.2, $p27);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.2;
    cmdloc_dummy_var_4 := $M.2;
    call {:si_unique_call 43} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p26, $p32, 224, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_5;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.2, $p35);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p37, $i36);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} vslice_dummy_var_27 := vhost_scsi_clear_endpoint($p5, $p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.2;
    cmdloc_dummy_var_1 := $M.2;
    call {:si_unique_call 42} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p18, $p24, 224, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_2;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 172766);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const vhost_scsi_clear_endpoint: ref;

axiom vhost_scsi_clear_endpoint == $sub.ref(0, 173798);

procedure vhost_scsi_clear_endpoint($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.16, assertsPassed;



implementation vhost_scsi_clear_endpoint($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i8: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i15: i32;
  var $p60: ref;
  var $i58: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} ldv_mutex_lock_38($p3);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i31 := strcmp($p28, $p30);
    call {:si_unique_call 53} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i32 == 1);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.2, $p33);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.2, $p36);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i35, $i38);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p24, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.2, $p51);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, 1);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p24, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p54, $i53);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, $0.ref);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} ldv_mutex_unlock_39($p57);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $r := $i58;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p24, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.2, $p42);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.2, $p47);
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_28 := printk.ref.ref.i32.ref.i32(.str.115, $p41, $i44, $p46, $i49);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ldv_mutex_unlock_40($p60);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i58 := $i15;
    goto $bb22;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb17;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 19);
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i16, $i17, $i18, $i8 := vhost_scsi_clear_endpoint_loop_$bb4($p0, $p5, $p9, $p10, $i11, $p12, $i13, $i14, $i16, $i17, $i18, $i8);
    goto $bb4_last;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 17152));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $i13 := vhost_vq_access_ok($p12);
    call {:si_unique_call 49} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i8, 1);
    call {:si_unique_call 51} {:cexpr "index"} boogie_si_record_i32($i16);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p5);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, $i16);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i18 == 1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i16;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb8;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;
}



const vhost_dev_cleanup: ref;

axiom vhost_dev_cleanup == $sub.ref(0, 174830);

procedure vhost_dev_cleanup($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation vhost_dev_cleanup($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $i6: i32;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $i132: i1;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $i145: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i64;
  var $i163: i64;
  var $i164: i1;
  var $i165: i1;
  var $i166: i32;
  var $i167: i64;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var vslice_dummy_var_29: i32;
  var vslice_dummy_var_30: i64;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 56} {:cexpr "vhost_dev_cleanup:arg:locked"} boogie_si_record_i1($i1);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vhost_dev_free_iovecs($p0);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.2, $p129);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i131 := $p2i.ref.i64($p130);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i132} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p135, $0.ref);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.2, $p136);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i139 := $ne.i64($i138, 0);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p142, $0.ref);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} $i143 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 72} {:cexpr "tmp"} boogie_si_record_i32($i143);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.2, $p152);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p153);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} kfree($p154);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p155, $0.ref);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(296, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $i157 := list_empty($p156);
    call {:si_unique_call 78} {:cexpr "tmp___1"} boogie_si_record_i32($i157);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i159 := $zext.i1.i32($i158);
    call {:si_unique_call 79} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i159);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i32($i160);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i163 := ldv__builtin_expect($i162, 0);
    call {:si_unique_call 81} {:cexpr "tmp___2"} boogie_si_record_i64($i163);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i159, 0);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i166 := $zext.i1.i32($i165);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vslice_dummy_var_30 := ldv__builtin_expect($i167, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.2, $p169);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.2, $p177);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p183, $0.ref);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    return;

  $bb54:
    assume $i180 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.2, $p181);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} mmput($p182);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i172 == 1;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.2, $p173);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} vslice_dummy_var_31 := kthread_stop($p174);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p176, $0.ref);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i164 == 1;
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} warn_slowpath_null(.str.4, 482);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i144 == 1;
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1(1);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i145 == 1);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(16, 1)), $mul.ref(120, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i148 := lock_is_held($p147);
    call {:si_unique_call 74} {:cexpr "tmp___0"} boogie_si_record_i32($i148);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i8.i1($i2);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i150 := $zext.i1.i32($i149);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i150, $i148);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i151 == 1;
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} lockdep_rcu_suspicious(.str.4, 480, .str.5);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb41;

  $bb36:
    assume $i139 == 1;
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.2, $p140);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} fput($p141);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i132 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.2, $p133);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} eventfd_ctx_put($p134);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $p29, $i30, $p32, $p33, $p34, $i35, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p45, $p46, $p47, $p48, $i49, $p50, $p52, $p53, $i54, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $p64, $p65, $p66, $p67, $i68, $p70, $p71, $i72, $i73, $p74, $p75, $i76, $p78, $p79, $p80, $p81, $i82, $p84, $p85, $i86, $i87, $p88, $p89, $i90, $p92, $p93, $p94, $p95, $i96, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $p106, $p107, $p108, $p109, $i110, $p112, $p113, $i114, $i115, $p116, $p117, $i118, $p120, $p121, $p122, $p123, $i124, $p125, $i126, $i127, $i128, $i6, vslice_dummy_var_29 := vhost_dev_cleanup_loop_$bb4($p0, $p3, $p7, $p8, $i9, $p11, $p12, $i13, $i14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $p23, $p24, $i25, $p27, $p28, $p29, $i30, $p32, $p33, $p34, $i35, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p45, $p46, $p47, $p48, $i49, $p50, $p52, $p53, $i54, $p56, $p57, $i58, $i59, $p60, $p61, $i62, $p64, $p65, $p66, $p67, $i68, $p70, $p71, $i72, $i73, $p74, $p75, $i76, $p78, $p79, $p80, $p81, $i82, $p84, $p85, $i86, $i87, $p88, $p89, $i90, $p92, $p93, $p94, $p95, $i96, $p98, $p99, $i100, $i101, $p102, $p103, $i104, $p106, $p107, $p108, $p109, $i110, $p112, $p113, $i114, $i115, $p116, $p117, $i118, $p120, $p121, $p122, $p123, $i124, $p125, $i126, $i127, $i128, $i6, vslice_dummy_var_29);
    goto $bb4_last;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 17152)), $mul.ref(208, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.2, $p11);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i6);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p34, $mul.ref($i35, 17152)), $mul.ref(17144, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.2, $p47);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i6);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 17152));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_29 := vhost_zerocopy_signal_used($p50);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i6);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p53, $mul.ref($i54, 17152)), $mul.ref(240, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i6);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p67, $mul.ref($i68, 17152)), $mul.ref(224, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.2, $p80);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i6);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p81, $mul.ref($i82, 17152)), $mul.ref(208, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.2, $p84);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.2, $p94);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i6);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p95, $mul.ref($i96, 17152)), $mul.ref(232, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.2, $p98);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.2, $p108);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i6);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p109, $mul.ref($i110, 17152)), $mul.ref(216, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.2, $p112);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.2, $p122);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i6);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p123, $mul.ref($i124, 17152));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vhost_vq_reset($p0, $p125);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i6, 1);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32($i126);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.2, $p3);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i128 := $sgt.i32($i127, $i126);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i128 == 1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb30:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i126;
    goto $bb30_dummy;

  $bb27:
    assume $i115 == 1;
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.2, $p116);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i118 := $sext.i32.i64($i6);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p117, $mul.ref($i118, 17152)), $mul.ref(216, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.2, $p120);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} fput($p121);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i101 == 1;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.2, $p102);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i6);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p103, $mul.ref($i104, 17152)), $mul.ref(232, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.2, $p106);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} eventfd_ctx_put($p107);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i87 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.2, $p88);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i90 := $sext.i32.i64($i6);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p89, $mul.ref($i90, 17152)), $mul.ref(208, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.2, $p92);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} fput($p93);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i73 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.2, $p74);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i6);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p75, $mul.ref($i76, 17152)), $mul.ref(224, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.2, $p78);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} fput($p79);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i59 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.2, $p60);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i6);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p61, $mul.ref($i62, 17152)), $mul.ref(240, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.2, $p64);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} eventfd_ctx_put($p65);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i40 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i6);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p42, $mul.ref($i43, 17152)), $mul.ref(17144, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vhost_ubuf_put_and_wait($p46);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i6);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref($i17, 17152)), $mul.ref(464, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.2, $p23);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i6);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 17152)), $mul.ref(256, 1));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vhost_poll_stop($p27);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i6);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(256, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vhost_poll_flush($p32);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb30_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 175862);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} free_($p0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 176894);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 87} $free($p0);
    return;
}



const vhost_poll_stop: ref;

axiom vhost_poll_stop == $sub.ref(0, 177926);

procedure vhost_poll_stop($p0: ref);
  free requires assertsPassed;



implementation vhost_poll_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(16, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} remove_wait_queue($p2, $p3);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    return;
}



const vhost_poll_flush: ref;

axiom vhost_poll_flush == $sub.ref(0, 178958);

procedure vhost_poll_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_poll_flush($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vhost_work_flush($p2, $p3);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    return;
}



const vhost_ubuf_put_and_wait: ref;

axiom vhost_ubuf_put_and_wait == $sub.ref(0, 179990);

procedure vhost_ubuf_put_and_wait($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.26, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation vhost_ubuf_put_and_wait($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_32: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_32 := kref_put($p2, vhost_zerocopy_done_signal);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i6 := atomic_read($p5);
    call {:si_unique_call 93} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p8 := get_current();
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p9, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, $p8);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p12, autoremove_wake_function);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $p13);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p18, $p16);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} prepare_to_wait($p19, $p1, 2);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $i22 := atomic_read($p21);
    call {:si_unique_call 98} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i24, $i25 := vhost_ubuf_put_and_wait_loop_$bb8($p1, $p19, $p21, $i24, $i25);
    goto $bb8_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} schedule();
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} prepare_to_wait($p19, $p1, 2);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i24 := atomic_read($p21);
    call {:si_unique_call 103} {:cexpr "tmp___1"} boogie_si_record_i32($i24);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12_dummy;

  $bb9:
    assume $i25 == 1;
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} finish_wait($p26, $p1);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p0);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} kfree($p27);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb12_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vhost_zerocopy_signal_used: ref;

axiom vhost_zerocopy_signal_used == $sub.ref(0, 181022);

procedure vhost_zerocopy_signal_used($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation vhost_zerocopy_signal_used($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i17: i32;
  var $i18: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i8: i32;
  var $i9: i32;
  var $i39: i32;
  var $i40: i32;
  var $i6: i32;
  var $i7: i32;
  var $i33: i32;
  var $i34: i32;
  var $i41: i1;
  var $p42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17132, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    call {:si_unique_call 104} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17128, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, $i2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i2, 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i6, $i7;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i34, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17132, 1));
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p42, $i33);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, $i2;
    goto $bb4;

  $bb4:
    call $p10, $p11, $i12, $p14, $i15, $i16, $p19, $p20, $i21, $p23, $p24, $p25, $p26, $p27, $i28, $p30, $i31, $i32, $i17, $i18, $i35, $i36, $i37, $i38, $i8, $i9, $i39, $i40 := vhost_zerocopy_signal_used_loop_$bb4($p0, $p3, $p10, $p11, $i12, $p14, $i15, $i16, $p19, $p20, $i21, $p23, $p24, $p25, $p26, $p27, $i28, $p30, $i31, $i32, $i17, $i18, $i35, $i36, $i37, $i38, $i8, $i9, $i39, $i40);
    goto $bb4_last;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 8)), $mul.ref(4, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 1);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i17, $i18 := $i9, $i8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i17, $i18;
    goto $bb9;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i9);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 8)), $mul.ref(4, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p23, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.2, $p24);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.2, $p26);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i9);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p27, $mul.ref($i28, 8)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.2, $p30);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vhost_add_used_and_signal($p25, $p0, $i31, 0);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i8, 1);
    call {:si_unique_call 106} {:cexpr "j"} boogie_si_record_i32($i32);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i9, 1);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i36 := $srem.i32($i35, 1024);
    call {:si_unique_call 107} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.2, $p3);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, $i36);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i36, $i32;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i39, $i40;
    goto $bb3;

  $bb10:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i32, $i36;
    goto $bb10_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_591;
}



const eventfd_ctx_put: ref;

axiom eventfd_ctx_put == $sub.ref(0, 182054);

procedure eventfd_ctx_put($p0: ref);
  free requires assertsPassed;



implementation eventfd_ctx_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    return;
}



const fput: ref;

axiom fput == $sub.ref(0, 183086);

procedure fput($p0: ref);
  free requires assertsPassed;



implementation fput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    return;
}



const vhost_vq_reset: ref;

axiom vhost_vq_reset == $sub.ref(0, 184118);

procedure vhost_vq_reset($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_vq_reset($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p2, 1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(184, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, $0.ref);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, $0.ref);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, $0.ref);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(472, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p6, 0);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p7, 0);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p8, 0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(480, 1));
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p9, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(482, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p10, 0);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p11, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(483, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p12, 0);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p13, $sub.i64(0, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17080, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p14, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17088, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p15, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, $0.ref);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, $0.ref);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, $0.ref);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(224, 1));
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, $0.ref);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(208, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p20, $0.ref);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(232, 1));
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, $0.ref);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(216, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, $0.ref);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, $0.ref);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17128, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p24, 0);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17132, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p25, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17144, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, $0.ref);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    return;
}



const vhost_dev_free_iovecs: ref;

axiom vhost_dev_free_iovecs == $sub.ref(0, 185150);

procedure vhost_dev_free_iovecs($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_dev_free_iovecs($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $i9, $i10, $i11, $i4 := vhost_dev_free_iovecs_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $i9, $i10, $i11, $i4);
    goto $bb4_last;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 17152));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vhost_vq_free_iovecs($p8);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i4, 1);
    call {:si_unique_call 109} {:cexpr "i"} boogie_si_record_i32($i9);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.2, $p1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, $i9);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 186182);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 1} true;
    call {:si_unique_call 110} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 111} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const lock_is_held: ref;

axiom lock_is_held == $sub.ref(0, 187214);

procedure lock_is_held($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation lock_is_held($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 113} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const lockdep_rcu_suspicious: ref;

axiom lockdep_rcu_suspicious == $sub.ref(0, 188246);

procedure lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation lockdep_rcu_suspicious($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "lockdep_rcu_suspicious:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    return;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 189278);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 190310);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 116} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 191342);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    return;
}



const kthread_stop: ref;

axiom kthread_stop == $sub.ref(0, 192374);

procedure kthread_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kthread_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mmput: ref;

axiom mmput == $sub.ref(0, 193406);

procedure mmput($p0: ref);
  free requires assertsPassed;



implementation mmput($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    return;
}



const vhost_vq_free_iovecs: ref;

axiom vhost_vq_free_iovecs == $sub.ref(0, 194438);

procedure vhost_vq_free_iovecs($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_vq_free_iovecs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} kfree($p3);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, $0.ref);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} kfree($p7);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, $0.ref);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} kfree($p11);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, $0.ref);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} kfree($p15);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, $0.ref);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    return;
}



const vhost_add_used_and_signal: ref;

axiom vhost_add_used_and_signal == $sub.ref(0, 195470);

procedure vhost_add_used_and_signal($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_add_used_and_signal($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "vhost_add_used_and_signal:arg:head"} boogie_si_record_i32($i2);
    call {:si_unique_call 125} {:cexpr "vhost_add_used_and_signal:arg:len"} boogie_si_record_i32($i3);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} vslice_dummy_var_33 := vhost_add_used($p1, $i2, $i3);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vhost_signal($p0, $p1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    return;
}



const vhost_add_used: ref;

axiom vhost_add_used == $sub.ref(0, 196502);

procedure vhost_add_used($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_add_used($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i24;
  var $i92: i24;
  var $i93: i24;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i1;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i64;
  var $i130: i64;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $p144: ref;
  var $p145: ref;
  var $i146: i16;
  var $i147: i32;
  var $p148: ref;
  var $i149: i16;
  var $i150: i32;
  var $i151: i1;
  var $i152: i32;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i46: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i64;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i64;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i64;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 131} {:cexpr "vhost_add_used:arg:head"} boogie_si_record_i32($i1);
    call {:si_unique_call 132} {:cexpr "vhost_add_used:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.2, $p10);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.2, $p13);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i15 := $urem.i32($i12, $i14);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p9, $mul.ref($i16, 8));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref($i16, 8)), $mul.ref(0, 1));
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    call {:si_unique_call 133} $i20 := devirtbounce(0, $i1, $p19, $sub.i32(0, 14), 0);
    call {:si_unique_call 134} {:cexpr "__pu_err"} boogie_si_record_i32($i20);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p9, $mul.ref($i16, 8)), $mul.ref(4, 1));
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    call {:si_unique_call 139} $i49 := devirtbounce(0, $i2, $p48, $sub.i32(0, 14), 0);
    call {:si_unique_call 140} {:cexpr "__pu_err___0"} boogie_si_record_i32($i49);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    call {:si_unique_call 145} devirtbounce.1(0);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.2, $p75);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i77, 1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    call {:si_unique_call 146} $i83 := devirtbounce(0, $i78, $p82, $sub.i32(0, 14), 0);
    call {:si_unique_call 147} {:cexpr "__pu_err___1"} boogie_si_record_i32($i83);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(483, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.2, $p109);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i110);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i112 := $zext.i1.i64($i111);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 153} {:cexpr "tmp___2"} boogie_si_record_i64($i113);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.2, $p139);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i141, 1);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p144, $i143);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i146 := $load.i16($M.2, $p145);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i146);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(480, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i149 := $load.i16($M.2, $p148);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i150 := $zext.i16.i32($i149);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i147, $i150);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i152 := $zext.i1.i32($i151);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i152);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 159} {:cexpr "tmp___3"} boogie_si_record_i64($i154);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb38:
    assume $i155 == 1;
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(482, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p156, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i114 == 1;
    call {:si_unique_call 154} devirtbounce.1(0);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.2, $p115);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i118 := $load.i64($M.2, $p117);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p17);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.2, $p120);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p121);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i123 := $sub.i64($i119, $i122);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i118, $i123);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} vslice_dummy_var_40 := log_write($p116, $i124, 8);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.2, $p126);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i129 := $load.i64($M.2, $p128);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 2);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_41 := log_write($p127, $i130, 2);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.2, $p132);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i135 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.2, $p136);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} vslice_dummy_var_42 := eventfd_signal($p137, 1);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb23:
    assume $i84 == 1;
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p85, .str.6);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p86, .str.18);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p87, .str.4);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p88, .str.21);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i91 := $load.i24($M.12, $p90);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i92 := $and.i24($i91, $sub.i24(0, 262144));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i93 := $or.i24($i92, 1356);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p90, $i93);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p94, 0);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.13, $p95);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i64($i96);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 1);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i99 := ldv__builtin_expect($i98, 0);
    call {:si_unique_call 149} {:cexpr "tmp___1"} boogie_si_record_i64($i99);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.2, $p102);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i104 := $p2i.ref.i64($p103);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 14);
    goto $bb10;

  $bb28:
    assume $i105 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.2, $p106);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} vslice_dummy_var_39 := eventfd_signal($p107, 1);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i100 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_38 := __dynamic_pr_debug.ref.ref($p5, .str.21);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p51, .str.6);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p52, .str.18);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p53, .str.4);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p54, .str.20);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.12, $p56);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 1350);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p56, $i59);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p60, 0);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.13, $p61);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 142} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.2, $p68);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 14);
    goto $bb10;

  $bb18:
    assume $i71 == 1;
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} vslice_dummy_var_37 := eventfd_signal($p73, 1);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i66 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} vslice_dummy_var_36 := __dynamic_pr_debug.ref.ref($p4, .str.20);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i21 == 1;
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p22, .str.6);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p23, .str.18);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p24, .str.4);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p25, .str.19);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.12, $p27);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 1346);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p27, $i30);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p31, 0);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.13, $p32);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 136} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32(0, 14);
    goto $bb10;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.2, $p43);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_35 := eventfd_signal($p44, 1);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} vslice_dummy_var_34 := __dynamic_pr_debug.ref.ref($p3, .str.19);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vhost_signal: ref;

axiom vhost_signal == $sub.ref(0, 197534);

procedure vhost_signal($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_signal($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_43: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(232, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i6 := vhost_notify($p0, $p1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 161} {:cexpr "tmp"} boogie_si_record_i8($i7);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(232, 1));
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} vslice_dummy_var_43 := eventfd_signal($p10, 1);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vhost_notify: ref;

axiom vhost_notify == $sub.ref(0, 198566);

procedure vhost_notify($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_notify($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $i27: i16;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $p58: ref;
  var $i59: i8;
  var $i60: i1;
  var $i61: i8;
  var $p62: ref;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i64;
  var $i84: i32;
  var $i85: i16;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i24;
  var $i94: i24;
  var $i95: i24;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i64;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i111: i32;
  var $i112: i16;
  var $i113: i32;
  var $i114: i16;
  var $i115: i32;
  var $i116: i16;
  var $i117: i32;
  var $i118: i1;
  var $i17: i1;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i64;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 165} devirtbounce.1(0);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i4 := vhost_has_feature($p0, 24);
    call {:si_unique_call 167} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i18 := vhost_has_feature($p0, 29);
    call {:si_unique_call 171} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(480, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.2, $p56);
    call {:si_unique_call 178} {:cexpr "old"} boogie_si_record_i16($i57);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(482, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.2, $p58);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i8($i60);
    call {:si_unique_call 179} {:cexpr "v"} boogie_si_record_i8($i61);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(476, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.2, $p62);
    call {:si_unique_call 180} {:cexpr "tmp___4"} boogie_si_record_i16($i63);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(480, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p64, $i63);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(482, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p65, 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i61);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i67 := $xor.i1($i66, 1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i68);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 182} {:cexpr "tmp___5"} boogie_si_record_i64($i70);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} might_fault();
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.2, $p76);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i78 := $zext.i32.i64($i77);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p75, $mul.ref($i78, 2));
    call {:si_unique_call 184} $p80 := devirtbounce.3(0, $p79);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p81 := $extractvalue($p80, 0);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i82 := $extractvalue($p80, 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p81);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    call {:si_unique_call 185} {:cexpr "__ret_gu"} boogie_si_record_i32($i84);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i16($i82);
    call {:si_unique_call 186} {:cexpr "event"} boogie_si_record_i16($i85);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i84, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i85);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i63);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i57);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i115);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i117 := vring_need_event($i112, $i114, $i116);
    call {:si_unique_call 192} {:cexpr "tmp___7"} boogie_si_record_i32($i117);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i17 := $i118;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb25:
    assume $i86 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p87, .str.6);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p88, .str.47);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p89, .str.4);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p90, .str.49);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i93 := $load.i24($M.12, $p92);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i94 := $and.i24($i93, $sub.i24(0, 262144));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $i95 := $or.i24($i94, 1483);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p92, $i95);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p96, 0);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.13, $p97);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i64($i98);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i100 := $and.i64($i99, 1);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i101 := ldv__builtin_expect($i100, 0);
    call {:si_unique_call 188} {:cexpr "tmp___6"} boogie_si_record_i64($i101);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.2, $p104);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i107 := $ne.i64($i106, 0);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb5;

  $bb30:
    assume $i107 == 1;
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.2, $p108);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_47 := eventfd_signal($p109, 1);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i102 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} vslice_dummy_var_46 := __dynamic_pr_debug.ref.ref($p3, .str.49);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb5;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    call {:si_unique_call 172} $p24 := devirtbounce.2(0, $p23, $sub.i32(0, 14), 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i25 := $extractvalue($p24, 0);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i26 := $extractvalue($p24, 1);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i16($i26);
    call {:si_unique_call 173} {:cexpr "flags"} boogie_si_record_i16($i27);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i25, 0);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i27);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i17 := $i55;
    goto $bb5;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p29, .str.6);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p30, .str.47);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p31, .str.4);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p32, .str.48);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.12, $p34);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 1469);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p34, $i37);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p38, 0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.13, $p39);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 175} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.2, $p46);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb5;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_45 := eventfd_signal($p51, 1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} vslice_dummy_var_44 := __dynamic_pr_debug.ref.ref($p2, .str.48);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.2, $p6);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(472, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.2, $p9);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i8, $i11);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 169} {:cexpr "tmp___0"} boogie_si_record_i64($i15);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i17 := 1;
    goto $bb5;
}



const eventfd_signal: ref;

axiom eventfd_signal == $sub.ref(0, 199598);

procedure eventfd_signal($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation eventfd_signal($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 193} {:cexpr "eventfd_signal:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 1} true;
    call {:si_unique_call 194} $i2 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 195} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i2);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vhost_has_feature: ref;

axiom vhost_has_feature == $sub.ref(0, 200630);

procedure vhost_has_feature($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vhost_has_feature($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} {:cexpr "vhost_has_feature:arg:bit"} boogie_si_record_i32($i1);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(184, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, $p2);
    call {:si_unique_call 197} {:cexpr "_________p1"} boogie_si_record_i32($i3);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i4 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32(1, $i1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, $i3);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 201662);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 200} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 201} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 202} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 203} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 1} true;
    call {:si_unique_call 204} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 205} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 206} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 207} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 1} true;
    call {:si_unique_call 208} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 209} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 210} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 211} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 1} true;
    call {:si_unique_call 212} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 214} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 215} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i64($p0: ref, $p1: ref, p.2: i32, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 1} true;
    call {:si_unique_call 216} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 217} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 218} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.ref($p0: ref, $p1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 1} true;
    call {:si_unique_call 220} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 222} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64.i32.i32($p0: ref, $p1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb12:
    assume {:verifier.code 1} true;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 1} true;
    call {:si_unique_call 224} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb13:
    assume {:verifier.code 1} true;
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 226} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 227} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i64($p0: ref, $p1: ref, p.2: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb14:
    assume {:verifier.code 1} true;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 228} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 229} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb15:
    assume {:verifier.code 1} true;
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 230} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 231} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const might_fault: ref;

axiom might_fault == $sub.ref(0, 202694);

procedure might_fault();
  free requires assertsPassed;



implementation might_fault()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    return;
}



const vring_need_event: ref;

axiom vring_need_event == $sub.ref(0, 203726);

procedure vring_need_event($i0: i16, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation vring_need_event($i0: i16, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} {:cexpr "vring_need_event:arg:event_idx"} boogie_si_record_i16($i0);
    call {:si_unique_call 233} {:cexpr "vring_need_event:arg:new_idx"} boogie_si_record_i16($i1);
    call {:si_unique_call 234} {:cexpr "vring_need_event:arg:old"} boogie_si_record_i16($i2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i3, $i4);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i1);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i7, $i8);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i6, $i9);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;
}



const log_write: ref;

axiom log_write == $sub.ref(0, 204758);

procedure log_write($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.2;



implementation log_write($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i20: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} {:cexpr "log_write:arg:write_address"} boogie_si_record_i64($i1);
    call {:si_unique_call 236} {:cexpr "log_write:arg:write_length"} boogie_si_record_i64($i2);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i64($i1, 4096);
    call {:si_unique_call 237} {:cexpr "write_page"} boogie_si_record_i64($i3);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i1, 4095);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, $i2);
    call {:si_unique_call 238} {:cexpr "write_length"} boogie_si_record_i64($i7);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p0);
    call {:si_unique_call 239} {:cexpr "base"} boogie_si_record_i64($i8);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i9 := $udiv.i64($i3, 8);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, $i8);
    call {:si_unique_call 240} {:cexpr "log"} boogie_si_record_i64($i10);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i3);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 7);
    call {:si_unique_call 241} {:cexpr "bit"} boogie_si_record_i32($i12);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p13 := $i2p.i64.ref($i10);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i14 := set_bit_to_user($i12, $p13);
    call {:si_unique_call 243} {:cexpr "r"} boogie_si_record_i32($i14);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i15 == 1);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := $i14, $i3, $i7;
    goto $bb8;

  $bb8:
    call $i20, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31 := log_write_loop_$bb8($i8, $i20, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $p29, $i30, $i31);
    goto $bb8_last;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $ule.i64($i19, 4096);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i22 := $i17;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i23 := $sub.i64($i19, 4096);
    call {:si_unique_call 244} {:cexpr "write_length"} boogie_si_record_i64($i23);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i24 := $add.i64($i18, 1);
    call {:si_unique_call 245} {:cexpr "write_page"} boogie_si_record_i64($i24);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i25 := $udiv.i64($i24, 8);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i26 := $add.i64($i25, $i8);
    call {:si_unique_call 246} {:cexpr "log"} boogie_si_record_i64($i26);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i24);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 7);
    call {:si_unique_call 247} {:cexpr "bit"} boogie_si_record_i32($i28);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p29 := $i2p.i64.ref($i26);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i30 := set_bit_to_user($i28, $p29);
    call {:si_unique_call 249} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i20 := $i30;
    assume true;
    goto $bb9, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := $i30, $i24, $i23;
    goto $bb15_dummy;

  $bb9:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i16 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i5 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb11:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i5 := $i22;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb15_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;
}



const set_bit_to_user: ref;

axiom set_bit_to_user == $sub.ref(0, 205790);

procedure set_bit_to_user($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.2;



implementation set_bit_to_user($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i10: i32;
  var vslice_dummy_var_48: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 251} {:cexpr "set_bit_to_user:arg:nr"} boogie_si_record_i32($i0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    call {:si_unique_call 252} {:cexpr "log"} boogie_si_record_i64($i3);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 4095);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 8);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $i0);
    call {:si_unique_call 253} {:cexpr "bit"} boogie_si_record_i32($i7);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $i8 := get_user_pages_fast($i3, 1, 1, $p2);
    call {:si_unique_call 255} {:cexpr "r"} boogie_si_record_i32($i8);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i8, 1);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.14, $p2);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p17 := kmap_atomic($p16);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} set_bit($i7, $p18);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} __kunmap_atomic($p17);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.14, $p2);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_48 := set_page_dirty_lock($p19);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.14, $p2);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} put_page($p21);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 258} devirtbounce.4(0, .str.4, 944, 12);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call set_bit_to_user_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;
}



const get_user_pages_fast: ref;

axiom get_user_pages_fast == $sub.ref(0, 206822);

procedure get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation get_user_pages_fast($i0: i64, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 264} {:cexpr "get_user_pages_fast:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 265} {:cexpr "get_user_pages_fast:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 266} {:cexpr "get_user_pages_fast:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 1} true;
    call {:si_unique_call 267} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 268} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kmap_atomic: ref;

axiom kmap_atomic == $sub.ref(0, 207854);

procedure kmap_atomic($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation kmap_atomic($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __rcu_read_lock();
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p1 := lowmem_page_address($p0);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 208886);

procedure set_bit($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} {:cexpr "set_bit:arg:nr"} boogie_si_record_i32($i0);
    call {:si_unique_call 272} devirtbounce.5(0, $p1, $i0, $p1);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    return;
}



const __kunmap_atomic: ref;

axiom __kunmap_atomic == $sub.ref(0, 209918);

procedure __kunmap_atomic($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation __kunmap_atomic($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} __rcu_read_unlock();
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    return;
}



const set_page_dirty_lock: ref;

axiom set_page_dirty_lock == $sub.ref(0, 210950);

procedure set_page_dirty_lock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation set_page_dirty_lock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 1} true;
    call {:si_unique_call 274} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 275} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_page: ref;

axiom put_page == $sub.ref(0, 211982);

procedure put_page($p0: ref);
  free requires assertsPassed;



implementation put_page($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    return;
}



const __rcu_read_unlock: ref;

axiom __rcu_read_unlock == $sub.ref(0, 213014);

procedure __rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.2;



implementation __rcu_read_unlock()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} devirtbounce.1(0);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p0 := current_thread_info();
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p4, $i3);
    call {:si_unique_call 278} devirtbounce.1(0);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    return;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 214046);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i0 := devirtbounce.6(0, kernel_stack);
    call {:si_unique_call 280} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 8152);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __rcu_read_lock: ref;

axiom __rcu_read_lock == $sub.ref(0, 215078);

procedure __rcu_read_lock();
  free requires assertsPassed;
  modifies $M.2;



implementation __rcu_read_lock()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p0 := current_thread_info();
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 104)), $mul.ref(28, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p4, $i3);
    call {:si_unique_call 282} devirtbounce.1(0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 216110);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vhost_zerocopy_done_signal: ref;

axiom vhost_zerocopy_done_signal == $sub.ref(0, 217142);

procedure vhost_zerocopy_done_signal($p0: ref);
  free requires assertsPassed;



implementation vhost_zerocopy_done_signal($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 104)), $mul.ref(8, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} __wake_up($p2, 3, 1, $0.ref);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 218174);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.26, $CurrAddr, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 285} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 219206);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 220238);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p0 := devirtbounce.7(0, current_task);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 221270);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 222302);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 223334);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 224366);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 225398);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.26, $CurrAddr, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_49: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 289} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_49 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 295} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 296} devirtbounce.8($p2, $p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} warn_slowpath_null(.str.50, 67);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 226430);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 298} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 299} devirtbounce.9(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.15, $p2);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 227462);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 301} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    return;
}



const vhost_work_flush: ref;

axiom vhost_work_flush == $sub.ref(0, 228494);

procedure vhost_work_flush($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_work_flush($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i1;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i1;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} spin_lock_irq($p3);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    call {:si_unique_call 304} {:cexpr "seq"} boogie_si_record_i32($i5);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.2, $p6);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p9, $i8);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} spin_unlock_irq($p10);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i11 := vhost_work_seq_done($p0, $p1, $i5);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i8($i11);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p14 := get_current();
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $M.3 := $store.i32($M.3, $p15, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, $p14);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, autoremove_wake_function);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, $p19);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p24, $p22);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} prepare_to_wait($p25, $p2, 2);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i26 := vhost_work_seq_done($p0, $p1, $i5);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 316} {:cexpr "tmp___1"} boogie_si_record_i8($i27);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i28 == 1);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i29, $i30, $i31 := vhost_work_flush_loop_$bb8($p0, $p1, $p2, $i5, $p25, $i29, $i30, $i31);
    goto $bb8_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} schedule();
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} prepare_to_wait($p25, $p2, 2);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i29 := vhost_work_seq_done($p0, $p1, $i5);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 321} {:cexpr "tmp___1"} boogie_si_record_i8($i30);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb12_dummy;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} finish_wait($p32, $p2);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} spin_lock_irq($p33);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.2, $p34);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 1);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p37, $i36);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.2, $p38);
    call {:si_unique_call 309} {:cexpr "flushing"} boogie_si_record_i32($i39);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} spin_unlock_irq($p40);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 0);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i42);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 312} {:cexpr "tmp___2"} boogie_si_record_i64($i44);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i45 == 1;
    call {:si_unique_call 322} devirtbounce.4(0, .str.4, 130, 12);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call vhost_work_flush_loop_$bb15();
    goto $bb15_last;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 229526);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_lock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} _raw_spin_lock_irq($p2);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 230558);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} _raw_spin_unlock_irq($p2);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    return;
}



const vhost_work_seq_done: ref;

axiom vhost_work_seq_done == $sub.ref(0, 231590);

procedure vhost_work_seq_done($p0: ref, $p1: ref, $i2: i32) returns ($r: i1);
  free requires assertsPassed;



implementation vhost_work_seq_done($p0: ref, $p1: ref, $i2: i32) returns ($r: i1)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "vhost_work_seq_done:arg:seq"} boogie_si_record_i32($i2);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_lock_irq($p3);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i2, $i5);
    call {:si_unique_call 327} {:cexpr "left"} boogie_si_record_i32($i6);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} spin_unlock_irq($p7);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i6, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 232622);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 233654);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 234686);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_38: ref;

axiom ldv_mutex_lock_38 == $sub.ref(0, 235718);

procedure ldv_mutex_lock_38($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_38($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} mutex_lock($p0);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const vhost_vq_access_ok: ref;

axiom vhost_vq_access_ok == $sub.ref(0, 236750);

procedure vhost_vq_access_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vhost_vq_access_ok($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(184, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i11 := vq_access_ok($p2, $i4, $p6, $p8, $p10);
    call {:si_unique_call 332} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i17 := vq_log_access_ok($p14, $p0, $p16);
    call {:si_unique_call 334} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb6;

  $bb3:
    assume $i18 == 1;
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i19 := 1;
    goto $bb5;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 237782);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const printk: ref;

axiom printk == $sub.ref(0, 238814);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 338} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 341} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 342} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 343} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 344} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_unlock_39: ref;

axiom ldv_mutex_unlock_39 == $sub.ref(0, 239846);

procedure ldv_mutex_unlock_39($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_39($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} mutex_unlock($p0);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_40: ref;

axiom ldv_mutex_unlock_40 == $sub.ref(0, 240878);

procedure ldv_mutex_unlock_40($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_40($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} mutex_unlock($p0);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_mutex: ref;

axiom ldv_mutex_unlock_mutex == $sub.ref(0, 241910);

procedure ldv_mutex_unlock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} ldv_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 350} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 242942);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 243974);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 351} __VERIFIER_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const vq_access_ok: ref;

axiom vq_access_ok == $sub.ref(0, 245006);

procedure vq_access_ok($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vq_access_ok($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $p27: ref;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "vq_access_ok:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i5 := vhost_has_feature($p0, 29);
    call {:si_unique_call 354} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 2 else 0);
    call {:si_unique_call 355} {:cexpr "s"} boogie_si_record_i64($i7);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $p8 := current_thread_info();
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i10 := $mul.i64($i9, 16);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    call {:si_unique_call 357} $p14 := devirtbounce.10(0, $p2, $i10, $i13);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i15 := $extractvalue($p14, 0);
    call {:si_unique_call 358} {:cexpr "flag"} boogie_si_record_i64($i15);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i19 := ldv__builtin_expect($i18, 1);
    call {:si_unique_call 360} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p21 := current_thread_info();
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i1);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, 2);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i24 := $mul.i64($i23, 2);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i25 := $add.i64($i24, $i7);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.2, $p27);
    call {:si_unique_call 362} $p29 := devirtbounce.11(0, $p3, $i25, $i28);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i30 := $extractvalue($p29, 0);
    call {:si_unique_call 363} {:cexpr "flag___0"} boogie_si_record_i64($i30);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i34 := ldv__builtin_expect($i33, 1);
    call {:si_unique_call 365} {:cexpr "tmp___3"} boogie_si_record_i64($i34);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb9;

  $bb3:
    assume $i35 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p36 := current_thread_info();
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i38 := $mul.i64($i37, 8);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i39 := $add.i64($i38, $i7);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 4);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.2, $p42);
    call {:si_unique_call 367} $p44 := devirtbounce.12(0, $p4, $i40, $i43);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i45 := $extractvalue($p44, 0);
    call {:si_unique_call 368} {:cexpr "flag___1"} boogie_si_record_i64($i45);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} $i49 := ldv__builtin_expect($i48, 1);
    call {:si_unique_call 370} {:cexpr "tmp___5"} boogie_si_record_i64($i49);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb8;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i51 := 1;
    goto $bb7;
}



const vq_log_access_ok: ref;

axiom vq_log_access_ok == $sub.ref(0, 246038);

procedure vq_log_access_ok($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vq_log_access_ok($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i1;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i25: i32;
  var $i37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i3 := vhost_has_feature($p0, 29);
    call {:si_unique_call 372} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 2 else 0);
    call {:si_unique_call 373} {:cexpr "s"} boogie_si_record_i64($i5);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i6 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 375} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.2, $p13);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.2, $p15);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i19 := vhost_has_feature($p18, 26);
    call {:si_unique_call 380} {:cexpr "tmp___2"} boogie_si_record_i32($i19);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} $i20 := vq_memory_access_ok($p2, $p16, $i19);
    call {:si_unique_call 382} {:cexpr "tmp___3"} boogie_si_record_i32($i20);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(483, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.2, $p22);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i8.i1($i23);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i37 := $i25;
    goto $bb18;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i27 := $load.i64($M.2, $p26);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.2, $p28);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i31 := $mul.i64($i30, 8);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i32 := $add.i64($i31, $i5);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 4);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i34 := log_access_ok($p2, $i27, $i33);
    call {:si_unique_call 384} {:cexpr "tmp___4"} boogie_si_record_i32($i34);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i25 := $i36;
    goto $bb14;

  $bb15:
    assume $i35 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i36 := 1;
    goto $bb17;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1(1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(8, 1)), $mul.ref(120, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i11 := lock_is_held($p10);
    call {:si_unique_call 377} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} lockdep_rcu_suspicious(.str.4, 586, .str.5);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb3;
}



const vq_memory_access_ok: ref;

axiom vq_memory_access_ok == $sub.ref(0, 247070);

procedure vq_memory_access_ok($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vq_memory_access_ok($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i9: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} {:cexpr "vq_memory_access_ok:arg:log_all"} boogie_si_record_i32($i2);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.2, $p6);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i8 := $ult.i32(0, $i7);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    call $p10, $p11, $i12, $p14, $i15, $p16, $p17, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i9 := vq_memory_access_ok_loop_$bb8($p0, $p1, $i2, $p6, $p10, $p11, $i12, $p14, $i15, $p16, $p17, $p18, $i19, $p21, $i22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $i9);
    goto $bb8_last;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 32)), $mul.ref(16, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    call {:si_unique_call 386} {:cexpr "a"} boogie_si_record_i64($i15);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $p16 := current_thread_info();
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p17 := $i2p.i64.ref($i15);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref($i12, 32)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.2, $p18);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.2, $p21);
    call {:si_unique_call 388} $p23 := devirtbounce.13(0, $p17, $i19, $i22);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i24 := $extractvalue($p23, 0);
    call {:si_unique_call 389} {:cexpr "flag"} boogie_si_record_i64($i24);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i28 := ldv__builtin_expect($i27, 1);
    call {:si_unique_call 391} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i29 == 1);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i2, 0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i9, 1);
    call {:si_unique_call 394} {:cexpr "i"} boogie_si_record_i32($i37);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p6);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i39 := $ult.i32($i37, $i38);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i39 == 1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i37;
    goto $bb19_dummy;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p11, $mul.ref($i12, 32)), $mul.ref(0, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.2, $p31);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p11, $mul.ref($i12, 32)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i35 := log_access_ok($p0, $i32, $i34);
    call {:si_unique_call 393} {:cexpr "tmp"} boogie_si_record_i32($i35);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;
}



const log_access_ok: ref;

axiom log_access_ok == $sub.ref(0, 248102);

procedure log_access_ok($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation log_access_ok($p0: ref, $i1: i64, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} {:cexpr "log_access_ok:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 396} {:cexpr "log_access_ok:arg:sz"} boogie_si_record_i64($i2);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i3 := $udiv.i64($i1, 32768);
    call {:si_unique_call 397} {:cexpr "a"} boogie_si_record_i64($i3);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i5 := $xor.i64($i4, $sub.i64(0, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i6 := $ult.i64($i5, $i3);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p8 := current_thread_info();
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref($i3, 1));
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i2, 32767);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i11 := $udiv.i64($i10, 32768);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.2, $p13);
    call {:si_unique_call 399} $p15 := devirtbounce.13(0, $p9, $i11, $i14);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i16 := $extractvalue($p15, 0);
    call {:si_unique_call 400} {:cexpr "flag"} boogie_si_record_i64($i16);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i20 := ldv__builtin_expect($i19, 1);
    call {:si_unique_call 402} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const ldv_mutex_lock_mutex: ref;

axiom ldv_mutex_lock_mutex == $sub.ref(0, 249134);

procedure ldv_mutex_lock_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i1 := $M.16;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} ldv_error();
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.16 := 2;
    call {:si_unique_call 404} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 250166);

procedure mutex_lock($p0: ref);
  free requires assertsPassed;



implementation mutex_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    return;
}



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 251198);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 406} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const vhost_scsi_complete_cmd_work: ref;

axiom vhost_scsi_complete_cmd_work == $sub.ref(0, 252230);

procedure vhost_scsi_complete_cmd_work($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_scsi_complete_cmd_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p8: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1 := $alloc($mul.ref(108, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 51784), 52000));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p5 := vhost_scsi_get_cmd_from_completion($p4);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 51784), 52000)), $mul.ref(8, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 51784), 52000)), $mul.ref(328, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p72, $mul.ref(2, 17152));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} vhost_signal($p70, $p73);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb4;

  $bb4:
    call $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $p32, $p33, $i34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p67, $i68, $i69, $p8, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52 := vhost_scsi_complete_cmd_work_loop_$bb4($p1, $p2, $p3, $p4, $p10, $p11, $p12, $p13, $p14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p28, $i29, $i30, $p32, $p33, $i34, $p35, $p36, $i37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $p46, $p47, $p48, $p49, $p50, $p51, $p52, $p53, $i54, $i55, $i56, $i57, $i58, $i59, $p60, $p61, $p62, $p63, $i64, $p67, $i68, $i69, $p8, cmdloc_dummy_var_6, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_50, vslice_dummy_var_51, vslice_dummy_var_52);
    goto $bb4_last;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p10, .str.6);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p11, .str.87);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p12, .str.53);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p13, .str.88);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.12, $p15);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 445);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p15, $i18);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p19, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.13, $p20);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.2;
    call {:si_unique_call 414} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p32, 0, 108, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_7;
    $p33 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(40, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.2, $p33);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 108)), $mul.ref(4, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p35, $i34);
    $p36 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.2, $p36);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 108)), $mul.ref(10, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p38, $i37);
    $p39 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.2, $p39);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 108)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p42, $i41);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 108)), $mul.ref(0, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.2, $p43);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i45 := $zext.i32.i64($i44);
    call {:si_unique_call 415} {:cexpr "__len"} boogie_si_record_i64($i45);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 108)), $mul.ref(12, 1));
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(1136, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.2;
    cmdloc_dummy_var_9 := $M.2;
    call {:si_unique_call 416} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p47, $p49, $i45, $zext.i32.i64(4), 0 == 1);
    $M.2 := cmdloc_dummy_var_10;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(40, 1));
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i54 := copy_to_user($p52, $p53, 108);
    call {:si_unique_call 418} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i58 := ldv__builtin_expect($i57, 1);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i64($i58);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i59 == 1);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_52 := printk.ref(.str.89);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vhost_scsi_free_cmd($p8);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $p67 := vhost_scsi_get_cmd_from_completion($p4);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i69 == 1);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb12:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $p8 := $p67;
    goto $bb12_dummy;

  $bb9:
    assume $i59 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 51784), 52000)), $mul.ref(328, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(2, 17152));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.2, $p63);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_51 := vhost_add_used($p62, $i64, 0);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(40, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    $p28 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.2, $p28);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_50 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p2, .str.88, .str.87, $p8, $i27, $i30);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;
}



const vhost_work_init: ref;

axiom vhost_work_init == $sub.ref(0, 253262);

procedure vhost_work_init($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_work_init($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} INIT_LIST_HEAD($p3);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(16, 1));
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, $p1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(24, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __init_waitqueue_head($p5, .str, $p2);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(112, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p6, 0);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(120, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p7, 0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 254294);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p1, $p0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p0);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 255326);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 256358);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    return;
}



const vhost_scsi_ctl_handle_kick: ref;

axiom vhost_scsi_ctl_handle_kick == $sub.ref(0, 257390);

procedure vhost_scsi_ctl_handle_kick($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation vhost_scsi_ctl_handle_kick($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str.6);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.91);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.53);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.92);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 792);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 431} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_53 := __dynamic_pr_debug.ref.ref.ref($p1, .str.92, .str.91);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vhost_scsi_evt_handle_kick: ref;

axiom vhost_scsi_evt_handle_kick == $sub.ref(0, 258422);

procedure vhost_scsi_evt_handle_kick($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation vhost_scsi_evt_handle_kick($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var vslice_dummy_var_54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str.6);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.93);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.53);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.94);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 797);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 435} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_54 := __dynamic_pr_debug.ref.ref.ref($p1, .str.94, .str.93);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vhost_scsi_handle_kick: ref;

axiom vhost_scsi_handle_kick == $sub.ref(0, 259454);

procedure vhost_scsi_handle_kick($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, $CurrAddr, assertsPassed;



implementation vhost_scsi_handle_kick($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 320), 17152)), $mul.ref(0, 1));
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 8), 52000));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vhost_scsi_handle_vq($p6);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const vhost_dev_init: ref;

axiom vhost_dev_init == $sub.ref(0, 260486);

procedure vhost_dev_init($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_dev_init($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i23: i32;
  var vslice_dummy_var_55: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 441} {:cexpr "vhost_dev_init:arg:nvqs"} boogie_si_record_i32($i2);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, $p1);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p7, $i2);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __mutex_init($p8, .str.1, $p3);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, $0.ref);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, $0.ref);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, $0.ref);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p12, $0.ref);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_55 := spinlock_check($p13);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1)), $mul.ref(0, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} __raw_spin_lock_init($p17, .str.2, $p4);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(296, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} INIT_LIST_HEAD($p18);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, $0.ref);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb4;

  $bb4:
    call $p24, $p25, $i26, $p28, $p29, $p30, $i31, $p33, $p34, $p35, $i36, $p38, $p39, $p40, $i41, $p43, $p44, $p45, $i46, $p48, $p49, $p50, $i51, $p53, $p54, $p55, $i56, $p57, $p58, $p59, $i60, $p62, $p63, $i64, $i65, $p66, $p67, $i68, $p70, $p71, $p72, $i73, $p75, $p76, $i77, $i78, $i79, $i23 := vhost_dev_init_loop_$bb4($p0, $p5, $p20, $p24, $p25, $i26, $p28, $p29, $p30, $i31, $p33, $p34, $p35, $i36, $p38, $p39, $p40, $i41, $p43, $p44, $p45, $i46, $p48, $p49, $p50, $i51, $p53, $p54, $p55, $i56, $p57, $p58, $p59, $i60, $p62, $p63, $i64, $i65, $p66, $p67, $i68, $p70, $p71, $p72, $i73, $p75, $p76, $i77, $i78, $i79, $i23);
    goto $bb4_last;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.2, $p24);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i23);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, $0.ref);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i23);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p30, $mul.ref($i31, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p33, $0.ref);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i23);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, $0.ref);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i23);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, $0.ref);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i23);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p45, $mul.ref($i46, 17152)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, $p0);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.2, $p49);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i23);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p50, $mul.ref($i51, 17152)), $mul.ref(8, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __mutex_init($p53, .str.3, $p5);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i23);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p55, $mul.ref($i56, 17152));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vhost_vq_reset($p0, $p57);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.2, $p58);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i23);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref($i60, 17152)), $mul.ref(464, 1));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.2, $p62);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i64 := $p2i.ref.i64($p63);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i23, 1);
    call {:si_unique_call 449} {:cexpr "i"} boogie_si_record_i32($i77);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.2, $p20);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i78, $i77);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i79 == 1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i77;
    goto $bb9_dummy;

  $bb6:
    assume $i65 == 1;
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.2, $p66);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i23);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p67, $mul.ref($i68, 17152)), $mul.ref(256, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.2, $p71);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i23);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p72, $mul.ref($i73, 17152)), $mul.ref(464, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.2, $p75);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vhost_poll_init($p70, $p76, 1, $p0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 261518);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    return;
}



const vhost_poll_init: ref;

axiom vhost_poll_init == $sub.ref(0, 262550);

procedure vhost_poll_init($p0: ref, $p1: ref, $i2: i64, $p3: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_poll_init($p0: ref, $p1: ref, $i2: i64, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} {:cexpr "vhost_poll_init:arg:mask"} boogie_si_record_i64($i2);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} init_waitqueue_func_entry($p4, vhost_poll_wakeup);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} init_poll_funcptr($p5, vhost_poll_func);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p6, $i2);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, $p3);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} vhost_work_init($p8, $p1);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    return;
}



const vhost_poll_wakeup: ref;

axiom vhost_poll_wakeup == $sub.ref(0, 263582);

procedure vhost_poll_wakeup($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_poll_wakeup($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} {:cexpr "vhost_poll_wakeup:arg:mode"} boogie_si_record_i32($i1);
    call {:si_unique_call 455} {:cexpr "vhost_poll_wakeup:arg:sync"} boogie_si_record_i32($i2);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 24), 208));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 24), 208)), $mul.ref(192, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.2, $p6);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p3);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i9 := $and.i64($i7, $i8);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vhost_poll_queue($p5);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_waitqueue_func_entry: ref;

axiom init_waitqueue_func_entry == $sub.ref(0, 264614);

procedure init_waitqueue_func_entry($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation init_waitqueue_func_entry($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p2, 0);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, $0.ref);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, $p1);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    return;
}



const vhost_poll_func: ref;

axiom vhost_poll_func == $sub.ref(0, 265646);

procedure vhost_poll_func($p0: ref, $p1: ref, $p2: ref);



const init_poll_funcptr: ref;

axiom init_poll_funcptr == $sub.ref(0, 266678);

procedure init_poll_funcptr($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation init_poll_funcptr($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p2, $p1);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p3, $sub.i64(0, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 267710);

procedure add_wait_queue($p0: ref, $p1: ref);



const vhost_poll_queue: ref;

axiom vhost_poll_queue == $sub.ref(0, 268742);

procedure vhost_poll_queue($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_poll_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(64, 1));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vhost_work_queue($p2, $p3);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    return;
}



const vhost_work_queue: ref;

axiom vhost_work_queue == $sub.ref(0, 269774);

procedure vhost_work_queue($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_work_queue($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var vslice_dummy_var_56: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $p3 := spinlock_check($p2);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i4 := _raw_spin_lock_irqsave($p3);
    call {:si_unique_call 460} {:cexpr "flags"} boogie_si_record_i64($i4);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i6 := list_empty($p5);
    call {:si_unique_call 462} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(224, 1));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} spin_unlock_irqrestore($p17, $i4);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(296, 1));
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} list_add_tail($p8, $p9);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, 1);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(116, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p13, $i12);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} vslice_dummy_var_56 := wake_up_process($p15);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 270806);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 1} true;
    call {:si_unique_call 466} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 467} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 271838);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __list_add($p0, $p3, $p1);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    return;
}



const wake_up_process: ref;

axiom wake_up_process == $sub.ref(0, 272870);

procedure wake_up_process($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation wake_up_process($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 1} true;
    call {:si_unique_call 469} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 470} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 273902);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 274934);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 275966);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    return;
}



const vhost_scsi_handle_vq: ref;

axiom vhost_scsi_handle_vq == $sub.ref(0, 276998);

procedure vhost_scsi_handle_vq($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, $CurrAddr, assertsPassed;



implementation vhost_scsi_handle_vq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i1;
  var $i65: i8;
  var $i66: i1;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i121: i32;
  var $i122: i64;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i24;
  var $i139: i24;
  var $i140: i24;
  var $p141: ref;
  var $p142: ref;
  var $i143: i8;
  var $i144: i64;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $i148: i32;
  var $i149: i64;
  var $p152: ref;
  var $i153: i64;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $i167: i32;
  var $i168: i64;
  var $i169: i64;
  var $i170: i1;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i24;
  var $i178: i24;
  var $i179: i24;
  var $p180: ref;
  var $p181: ref;
  var $i182: i8;
  var $i183: i64;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p189: ref;
  var $i190: i64;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $i195: i1;
  var $p196: ref;
  var $p197: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i24;
  var $i206: i24;
  var $i207: i24;
  var $p208: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i64;
  var $i212: i64;
  var $i213: i64;
  var $i214: i1;
  var $p217: ref;
  var $p218: ref;
  var $p220: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i64;
  var $i229: i64;
  var $i230: i1;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i24;
  var $i238: i24;
  var $i239: i24;
  var $p240: ref;
  var $p241: ref;
  var $i242: i8;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $i246: i1;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $i255: i1;
  var $i259: i32;
  var $i260: i64;
  var $p263: ref;
  var $i264: i64;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i257: i32;
  var $i258: i32;
  var $i269: i32;
  var $i256: i32;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i24;
  var $i282: i24;
  var $i283: i24;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i64;
  var $i288: i64;
  var $i289: i64;
  var $i290: i1;
  var $p291: ref;
  var $i292: i64;
  var $p294: ref;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $i307: i24;
  var $i308: i24;
  var $i309: i24;
  var $p310: ref;
  var $p311: ref;
  var $i312: i8;
  var $i313: i64;
  var $i314: i64;
  var $i315: i64;
  var $i316: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i64;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $i326: i32;
  var $i327: i64;
  var $i328: i64;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i24;
  var $i337: i24;
  var $i338: i24;
  var $p339: ref;
  var $p340: ref;
  var $i341: i8;
  var $i342: i64;
  var $i343: i64;
  var $i344: i64;
  var $i345: i1;
  var $i346: i32;
  var $i347: i64;
  var $p350: ref;
  var $i351: i64;
  var $i352: i32;
  var $i353: i32;
  var $p355: ref;
  var $p356: ref;
  var $i357: i64;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $i362: i32;
  var $i363: i64;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i64;
  var $i385: i64;
  var $i386: i1;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i24;
  var $i395: i24;
  var $i396: i24;
  var $p397: ref;
  var $p398: ref;
  var $i399: i8;
  var $i400: i64;
  var $i401: i64;
  var $i402: i64;
  var $i403: i1;
  var $p404: ref;
  var $p405: ref;
  var $i406: i32;
  var $p408: ref;
  var $p409: ref;
  var $i410: i64;
  var $i411: i1;
  var $p412: ref;
  var $p413: ref;
  var $p416: ref;
  var $i417: i8;
  var $i418: i32;
  var $i419: i32;
  var $p421: ref;
  var $i422: i8;
  var $i423: i32;
  var $i424: i32;
  var $i425: i32;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i24;
  var $i434: i24;
  var $i435: i24;
  var $p436: ref;
  var $p437: ref;
  var $i438: i8;
  var $i439: i64;
  var $i440: i64;
  var $i441: i64;
  var $i442: i1;
  var $p444: ref;
  var $i445: i8;
  var $i446: i32;
  var $p447: ref;
  var $i448: i32;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $i453: i64;
  var $p454: ref;
  var $i455: i1;
  var $i456: i32;
  var $i457: i32;
  var $i458: i1;
  var $i459: i32;
  var $i460: i64;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i24;
  var $i470: i24;
  var $i471: i24;
  var $p472: ref;
  var $p473: ref;
  var $i474: i8;
  var $i475: i64;
  var $i476: i64;
  var $i477: i64;
  var $i478: i1;
  var $p480: ref;
  var $p481: ref;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $p485: ref;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p495: ref;
  var $p497: ref;
  var $p499: ref;
  var $p500: ref;
  var $p501: ref;
  var $p503: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i64;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i64;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i64;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i64;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i64;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i64;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i64;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i64;
  var vslice_dummy_var_78: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p1 := $alloc($mul.ref(56, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p19, $mul.ref(2, 17152));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 492} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(8, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} ldv_mutex_lock_20($p30);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vhost_disable_notify($p31, $p20);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    call $p32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i89, $i90, $i91, $i92, $i93, $i94, $i86, $i87, $i88, $i75, $i76, $i77, $i121, $i122, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p199, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i213, $i214, $p217, $p218, $p220, $p223, $p224, $i225, $i226, $i227, $i228, $i229, $i230, $i255, $i259, $i260, $p263, $i264, $i265, $i266, $i267, $i268, $i257, $i258, $i269, $i256, $p270, $p271, $i272, $i273, $p274, $p301, $p302, $p303, $p304, $p305, $p306, $i307, $i308, $i309, $p310, $p311, $i312, $i313, $i314, $i315, $i316, $p318, $i319, $i320, $p323, $i324, $i325, $i326, $i327, $i328, $i329, $i362, $i363, $p366, $p367, $p369, $i370, $p371, $p372, $p373, $p374, $p375, $p376, $p377, $p378, $p379, $p380, $i381, $i382, $i383, $i384, $i385, $i386, $p387, $p416, $i417, $i418, $i419, $p421, $i422, $i423, $i424, $i425, $p426, $p427, $p428, $p429, $p430, $p431, $p432, $i433, $i434, $i435, $p436, $p437, $i438, $i439, $i440, $i441, $i442, $p444, $i445, $i446, $p447, $i448, $i450, $p451, $p452, $i453, $p454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $p487, $p488, $p489, $p491, $p492, $p493, $p495, $p497, $p499, $p500, $p501, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, vslice_dummy_var_58, vslice_dummy_var_65, vslice_dummy_var_70, vslice_dummy_var_75, vslice_dummy_var_78 := vhost_scsi_handle_vq_loop_$bb5($p0, $p1, $p2, $p3, $p4, $p8, $p11, $p14, $p16, $p17, $p19, $p20, $p22, $p32, $p33, $p34, $i35, $p36, $p37, $p38, $p39, $p40, $p41, $i42, $i43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i57, $i58, $i59, $p60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i89, $i90, $i91, $i92, $i93, $i94, $i86, $i87, $i88, $i75, $i76, $i77, $i121, $i122, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $p164, $i165, $i166, $i167, $i168, $i169, $i170, $p199, $p200, $p201, $p202, $p203, $p204, $i205, $i206, $i207, $p208, $p209, $i210, $i211, $i212, $i213, $i214, $p217, $p218, $p220, $p223, $p224, $i225, $i226, $i227, $i228, $i229, $i230, $i255, $i259, $i260, $p263, $i264, $i265, $i266, $i267, $i268, $i257, $i258, $i269, $i256, $p270, $p271, $i272, $i273, $p274, $p301, $p302, $p303, $p304, $p305, $p306, $i307, $i308, $i309, $p310, $p311, $i312, $i313, $i314, $i315, $i316, $p318, $i319, $i320, $p323, $i324, $i325, $i326, $i327, $i328, $i329, $i362, $i363, $p366, $p367, $p369, $i370, $p371, $p372, $p373, $p374, $p375, $p376, $p377, $p378, $p379, $p380, $i381, $i382, $i383, $i384, $i385, $i386, $p387, $p416, $i417, $i418, $i419, $p421, $i422, $i423, $i424, $i425, $p426, $p427, $p428, $p429, $p430, $p431, $p432, $i433, $i434, $i435, $p436, $p437, $i438, $i439, $i440, $i441, $i442, $p444, $i445, $i446, $p447, $i448, $i450, $p451, $p452, $i453, $p454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $p487, $p488, $p489, $p491, $p492, $p493, $p495, $p497, $p499, $p500, $p501, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, vslice_dummy_var_58, vslice_dummy_var_65, vslice_dummy_var_70, vslice_dummy_var_75, vslice_dummy_var_78);
    goto $bb5_last;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1));
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i35 := vhost_get_vq_desc($p32, $p20, $p34, 1024, $p2, $p3, $0.ref, $0.ref);
    call {:si_unique_call 497} {:cexpr "head"} boogie_si_record_i32($i35);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p36, .str.6);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p37, .str.96);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p38, .str.53);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p39, .str.97);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.12, $p41);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 654);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p41, $i44);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p45, 0);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.13, $p46);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 499} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i35, 0);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i56 := $zext.i1.i32($i55);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i56);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(176, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i35, $i61);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.17, $p2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.17, $p2);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 1);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.17, $p2);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i90 := $ugt.i32($i89, 1);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p95, .str.6);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p96, .str.96);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p97, .str.53);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p98, .str.98);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i101 := $load.i24($M.12, $p100);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i102 := $and.i24($i101, $sub.i24(0, 262144));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i103 := $or.i24($i102, 682);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p100, $i103);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p104, 0);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.13, $p105);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i107, 1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i109 := ldv__builtin_expect($i108, 0);
    call {:si_unique_call 514} {:cexpr "tmp___4"} boogie_si_record_i64($i109);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.2, $p114);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i116 := $p2i.ref.i64($p115);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(8, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} ldv_mutex_unlock_21($p503);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i117 == 1;
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.2, $p118);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} vslice_dummy_var_60 := eventfd_signal($p119, 1);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i110 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.17, $p2);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i112 := $load.i32($M.18, $p3);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_59 := __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.98, $i111, $i112);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i90 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.18, $p3);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 1);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb34;

  $bb35:
    assume $i92 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.17, $p2);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    call {:si_unique_call 515} {:cexpr "data_num"} boogie_si_record_i32($i94);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88 := $i94, 1, 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := $i86, $i87, $i88;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.17, $p2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i122 := $zext.i32.i64($i121);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i122, 16)), $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.2, $p125);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 108);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 510} {:cexpr "tmp___6"} boogie_si_record_i64($i130);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i165 := $load.i64($M.2, $p164);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 51);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i167 := $zext.i1.i32($i166);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i168 := $sext.i32.i64($i167);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i169 := ldv__builtin_expect($i168, 0);
    call {:si_unique_call 523} {:cexpr "tmp___8"} boogie_si_record_i64($i169);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i170 := $ne.i64($i169, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p199, .str.6);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p200, .str.96);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p201, .str.53);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p202, .str.101);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i205 := $load.i24($M.12, $p204);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i206 := $and.i24($i205, $sub.i24(0, 262144));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i207 := $or.i24($i206, 703);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p204, $i207);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p208, 0);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.13, $p209);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i64($i210);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i212 := $and.i64($i211, 1);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i213 := ldv__builtin_expect($i212, 0);
    call {:si_unique_call 529} {:cexpr "tmp___9"} boogie_si_record_i64($i213);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i214 := $ne.i64($i213, 0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.2, $p223);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i225 := __copy_from_user($p220, $p224, 51);
    call {:si_unique_call 532} {:cexpr "ret"} boogie_si_record_i32($i225);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i227 := $zext.i1.i32($i226);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i228 := $sext.i32.i64($i227);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $i229 := ldv__builtin_expect($i228, 0);
    call {:si_unique_call 534} {:cexpr "tmp___11"} boogie_si_record_i64($i229);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i230 := $ne.i64($i229, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i255 := $ult.i32(0, $i75);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i256 := 0;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i255 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p270 := vhost_scsi_allocate_cmd($p22, $p1, $i256, $i77);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $p271 := $bitcast.ref.ref($p270);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i272 := IS_ERR($p271);
    call {:si_unique_call 543} {:cexpr "tmp___14"} boogie_si_record_i64($i272);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p274 := $p270;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p301, .str.6);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p302, .str.96);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p303, .str.53);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p304, .str.104);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p306 := $bitcast.ref.ref($p305);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i307 := $load.i24($M.12, $p306);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i308 := $and.i24($i307, $sub.i24(0, 262144));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i309 := $or.i24($i308, 723);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p306, $i309);
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p310, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i312 := $load.i8($M.13, $p311);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i313 := $zext.i8.i64($i312);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i314 := $and.i64($i313, 1);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $i315 := ldv__builtin_expect($i314, 0);
    call {:si_unique_call 551} {:cexpr "tmp___15"} boogie_si_record_i64($i315);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i316 := $ne.i64($i315, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(48, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p318, $p0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.17, $p2);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i320 := $zext.i32.i64($i319);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i320, 16)), $mul.ref(8, 1));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i324 := $load.i64($M.2, $p323);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 108);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i326 := $zext.i1.i32($i325);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i327 := $sext.i32.i64($i326);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $i328 := ldv__builtin_expect($i327, 0);
    call {:si_unique_call 554} {:cexpr "tmp___17"} boogie_si_record_i64($i328);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i329 := $ne.i64($i328, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.17, $p2);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i363 := $zext.i32.i64($i362);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i363, 16)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.2, $p366);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(40, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p369, $p367);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i370 := $ugt.i64(32, 63);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i370 == 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p376 := $bitcast.ref.ref($p375);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(19, 1));
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p378 := $bitcast.ref.ref($p377);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.2;
    cmdloc_dummy_var_15 := $M.2;
    call {:si_unique_call 560} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p376, $p378, 32, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_16;
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p380 := $bitcast.ref.ref($p379);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i381 := scsi_command_size($p380);
    call {:si_unique_call 562} {:cexpr "tmp___20"} boogie_si_record_i32($i381);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i382 := $ugt.i32($i381, 32);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i383 := $zext.i1.i32($i382);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i384 := $sext.i32.i64($i383);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $i385 := ldv__builtin_expect($i384, 0);
    call {:si_unique_call 564} {:cexpr "tmp___21"} boogie_si_record_i64($i385);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i386 := $ne.i64($i385, 0);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p387 := $p270;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.2, $p416);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i418 := $zext.i8.i32($i417);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i419 := $shl.i32($i418, 8);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i422 := $load.i8($M.2, $p421);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i423 := $zext.i8.i32($i422);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i424 := $or.i32($i419, $i423);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i425 := $and.i32($i424, 16383);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(28, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p426, $i425);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p427, .str.6);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p428, .str.96);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p429, .str.53);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p430, .str.107);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p432 := $bitcast.ref.ref($p431);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i433 := $load.i24($M.12, $p432);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i434 := $and.i24($i433, $sub.i24(0, 262144));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i435 := $or.i24($i434, 759);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p432, $i435);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p436, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i438 := $load.i8($M.13, $p437);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i439 := $zext.i8.i64($i438);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i440 := $and.i64($i439, 1);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i441 := ldv__builtin_expect($i440, 0);
    call {:si_unique_call 572} {:cexpr "tmp___22"} boogie_si_record_i64($i441);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i442 := $ne.i64($i441, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i77, 3);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p487, $i35);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __init_work($p488, 0);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p489, 4195328);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p492 := $bitcast.ref.ref($p491);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p493 := $bitcast.ref.ref($p17);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.2;
    cmdloc_dummy_var_18 := $M.2;
    call {:si_unique_call 583} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p492, $p493, 8, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_19;
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(32, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} lockdep_init_map($p495, .str.109, $p16, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(8, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} INIT_LIST_HEAD($p497);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p499 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(24, 1));
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p499, tcm_vhost_submission_work);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p500 := $M.19;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1024, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_78 := queue_work($p500, $p501);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb118:
    assume $i450 == 1;
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1));
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p452 := $bitcast.ref.ref($p451);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i453 := $zext.i32.i64($i76);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($p452, $mul.ref($i453, 16));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i455 := $eq.i32($i77, 1);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i456 := $zext.i1.i32($i455);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i457 := vhost_scsi_map_iov_to_sgl($p270, $p454, $i75, $i456);
    call {:si_unique_call 575} {:cexpr "ret"} boogie_si_record_i32($i457);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i458 := $ne.i32($i457, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i459 := $zext.i1.i32($i458);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i460 := $sext.i32.i64($i459);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i461 := ldv__builtin_expect($i460, 0);
    call {:si_unique_call 577} {:cexpr "tmp___24"} boogie_si_record_i64($i461);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i462 := $ne.i64($i461, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb120:
    assume $i462 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p463, .str.6);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p464, .str.96);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p465, .str.53);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p466, .str.108);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p467);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i469 := $load.i24($M.12, $p468);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i470 := $and.i24($i469, $sub.i24(0, 262144));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i471 := $or.i24($i470, 766);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p468, $i471);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p472, 0);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i474 := $load.i8($M.13, $p473);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i475 := $zext.i8.i64($i474);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i476 := $and.i64($i475, 1);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i477 := ldv__builtin_expect($i476, 0);
    call {:si_unique_call 579} {:cexpr "tmp___23"} boogie_si_record_i64($i477);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i478 := $ne.i64($i477, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i478} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p481 := $load.ref($M.2, $p480);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i482 := $p2i.ref.i64($p481);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb125:
    assume $i483 == 1;
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.2, $p484);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} vslice_dummy_var_77 := eventfd_signal($p485, 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i478 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} vslice_dummy_var_76 := __dynamic_pr_debug.ref.ref($p15, .str.108);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb115:
    assume $i442 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1104, 1)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.2, $p444);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(28, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i448 := $load.i32($M.2, $p447);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} vslice_dummy_var_75 := __dynamic_pr_debug.ref.ref.i32.i32($p14, .str.107, $i446, $i448);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb106:
    assume $i386 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p388, .str.6);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p389, .str.96);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p390, .str.53);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p391, .str.106);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $p393 := $bitcast.ref.ref($p392);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i394 := $load.i24($M.12, $p393);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i395 := $and.i24($i394, $sub.i24(0, 262144));
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i396 := $or.i24($i395, 753);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p393, $i396);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p397, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i399 := $load.i8($M.13, $p398);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i64($i399);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i401 := $and.i64($i400, 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i402 := ldv__builtin_expect($i401, 0);
    call {:si_unique_call 566} {:cexpr "tmp___19"} boogie_si_record_i64($i402);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i403 := $ne.i64($i402, 0);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i403} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p409 := $load.ref($M.2, $p408);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i410 := $p2i.ref.i64($p409);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i411 := $ne.i64($i410, 0);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb111:
    assume $i411 == 1;
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.2, $p412);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_74 := eventfd_signal($p413, 1);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i403 == 1;
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p387, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p405 := $bitcast.ref.ref($p404);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i406 := scsi_command_size($p405);
    call {:si_unique_call 568} {:cexpr "tmp___18"} boogie_si_record_i32($i406);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} vslice_dummy_var_73 := __dynamic_pr_debug.ref.ref.i32.i32($p13, .str.106, $i406, 32);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb103:
    assume $i370 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $p372 := $bitcast.ref.ref($p371);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(19, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $p374 := $bitcast.ref.ref($p373);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.2;
    cmdloc_dummy_var_12 := $M.2;
    call {:si_unique_call 559} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p372, $p374, 32, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_13;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb94:
    assume $i329 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p330 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p330, .str.6);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p331, .str.96);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p332, .str.53);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p333, .str.105);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p334);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i336 := $load.i24($M.12, $p335);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i337 := $and.i24($i336, $sub.i24(0, 262144));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i338 := $or.i24($i337, 731);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p335, $i338);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p339, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.13, $p340);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i64($i341);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i343 := $and.i64($i342, 1);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i344 := ldv__builtin_expect($i343, 0);
    call {:si_unique_call 556} {:cexpr "tmp___16"} boogie_si_record_i64($i344);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i345 := $ne.i64($i344, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.2, $p355);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p356);
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i358 := $ne.i64($i357, 0);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb99:
    assume $i358 == 1;
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.2, $p359);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_72 := eventfd_signal($p360, 1);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume $i345 == 1;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.17, $p2);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i347 := $zext.i32.i64($i346);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i347, 16)), $mul.ref(8, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i351 := $load.i64($M.2, $p350);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.17, $p2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i353 := $load.i32($M.18, $p3);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} vslice_dummy_var_71 := __dynamic_pr_debug.ref.ref.i64.i32.i32($p12, .str.105, $i351, $i352, $i353);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb91:
    assume $i316 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_70 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p11, .str.104, $p270, $i256, $i77);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb82:
    assume $i273 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p275, .str.6);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p276, .str.96);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p277, .str.53);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p278, .str.103);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p279);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i281 := $load.i24($M.12, $p280);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i282 := $and.i24($i281, $sub.i24(0, 262144));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i283 := $or.i24($i282, 719);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p280, $i283);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p284, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.13, $p285);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i64($i286);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i288 := $and.i64($i287, 1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i289 := ldv__builtin_expect($i288, 0);
    call {:si_unique_call 545} {:cexpr "tmp___13"} boogie_si_record_i64($i289);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.2, $p294);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p295);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb87:
    assume $i297 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.2, $p298);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_69 := eventfd_signal($p299, 1);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i290 == 1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p274);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i292 := PTR_ERR($p291);
    call {:si_unique_call 547} {:cexpr "tmp___12"} boogie_si_record_i64($i292);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} vslice_dummy_var_68 := __dynamic_pr_debug.ref.ref.i64($p10, .str.103, $i292);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb74:
    assume $i255 == 1;
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i257, $i258 := 0, 0;
    goto $bb77;

  $bb77:
    call $i259, $i260, $p263, $i264, $i265, $i266, $i267, $i268, $i257, $i258, $i269 := vhost_scsi_handle_vq_loop_$bb77($p19, $i75, $i76, $i259, $i260, $p263, $i264, $i265, $i266, $i267, $i268, $i257, $i258, $i269);
    goto $bb77_last;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i259 := $add.i32($i76, $i257);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i260 := $zext.i32.i64($i259);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i260, 16)), $mul.ref(8, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i264 := $load.i64($M.2, $p263);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i64.i32($i264);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i266 := $add.i32($i265, $i258);
    call {:si_unique_call 539} {:cexpr "exp_data_len"} boogie_si_record_i32($i266);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i267 := $add.i32($i257, 1);
    call {:si_unique_call 540} {:cexpr "i"} boogie_si_record_i32($i267);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i268 := $ult.i32($i267, $i75);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i269 := $i266;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i256 := $i269;
    goto $bb76;

  $bb79:
    assume $i268 == 1;
    assume {:verifier.code 0} true;
    $i257, $i258 := $i267, $i266;
    goto $bb79_dummy;

  $bb65:
    assume $i230 == 1;
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p231, .str.6);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p232, .str.96);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p233, .str.53);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p234, .str.102);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i237 := $load.i24($M.12, $p236);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i238 := $and.i24($i237, $sub.i24(0, 262144));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i239 := $or.i24($i238, 707);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p236, $i239);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p240, 0);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.13, $p241);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i64($i242);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i244 := $and.i64($i243, 1);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i245 := ldv__builtin_expect($i244, 0);
    call {:si_unique_call 536} {:cexpr "tmp___10"} boogie_si_record_i64($i245);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i245, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $p249 := $load.ref($M.2, $p248);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i250 := $p2i.ref.i64($p249);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i251 := $ne.i64($i250, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb70:
    assume $i251 == 1;
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.2, $p252);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_67 := eventfd_signal($p253, 1);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i246 == 1;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_66 := __dynamic_pr_debug.ref.ref($p9, .str.102);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb62:
    assume $i214 == 1;
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.2, $p217);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} vslice_dummy_var_65 := __dynamic_pr_debug.ref.ref.ref.i64($p8, .str.101, $p218, 51);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i170 == 1;
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p171, .str.6);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p172, .str.96);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p173, .str.53);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p174, .str.100);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p175);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i177 := $load.i24($M.12, $p176);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i178 := $and.i24($i177, $sub.i24(0, 262144));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i179 := $or.i24($i178, 699);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p176, $i179);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p180, 0);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.13, $p181);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i64($i182);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i184 := $and.i64($i183, 1);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i185 := ldv__builtin_expect($i184, 0);
    call {:si_unique_call 525} {:cexpr "tmp___7"} boogie_si_record_i64($i185);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i186 := $ne.i64($i185, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.2, $p192);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i194 := $p2i.ref.i64($p193);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i195 := $ne.i64($i194, 0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb58:
    assume $i195 == 1;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.2, $p196);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vslice_dummy_var_64 := eventfd_signal($p197, 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i186 == 1;
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.2, $p189);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vslice_dummy_var_63 := __dynamic_pr_debug.ref.ref.i64($p7, .str.100, $i190);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb44:
    assume $i131 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p132, .str.6);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p133, .str.96);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p134, .str.53);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p135, .str.99);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i138 := $load.i24($M.12, $p137);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i139 := $and.i24($i138, $sub.i24(0, 262144));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i140 := $or.i24($i139, 693);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p137, $i140);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p141, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.13, $p142);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i64($i143);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i145 := $and.i64($i144, 1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i146 := ldv__builtin_expect($i145, 0);
    call {:si_unique_call 519} {:cexpr "tmp___5"} boogie_si_record_i64($i146);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.2, $p155);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i157 := $p2i.ref.i64($p156);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb49:
    assume $i158 == 1;
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.2, $p159);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} vslice_dummy_var_62 := eventfd_signal($p160, 1);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i147 == 1;
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.17, $p2);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($add.ref($p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref($i149, 16)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.2, $p152);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} vslice_dummy_var_61 := __dynamic_pr_debug.ref.ref.i64($p6, .str.99, $i153);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb26:
    assume $i79 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.18, $p3);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i81 := $ugt.i32($i80, 1);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb28;

  $bb29:
    assume $i81 == 1;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.17, $p2);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i83 := $add.i32($i82, 1);
    call {:si_unique_call 511} {:cexpr "data_first"} boogie_si_record_i32($i83);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.18, $p3);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, 1);
    call {:si_unique_call 512} {:cexpr "data_num"} boogie_si_record_i32($i85);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88 := $i85, $i83, 2;
    goto $bb31;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.18, $p3);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 1);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb22;

  $bb23:
    assume $i74 == 1;
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i75, $i76, $i77 := 0, 0, 3;
    goto $bb25;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i64 := vhost_enable_notify($p63, $p20);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i65 := $zext.i1.i8($i64);
    call {:si_unique_call 505} {:cexpr "tmp___2"} boogie_si_record_i8($i65);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i8.i1($i65);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i64($i66);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 507} {:cexpr "tmp___3"} boogie_si_record_i64($i68);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15:
    assume $i69 == 1;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vhost_disable_notify($p70, $p20);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i59 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i51 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.17, $p2);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.18, $p3);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_58 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p4, .str.97, $i35, $i52, $i53);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} vslice_dummy_var_57 := printk.ref.ref(.str.95, .str.96);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb79_dummy:
    assume false;
    return;

  $bb77_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  $bb17_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2154;
}



const ldv_mutex_lock_20: ref;

axiom ldv_mutex_lock_20 == $sub.ref(0, 278030);

procedure ldv_mutex_lock_20($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_20($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} mutex_lock($p0);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const vhost_disable_notify: ref;

axiom vhost_disable_notify == $sub.ref(0, 279062);

procedure vhost_disable_notify($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation vhost_disable_notify($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.2, $p3);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.2, $p8);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 1);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p13, $i12);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $i14 := vhost_has_feature($p0, 29);
    call {:si_unique_call 591} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $i16 := vhost_update_used_flags($p1);
    call {:si_unique_call 593} {:cexpr "r"} boogie_si_record_i32($i16);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p18, .str.6);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p19, .str.27);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p20, .str.4);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p21, .str.24);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.12, $p23);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 1564);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p23, $i26);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p27, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.13, $p28);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 595} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.2, $p38);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.2, $p42);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_80 := eventfd_signal($p43, 1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_79 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.24, $p36, $i16);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vhost_get_vq_desc: ref;

axiom vhost_get_vq_desc == $sub.ref(0, 280094);

procedure vhost_get_vq_desc($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.17, $M.20, $M.21, $M.22, $CurrAddr;



implementation vhost_get_vq_desc($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref) returns ($r: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i16;
  var $p29: ref;
  var $i30: i1;
  var $i31: i32;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $i91: i32;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i122: i64;
  var $i123: i16;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i24;
  var $i137: i24;
  var $i138: i24;
  var $p139: ref;
  var $p140: ref;
  var $i141: i8;
  var $i142: i64;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $i153: i32;
  var $i154: i32;
  var $i155: i64;
  var $p156: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i32;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i24;
  var $i179: i24;
  var $i180: i24;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i64;
  var $i185: i64;
  var $i186: i64;
  var $i187: i1;
  var $p188: ref;
  var $i189: i32;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $i198: i64;
  var $i199: i1;
  var $i200: i32;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $i204: i32;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i64;
  var $i212: i64;
  var $i213: i1;
  var $i218: i32;
  var $i219: i32;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i64;
  var $i227: i64;
  var $i228: i1;
  var $i229: i32;
  var $i214: i32;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i24;
  var $i237: i24;
  var $i238: i24;
  var $p239: ref;
  var $p240: ref;
  var $i241: i8;
  var $i242: i64;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i215: i32;
  var $i216: i32;
  var $i217: i32;
  var $i256: i32;
  var $p257: ref;
  var $i258: i32;
  var $i259: i1;
  var $i260: i32;
  var $i261: i64;
  var $i262: i64;
  var $i263: i1;
  var $i264: i32;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i24;
  var $i272: i24;
  var $i273: i24;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i282: i32;
  var $p284: ref;
  var $p285: ref;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $p296: ref;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i64;
  var $i301: i64;
  var $i302: i1;
  var $i303: i32;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $i310: i24;
  var $i311: i24;
  var $i312: i24;
  var $p313: ref;
  var $p314: ref;
  var $i315: i8;
  var $i316: i64;
  var $i317: i64;
  var $i318: i64;
  var $i319: i1;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $p323: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $p332: ref;
  var $i333: i16;
  var $i334: i32;
  var $i335: i32;
  var $i336: i1;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i64;
  var $i341: i64;
  var $i342: i1;
  var $i343: i32;
  var $i344: i32;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i24;
  var $i352: i24;
  var $i353: i24;
  var $p354: ref;
  var $p355: ref;
  var $i356: i8;
  var $i357: i64;
  var $i358: i64;
  var $i359: i64;
  var $i360: i1;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $i365: i1;
  var $p366: ref;
  var $p367: ref;
  var $p369: ref;
  var $i370: i64;
  var $p371: ref;
  var $i372: i32;
  var $i373: i64;
  var $p374: ref;
  var $i375: i32;
  var $i376: i32;
  var $i377: i1;
  var $i378: i32;
  var $i379: i64;
  var $i380: i64;
  var $i381: i1;
  var $i382: i32;
  var $i383: i32;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i390: i24;
  var $i391: i24;
  var $i392: i24;
  var $p393: ref;
  var $p394: ref;
  var $i395: i8;
  var $i396: i64;
  var $i397: i64;
  var $i398: i64;
  var $i399: i1;
  var $p401: ref;
  var $p402: ref;
  var $i403: i64;
  var $i404: i1;
  var $p405: ref;
  var $p406: ref;
  var $p408: ref;
  var $i409: i16;
  var $i410: i32;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i32;
  var $i415: i64;
  var $i416: i1;
  var $i417: i32;
  var $i418: i64;
  var $i419: i64;
  var $i420: i1;
  var $p421: ref;
  var $i422: i64;
  var $i423: i32;
  var $i424: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i32;
  var $i429: i64;
  var $i430: i32;
  var $i431: i64;
  var $p433: ref;
  var $i434: i32;
  var $i435: i32;
  var $i436: i32;
  var $i437: i1;
  var $i438: i32;
  var $i439: i64;
  var $i440: i64;
  var $i441: i1;
  var $i442: i32;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $i449: i24;
  var $i450: i24;
  var $i451: i24;
  var $p452: ref;
  var $p453: ref;
  var $i454: i8;
  var $i455: i64;
  var $i456: i64;
  var $i457: i64;
  var $i458: i1;
  var $p460: ref;
  var $p461: ref;
  var $i462: i64;
  var $i463: i1;
  var $p464: ref;
  var $p465: ref;
  var $i467: i32;
  var $i468: i32;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $i472: i16;
  var $i473: i32;
  var $i474: i32;
  var $i475: i16;
  var $p476: ref;
  var $p477: ref;
  var $i478: i16;
  var $i479: i32;
  var $i480: i32;
  var $i481: i1;
  var $i482: i32;
  var $i483: i64;
  var $i484: i64;
  var $i485: i1;
  var $i62: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i64;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i64;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i64;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i64;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i64;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i64;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i64;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i64;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i64;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 609} {:cexpr "vhost_get_vq_desc:arg:iov_size"} boogie_si_record_i32($i3);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(472, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.2, $p19);
    call {:si_unique_call 610} {:cexpr "last_avail_idx"} boogie_si_record_i16($i20);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    call {:si_unique_call 611} $p25 := devirtbounce.2(0, $p24, $sub.i32(0, 14), 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i26 := $extractvalue($p25, 0);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i27 := $extractvalue($p25, 1);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i16($i27);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p29, $i28);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i26, 0);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 613} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.2, $p63);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i20);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i65, $i66);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.2, $p68);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i67, $i69);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 619} {:cexpr "tmp___3"} boogie_si_record_i64($i73);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.2, $p103);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i20);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i105, $i106);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call {:si_unique_call 624} devirtbounce.1(0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.2, $p110);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i20);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.2, $p115);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i117 := $urem.i32($i114, $i116);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i117);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p113, $mul.ref($i118, 800));
    call {:si_unique_call 625} $p120 := devirtbounce.2(0, $p119, $sub.i32(0, 14), 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i121 := $extractvalue($p120, 0);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i122 := $extractvalue($p120, 1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i16($i122);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    call {:si_unique_call 626} {:cexpr "head"} boogie_si_record_i32($i124);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i121, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i126);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 628} {:cexpr "tmp___6"} boogie_si_record_i64($i128);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.2, $p165);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i167 := $ule.i32($i166, $i124);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i168 := $zext.i1.i32($i167);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i168);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 634} {:cexpr "tmp___8"} boogie_si_record_i64($i170);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p5, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, 0);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p6);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i200 := $zext.i1.i32($i199);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i202 := ldv__builtin_expect($i201, 0);
    call {:si_unique_call 640} {:cexpr "tmp___10"} boogie_si_record_i64($i202);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.18, $p5);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.17, $p4);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i204, $i205);
    call {:si_unique_call 641} {:cexpr "iov_count"} boogie_si_record_i32($i206);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.2, $p207);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $i209 := $ule.i32($i208, $i124);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i210 := $zext.i1.i32($i209);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i211 := $sext.i32.i64($i210);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i212 := ldv__builtin_expect($i211, 0);
    call {:si_unique_call 643} {:cexpr "tmp___12"} boogie_si_record_i64($i212);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i214 := $i124;
    assume {:branchcond $i213} true;
    goto $bb46, $bb48;

  $bb48:
    assume !($i213 == 1);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i215, $i216, $i217 := $i206, 0, $i124;
    goto $bb49;

  $bb49:
    call $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i215, $i216, $i217, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p291, $p292, $p293, $p294, $i295, $p296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $p332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p369, $i370, $p371, $i372, $i373, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $p408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $p421, $i422, $i423, $i424, $p426, $p427, $i428, $i429, $i430, $i431, $p433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i467, $i468, $i469, $i470 := vhost_get_vq_desc_loop_$bb49($p0, $p1, $p2, $i3, $p4, $p5, $p6, $p7, $p8, $p207, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, $i215, $i216, $i217, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p291, $p292, $p293, $p294, $i295, $p296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $p332, $i333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i342, $i343, $i344, $p369, $i370, $p371, $i372, $i373, $p374, $i375, $i376, $i377, $i378, $i379, $i380, $i381, $i382, $i383, $p408, $i409, $i410, $i411, $i412, $i413, $i414, $i415, $i416, $i417, $i418, $i419, $i420, $p421, $i422, $i423, $i424, $p426, $p427, $i428, $i429, $i430, $i431, $p433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i467, $i468, $i469, $i470);
    goto $bb49_last;

  $bb59:
    assume {:verifier.code 0} true;
    $i256 := $add.i32($i216, 1);
    call {:si_unique_call 651} {:cexpr "found"} boogie_si_record_i32($i256);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i258 := $load.i32($M.2, $p257);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i259 := $ugt.i32($i256, $i258);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i260 := $zext.i1.i32($i259);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i261 := $sext.i32.i64($i260);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i262 := ldv__builtin_expect($i261, 0);
    call {:si_unique_call 653} {:cexpr "tmp___14"} boogie_si_record_i64($i262);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i263 := $ne.i64($i262, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i264 := $i217;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p8);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(184, 1));
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.2, $p292);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i295 := $zext.i32.i64($i217);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($p294, $mul.ref($i295, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i297 := __copy_from_user($p291, $p296, 16);
    call {:si_unique_call 659} {:cexpr "ret"} boogie_si_record_i32($i297);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i299 := $zext.i1.i32($i298);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i300 := $sext.i32.i64($i299);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i301 := ldv__builtin_expect($i300, 0);
    call {:si_unique_call 661} {:cexpr "tmp___16"} boogie_si_record_i64($i301);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i302 := $ne.i64($i301, 0);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i303 := $i217;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i333 := $load.i16($M.2, $p332);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i334 := $zext.i16.i32($i333);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i335 := $and.i32($i334, 4);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i370 := $load.i64($M.2, $p369);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.2, $p371);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i373 := $zext.i32.i64($i215);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($p2, $mul.ref($i373, 16));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i375 := $sub.i32($i3, $i215);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i376 := translate_desc($p0, $i370, $i372, $p374, $i375);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i32($i376);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i377 := $slt.i32($i376, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $i378 := $zext.i1.i32($i377);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i379 := $sext.i32.i64($i378);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i380 := ldv__builtin_expect($i379, 0);
    call {:si_unique_call 679} {:cexpr "tmp___20"} boogie_si_record_i64($i380);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i382, $i383 := $i217, $i376;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i409 := $load.i16($M.2, $p408);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i410 := $zext.i16.i32($i409);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i411 := $and.i32($i410, 2);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i412 := $ne.i32($i411, 0);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i412 == 1);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.18, $p5);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i437 := $ne.i32($i436, 0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i438 := $zext.i1.i32($i437);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i438);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i440 := ldv__builtin_expect($i439, 0);
    call {:si_unique_call 687} {:cexpr "tmp___23"} boogie_si_record_i64($i440);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i441 := $ne.i64($i440, 0);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i442 := $i217;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i467 := $load.i32($M.17, $p4);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i468 := $add.i32($i467, $i376);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, $i468);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i469 := next_desc($p8);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32($i469);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i470 := $ne.i32($i469, $sub.i32(0, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i218, $i219 := $i469, $i256;
    assume true;
    goto $bb50, $bb115;

  $bb115:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(472, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i472 := $load.i16($M.2, $p471);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i473 := $zext.i16.i32($i472);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i474 := $add.i32($i473, 1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i475 := $trunc.i32.i16($i474);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(472, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p476, $i475);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i478 := $load.i16($M.2, $p477);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i479 := $zext.i16.i32($i478);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i480 := $and.i32($i479, 1);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i482 := $zext.i1.i32($i481);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i482);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i484 := ldv__builtin_expect($i483, 0);
    call {:si_unique_call 693} {:cexpr "tmp___24"} boogie_si_record_i64($i484);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i485 := $ne.i64($i484, 0);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i62 := $i124;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i62;
    return;

  $bb117:
    assume $i485 == 1;
    call {:si_unique_call 694} devirtbounce.4(0, .str.4, 1326, 12);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    call vhost_get_vq_desc_loop_$bb119();
    goto $bb119_last;

  $bb50:
    assume $i470 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.18, $p5);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.17, $p4);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i222 := $add.i32($i220, $i221);
    call {:si_unique_call 646} {:cexpr "iov_count"} boogie_si_record_i32($i222);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.2, $p207);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i224 := $ule.i32($i223, $i218);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i225 := $zext.i1.i32($i224);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i225);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i227 := ldv__builtin_expect($i226, 0);
    call {:si_unique_call 648} {:cexpr "tmp___12"} boogie_si_record_i64($i227);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i229 := $i218;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i215, $i216, $i217 := $i222, $i219, $i218;
    goto $bb52_dummy;

  $bb51:
    assume $i228 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i214 := $i229;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p230, .str.6);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p231, .str.7);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p232, .str.4);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p233, .str.12);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p235 := $bitcast.ref.ref($p234);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i236 := $load.i24($M.12, $p235);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i237 := $and.i24($i236, $sub.i24(0, 262144));
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $i238 := $or.i24($i237, 1266);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p235, $i238);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p239, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.13, $p240);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i64($i241);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i243 := $and.i64($i242, 1);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i244 := ldv__builtin_expect($i243, 0);
    call {:si_unique_call 645} {:cexpr "tmp___11"} boogie_si_record_i64($i244);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.2, $p249);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p250);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb10;

  $bb56:
    assume $i252 == 1;
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.2, $p253);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vslice_dummy_var_90 := eventfd_signal($p254, 1);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i245 == 1;
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.2, $p246);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vslice_dummy_var_89 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p13, .str.12, $i214, $i247, $i124);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb106:
    assume $i441 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p443, .str.6);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p444, .str.7);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p445, .str.4);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p446, .str.17);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p448 := $bitcast.ref.ref($p447);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i449 := $load.i24($M.12, $p448);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i450 := $and.i24($i449, $sub.i24(0, 262144));
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i451 := $or.i24($i450, 1314);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p448, $i451);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p452, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i454 := $load.i8($M.13, $p453);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i455 := $zext.i8.i64($i454);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i456 := $and.i64($i455, 1);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i457 := ldv__builtin_expect($i456, 0);
    call {:si_unique_call 689} {:cexpr "tmp___22"} boogie_si_record_i64($i457);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i458 := $ne.i64($i457, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.2, $p460);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i462 := $p2i.ref.i64($p461);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i463 := $ne.i64($i462, 0);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb10;

  $bb111:
    assume $i463 == 1;
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p465 := $load.ref($M.2, $p464);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vslice_dummy_var_100 := eventfd_signal($p465, 1);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i458 == 1;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_99 := __dynamic_pr_debug.ref.ref.i32($p18, .str.17, $i442);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb100:
    assume $i412 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.18, $p5);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i413, $i376);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p5, $i414);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p6);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i417 := $zext.i1.i32($i416);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i418 := $sext.i32.i64($i417);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i419 := ldv__builtin_expect($i418, 0);
    call {:si_unique_call 685} {:cexpr "tmp___21"} boogie_si_record_i64($i419);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i420 := $ne.i64($i419, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb102:
    assume $i420 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i422 := $load.i64($M.2, $p421);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i423 := $load.i32($M.20, $p7);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i424 := $zext.i32.i64($i423);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p6, $mul.ref($i424, 16)), $mul.ref(0, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p426, $i422);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i428 := $load.i32($M.2, $p427);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i429 := $zext.i32.i64($i428);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i430 := $load.i32($M.20, $p7);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i431 := $zext.i32.i64($i430);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p6, $mul.ref($i431, 16)), $mul.ref(8, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p433, $i429);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.20, $p7);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i435 := $add.i32($i434, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p7, $i435);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb91:
    assume $i381 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p384, .str.6);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p385, .str.7);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p386, .str.4);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p387, .str.16);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i390 := $load.i24($M.12, $p389);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i391 := $and.i24($i390, $sub.i24(0, 262144));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i392 := $or.i24($i391, 1297);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p389, $i392);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p393, 0);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.13, $p394);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i64($i395);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i397 := $and.i64($i396, 1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i398 := ldv__builtin_expect($i397, 0);
    call {:si_unique_call 681} {:cexpr "tmp___19"} boogie_si_record_i64($i398);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i399 := $ne.i64($i398, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.2, $p401);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $i403 := $p2i.ref.i64($p402);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i404 := $ne.i64($i403, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i62 := $i383;
    goto $bb10;

  $bb96:
    assume $i404 == 1;
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.2, $p405);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} vslice_dummy_var_98 := eventfd_signal($p406, 1);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb93:
    assume $i399 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} vslice_dummy_var_97 := __dynamic_pr_debug.ref.ref.i32.i32($p17, .str.16, $i383, $i382);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb78:
    assume $i336 == 1;
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i337 := get_indirect($p0, $p1, $p2, $i3, $p4, $p5, $p6, $p7, $p8);
    call {:si_unique_call 667} {:cexpr "ret"} boogie_si_record_i32($i337);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i338 := $slt.i32($i337, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i339 := $zext.i1.i32($i338);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i340 := $sext.i32.i64($i339);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i341 := ldv__builtin_expect($i340, 0);
    call {:si_unique_call 669} {:cexpr "tmp___18"} boogie_si_record_i64($i341);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i342 := $ne.i64($i341, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i343, $i344 := $i217, $i337;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb80:
    assume $i342 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p345, .str.6);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p346, .str.7);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p347, .str.4);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p348, .str.15);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p350 := $bitcast.ref.ref($p349);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i351 := $load.i24($M.12, $p350);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i352 := $and.i24($i351, $sub.i24(0, 262144));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i353 := $or.i24($i352, 1287);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p350, $i353);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p354, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.13, $p355);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i64($i356);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i358 := $and.i64($i357, 1);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i359 := ldv__builtin_expect($i358, 0);
    call {:si_unique_call 671} {:cexpr "tmp___17"} boogie_si_record_i64($i359);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i360 := $ne.i64($i359, 0);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i360} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i360 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p363 := $load.ref($M.2, $p362);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i364 := $p2i.ref.i64($p363);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i365 := $ne.i64($i364, 0);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i62 := $i344;
    goto $bb10;

  $bb85:
    assume $i365 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.2, $p366);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} vslice_dummy_var_96 := eventfd_signal($p367, 1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i360 == 1;
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_95 := __dynamic_pr_debug.ref.ref.i32($p16, .str.15, $i343);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb69:
    assume $i302 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p304, .str.6);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p305, .str.7);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p306, .str.4);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p307, .str.14);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p309 := $bitcast.ref.ref($p308);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i310 := $load.i24($M.12, $p309);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i311 := $and.i24($i310, $sub.i24(0, 262144));
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i312 := $or.i24($i311, 1278);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p309, $i312);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p313, 0);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.13, $p314);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i64($i315);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i317 := $and.i64($i316, 1);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i318 := ldv__builtin_expect($i317, 0);
    call {:si_unique_call 663} {:cexpr "tmp___15"} boogie_si_record_i64($i318);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i319 := $ne.i64($i318, 0);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    assume {:branchcond $i319} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.2, $p325);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i328 := $ne.i64($i327, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 14);
    goto $bb10;

  $bb74:
    assume $i328 == 1;
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.2, $p329);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_94 := eventfd_signal($p330, 1);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb71:
    assume $i319 == 1;
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(184, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p321 := $load.ref($M.2, $p320);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i322 := $zext.i32.i64($i303);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p321, $mul.ref($i322, 16));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_93 := __dynamic_pr_debug.ref.ref.i32.ref($p15, .str.14, $i303, $p323);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb60:
    assume $i263 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p265, .str.6);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p266, .str.7);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p267, .str.4);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p268, .str.13);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i271 := $load.i24($M.12, $p270);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i272 := $and.i24($i271, $sub.i24(0, 262144));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i273 := $or.i24($i272, 1272);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p270, $i273);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p274, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.13, $p275);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i64($i276);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i277, 1);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i279 := ldv__builtin_expect($i278, 0);
    call {:si_unique_call 655} {:cexpr "tmp___13"} boogie_si_record_i64($i279);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p285 := $load.ref($M.2, $p284);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i286 := $p2i.ref.i64($p285);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb10;

  $bb65:
    assume $i287 == 1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.2, $p288);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_92 := eventfd_signal($p289, 1);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb62:
    assume $i280 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i282 := $load.i32($M.2, $p281);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_91 := __dynamic_pr_debug.ref.ref.i32.i32.i32($p14, .str.13, $i264, $i282, $i124);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i213 == 1;
    goto $bb47;

  $bb43:
    assume $i203 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p7, 0);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb34:
    assume $i171 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p172, .str.6);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p173, .str.7);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p174, .str.4);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p175, .str.11);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i178 := $load.i24($M.12, $p177);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i179 := $and.i24($i178, $sub.i24(0, 262144));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i180 := $or.i24($i179, 1252);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p177, $i180);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p181, 0);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.13, $p182);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i64($i183);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i185 := $and.i64($i184, 1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i186 := ldv__builtin_expect($i185, 0);
    call {:si_unique_call 636} {:cexpr "tmp___7"} boogie_si_record_i64($i186);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i187 := $ne.i64($i186, 0);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.2, $p191);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i193 := $p2i.ref.i64($p192);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 22);
    goto $bb10;

  $bb39:
    assume $i194 == 1;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.2, $p195);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vslice_dummy_var_88 := eventfd_signal($p196, 1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i187 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.2, $p188);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_87 := __dynamic_pr_debug.ref.ref.i32.i32($p12, .str.11, $i124, $i189);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb25:
    assume $i129 == 1;
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p130, .str.6);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p131, .str.7);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p132, .str.4);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p133, .str.10);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i136 := $load.i24($M.12, $p135);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i137 := $and.i24($i136, $sub.i24(0, 262144));
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i138 := $or.i24($i137, 1245);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p135, $i138);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p139, 0);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.13, $p140);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i64($i141);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i143 := $and.i64($i142, 1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 630} {:cexpr "tmp___4"} boogie_si_record_i64($i144);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.2, $p158);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 14);
    goto $bb10;

  $bb30:
    assume $i161 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.2, $p162);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_86 := eventfd_signal($p163, 1);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i145 == 1;
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i20);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.2, $p147);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i20);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.2, $p152);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i154 := $urem.i32($i151, $i153);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i155 := $zext.i32.i64($i154);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p150, $mul.ref($i155, 2));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_85 := __dynamic_pr_debug.ref.ref.i32.ref($p11, .str.10, $i146, $p156);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb21:
    assume $i107 == 1;
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.2, $p108);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i62 := $i109;
    goto $bb10;

  $bb12:
    assume $i74 == 1;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p75, .str.6);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p76, .str.7);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p77, .str.4);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p78, .str.9);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.12, $p80);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 1228);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p80, $i83);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p84, 0);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.13, $p85);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 621} {:cexpr "tmp___2"} boogie_si_record_i64($i89);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.2, $p96);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i98 := $p2i.ref.i64($p97);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 14);
    goto $bb10;

  $bb17:
    assume $i99 == 1;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.2, $p100);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_84 := eventfd_signal($p101, 1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i90 == 1;
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i20);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.2, $p92);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_83 := __dynamic_pr_debug.ref.ref.i32.i32($p10, .str.9, $i91, $i94);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i34 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p35, .str.6);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p36, .str.7);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p37, .str.4);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p38, .str.8);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.12, $p40);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 1222);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p40, $i43);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p44, 0);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.13, $p45);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 615} {:cexpr "tmp"} boogie_si_record_i64($i49);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.2, $p55);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32(0, 14);
    goto $bb10;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.2, $p59);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_82 := eventfd_signal($p60, 1);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i50 == 1;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.2, $p51);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vslice_dummy_var_81 := __dynamic_pr_debug.ref.ref.ref($p9, .str.8, $p53);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb119_dummy:
    assume false;
    return;

  $bb119_last:
    assume {:verifier.code 0} true;
    goto $bb119_dummy;

  $bb52_dummy:
    assume false;
    return;

  $bb49_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb59;
}



const vhost_enable_notify: ref;

axiom vhost_enable_notify == $sub.ref(0, 281126);

procedure vhost_enable_notify($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation vhost_enable_notify($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $p77: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $i93: i16;
  var $i94: i1;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i24;
  var $i102: i24;
  var $i103: i24;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i64;
  var $i108: i64;
  var $i109: i64;
  var $i110: i1;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p122: ref;
  var $i123: i16;
  var $i124: i32;
  var $i125: i32;
  var $i126: i1;
  var $i10: i1;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i64;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i64;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.2, $p5);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.2, $p11);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 65534);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p16, $i15);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i17 := vhost_has_feature($p0, 29);
    call {:si_unique_call 699} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.2, $p48);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i52 := vhost_update_avail_event($p1, $i51);
    call {:si_unique_call 703} {:cexpr "r"} boogie_si_record_i32($i52);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call {:si_unique_call 708} devirtbounce.1(0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.2, $p86);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    call {:si_unique_call 709} $p90 := devirtbounce.2(0, $p89, $sub.i32(0, 14), 0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i91 := $extractvalue($p90, 0);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i92 := $extractvalue($p90, 1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i64.i16($i92);
    call {:si_unique_call 714} {:cexpr "avail_idx"} boogie_si_record_i16($i93);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i91, 0);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i123 := $load.i16($M.2, $p122);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i123);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i93);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i124, $i125);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i10 := $i126;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb27:
    assume $i94 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p95, .str.6);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p96, .str.23);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p97, .str.4);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p98, .str.26);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i101 := $load.i24($M.12, $p100);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i102 := $and.i24($i101, $sub.i24(0, 262144));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i103 := $or.i24($i102, 1545);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p100, $i103);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p104, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.13, $p105);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i64($i106);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i108 := $and.i64($i107, 1);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i109 := ldv__builtin_expect($i108, 0);
    call {:si_unique_call 716} {:cexpr "tmp___3"} boogie_si_record_i64($i109);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.2, $p115);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb32:
    assume $i118 == 1;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.2, $p119);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} vslice_dummy_var_106 := eventfd_signal($p120, 1);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i110 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(192, 1));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.2, $p111);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} vslice_dummy_var_105 := __dynamic_pr_debug.ref.ref.ref.i32($p4, .str.26, $p113, $i91);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb17:
    assume $i53 == 1;
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p54, .str.6);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p55, .str.23);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p56, .str.4);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p57, .str.25);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.12, $p59);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 1535);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p59, $i62);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p63, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.13, $p64);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 711} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.2, $p83);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} vslice_dummy_var_104 := eventfd_signal($p84, 1);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.2, $p74);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i76 := $zext.i32.i64($i75);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p73, $mul.ref($i76, 2));
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} vslice_dummy_var_103 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.25, $p77, $i52);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $i19 := vhost_update_used_flags($p1);
    call {:si_unique_call 701} {:cexpr "r"} boogie_si_record_i32($i19);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p21, .str.6);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p22, .str.23);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p23, .str.4);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p24, .str.24);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.12, $p26);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 1528);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p26, $i29);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p30, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.13, $p31);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 705} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb12:
    assume $i44 == 1;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.2, $p45);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_102 := eventfd_signal($p46, 1);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.2, $p37);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_101 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.24, $p39, $i19);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const __copy_from_user: ref;

axiom __copy_from_user == $sub.ref(0, 282158);

procedure __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} {:cexpr "__copy_from_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} might_fault();
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i3 := copy_user_generic($p0, $p1, $i2);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vhost_scsi_allocate_cmd: ref;

axiom vhost_scsi_allocate_cmd == $sub.ref(0, 283190);

procedure vhost_scsi_allocate_cmd($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_scsi_allocate_cmd($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p11: ref;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} {:cexpr "vhost_scsi_allocate_cmd:arg:exp_data_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 724} {:cexpr "vhost_scsi_allocate_cmd:arg:data_direction"} boogie_si_record_i32($i3);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(200, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $p12 := kzalloc(1248, 32);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(1232, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} INIT_LIST_HEAD($p19);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.2, $p20);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(16, 1));
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p22, $i21);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.2, $p23);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(4, 1));
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p26, $i25);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(12, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p27, $i2);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(8, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p28, $i3);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p13, $mul.ref(0, 1248)), $mul.ref(56, 1));
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, $p5);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $p11 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vslice_dummy_var_108 := printk.ref(.str.111);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $p17 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p11 := $p17;
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_107 := printk.ref(.str.110);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $p9 := ERR_PTR($sub.i64(0, 5));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p11 := $p9;
    goto $bb3;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 284222);

procedure IS_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 18446744073709547520);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 732} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 285254);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_command_size: ref;

axiom scsi_command_size == $sub.ref(0, 286286);

procedure scsi_command_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_command_size($p0: ref) returns ($r: i32)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.2, $p0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 127);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.2, $p0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i8 := $ashr.i32($i7, 5);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 7);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref(scsi_command_size_tbl, $mul.ref(0, 8)), $mul.ref($i10, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.2, $p11);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 735} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    assume {:verifier.code 0} true;
    $i5 := $i13;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i4 := scsi_varlen_cdb_length($p0);
    call {:si_unique_call 734} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const vhost_scsi_map_iov_to_sgl: ref;

axiom vhost_scsi_map_iov_to_sgl == $sub.ref(0, 287318);

procedure vhost_scsi_map_iov_to_sgl($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_scsi_map_iov_to_sgl($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i8: i32;
  var $i9: i32;
  var $i34: i32;
  var $i7: i32;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i81: i1;
  var $i85: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p91: ref;
  var $i92: i64;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i99: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i41: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 738} {:cexpr "vhost_scsi_map_iov_to_sgl:arg:niov"} boogie_si_record_i32($i2);
    call {:si_unique_call 739} {:cexpr "vhost_scsi_map_iov_to_sgl:arg:write"} boogie_si_record_i32($i3);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i2);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i7);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $i36 := $mul.i64($i35, 40);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p37 := kmalloc($i36, 32);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p42, .str.6);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, .str.112);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p44, .str.53);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p45, .str.113);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.12, $p47);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 564);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p47, $i50);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p51, 0);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.13, $p52);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 744} {:cexpr "tmp___0"} boogie_si_record_i64($i56);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} sg_init_table($p38, $i7);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p62, $p37);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p63, $i7);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p64, .str.6);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p65, .str.112);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p66, .str.53);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p67, .str.114);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.12, $p69);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 570);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p69, $i72);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p73, 0);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.13, $p74);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 748} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32(0, $i2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb19:
    assume $i81 == 1;
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p82, $i83, $i84 := $p37, $i7, 0;
    goto $bb22;

  $bb22:
    call $i85, $p87, $p88, $i89, $p91, $i92, $i93, $i94, $i95, $i113, $p114, $i115, $i116, $i117, $p82, $i83, $i84 := vhost_scsi_map_iov_to_sgl_loop_$bb22($p1, $i2, $i3, $i85, $p87, $p88, $i89, $p91, $i92, $i93, $i94, $i95, $i113, $p114, $i115, $i116, $i117, $p82, $i83, $i84);
    goto $bb22_last;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref($i85, 16)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.2, $p87);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i89 := $zext.i32.i64($i84);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref($i89, 16)), $mul.ref(8, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.2, $p91);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i93 := vhost_scsi_map_to_sgl($p82, $i83, $p88, $i92, $i3);
    call {:si_unique_call 751} {:cexpr "ret"} boogie_si_record_i32($i93);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i93, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i95 := $i93;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i113 := $sext.i32.i64($i93);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p82, $mul.ref($i113, 40));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i115 := $sub.i32($i83, $i93);
    call {:si_unique_call 756} {:cexpr "sgl_count"} boogie_si_record_i32($i115);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i84, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32($i116);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i117 := $ult.i32($i116, $i2);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i117 == 1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb35:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    $p82, $i83, $i84 := $p114, $i115, $i116;
    goto $bb35_dummy;

  $bb24:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.2, $p96);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i98 := $ugt.i32($i97, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.2, $p108);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} kfree($p110);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p111, $0.ref);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p112, 0);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i41 := $i95;
    goto $bb11;

  $bb26:
    assume $i98 == 1;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb29;

  $bb29:
    call $p100, $p101, $i102, $p103, $p104, $i105, $i106, $i107, $i99 := vhost_scsi_map_iov_to_sgl_loop_$bb29($p0, $p96, $p100, $p101, $i102, $p103, $p104, $i105, $i106, $i107, $i99);
    goto $bb29_last;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.2, $p100);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i102 := $zext.i32.i64($i99);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p101, $mul.ref($i102, 40));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p104 := sg_page($p103);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} put_page($p104);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i99, 1);
    call {:si_unique_call 754} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.2, $p96);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i107 := $ugt.i32($i106, $i105);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i107 == 1);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb31:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i99 := $i105;
    goto $bb31_dummy;

  $bb16:
    assume $i79 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} vslice_dummy_var_110 := __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.114, $i2, $i7);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i57 == 1;
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p38);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} vslice_dummy_var_109 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32($p4, .str.113, .str.112, $p38, $i7, $i60);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32(0, 12);
    goto $bb11;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb4;

  $bb4:
    call $i10, $p12, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i8, $i9, $i34 := vhost_scsi_map_iov_to_sgl_loop_$bb4($p1, $i2, $i10, $p12, $p13, $i14, $i15, $p17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i8, $i9, $i34);
    goto $bb4_last;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($i10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i9);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref($i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.2, $p17);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i19 := $add.i64($i14, $i18);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 4095);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i64($i20, 12);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i9);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i64($i27, 12);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i32($i28);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i22, $i29);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i8);
    call {:si_unique_call 740} {:cexpr "sgl_count"} boogie_si_record_i32($i31);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i9, 1);
    call {:si_unique_call 741} {:cexpr "i"} boogie_si_record_i32($i32);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i33 := $ult.i32($i32, $i2);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i34 := $i31;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i7 := $i34;
    goto $bb3;

  $bb6:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i8, $i9 := $i31, $i32;
    goto $bb6_dummy;

  $bb31_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  $bb35_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 288350);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 289382);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_submission_work: ref;

axiom tcm_vhost_submission_work == $sub.ref(0, 290414);

procedure tcm_vhost_submission_work($p0: ref);
  free requires assertsPassed;



implementation tcm_vhost_submission_work($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(64, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(24, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.2, $p4);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p9 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(56, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.2, $p10);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(1104, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(1136, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(28, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(12, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(4, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.2, $p22);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(8, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.2, $p24);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(24, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.2, $p26);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i28 := target_submit_cmd_map_sgls($p3, $p13, $p15, $p17, $i19, $i21, $i23, $i25, 0, $p9, $i27, $0.ref, 0);
    call {:si_unique_call 761} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vslice_dummy_var_111 := transport_send_check_condition_and_sense($p3, 10, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} transport_generic_free_cmd($p3, 0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 1024), 1248)), $mul.ref(32, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $p9 := $p8;
    goto $bb3;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 291446);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 764} $i2 := __VERIFIER_nondet_bool();
    call {:si_unique_call 765} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i2);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_mutex_unlock_21: ref;

axiom ldv_mutex_unlock_21 == $sub.ref(0, 292478);

procedure ldv_mutex_unlock_21($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_21($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} mutex_unlock($p0);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const target_submit_cmd_map_sgls: ref;

axiom target_submit_cmd_map_sgls == $sub.ref(0, 293510);

procedure target_submit_cmd_map_sgls($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $p9: ref, $i10: i32, $p11: ref, $i12: i32) returns ($r: i32);
  free requires assertsPassed;



implementation target_submit_cmd_map_sgls($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32, $i5: i32, $i6: i32, $i7: i32, $i8: i32, $p9: ref, $i10: i32, $p11: ref, $i12: i32) returns ($r: i32)
{
  var $i13: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 768} {:cexpr "target_submit_cmd_map_sgls:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 769} {:cexpr "target_submit_cmd_map_sgls:arg:arg5"} boogie_si_record_i32($i5);
    call {:si_unique_call 770} {:cexpr "target_submit_cmd_map_sgls:arg:arg6"} boogie_si_record_i32($i6);
    call {:si_unique_call 771} {:cexpr "target_submit_cmd_map_sgls:arg:arg7"} boogie_si_record_i32($i7);
    call {:si_unique_call 772} {:cexpr "target_submit_cmd_map_sgls:arg:arg8"} boogie_si_record_i32($i8);
    call {:si_unique_call 773} {:cexpr "target_submit_cmd_map_sgls:arg:arg10"} boogie_si_record_i32($i10);
    call {:si_unique_call 774} {:cexpr "target_submit_cmd_map_sgls:arg:arg12"} boogie_si_record_i32($i12);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 1} true;
    call {:si_unique_call 775} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 776} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const transport_send_check_condition_and_sense: ref;

axiom transport_send_check_condition_and_sense == $sub.ref(0, 294542);

procedure transport_send_check_condition_and_sense($p0: ref, $i1: i8, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation transport_send_check_condition_and_sense($p0: ref, $i1: i8, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 777} {:cexpr "transport_send_check_condition_and_sense:arg:arg1"} boogie_si_record_i8($i1);
    call {:si_unique_call 778} {:cexpr "transport_send_check_condition_and_sense:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 1} true;
    call {:si_unique_call 779} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 780} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const transport_generic_free_cmd: ref;

axiom transport_generic_free_cmd == $sub.ref(0, 295574);

procedure transport_generic_free_cmd($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation transport_generic_free_cmd($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} {:cexpr "transport_generic_free_cmd:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 296606);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 783} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sg_init_table: ref;

axiom sg_init_table == $sub.ref(0, 297638);

procedure sg_init_table($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation sg_init_table($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} {:cexpr "sg_init_table:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    return;
}



const vhost_scsi_map_to_sgl: ref;

axiom vhost_scsi_map_to_sgl == $sub.ref(0, 298670);

procedure vhost_scsi_map_to_sgl($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_scsi_map_to_sgl($p0: ref, $i1: i32, $p2: ref, $i3: i64, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i1;
  var $i12: i64;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i41: i32;
  var $i7: i32;
  var $i21: i32;
  var $i22: i32;
  var $i43: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p48: ref;
  var $i42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 787} {:cexpr "vhost_scsi_map_to_sgl:arg:sgl_count"} boogie_si_record_i32($i1);
    call {:si_unique_call 788} {:cexpr "vhost_scsi_map_to_sgl:arg:len"} boogie_si_record_i64($i3);
    call {:si_unique_call 789} {:cexpr "vhost_scsi_map_to_sgl:arg:write"} boogie_si_record_i32($i4);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i3, 0);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := $i7;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i8, $p9, $i10, $p11 := 0, $p2, $i3, $p0;
    goto $bb4;

  $bb4:
    call $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i8, $p9, $i10, $p11, $i41 := vhost_scsi_map_to_sgl_loop_$bb4($i1, $i4, $p5, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $p33, $i34, $p35, $i36, $i37, $p38, $i39, $i40, $i8, $p9, $i10, $p11, $i41);
    goto $bb4_last;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p9);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 4095);
    call {:si_unique_call 790} {:cexpr "offset"} boogie_si_record_i32($i14);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(4096, $i14);
    call {:si_unique_call 791} {:cexpr "__min1"} boogie_si_record_i32($i15);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i32($i10);
    call {:si_unique_call 792} {:cexpr "__min2"} boogie_si_record_i32($i16);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i17 := $ult.i32($i15, $i16);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i8, $i1);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i20 := $i8;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p9);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i24 := get_user_pages_fast($i23, 1, $i4, $p5);
    call {:si_unique_call 794} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i24, 0);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i8, $i24;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.14, $p5);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} sg_set_page($p11, $p33, $i18, $i14);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i18);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p9, $mul.ref($i34, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i18);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i10, $i36);
    call {:si_unique_call 799} {:cexpr "len"} boogie_si_record_i64($i37);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p11, $mul.ref(1, 40));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i8, 1);
    call {:si_unique_call 800} {:cexpr "npages"} boogie_si_record_i32($i39);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i37, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i7 := $i41;
    goto $bb3;

  $bb20:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9, $i10, $p11 := $i39, $p35, $i37, $p38;
    goto $bb20_dummy;

  $bb17:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i31, $i32;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i21);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p0, $mul.ref($i43, 40));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p0);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i45, $i46);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i42 := $i22;
    goto $bb23;

  $bb24:
    assume $i47 == 1;
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p48 := $p0;
    goto $bb27;

  $bb27:
    call $p49, $p50, $i51, $i52, $p48 := vhost_scsi_map_to_sgl_loop_$bb27($i45, $p49, $p50, $i51, $i52, $p48);
    goto $bb27_last;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p49 := sg_page($p48);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} put_page($p49);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref(1, 40));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i45, $i51);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb29:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p48 := $p50;
    goto $bb29_dummy;

  $bb13:
    assume $i29 == 1;
    call {:si_unique_call 797} devirtbounce.4(0, .str.53, 522, 12);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call vhost_scsi_map_to_sgl_loop_$bb15();
    goto $bb15_last;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i20, $sub.i32(0, 105);
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i18 := $i15;
    goto $bb8;

  $bb29_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb20_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 299702);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.2, $p1);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 804} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.2, $p8);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 807} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.2, $p15);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 808} devirtbounce.4(0, .str.90, 99, 12);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 805} devirtbounce.4(0, .str.90, 98, 12);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_page_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const sg_set_page: ref;

axiom sg_set_page == $sub.ref(0, 300734);

procedure sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} {:cexpr "sg_set_page:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 810} {:cexpr "sg_set_page:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} sg_assign_page($p0, $p1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p4, $i3);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p5, $i2);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    return;
}



const sg_assign_page: ref;

axiom sg_assign_page == $sub.ref(0, 301766);

procedure sg_assign_page($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation sg_assign_page($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.2, $p2);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    call {:si_unique_call 812} {:cexpr "page_link"} boogie_si_record_i64($i4);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 3);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 814} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.2, $p12);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 2271560481);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 817} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.2, $p19);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 820} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i4, $i26);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p28, $i27);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i25 == 1;
    call {:si_unique_call 821} devirtbounce.4(0, .str.90, 68, 12);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call sg_assign_page_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 818} devirtbounce.4(0, .str.90, 67, 12);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_assign_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 815} devirtbounce.4(0, .str.90, 65, 12);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_assign_page_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 302798);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 823} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p2 := ldv_malloc($i0);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 303830);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 825} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 1} true;
    call {:si_unique_call 826} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 827} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $p3 := malloc($i0);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i4 := ldv_is_err($p3);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 1} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 1} true;
    $i6 := $xor.i1($i5, 1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} __VERIFIER_assume($i7);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p8 := $p3;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 304862);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 831} $r := $malloc($i0);
    return;
}



const scsi_varlen_cdb_length: ref;

axiom scsi_varlen_cdb_length == $sub.ref(0, 305894);

procedure scsi_varlen_cdb_length($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_varlen_cdb_length($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 10)), $mul.ref(7, 1));
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.2, $p2);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 8);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 306926);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const copy_user_generic: ref;

axiom copy_user_generic == $sub.ref(0, 307958);

procedure copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation copy_user_generic($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} {:cexpr "copy_user_generic:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 834} $p3 := devirtbounce.14(0, copy_user_generic_unrolled, copy_user_generic_string, copy_user_enhanced_fast_string, $p0, $p1, $i2);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i4 := $extractvalue($p3, 0);
    call {:si_unique_call 835} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const copy_user_generic_unrolled: ref;

axiom copy_user_generic_unrolled == $sub.ref(0, 308990);

procedure copy_user_generic_unrolled($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_generic_string: ref;

axiom copy_user_generic_string == $sub.ref(0, 310022);

procedure copy_user_generic_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const copy_user_enhanced_fast_string: ref;

axiom copy_user_enhanced_fast_string == $sub.ref(0, 311054);

procedure copy_user_enhanced_fast_string($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);



const vhost_update_used_flags: ref;

axiom vhost_update_used_flags == $sub.ref(0, 312086);

procedure vhost_update_used_flags($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.2;



implementation vhost_update_used_flags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i9: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(478, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.2, $p1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    call {:si_unique_call 836} $i7 := devirtbounce.15(0, $i2, $p6, $sub.i32(0, 14), 0);
    call {:si_unique_call 837} {:cexpr "__pu_err"} boogie_si_record_i32($i7);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(483, 1));
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.2, $p10);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i64($i12);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i14 := ldv__builtin_expect($i13, 0);
    call {:si_unique_call 839} {:cexpr "tmp"} boogie_si_record_i64($i14);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb6:
    assume $i15 == 1;
    call {:si_unique_call 840} devirtbounce.1(0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.2, $p22);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p19);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.2, $p25);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i28 := $sub.i64($i24, $i27);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i29 := $add.i64($i23, $i28);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} vslice_dummy_var_112 := log_write($p21, $i29, 2);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_113 := eventfd_signal($p36, 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb2:
    assume $i8 == 1;
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb4;
}



const vhost_update_avail_event: ref;

axiom vhost_update_avail_event == $sub.ref(0, 313118);

procedure vhost_update_avail_event($p0: ref, $i1: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.2;



implementation vhost_update_avail_event($p0: ref, $i1: i16) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i8;
  var $i17: i1;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $i14: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} {:cexpr "vhost_update_avail_event:arg:avail_event"} boogie_si_record_i16($i1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(474, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.2, $p2);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p7, $mul.ref($i10, 800));
    call {:si_unique_call 844} $i12 := devirtbounce.15(0, $i3, $p11, $sub.i32(0, 14), 0);
    call {:si_unique_call 845} {:cexpr "__pu_err"} boogie_si_record_i32($i12);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(483, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.2, $p15);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i8.i1($i16);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i64($i17);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 847} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb6:
    assume $i20 == 1;
    call {:si_unique_call 848} devirtbounce.1(0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 4)), $mul.ref(4, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p24, $mul.ref($i27, 1));
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.2, $p29);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(488, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.2, $p31);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p28);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(200, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i33, $i36);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i32, $i37);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_114 := log_write($p30, $i38, 2);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.2, $p40);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i43 == 1;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 17152)), $mul.ref(248, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} vslice_dummy_var_115 := eventfd_signal($p45, 1);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb2:
    assume $i13 == 1;
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb4;
}



const get_indirect: ref;

axiom get_indirect == $sub.ref(0, 314150);

procedure get_indirect($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref, $p8: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.21, $M.22, $M.20, $M.17, $M.2, $CurrAddr;



implementation get_indirect($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref, $p5: ref, $p6: ref, $p7: ref, $p8: ref) returns ($r: i32)
{
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i64;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i24;
  var $i105: i24;
  var $i106: i24;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i1;
  var $i147: i32;
  var $i132: i32;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i24;
  var $i155: i24;
  var $i156: i24;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $i163: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i24;
  var $i189: i24;
  var $i190: i24;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $i197: i1;
  var $p198: ref;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $p204: ref;
  var $p205: ref;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p211: ref;
  var $i212: i16;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i64;
  var $i218: i64;
  var $i219: i1;
  var $i220: i32;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i24;
  var $i228: i24;
  var $i229: i24;
  var $p230: ref;
  var $p231: ref;
  var $i232: i8;
  var $i233: i64;
  var $i234: i64;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $i238: i64;
  var $i239: i64;
  var $i240: i64;
  var $i241: i64;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $i253: i32;
  var $i254: i64;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i64;
  var $i261: i64;
  var $i262: i1;
  var $i263: i32;
  var $i264: i32;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $i271: i24;
  var $i272: i24;
  var $i273: i24;
  var $p274: ref;
  var $p275: ref;
  var $i276: i8;
  var $i277: i64;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p282: ref;
  var $p283: ref;
  var $i284: i64;
  var $i285: i1;
  var $p286: ref;
  var $p287: ref;
  var $p289: ref;
  var $i290: i16;
  var $i291: i32;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i32;
  var $i296: i64;
  var $i297: i1;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i32;
  var $i305: i64;
  var $p307: ref;
  var $p308: ref;
  var $i309: i32;
  var $i310: i64;
  var $i311: i32;
  var $i312: i64;
  var $p314: ref;
  var $i315: i32;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i64;
  var $i321: i64;
  var $i322: i1;
  var $i323: i32;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $i330: i24;
  var $i331: i24;
  var $i332: i24;
  var $p333: ref;
  var $p334: ref;
  var $i335: i8;
  var $i336: i64;
  var $i337: i64;
  var $i338: i64;
  var $i339: i1;
  var $p341: ref;
  var $p342: ref;
  var $i343: i64;
  var $i344: i1;
  var $p345: ref;
  var $p346: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i1;
  var $i53: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i64;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i64;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i64;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i64;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i64;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i64;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i64;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 860} {:cexpr "get_indirect:arg:iov_size"} boogie_si_record_i32($i3);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 15);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 862} {:cexpr "tmp___0"} boogie_si_record_i64($i24);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.2, $p54);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.2, $p56);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.2, $p58);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i60 := translate_desc($p0, $i55, $i57, $p59, 1024);
    call {:si_unique_call 868} {:cexpr "ret"} boogie_si_record_i32($i60);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i62 := $zext.i1.i32($i61);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 870} {:cexpr "tmp___2"} boogie_si_record_i64($i64);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.2, $p90);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i92 := $udiv.i32($i91, 16);
    call {:si_unique_call 875} {:cexpr "count"} boogie_si_record_i32($i92);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i93 := $ugt.i32($i92, 65536);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i94 := $zext.i1.i32($i93);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i95 := $sext.i32.i64($i94);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 877} {:cexpr "tmp___4"} boogie_si_record_i64($i96);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.18, $p5);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.17, $p4);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i124, $i125);
    call {:si_unique_call 882} {:cexpr "iov_count"} boogie_si_record_i32($i126);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i127 := $ugt.i32(1, $i92);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 884} {:cexpr "tmp___6"} boogie_si_record_i64($i130);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i132 := 0;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i131 == 1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := 1, $i126, 0;
    goto $bb32;

  $bb32:
    call $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i133, $i134, $i135, $p172, $p173, $p174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $p211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $p250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $p302, $i303, $i304, $i305, $p307, $p308, $i309, $i310, $i311, $i312, $p314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i348, $i349, $i350, $i351 := get_indirect_loop_$bb32($p0, $p1, $p2, $i3, $p4, $p5, $p6, $p7, $p9, $i92, $i136, $i137, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i133, $i134, $i135, $p172, $p173, $p174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, $p211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $p250, $i251, $p252, $i253, $i254, $p255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $p289, $i290, $i291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $p302, $i303, $i304, $i305, $p307, $p308, $i309, $i310, $i311, $i312, $p314, $i315, $i316, $i317, $i318, $i319, $i320, $i321, $i322, $i323, $i348, $i349, $i350, $i351);
    goto $bb32_last;

  $bb42:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p9);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.2, $p173);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i175 := memcpy_fromiovec($p172, $p174, 16);
    call {:si_unique_call 894} {:cexpr "tmp___8"} boogie_si_record_i32($i175);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i176 := $ne.i32($i175, 0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i177 := $zext.i1.i32($i176);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i177);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i179 := ldv__builtin_expect($i178, 0);
    call {:si_unique_call 896} {:cexpr "tmp___9"} boogie_si_record_i64($i179);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i181 := $i135;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.2, $p211);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 4);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i216 := $zext.i1.i32($i215);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} $i218 := ldv__builtin_expect($i217, 0);
    call {:si_unique_call 902} {:cexpr "tmp___11"} boogie_si_record_i64($i218);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i219 := $ne.i64($i218, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i220 := $i135;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.2, $p250);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.2, $p252);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i254 := $zext.i32.i64($i134);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($p2, $mul.ref($i254, 16));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i256 := $sub.i32($i3, $i134);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i257 := translate_desc($p0, $i251, $i253, $p255, $i256);
    call {:si_unique_call 908} {:cexpr "ret"} boogie_si_record_i32($i257);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, 0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i259 := $zext.i1.i32($i258);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i260 := $sext.i32.i64($i259);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i261 := ldv__builtin_expect($i260, 0);
    call {:si_unique_call 910} {:cexpr "tmp___13"} boogie_si_record_i64($i261);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i263, $i264 := $i135, $i257;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i290 := $load.i16($M.2, $p289);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i291 := $zext.i16.i32($i290);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i292 := $and.i32($i291, 2);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i293 == 1);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.18, $p5);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i318 := $ne.i32($i317, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i32($i318);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i320 := $sext.i32.i64($i319);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i321 := ldv__builtin_expect($i320, 0);
    call {:si_unique_call 918} {:cexpr "tmp___16"} boogie_si_record_i64($i321);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i323 := $i135;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i348 := $load.i32($M.17, $p4);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i349 := $add.i32($i348, $i257);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p4, $i349);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i350 := next_desc($p9);
    call {:si_unique_call 920} {:cexpr "i"} boogie_si_record_i32($i350);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i351 := $ne.i32($i350, $sub.i32(0, 1));
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i136, $i137 := $i350, $i133;
    assume true;
    goto $bb33, $bb85;

  $bb85:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb33:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.18, $p5);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.17, $p4);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i138, $i139);
    call {:si_unique_call 887} {:cexpr "iov_count"} boogie_si_record_i32($i140);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i137, 1);
    call {:si_unique_call 888} {:cexpr "found"} boogie_si_record_i32($i141);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i142 := $ugt.i32($i141, $i92);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i143 := $zext.i1.i32($i142);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i144 := $sext.i32.i64($i143);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $i145 := ldv__builtin_expect($i144, 0);
    call {:si_unique_call 890} {:cexpr "tmp___6"} boogie_si_record_i64($i145);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i146 := $ne.i64($i145, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i147 := $i136;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i133, $i134, $i135 := $i141, $i140, $i136;
    goto $bb35_dummy;

  $bb34:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i132 := $i147;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p148, .str.6);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p149, .str.32);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p150, .str.4);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p151, .str.36);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p152);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i154 := $load.i24($M.12, $p153);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i155 := $and.i24($i154, $sub.i24(0, 262144));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i156 := $or.i24($i155, 1156);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p153, $i156);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p157, 0);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.13, $p158);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i64($i159);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i161 := $and.i64($i160, 1);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i162 := ldv__builtin_expect($i161, 0);
    call {:si_unique_call 886} {:cexpr "tmp___5"} boogie_si_record_i64($i162);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i163 := $ne.i64($i162, 0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.2, $p165);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i167 := $p2i.ref.i64($p166);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb9;

  $bb39:
    assume $i168 == 1;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.2, $p169);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_123 := eventfd_signal($p170, 1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i163 == 1;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_122 := __dynamic_pr_debug.ref.ref.i32.i32($p13, .str.36, $i132, $i92);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb76:
    assume $i322 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p324, .str.6);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p325, .str.32);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p326, .str.4);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p327, .str.40);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p329 := $bitcast.ref.ref($p328);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i330 := $load.i24($M.12, $p329);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i331 := $and.i24($i330, $sub.i24(0, 262144));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i332 := $or.i24($i331, 1191);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p329, $i332);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p333, 0);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.13, $p334);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i64($i335);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i337 := $and.i64($i336, 1);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i338 := ldv__builtin_expect($i337, 0);
    call {:si_unique_call 922} {:cexpr "tmp___15"} boogie_si_record_i64($i338);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i339 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p342 := $load.ref($M.2, $p341);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i343 := $p2i.ref.i64($p342);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i344 := $ne.i64($i343, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i344 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb9;

  $bb81:
    assume $i344 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p346 := $load.ref($M.2, $p345);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} vslice_dummy_var_131 := eventfd_signal($p346, 1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i339 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} vslice_dummy_var_130 := __dynamic_pr_debug.ref.ref.i32($p17, .str.40, $i323);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb70:
    assume $i293 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.18, $p5);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i294, $i257);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, $p5, $i295);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p6);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i298 := $zext.i1.i32($i297);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i298);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i300 := ldv__builtin_expect($i299, 0);
    call {:si_unique_call 916} {:cexpr "tmp___14"} boogie_si_record_i64($i300);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i301 == 1;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i303 := $load.i64($M.2, $p302);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.20, $p7);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i305 := $zext.i32.i64($i304);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p6, $mul.ref($i305, 16)), $mul.ref(0, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, $p307, $i303);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.2, $p308);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i310 := $zext.i32.i64($i309);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.20, $p7);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i312 := $zext.i32.i64($i311);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p6, $mul.ref($i312, 16)), $mul.ref(8, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, $p314, $i310);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i315 := $load.i32($M.20, $p7);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i316 := $add.i32($i315, 1);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, $p7, $i316);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb61:
    assume $i262 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p265, .str.6);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p266, .str.32);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p267, .str.4);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p268, .str.39);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i271 := $load.i24($M.12, $p270);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i272 := $and.i24($i271, $sub.i24(0, 262144));
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i273 := $or.i24($i272, 1175);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p270, $i273);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p274, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.13, $p275);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i64($i276);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i277, 1);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $i279 := ldv__builtin_expect($i278, 0);
    call {:si_unique_call 912} {:cexpr "tmp___12"} boogie_si_record_i64($i279);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.2, $p282);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i284 := $p2i.ref.i64($p283);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i285 := $ne.i64($i284, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i53 := $i264;
    goto $bb9;

  $bb66:
    assume $i285 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.2, $p286);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vslice_dummy_var_129 := eventfd_signal($p287, 1);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i280 == 1;
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_128 := __dynamic_pr_debug.ref.ref.i32.i32($p16, .str.39, $i264, $i263);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb52:
    assume $i219 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p221, .str.6);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p222, .str.32);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p223, .str.4);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p224, .str.38);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p225);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i227 := $load.i24($M.12, $p226);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i228 := $and.i24($i227, $sub.i24(0, 262144));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i229 := $or.i24($i228, 1167);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p226, $i229);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p230, 0);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.13, $p231);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i233 := $zext.i8.i64($i232);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i234 := $and.i64($i233, 1);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i235 := ldv__builtin_expect($i234, 0);
    call {:si_unique_call 904} {:cexpr "tmp___10"} boogie_si_record_i64($i235);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i236 := $ne.i64($i235, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.2, $p243);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i245 := $p2i.ref.i64($p244);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i245, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb9;

  $bb57:
    assume $i246 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.2, $p247);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_127 := eventfd_signal($p248, 1);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb54:
    assume $i236 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i238 := $load.i64($M.2, $p237);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i239 := $zext.i32.i64($i220);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i240 := $mul.i64($i239, 16);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i241 := $add.i64($i238, $i240);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_126 := __dynamic_pr_debug.ref.ref.i32.i64($p15, .str.38, $i220, $i241);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb43:
    assume $i180 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p182, .str.6);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p183, .str.32);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p184, .str.4);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p185, .str.37);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i188 := $load.i24($M.12, $p187);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i189 := $and.i24($i188, $sub.i24(0, 262144));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i190 := $or.i24($i189, 1162);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p187, $i190);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p191, 0);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.13, $p192);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i64($i193);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i195 := $and.i64($i194, 1);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i196 := ldv__builtin_expect($i195, 0);
    call {:si_unique_call 898} {:cexpr "tmp___7"} boogie_si_record_i64($i196);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i197 := $ne.i64($i196, 0);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.2, $p204);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i207 := $ne.i64($i206, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb9;

  $bb48:
    assume $i207 == 1;
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.2, $p208);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} vslice_dummy_var_125 := eventfd_signal($p209, 1);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb45:
    assume $i197 == 1;
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.2, $p198);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i200 := $zext.i32.i64($i181);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i201 := $mul.i64($i200, 16);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i202 := $add.i64($i199, $i201);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} vslice_dummy_var_124 := __dynamic_pr_debug.ref.ref.i32.i64($p14, .str.37, $i181, $i202);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i131 == 1;
    goto $bb30;

  $bb20:
    assume $i97 == 1;
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p98, .str.6);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p99, .str.32);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p100, .str.4);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p101, .str.35);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i104 := $load.i24($M.12, $p103);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i105 := $and.i24($i104, $sub.i24(0, 262144));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $i106 := $or.i24($i105, 1147);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p103, $i106);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p107, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.13, $p108);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i64($i109);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i111 := $and.i64($i110, 1);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i112 := ldv__builtin_expect($i111, 0);
    call {:si_unique_call 879} {:cexpr "tmp___3"} boogie_si_record_i64($i112);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.2, $p117);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, 0);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 7);
    goto $bb9;

  $bb25:
    assume $i120 == 1;
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.2, $p121);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_121 := eventfd_signal($p122, 1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i113 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.2, $p114);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_120 := __dynamic_pr_debug.ref.ref.i32($p12, .str.35, $i115);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i65 == 1;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p66, .str.6);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p67, .str.32);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p68, .str.4);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p69, .str.34);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.12, $p71);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 1134);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p71, $i74);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p75, 0);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.13, $p76);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 872} {:cexpr "tmp___1"} boogie_si_record_i64($i80);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.2, $p83);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i53 := $i60;
    goto $bb9;

  $bb16:
    assume $i86 == 1;
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.2, $p87);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} vslice_dummy_var_119 := eventfd_signal($p88, 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i81 == 1;
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_118 := __dynamic_pr_debug.ref.ref.i32($p11, .str.34, $i60);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb1:
    assume $i25 == 1;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p26, .str.6);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p27, .str.32);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p28, .str.4);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p29, .str.33);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.12, $p31);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 1127);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p31, $i34);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p35, 0);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.13, $p36);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 864} {:cexpr "tmp"} boogie_si_record_i64($i40);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.2, $p46);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32(0, 22);
    goto $bb9;

  $bb6:
    assume $i49 == 1;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 17152)), $mul.ref(240, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.2, $p50);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_117 := eventfd_signal($p51, 1);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i41 == 1;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.2, $p42);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i43);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_116 := __dynamic_pr_debug.ref.ref.i64.i64($p10, .str.33, $i44, 16);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb35_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;
}



const translate_desc: ref;

axiom translate_desc == $sub.ref(0, 315182);

procedure translate_desc($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation translate_desc($p0: ref, $i1: i64, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i64;
  var $i13: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i64;
  var $i54: i32;
  var $i55: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i56: i32;
  var $i14: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} {:cexpr "translate_desc:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 926} {:cexpr "translate_desc:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 927} {:cexpr "translate_desc:arg:iov_size"} boogie_si_record_i32($i4);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} rcu_read_lock();
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i7 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 930} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i2);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i64($i12, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i14 := 0;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i23 := $i14;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} rcu_read_unlock();
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i15, $i16, $i17 := 0, $i1, 0;
    goto $bb13;

  $bb13:
    call $i18, $i19, $i20, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $i54, $i55, $i15, $i16, $i17, $i56 := translate_desc_loop_$bb13($i2, $p3, $i4, $p6, $i12, $i18, $i19, $i20, $i21, $i22, $p24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $p36, $i37, $i38, $i39, $i40, $i41, $i42, $p43, $p44, $i45, $i46, $p47, $i48, $i49, $p50, $p51, $i52, $i53, $i54, $i55, $i15, $i16, $i17, $i56);
    goto $bb13_last;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i18 := $sge.i32($i15, $i4);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 935} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p24 := find_region($p6, $i16, $i2);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 939} {:cexpr "tmp___2"} boogie_si_record_i64($i29);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i15);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.2, $p33);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i35 := $sub.i64($i34, $i16);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.2, $p36);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i38 := $add.i64($i35, $i37);
    call {:si_unique_call 940} {:cexpr "size"} boogie_si_record_i64($i38);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i2);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i40 := $sub.i64($i39, $i17);
    call {:si_unique_call 941} {:cexpr "_min1"} boogie_si_record_i64($i40);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i41 := $ult.i64($i40, $i38);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i41 == 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i42 := $i38;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p43, $i42);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.2, $p44);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i46 := $add.i64($i45, $i16);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.2, $p47);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64($i46, $i48);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $p50 := $i2p.i64.ref($i49);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref($i31, 16)), $mul.ref(0, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p51, $p50);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i52 := $add.i64($i17, $i38);
    call {:si_unique_call 942} {:cexpr "s"} boogie_si_record_i64($i52);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i53 := $add.i64($i16, $i38);
    call {:si_unique_call 943} {:cexpr "addr"} boogie_si_record_i64($i53);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i15, 1);
    call {:si_unique_call 944} {:cexpr "ret"} boogie_si_record_i32($i54);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i55 := $ugt.i64($i12, $i52);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i14 := $i56;
    goto $bb12;

  $bb25:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i15, $i16, $i17 := $i54, $i53, $i52;
    goto $bb25_dummy;

  $bb22:
    assume $i41 == 1;
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb24;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 14);
    goto $bb17;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32(0, 105);
    goto $bb17;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1(1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i10 := rcu_read_lock_held();
    call {:si_unique_call 932} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} lockdep_rcu_suspicious(.str.4, 1065, .str.41);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4709;
}



const next_desc: ref;

axiom next_desc == $sub.ref(0, 316214);

procedure next_desc($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation next_desc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.2, $p1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.2, $p7);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    call {:si_unique_call 945} {:cexpr "next"} boogie_si_record_i32($i9);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 1);
    goto $bb3;
}



const rcu_read_lock: ref;

axiom rcu_read_lock == $sub.ref(0, 317246);

procedure rcu_read_lock();
  free requires assertsPassed;
  modifies $M.2;



implementation rcu_read_lock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} __rcu_read_lock();
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} rcu_lock_acquire(rcu_lock_map);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 949} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i3 := rcu_is_cpu_idle();
    call {:si_unique_call 951} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} lockdep_rcu_suspicious(.str.42, 738, .str.43);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_read_lock_held: ref;

axiom rcu_read_lock_held == $sub.ref(0, 318278);

procedure rcu_read_lock_held() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_read_lock_held() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i8;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 954} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i3 := rcu_is_cpu_idle();
    call {:si_unique_call 956} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i5 := rcu_lockdep_current_cpu_online();
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i8($i5);
    call {:si_unique_call 958} {:cexpr "tmp___1"} boogie_si_record_i8($i6);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i6);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i10 := lock_is_held(rcu_lock_map);
    call {:si_unique_call 960} {:cexpr "tmp___3"} boogie_si_record_i32($i10);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i2 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb10;

  $bb5:
    assume $i4 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb3;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i2 := 1;
    goto $bb3;
}



const find_region: ref;

axiom find_region == $sub.ref(0, 319310);

procedure find_region($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation find_region($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i6: i32;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} {:cexpr "find_region:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 962} {:cexpr "find_region:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $r := $p22;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p10, $p11, $i12, $i13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $p21, $i23, $i24, $i25, $i6 := find_region_loop_$bb4($p0, $i1, $p3, $p7, $p8, $i9, $p10, $p11, $i12, $i13, $p14, $i15, $p16, $i17, $i18, $i19, $i20, $p21, $i23, $i24, $i25, $i6);
    goto $bb4_last;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 32));
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 32)), $mul.ref(0, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.2, $p11);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i13 := $ule.i64($i12, $i1);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i6, 1);
    call {:si_unique_call 963} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.2, $p3);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i23, $i24);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i23;
    goto $bb13_dummy;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref($i9, 32)), $mul.ref(0, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.2, $p14);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref($i9, 32)), $mul.ref(8, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.2, $p16);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i15, $i17);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64($i18, 1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i20 := $uge.i64($i19, $i1);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $p21 := $p10;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb11;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4831;
}



const rcu_read_unlock: ref;

axiom rcu_read_unlock == $sub.ref(0, 320342);

procedure rcu_read_unlock();
  free requires assertsPassed;
  modifies $M.2;



implementation rcu_read_unlock()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} $i0 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 965} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} rcu_lock_release(rcu_lock_map);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __rcu_read_unlock();
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1(1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i3 := rcu_is_cpu_idle();
    call {:si_unique_call 967} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i4 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} lockdep_rcu_suspicious(.str.42, 759, .str.44);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const rcu_is_cpu_idle: ref;

axiom rcu_is_cpu_idle == $sub.ref(0, 321374);

procedure rcu_is_cpu_idle() returns ($r: i32);
  free requires assertsPassed;



implementation rcu_is_cpu_idle() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 1} true;
    call {:si_unique_call 971} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 972} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lock_release: ref;

axiom rcu_lock_release == $sub.ref(0, 322406);

procedure rcu_lock_release($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_release($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} lock_release($p0, 1, 0);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    return;
}



const lock_release: ref;

axiom lock_release == $sub.ref(0, 323438);

procedure lock_release($p0: ref, $i1: i32, $i2: i64);
  free requires assertsPassed;



implementation lock_release($p0: ref, $i1: i32, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} {:cexpr "lock_release:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 975} {:cexpr "lock_release:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    return;
}



const rcu_lockdep_current_cpu_online: ref;

axiom rcu_lockdep_current_cpu_online == $sub.ref(0, 324470);

procedure rcu_lockdep_current_cpu_online() returns ($r: i1);
  free requires assertsPassed;



implementation rcu_lockdep_current_cpu_online() returns ($r: i1)
{
  var $i0: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 1} true;
    call {:si_unique_call 976} $i0 := __VERIFIER_nondet_bool();
    call {:si_unique_call 977} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i0);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const rcu_lock_acquire: ref;

axiom rcu_lock_acquire == $sub.ref(0, 325502);

procedure rcu_lock_acquire($p0: ref);
  free requires assertsPassed;



implementation rcu_lock_acquire($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} lock_acquire($p0, 0, 0, 2, 1, $0.ref, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    return;
}



const lock_acquire: ref;

axiom lock_acquire == $sub.ref(0, 326534);

procedure lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64);
  free requires assertsPassed;



implementation lock_acquire($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $p5: ref, $i6: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} {:cexpr "lock_acquire:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 980} {:cexpr "lock_acquire:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 981} {:cexpr "lock_acquire:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 982} {:cexpr "lock_acquire:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 983} {:cexpr "lock_acquire:arg:arg6"} boogie_si_record_i64($i6);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    return;
}



const memcpy_fromiovec: ref;

axiom memcpy_fromiovec == $sub.ref(0, 327566);

procedure memcpy_fromiovec($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation memcpy_fromiovec($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 984} {:cexpr "memcpy_fromiovec:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 1} true;
    call {:si_unique_call 985} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 986} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 328598);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 329630);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 330662);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} {:cexpr "copy_to_user:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} might_fault();
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i3 := _copy_to_user($p0, $p1, $i2);
    call {:si_unique_call 990} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vhost_scsi_free_cmd: ref;

axiom vhost_scsi_free_cmd == $sub.ref(0, 331694);

procedure vhost_scsi_free_cmd($p0: ref);
  free requires assertsPassed;



implementation vhost_scsi_free_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i8: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(64, 1));
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} transport_generic_free_cmd($p1, 1);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.2, $p2);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} kfree($p20);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(24, 1));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.2, $p17);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} kfree($p19);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    call $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i8 := vhost_scsi_free_cmd_loop_$bb6($p0, $p5, $p9, $p10, $i11, $p12, $p13, $i14, $i15, $i16, $i8);
    goto $bb6_last;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i8);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 40));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p13 := sg_page($p12);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} put_page($p13);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, 1);
    call {:si_unique_call 994} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p5);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, $i14);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i14;
    goto $bb8_dummy;

  $bb8_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;
}



const vhost_scsi_get_cmd_from_completion: ref;

axiom vhost_scsi_get_cmd_from_completion == $sub.ref(0, 332726);

procedure vhost_scsi_get_cmd_from_completion($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation vhost_scsi_get_cmd_from_completion($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} spin_lock_bh($p1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51912, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i3 := list_empty($p2);
    call {:si_unique_call 999} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51912, 1)), $mul.ref(0, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref($sub.ref(0, 1232), 1248));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 1232), 1248)), $mul.ref(1232, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51912, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i14, $i16);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} spin_unlock_bh($p18);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p6 := $p11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p10, $mul.ref($sub.ref(0, 1232), 1248)), $mul.ref(1232, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} list_del($p12);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} spin_unlock_bh($p5);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const spin_lock_bh: ref;

axiom spin_lock_bh == $sub.ref(0, 333758);

procedure spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_lock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} _raw_spin_lock_bh($p2);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_bh: ref;

axiom spin_unlock_bh == $sub.ref(0, 334790);

procedure spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation spin_unlock_bh($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} _raw_spin_unlock_bh($p2);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    return;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 335822);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_bh: ref;

axiom _raw_spin_unlock_bh == $sub.ref(0, 336854);

procedure _raw_spin_unlock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_bh: ref;

axiom _raw_spin_lock_bh == $sub.ref(0, 337886);

procedure _raw_spin_lock_bh($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_bh($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 338918);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1005} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1006} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1007} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 339950);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 340982);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i22: i64;
  var $i13: i64;
  var vslice_dummy_var_132: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1011} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1012} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} might_fault();
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i9 := ldv__builtin_expect($i8, 1);
    call {:si_unique_call 1015} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i5);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i15 := $uge.i64($i14, $i2);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1019} {:cexpr "tmp___2"} boogie_si_record_i64($i18);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32(1, 0);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1023} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32(1, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} vslice_dummy_var_132 := ldv__builtin_expect($i30, 0);
    assume {:verifier.code 0} true;
    $i22 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume $i27 == 1;
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} warn_slowpath_fmt.ref.i32.ref(.str.30, 66, .str.31);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i32($i2);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i21 := _copy_from_user($p0, $p1, $i20);
    call {:si_unique_call 1021} {:cexpr "n"} boogie_si_record_i64($i21);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i2);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i12 := _copy_from_user($p0, $p1, $i11);
    call {:si_unique_call 1017} {:cexpr "n"} boogie_si_record_i64($i12);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const vhost_scsi_set_endpoint: ref;

axiom vhost_scsi_set_endpoint == $sub.ref(0, 342014);

procedure vhost_scsi_set_endpoint($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.16, assertsPassed, $M.26, $M.27;



implementation vhost_scsi_set_endpoint($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i8: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p36: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $p29: ref;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} ldv_mutex_lock_22($p3);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(200, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_mutex_unlock_24($p22);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_mutex_lock_25(tcm_vhost_mutex);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.2, tcm_vhost_list);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p24, $mul.ref($sub.ref(0, 16), 2192));
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p24, $mul.ref($sub.ref(0, 16), 2192)), $mul.ref(16, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, $p2i.ref.i64(tcm_vhost_list));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} ldv_mutex_unlock_37(tcm_vhost_mutex);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $p29 := $p25;
    goto $bb16;

  $bb16:
    call $p30, $p31, $p32, $i33, $i34, $p35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $i55, $p56, $p79, $p36, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p29 := vhost_scsi_set_endpoint_loop_$bb16($p1, $p30, $p31, $p32, $i33, $i34, $p35, $p37, $i38, $i39, $p40, $p41, $p42, $p43, $p44, $p45, $p46, $i47, $i48, $p49, $i50, $i51, $p52, $i53, $i54, $i55, $p56, $p79, $p36, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p29);
    goto $bb16_last;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv_mutex_lock_26($p30);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(200, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.2, $p31);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.2, $p37);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.2, $p41);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i47 := strcmp($p44, $p46);
    call {:si_unique_call 1037} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ldv_mutex_unlock_36($p79);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p36 := $p29;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 2192)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.2, $p81);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref($sub.ref(0, 16), 2192));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p83, $mul.ref($sub.ref(0, 16), 2192)), $mul.ref(16, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, $p2i.ref.i64(tcm_vhost_list));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb34:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $p29 := $p84;
    goto $bb34_dummy;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.2, $p49);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.2, $p52);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i51, $i54);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p56 := $p29;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb27;

  $bb28:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.2, $p57);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i59 := $add.i32($i58, 1);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p60, $i59);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} ldv_mutex_unlock_29($p61);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} ldv_mutex_unlock_30(tcm_vhost_mutex);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} ldv_mutex_lock_31($p63);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.2, $p64);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(0, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p76, $p56);
    call {:si_unique_call 1044} devirtbounce.1(0);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_mutex_unlock_35($p78);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i67 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} ldv_mutex_unlock_32($p69);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_mutex_lock_33($p70);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.2, $p71);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p74, $i73);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p56, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_mutex_unlock_34($p75);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 17);
    goto $bb8;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_mutex_unlock_28($p40);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p36 := $p29;
    goto $bb20;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_mutex_unlock_27($p35);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p36 := $p29;
    goto $bb20;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i18, $i19, $i20, $i8 := vhost_scsi_set_endpoint_loop_$bb4($p0, $p5, $p9, $p10, $i11, $p12, $i13, $i14, $i18, $i19, $i20, $i8);
    goto $bb4_last;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 17152));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i13 := vhost_vq_access_ok($p12);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i8, 1);
    call {:si_unique_call 1030} {:cexpr "index"} boogie_si_record_i32($i18);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p5);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i18);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb10_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} ldv_mutex_unlock_23($p16);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb8;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5079;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;
}



const vhost_scsi_set_features: ref;

axiom vhost_scsi_set_features == $sub.ref(0, 343046);

procedure vhost_scsi_set_features($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.16, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_scsi_set_features($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p16: ref;
  var $p18: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} {:cexpr "vhost_scsi_set_features:arg:features"} boogie_si_record_i64($i1);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, $sub.i64(0, 889192449));
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} ldv_mutex_lock_41($p6);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i7 := $and.i64($i1, 67108864);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(184, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p16, $i14);
    call {:si_unique_call 1053} devirtbounce.1(0);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vhost_scsi_flush($p0);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} ldv_mutex_unlock_43($p18);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i10 := vhost_log_access_ok($p9);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 1051} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} ldv_mutex_unlock_42($p13);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 14);
    goto $bb3;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 95);
    goto $bb3;
}



const ldv_mutex_lock_44: ref;

axiom ldv_mutex_lock_44 == $sub.ref(0, 344078);

procedure ldv_mutex_lock_44($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_44($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} mutex_lock($p0);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;
}



const vhost_dev_ioctl: ref;

axiom vhost_dev_ioctl == $sub.ref(0, 345110);

procedure vhost_dev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.16, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, assertsPassed, $M.27, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_dev_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i39: i64;
  var $p42: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i24: i32;
  var $i25: i64;
  var $i47: i64;
  var $i23: i64;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i32;
  var $i54: i32;
  var $i55: i64;
  var $i56: i1;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i84: i32;
  var $i105: i64;
  var $i106: i1;
  var $i107: i64;
  var $i108: i1;
  var $i109: i64;
  var $i16: i64;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1059} {:cexpr "vhost_dev_ioctl:arg:ioctl"} boogie_si_record_i32($i1);
    call {:si_unique_call 1060} {:cexpr "vhost_dev_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p4 := $i2p.i64.ref($i2);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 44801);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $i8 := vhost_dev_check_owner($p0);
    call {:si_unique_call 1064} {:cexpr "r"} boogie_si_record_i64($i8);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 1074310915);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i1, 1074310916);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 1074310916);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $i109 := vhost_set_vring($p0, $i1, $p4);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 1091} {:cexpr "r"} boogie_si_record_i64($i109);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i16 := $i109;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i7 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i12 == 1;
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i18 := copy_from_user($p17, $p4, 8);
    call {:si_unique_call 1068} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.2, $p20);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 0);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i23 := $i8;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb18;

  $bb22:
    assume $i22 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i24, $i25 := 0, $i8;
    goto $bb25;

  $bb25:
    call $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $p40, $i39, $p42, $i41, $p43, $i44, $i45, $i46, $i24, $i25, $i47 := vhost_dev_ioctl_loop_$bb25($p0, $p3, $p20, $i26, $p27, $p28, $p29, $i30, $p31, $p32, $p33, $p34, $i35, $i36, $i37, $i38, $p40, $i39, $p42, $i41, $p43, $i44, $i45, $i46, $i24, $i25, $i47);
    goto $bb25_last;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.2, $p3);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p27 := $i2p.i64.ref($i26);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i24);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 17152));
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_mutex_lock_16($p32);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.2, $p33);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i36 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, $p27);
    assume {:verifier.code 0} true;
    $i41 := $i25;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_mutex_unlock_17($p43);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i24, 1);
    call {:si_unique_call 1076} {:cexpr "i"} boogie_si_record_i32($i44);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.2, $p20);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i46 := $sgt.i32($i45, $i44);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i47 := $i41;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i23 := $i47;
    goto $bb24;

  $bb33:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i24, $i25 := $i44, $i41;
    goto $bb33_dummy;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i36 == 1;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i37 := vq_log_access_ok($p0, $p31, $p27);
    call {:si_unique_call 1074} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i38 == 1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p40, $p27);
    assume {:verifier.code 0} true;
    $i39 := $i25;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i41 := $i39;
    goto $bb32;

  $bb29:
    assume $i38 == 1;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i39 := $sub.i64(0, 14);
    goto $bb31;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i19 == 1;
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i16 := $sub.i64(0, 14);
    goto $bb18;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p4);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i15 := vhost_set_memory($p0, $p14);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 1066} {:cexpr "r"} boogie_si_record_i64($i15);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb18;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i1, 1074048775);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb15;

  $bb16:
    assume $i13 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} might_fault();
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p4);
    call {:si_unique_call 1070} $p49 := devirtbounce.16(0, $p48);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $p50 := $extractvalue($p49, 0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i51 := $extractvalue($p49, 1);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p50);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i64.i32($i52);
    call {:si_unique_call 1071} {:cexpr "__ret_gu"} boogie_si_record_i32($i53);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i51);
    call {:si_unique_call 1077} {:cexpr "fd"} boogie_si_record_i32($i54);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i53);
    call {:si_unique_call 1078} {:cexpr "r"} boogie_si_record_i64($i55);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i56 := $slt.i64($i55, 0);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i54, $sub.i32(0, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $p59 := $0.ref;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i61 := IS_ERR($p60);
    call {:si_unique_call 1081} {:cexpr "tmp___2"} boogie_si_record_i64($i61);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.2, $p65);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p59);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i67, $i68);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $p79, $p80 := $p59, $0.ref;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.2, $p81);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p80);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p79);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i16 := $i55;
    goto $bb18;

  $bb63:
    assume $i108 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} fput($p79);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i106 == 1;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} eventfd_ctx_put($p80);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume $i83 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb55;

  $bb55:
    call $p85, $p86, $i87, $p89, $p90, $p91, $p92, $p93, $i94, $p96, $p97, $p98, $i99, $p101, $i102, $i103, $i104, $i84 := vhost_dev_ioctl_loop_$bb55($p0, $p81, $p85, $p86, $i87, $p89, $p90, $p91, $p92, $p93, $i94, $p96, $p97, $p98, $i99, $p101, $i102, $i103, $i104, $i84);
    goto $bb55_last;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.2, $p85);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i87 := $sext.i32.i64($i84);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref($i87, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_mutex_lock_18($p89);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.2, $p90);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.2, $p92);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i84);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p93, $mul.ref($i94, 17152)), $mul.ref(248, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p96, $p91);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.2, $p97);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i84);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p98, $mul.ref($i99, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_mutex_unlock_19($p101);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i84, 1);
    call {:si_unique_call 1087} {:cexpr "i"} boogie_si_record_i32($i102);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.2, $p81);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i104 := $sgt.i32($i103, $i102);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i104 == 1);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb57:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i84 := $i102;
    goto $bb57_dummy;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i69 == 1;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(208, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.2, $p70);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.2, $p72);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $i74 := $p2i.ref.i64($p59);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i75 == 1);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p79, $p80 := $p71, $p73;
    goto $bb51;

  $bb48:
    assume $i75 == 1;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p76 := eventfd_ctx_fileget($p59);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p77, $p76);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb43:
    assume $i62 == 1;
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p59);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i64 := PTR_ERR($p63);
    call {:si_unique_call 1083} {:cexpr "r"} boogie_si_record_i64($i64);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i16 := $i64;
    goto $bb18;

  $bb40:
    assume $i57 == 1;
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p58 := eventfd_fget($i54);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p59 := $p58;
    goto $bb42;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i16 := $i55;
    goto $bb18;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i7 := $i8;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i6 := vhost_dev_set_owner($p0);
    call {:si_unique_call 1062} {:cexpr "r"} boogie_si_record_i64($i6);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  $bb57_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;
}



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 346142);

procedure ldv_mutex_unlock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} mutex_unlock($p0);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_163:
    assume !assertsPassed;
    return;
}



const vhost_dev_set_owner: ref;

axiom vhost_dev_set_owner == $sub.ref(0, 347174);

procedure vhost_dev_set_owner($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_dev_set_owner($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i26: i64;
  var $i27: i32;
  var $i28: i1;
  var $i25: i32;
  var $p31: ref;
  var $i20: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i5: i32;
  var $i39: i64;
  var $i29: i64;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} $p6 := get_current();
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p7 := get_task_mm($p6);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p8, $p7);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $p9 := get_current();
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref(0, 9512)), $mul.ref(1160, 1));
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $p13 := kthread_create_on_node.ref.ref.i32.ref.i32(vhost_worker, $p10, $sub.i32(0, 1), .str.29, $i12);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i15 := IS_ERR($p14);
    call {:si_unique_call 1099} {:cexpr "tmp___2"} boogie_si_record_i64($i15);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, $p13);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_133 := wake_up_process($p13);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i23 := vhost_attach_cgroups($p0);
    call {:si_unique_call 1105} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i26 := vhost_dev_alloc_iovecs($p0);
    call {:si_unique_call 1108} {:cexpr "tmp___3"} boogie_si_record_i64($i26);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    call {:si_unique_call 1109} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i25 := $i27;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} vslice_dummy_var_134 := kthread_stop($p13);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p31, $0.ref);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.2, $p32);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, $0.ref);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i5 := $i20;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i5);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i29 := $i39;
    goto $bb16;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.2, $p36);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} mmput($p37);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i24 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb11;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p13);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i18 := PTR_ERR($p17);
    call {:si_unique_call 1101} {:cexpr "tmp___1"} boogie_si_record_i64($i18);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 1102} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;
}



const vhost_dev_check_owner: ref;

axiom vhost_dev_check_owner == $sub.ref(0, 348206);

procedure vhost_dev_check_owner($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation vhost_dev_check_owner($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p1 := get_current();
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(8, 1));
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 9512)), $mul.ref(1112, 1));
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i4, $i7);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then 0 else $sub.i64(0, 1));
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const vhost_set_memory: ref;

axiom vhost_set_memory == $sub.ref(0, 349238);

procedure vhost_set_memory($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr, $M.16, assertsPassed;



implementation vhost_set_memory($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i7: i64;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i5 := copy_from_user($p3, $p4, 8);
    call {:si_unique_call 1114} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.2, $p8);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.2, $p11);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 64);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 32);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 8);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $p19 := kmalloc($i18, 208);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p20);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.2;
    cmdloc_dummy_var_21 := $M.2;
    call {:si_unique_call 1116} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p23, $p24, 8, $zext.i32.i64(1), 0 == 1);
    $M.2 := cmdloc_dummy_var_22;
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.2, $p29);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i30);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i32 := $mul.i64($i31, 32);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i33 := copy_from_user($p26, $p28, $i32);
    call {:si_unique_call 1118} {:cexpr "tmp___1"} boogie_si_record_i64($i33);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i36 := vhost_has_feature($p0, 26);
    call {:si_unique_call 1121} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i37 := memory_access_ok($p0, $p20, $i36);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 1123} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i40 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1126} {:cexpr "tmp___4"} boogie_si_record_i32($i40);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.2, $p47);
    call {:si_unique_call 1130} devirtbounce.1(0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p49, $p19);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} synchronize_rcu();
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p48);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} kfree($p50);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i41 == 1;
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1(1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i42 == 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(16, 1)), $mul.ref(120, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $i45 := lock_is_held($p44);
    call {:si_unique_call 1128} {:cexpr "tmp___5"} boogie_si_record_i32($i45);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 0);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i46 == 1;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} lockdep_rcu_suspicious(.str.4, 630, .str.5);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb22;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p20);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} kfree($p39);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 14);
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p20);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} kfree($p35);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 14);
    goto $bb3;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 12);
    goto $bb3;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 7);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 95);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64(0, 14);
    goto $bb3;
}



const ldv_mutex_lock_16: ref;

axiom ldv_mutex_lock_16 == $sub.ref(0, 350270);

procedure ldv_mutex_lock_16($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_16($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} mutex_lock($p0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_169:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_17: ref;

axiom ldv_mutex_unlock_17 == $sub.ref(0, 351302);

procedure ldv_mutex_unlock_17($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_17($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} mutex_unlock($p0);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const eventfd_fget: ref;

axiom eventfd_fget == $sub.ref(0, 352334);

procedure eventfd_fget($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_fget($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} {:cexpr "eventfd_fget:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} $p1 := external_alloc();
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const eventfd_ctx_fileget: ref;

axiom eventfd_ctx_fileget == $sub.ref(0, 353366);

procedure eventfd_ctx_fileget($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation eventfd_ctx_fileget($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $p1 := external_alloc();
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_18: ref;

axiom ldv_mutex_lock_18 == $sub.ref(0, 354398);

procedure ldv_mutex_lock_18($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_18($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} mutex_lock($p0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_19: ref;

axiom ldv_mutex_unlock_19 == $sub.ref(0, 355430);

procedure ldv_mutex_unlock_19($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_19($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} mutex_unlock($p0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const vhost_set_vring: ref;

axiom vhost_set_vring == $sub.ref(0, 356462);

procedure vhost_set_vring($p0: ref, $i1: i32, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $M.16, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, assertsPassed, $M.27, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_set_vring($p0: ref, $i1: i32, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p23: ref;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i16;
  var $p76: ref;
  var $p77: ref;
  var $i78: i16;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $p134: ref;
  var $i135: i32;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i8;
  var $p147: ref;
  var $i148: i64;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $i176: i64;
  var $p177: ref;
  var $p178: ref;
  var $i179: i64;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i8;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $i190: i8;
  var $i191: i8;
  var $p192: ref;
  var $i193: i8;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $i212: i64;
  var $i213: i1;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i39: i8;
  var $p40: ref;
  var $i41: i8;
  var $p42: ref;
  var $i43: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i64;
  var $i265: i1;
  var $i266: i64;
  var $i267: i1;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i64;
  var $i272: i1;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i1;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $i15: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1147} {:cexpr "vhost_set_vring:arg:ioctl"} boogie_si_record_i32($i1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} might_fault();
    call {:si_unique_call 1149} $p7 := devirtbounce.16(0, $p6);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p8 := $extractvalue($p7, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i9 := $extractvalue($p7, 1);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p8);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    call {:si_unique_call 1150} {:cexpr "__ret_gu"} boogie_si_record_i32($i11);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i9);
    call {:si_unique_call 1151} {:cexpr "idx"} boogie_si_record_i32($i12);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    call {:si_unique_call 1152} {:cexpr "r"} boogie_si_record_i64($i13);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i14 := $slt.i64($i13, 0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.2, $p16);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, $i12);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.2, $p19);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i12);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} ldv_mutex_lock_14($p23);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 1074310944);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, 1074310946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i1, 1076408081);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i1, 1076408081);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 515);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i258 := $trunc.i8.i1($i41);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p42);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i265 := $ne.i64($i264, 0);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i266 := $p2i.ref.i64($p40);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i267 := $ne.i64($i266, 0);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i8.i1($i39);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} ldv_mutex_unlock_15($p276);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i277 := $trunc.i8.i1($i41);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i15 := $i43;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb148:
    assume $i277 == 1;
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(464, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.2, $p278);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p279);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i281 := $ne.i64($i280, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb150;

  $bb151:
    assume $i281 == 1;
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(256, 1));
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vhost_poll_flush($p282);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    goto $bb153;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb142:
    assume $i268 == 1;
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(464, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.2, $p269);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i271 := $p2i.ref.i64($p270);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i272 := $ne.i64($i271, 0);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i272} true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i272 == 1);
    goto $bb144;

  $bb145:
    assume $i272 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(256, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(208, 1));
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.2, $p274);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vhost_poll_start($p273, $p275);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    goto $bb147;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb139:
    assume $i267 == 1;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} fput($p40);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb136:
    assume $i265 == 1;
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} eventfd_ctx_put($p42);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb130:
    assume $i258 == 1;
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(464, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.2, $p259);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i262 == 1);
    goto $bb132;

  $bb133:
    assume $i262 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(256, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} vhost_poll_stop($p263);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb16:
    assume $i27 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p5);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i90 := copy_from_user($p89, $p2, 40);
    call {:si_unique_call 1155} {:cexpr "tmp___2"} boogie_si_record_i64($i90);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.2, $p92);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, $sub.i32(0, 2));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.2, $p96);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 1);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb66, $bb68;

  $bb68:
    assume !($i100 == 1);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.2, $p101);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 7);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i104 == 1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i106 := $load.i64($M.2, $p105);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i107 := $and.i64($i106, 7);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.2, $p109);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.2, $p141);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(483, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i146 := $zext.i1.i8($i144);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p145, $i146);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.2, $p147);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $p149 := $i2p.i64.ref($i148);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(184, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p150, $p149);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.2, $p151);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $p153 := $i2p.i64.ref($i152);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(192, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p154, $p153);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i156 := $load.i64($M.2, $p155);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(488, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p157, $i156);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i159 := $load.i64($M.2, $p158);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p160 := $i2p.i64.ref($i159);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(200, 1));
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p161, $p160);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i13;
    goto $bb35;

  $bb74:
    assume $i112 == 1;
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(176, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.2, $p113);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i116 := $load.i64($M.2, $p115);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p117 := $i2p.i64.ref($i116);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.2, $p118);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p120 := $i2p.i64.ref($i119);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.2, $p121);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $p123 := $i2p.i64.ref($i122);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i124 := vq_access_ok($p0, $i114, $p117, $p120, $p123);
    call {:si_unique_call 1169} {:cexpr "tmp___3"} boogie_si_record_i32($i124);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.2, $p126);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 1);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i129} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb79:
    assume $i129 == 1;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.2, $p130);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i133 := $load.i64($M.2, $p132);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(176, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.2, $p134);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i136 := $zext.i32.i64($i135);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i137 := $mul.i64($i136, 8);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i138 := $add.i64($i137, 4);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i139 := log_access_ok($p131, $i133, $i138);
    call {:si_unique_call 1171} {:cexpr "tmp___4"} boogie_si_record_i32($i139);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 0);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i140 == 1;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 22);
    goto $bb35;

  $bb76:
    assume $i125 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 22);
    goto $bb35;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 22);
    goto $bb35;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb67;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb67;

  $bb63:
    assume $i95 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 95);
    goto $bb35;

  $bb60:
    assume $i91 == 1;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb14:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 1074310946);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb18;

  $bb19:
    assume $i28 == 1;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p226 := $bitcast.ref.ref($p4);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i227 := copy_from_user($p226, $p2, 8);
    call {:si_unique_call 1157} {:cexpr "tmp___13"} boogie_si_record_i64($i227);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.2, $p229);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, $sub.i32(0, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $p235 := $0.ref;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i237 := IS_ERR($p236);
    call {:si_unique_call 1187} {:cexpr "tmp___15"} boogie_si_record_i64($i237);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(224, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.2, $p241);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i244 := $p2i.ref.i64($p235);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i243, $i244);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    $p256, $p257 := $p235, $0.ref;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $p256, 0, $p257, $i13;
    goto $bb35;

  $bb122:
    assume $i245 == 1;
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(224, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.2, $p246);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(224, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p248, $p235);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(240, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.2, $p249);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $i251 := $p2i.ref.i64($p235);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i252 == 1);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(240, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p255, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p256, $p257 := $p247, $p250;
    goto $bb127;

  $bb124:
    assume $i252 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p253 := eventfd_ctx_fileget($p235);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(240, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p254, $p253);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb119:
    assume $i238 == 1;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p235);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i240 := PTR_ERR($p239);
    call {:si_unique_call 1189} {:cexpr "r"} boogie_si_record_i64($i240);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i240;
    goto $bb35;

  $bb116:
    assume $i231 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.2, $p232);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $p234 := eventfd_fget($i233);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $p235 := $p234;
    goto $bb118;

  $bb113:
    assume $i228 == 1;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb12:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i1, 1074310945);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i29 == 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p4);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} $i195 := copy_from_user($p194, $p2, 8);
    call {:si_unique_call 1161} {:cexpr "tmp___9"} boogie_si_record_i64($i195);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.2, $p197);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, $sub.i32(0, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $p203 := $0.ref;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i205 := IS_ERR($p204);
    call {:si_unique_call 1181} {:cexpr "tmp___11"} boogie_si_record_i64($i205);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(216, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.2, $p209);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i211 := $p2i.ref.i64($p210);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p203);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i211, $i212);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i213} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $p224, $p225 := $p203, $0.ref;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $p224, 0, $p225, $i13;
    goto $bb35;

  $bb107:
    assume $i213 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(216, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.2, $p214);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(232, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.2, $p216);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(216, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p218, $p203);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p203);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i220 == 1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(232, 1));
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p223, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p224, $p225 := $p215, $p217;
    goto $bb112;

  $bb109:
    assume $i220 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p221 := eventfd_ctx_fileget($p203);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(232, 1));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p222, $p221);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb104:
    assume $i206 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p203);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i208 := PTR_ERR($p207);
    call {:si_unique_call 1183} {:cexpr "r"} boogie_si_record_i64($i208);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i208;
    goto $bb35;

  $bb101:
    assume $i199 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.2, $p200);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p202 := eventfd_fget($i201);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $p203 := $p202;
    goto $bb103;

  $bb98:
    assume $i196 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb21:
    assume $i29 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p4);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i163 := copy_from_user($p162, $p2, 8);
    call {:si_unique_call 1159} {:cexpr "tmp___5"} boogie_si_record_i64($i163);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.2, $p165);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, $sub.i32(0, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $p171 := $0.ref;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i173 := IS_ERR($p172);
    call {:si_unique_call 1174} {:cexpr "tmp___7"} boogie_si_record_i64($i173);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(208, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.2, $p177);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p178);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p171);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i181 := $ne.i64($i179, $i180);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    $i191, $p192, $i193 := 0, $p171, 0;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := $i191, $p192, $i193, $0.ref, $i13;
    goto $bb35;

  $bb95:
    assume $i181 == 1;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(208, 1));
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.2, $p182);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i184, 0);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i8($i185);
    call {:si_unique_call 1177} {:cexpr "pollstop"} boogie_si_record_i8($i186);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(208, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p187, $p171);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p171);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i190 := $zext.i1.i8($i189);
    call {:si_unique_call 1178} {:cexpr "pollstart"} boogie_si_record_i8($i190);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i191, $p192, $i193 := $i190, $p183, $i186;
    goto $bb97;

  $bb92:
    assume $i174 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p175 := $bitcast.ref.ref($p171);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i176 := PTR_ERR($p175);
    call {:si_unique_call 1176} {:cexpr "r"} boogie_si_record_i64($i176);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i176;
    goto $bb35;

  $bb89:
    assume $i167 == 1;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.2, $p168);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p170 := eventfd_fget($i169);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p171 := $p170;
    goto $bb91;

  $bb86:
    assume $i164 == 1;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i1, 1074310928);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i1, 1074310930);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i1, 1074310930);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb18;

  $bb27:
    assume $i32 == 1;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.2, $p63);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i68 := copy_from_user($p67, $p2, 8);
    call {:si_unique_call 1167} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.2, $p70);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i32($i71, 65535);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.2, $p73);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i16($i74);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(472, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p76, $i75);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(472, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.2, $p77);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(474, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p79, $i78);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i13;
    goto $bb35;

  $bb54:
    assume $i72 == 1;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 22);
    goto $bb35;

  $bb51:
    assume $i69 == 1;
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb48:
    assume $i66 == 1;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 16);
    goto $bb35;

  $bb25:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i1, 1074310928);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb18;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.2, $p35);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p3);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i45 := copy_from_user($p44, $p2, 8);
    call {:si_unique_call 1165} {:cexpr "tmp"} boogie_si_record_i64($i45);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.2, $p47);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb40, $bb42;

  $bb42:
    assume !($i49 == 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.2, $p50);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i52 := $ugt.i32($i51, 65535);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i52 == 1);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.2, $p53);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.2, $p55);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i56, 1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i54, $i57);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.2, $p60);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(176, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p62, $i61);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i13;
    goto $bb35;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 22);
    goto $bb35;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb41;

  $bb37:
    assume $i46 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 14);
    goto $bb35;

  $bb33:
    assume $i38 == 1;
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $sub.i64(0, 16);
    goto $bb35;

  $bb23:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i1, $sub.i32(0, 1073172718));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb31:
    assume $i34 == 1;
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p80, $i12);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p20, $mul.ref($i21, 17152)), $mul.ref(472, 1));
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.2, $p81);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p84, $i83);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p3);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $i86 := copy_to_user($p2, $p85, 8);
    call {:si_unique_call 1163} {:cexpr "tmp___1"} boogie_si_record_i32($i86);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $i13;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i39, $p40, $i41, $p42, $i43 := 0, $0.ref, 0, $0.ref, $i88;
    goto $bb35;

  $bb57:
    assume $i87 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i88 := $sub.i64(0, 14);
    goto $bb59;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 105);
    goto $bb4;

  $bb2:
    assume $i14 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb4;
}



const ldv_mutex_lock_14: ref;

axiom ldv_mutex_lock_14 == $sub.ref(0, 357494);

procedure ldv_mutex_lock_14($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_14($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} mutex_lock($p0);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const vhost_poll_start: ref;

axiom vhost_poll_start == $sub.ref(0, 358526);

procedure vhost_poll_start($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.27, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, assertsPassed, $M.16, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_poll_start($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_135: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 352)), $mul.ref(32, 1));
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 208)), $mul.ref(56, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(0, 1));
    call {:si_unique_call 1199} $i7 := devirtbounce.17($p5, $p1, $p6);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 1200} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    call {:si_unique_call 1201} {:cexpr "mask"} boogie_si_record_i64($i8);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 208)), $mul.ref(24, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i8);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_135 := vhost_poll_wakeup($p10, 0, 0, $p11);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_15: ref;

axiom ldv_mutex_unlock_15 == $sub.ref(0, 359558);

procedure ldv_mutex_unlock_15($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_15($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} mutex_unlock($p0);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 360590);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1205} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1206} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const memory_access_ok: ref;

axiom memory_access_ok == $sub.ref(0, 361622);

procedure memory_access_ok($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation memory_access_ok($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p32: ref;
  var $i33: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i6: i32;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} {:cexpr "memory_access_ok:arg:log_all"} boogie_si_record_i32($i2);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.2, $p3);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i34 := 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $p11, $p12, $p13, $i14, $p16, $p17, $i18, $i19, $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $p32, $i33, $i35, $i36, $i37, $i6 := memory_access_ok_loop_$bb4($p0, $p1, $i2, $p3, $p7, $p8, $i9, $p11, $p12, $p13, $i14, $p16, $p17, $i18, $i19, $p20, $p21, $i22, $p24, $p25, $i26, $i27, $p28, $p29, $i30, $p32, $i33, $i35, $i36, $i37, $i6);
    goto $bb4_last;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i6);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 17152)), $mul.ref(8, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ldv_mutex_lock_12($p11);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.2, $p12);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i6);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref($i14, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.2, $p16);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i27 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.2, $p28);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i6);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref($i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_mutex_unlock_13($p32);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i27, 0);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i6, 1);
    call {:si_unique_call 1212} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.2, $p3);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i35);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i35;
    goto $bb13_dummy;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.2, $p20);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i6);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref($i22, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.2, $p24);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i26 := vq_memory_access_ok($p25, $p1, $i2);
    call {:si_unique_call 1210} {:cexpr "ok"} boogie_si_record_i32($i26);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb8;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6000;
}



const synchronize_rcu: ref;

axiom synchronize_rcu == $sub.ref(0, 362654);

procedure synchronize_rcu();
  free requires assertsPassed;



implementation synchronize_rcu()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} synchronize_sched();
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_sched: ref;

axiom synchronize_sched == $sub.ref(0, 363686);

procedure synchronize_sched();
  free requires assertsPassed;



implementation synchronize_sched()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_12: ref;

axiom ldv_mutex_lock_12 == $sub.ref(0, 364718);

procedure ldv_mutex_lock_12($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} mutex_lock($p0);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_13: ref;

axiom ldv_mutex_unlock_13 == $sub.ref(0, 365750);

procedure ldv_mutex_unlock_13($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} mutex_unlock($p0);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_208:
    assume !assertsPassed;
    return;
}



const get_task_mm: ref;

axiom get_task_mm == $sub.ref(0, 366782);

procedure get_task_mm($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_task_mm($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $p1 := external_alloc();
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vhost_worker: ref;

axiom vhost_worker == $sub.ref(0, 367814);

procedure vhost_worker($p0: ref) returns ($r: i32);



const kthread_create_on_node: ref;

axiom kthread_create_on_node == $sub.ref(0, 368846);

procedure kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kthread_create_on_node.ref.ref.i32.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, p.4: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} {:cexpr "kthread_create_on_node:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p4 := external_alloc();
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const vhost_attach_cgroups: ref;

axiom vhost_attach_cgroups == $sub.ref(0, 369878);

procedure vhost_attach_cgroups($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_attach_cgroups($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} $p1 := $alloc($mul.ref(144, $zext.i32.i64(1)));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $p2 := get_current();
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, $p2);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vhost_work_init($p4, vhost_attach_cgroups_work);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vhost_work_queue($p0, $p5);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vhost_work_flush($p0, $p6);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.2, $p7);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const vhost_dev_alloc_iovecs: ref;

axiom vhost_dev_alloc_iovecs == $sub.ref(0, 370910);

procedure vhost_dev_alloc_iovecs($p0: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_dev_alloc_iovecs($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $i47: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i4: i32;
  var $i77: i1;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i78: i32;
  var $i76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(200, 1));
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.2, $p1);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p7, $p8, $i9, $p11, $p12, $p14, $p15, $i16, $p18, $p19, $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $p38, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $p48, $p49, $i50, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $p69, $p70, $i71, $i72, $i47, $i73, $i74, $i75, $i4 := vhost_dev_alloc_iovecs_loop_$bb4($p0, $p1, $p5, $p7, $p8, $i9, $p11, $p12, $p14, $p15, $i16, $p18, $p19, $p21, $p22, $i23, $p25, $i26, $i27, $i28, $i29, $i30, $i31, $p32, $p34, $p35, $i36, $p38, $p39, $p40, $i41, $p43, $p44, $i45, $i46, $p48, $p49, $i50, $p52, $p53, $i54, $i55, $p56, $p57, $i58, $p60, $p61, $i62, $i63, $i64, $p65, $p66, $i67, $p69, $p70, $i71, $i72, $i47, $i73, $i74, $i75, $i4);
    goto $bb4_last;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p5 := kmalloc(16384, 208);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref($i9, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, $p5);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p12 := kmalloc(16384, 208);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.2, $p14);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i4);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, $p12);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $p19 := kmalloc(8192, 208);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.2, $p21);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i4);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref($i23, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, $p19);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, $i4);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i27 := $M.25;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i26, $i27);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i8($i29);
    call {:si_unique_call 1229} {:cexpr "zcopy"} boogie_si_record_i8($i30);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.2, $p39);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i4);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p40, $mul.ref($i41, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.2, $p43);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i47 := $i4;
    assume true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i46 == 1);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.2, $p48);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i4);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref($i50, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.2, $p52);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i47 := $i4;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i55 == 1);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.2, $p56);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i4);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref($i58, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.2, $p60);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i47 := $i4;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i8.i1($i30);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i4, 1);
    call {:si_unique_call 1231} {:cexpr "i"} boogie_si_record_i32($i73);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.2, $p1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i75 := $sgt.i32($i74, $i73);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i73;
    goto $bb23_dummy;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.2, $p65);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i67 := $sext.i32.i64($i4);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p66, $mul.ref($i67, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.2, $p69);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i47 := $i4;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb18;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i77 := $sge.i32($i47, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i76 := $sub.i64(0, 12);
    goto $bb26;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $i78 := $i47;
    goto $bb30;

  $bb30:
    call $p79, $p80, $i81, $p82, $i83, $i84, $i78 := vhost_dev_alloc_iovecs_loop_$bb30($p0, $p79, $p80, $i81, $p82, $i83, $i84, $i78);
    goto $bb30_last;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.2, $p79);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i78);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p80, $mul.ref($i81, 17152));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vhost_vq_free_iovecs($p82);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32($i78, 1);
    call {:si_unique_call 1233} {:cexpr "i"} boogie_si_record_i32($i83);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i84 := $sge.i32($i83, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i84 == 1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $i78 := $i83;
    goto $bb32_dummy;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb10;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb10;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb10;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $p32 := kmalloc(24576, 208);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.2, $p34);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i4);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p35, $mul.ref($i36, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, $p32);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;
}



const vhost_attach_cgroups_work: ref;

axiom vhost_attach_cgroups_work == $sub.ref(0, 371942);

procedure vhost_attach_cgroups_work($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation vhost_attach_cgroups_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p2 := get_current();
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i5 := cgroup_attach_task_all($p4, $p2);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p6, $i5);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    return;
}



const cgroup_attach_task_all: ref;

axiom cgroup_attach_task_all == $sub.ref(0, 372974);

procedure cgroup_attach_task_all($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cgroup_attach_task_all($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1236} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1237} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const use_mm: ref;

axiom use_mm == $sub.ref(0, 374006);

procedure use_mm($p0: ref);



const kthread_should_stop: ref;

axiom kthread_should_stop == $sub.ref(0, 375038);

procedure kthread_should_stop() returns ($r: i1);



const list_del_init: ref;

axiom list_del_init == $sub.ref(0, 376070);

procedure list_del_init($p0: ref);



const need_resched: ref;

axiom need_resched == $sub.ref(0, 377102);

procedure need_resched() returns ($r: i32);



const unuse_mm: ref;

axiom unuse_mm == $sub.ref(0, 378134);

procedure unuse_mm($p0: ref);



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 379166);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 380198);

procedure variable_test_bit($i0: i32, $p1: ref) returns ($r: i32);



const __list_del_entry: ref;

axiom __list_del_entry == $sub.ref(0, 381230);

procedure __list_del_entry($p0: ref);



const ldv_mutex_lock_41: ref;

axiom ldv_mutex_lock_41 == $sub.ref(0, 382262);

procedure ldv_mutex_lock_41($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} mutex_lock($p0);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const vhost_log_access_ok: ref;

axiom vhost_log_access_ok == $sub.ref(0, 383294);

procedure vhost_log_access_ok($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation vhost_log_access_ok($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i1 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 1241} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.2, $p8);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i10 := memory_access_ok($p0, $p9, 1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 1246} {:cexpr "tmp___1"} boogie_si_record_i32($i10);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1(1);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 320)), $mul.ref(16, 1)), $mul.ref(120, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i6 := lock_is_held($p5);
    call {:si_unique_call 1243} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} lockdep_rcu_suspicious(.str.4, 573, .str.5);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb3;
}



const ldv_mutex_unlock_42: ref;

axiom ldv_mutex_unlock_42 == $sub.ref(0, 384326);

procedure ldv_mutex_unlock_42($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_42($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} mutex_unlock($p0);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const vhost_scsi_flush: ref;

axiom vhost_scsi_flush == $sub.ref(0, 385358);

procedure vhost_scsi_flush($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_scsi_flush($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vhost_scsi_flush_vq($p0, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vhost_scsi_flush_vq($p0, 1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vhost_scsi_flush_vq($p0, 2);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_43: ref;

axiom ldv_mutex_unlock_43 == $sub.ref(0, 386390);

procedure ldv_mutex_unlock_43($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_43($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} mutex_unlock($p0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_220:
    assume !assertsPassed;
    return;
}



const vhost_scsi_flush_vq: ref;

axiom vhost_scsi_flush_vq == $sub.ref(0, 387422);

procedure vhost_scsi_flush_vq($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation vhost_scsi_flush_vq($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} {:cexpr "vhost_scsi_flush_vq:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 52000)), $mul.ref(8, 1)), $mul.ref(192, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i1);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref($i5, 17152)), $mul.ref(256, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} vhost_poll_flush($p7);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_lock_22: ref;

axiom ldv_mutex_lock_22 == $sub.ref(0, 388454);

procedure ldv_mutex_lock_22($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_22($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} mutex_lock($p0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_23: ref;

axiom ldv_mutex_unlock_23 == $sub.ref(0, 389486);

procedure ldv_mutex_unlock_23($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_23($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} mutex_unlock($p0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_24: ref;

axiom ldv_mutex_unlock_24 == $sub.ref(0, 390518);

procedure ldv_mutex_unlock_24($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_24($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} mutex_unlock($p0);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_25: ref;

axiom ldv_mutex_lock_25 == $sub.ref(0, 391550);

procedure ldv_mutex_lock_25($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_25($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} ldv_mutex_lock_tcm_vhost_mutex($p0);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} mutex_lock($p0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_232:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_26: ref;

axiom ldv_mutex_lock_26 == $sub.ref(0, 392582);

procedure ldv_mutex_lock_26($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_26($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ldv_mutex_lock_tv_tpg_mutex($p0);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} mutex_lock($p0);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_27: ref;

axiom ldv_mutex_unlock_27 == $sub.ref(0, 393614);

procedure ldv_mutex_unlock_27($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} mutex_unlock($p0);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_238:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_28: ref;

axiom ldv_mutex_unlock_28 == $sub.ref(0, 394646);

procedure ldv_mutex_unlock_28($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} mutex_unlock($p0);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_29: ref;

axiom ldv_mutex_unlock_29 == $sub.ref(0, 395678);

procedure ldv_mutex_unlock_29($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} mutex_unlock($p0);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_30: ref;

axiom ldv_mutex_unlock_30 == $sub.ref(0, 396710);

procedure ldv_mutex_unlock_30($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} ldv_mutex_unlock_tcm_vhost_mutex($p0);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} mutex_unlock($p0);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_31: ref;

axiom ldv_mutex_lock_31 == $sub.ref(0, 397742);

procedure ldv_mutex_lock_31($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_lock_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} ldv_mutex_lock_mutex($p0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} mutex_lock($p0);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_250:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_32: ref;

axiom ldv_mutex_unlock_32 == $sub.ref(0, 398774);

procedure ldv_mutex_unlock_32($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_32($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} mutex_unlock($p0);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_33: ref;

axiom ldv_mutex_lock_33 == $sub.ref(0, 399806);

procedure ldv_mutex_lock_33($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_33($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} ldv_mutex_lock_tv_tpg_mutex($p0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} mutex_lock($p0);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_34: ref;

axiom ldv_mutex_unlock_34 == $sub.ref(0, 400838);

procedure ldv_mutex_unlock_34($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_34($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} mutex_unlock($p0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_35: ref;

axiom ldv_mutex_unlock_35 == $sub.ref(0, 401870);

procedure ldv_mutex_unlock_35($p0: ref);
  free requires assertsPassed;
  modifies $M.16, assertsPassed;



implementation ldv_mutex_unlock_35($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} ldv_mutex_unlock_mutex($p0);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} mutex_unlock($p0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_36: ref;

axiom ldv_mutex_unlock_36 == $sub.ref(0, 402902);

procedure ldv_mutex_unlock_36($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_36($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} mutex_unlock($p0);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_265:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_37: ref;

axiom ldv_mutex_unlock_37 == $sub.ref(0, 403934);

procedure ldv_mutex_unlock_37($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_37($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} ldv_mutex_unlock_tcm_vhost_mutex($p0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} mutex_unlock($p0);
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_tcm_vhost_mutex: ref;

axiom ldv_mutex_unlock_tcm_vhost_mutex == $sub.ref(0, 404966);

procedure ldv_mutex_unlock_tcm_vhost_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_tcm_vhost_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} ldv_error();
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1289} {:cexpr "ldv_mutex_tcm_vhost_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_unlock_tv_tpg_mutex: ref;

axiom ldv_mutex_unlock_tv_tpg_mutex == $sub.ref(0, 405998);

procedure ldv_mutex_unlock_tv_tpg_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_tv_tpg_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} ldv_error();
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1291} {:cexpr "ldv_mutex_tv_tpg_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_tv_tpg_mutex: ref;

axiom ldv_mutex_lock_tv_tpg_mutex == $sub.ref(0, 407030);

procedure ldv_mutex_lock_tv_tpg_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_tv_tpg_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} ldv_error();
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1293} {:cexpr "ldv_mutex_tv_tpg_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_tcm_vhost_mutex: ref;

axiom ldv_mutex_lock_tcm_vhost_mutex == $sub.ref(0, 408062);

procedure ldv_mutex_lock_tcm_vhost_mutex($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_tcm_vhost_mutex($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $i1 := $M.26;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} ldv_error();
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := 2;
    call {:si_unique_call 1295} {:cexpr "ldv_mutex_tcm_vhost_mutex"} boogie_si_record_i32(2);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 409094);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 410126);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1296} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1297} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1298} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 411158);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_get_fabric_name: ref;

axiom tcm_vhost_get_fabric_name == $sub.ref(0, 412190);

procedure tcm_vhost_get_fabric_name() returns ($r: ref);
  free requires assertsPassed;



implementation tcm_vhost_get_fabric_name() returns ($r: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $r := .str.56;
    return;
}



const tcm_vhost_get_fabric_proto_ident: ref;

axiom tcm_vhost_get_fabric_proto_ident == $sub.ref(0, 413222);

procedure tcm_vhost_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation tcm_vhost_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i8;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i20: i8;
  var $i13: i8;
  var vslice_dummy_var_136: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(208, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.2, $p5);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.2, $p16);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vslice_dummy_var_136 := printk.ref.i32(.str.118, $i18);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i20 := sas_get_fabric_proto_ident($p0);
    call {:si_unique_call 1308} {:cexpr "tmp___2"} boogie_si_record_i8($i20);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $i12 := sas_get_fabric_proto_ident($p0);
    call {:si_unique_call 1303} {:cexpr "tmp"} boogie_si_record_i8($i12);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb11;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i15 := iscsi_get_fabric_proto_ident($p0);
    call {:si_unique_call 1301} {:cexpr "tmp___1"} boogie_si_record_i8($i15);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i13 := $i15;
    goto $bb11;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $i14 := fc_get_fabric_proto_ident($p0);
    call {:si_unique_call 1305} {:cexpr "tmp___0"} boogie_si_record_i8($i14);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb11;
}



const tcm_vhost_get_fabric_wwn: ref;

axiom tcm_vhost_get_fabric_wwn == $sub.ref(0, 414254);

procedure tcm_vhost_get_fabric_wwn($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcm_vhost_get_fabric_wwn($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(208, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const tcm_vhost_get_tag: ref;

axiom tcm_vhost_get_tag == $sub.ref(0, 415286);

procedure tcm_vhost_get_tag($p0: ref) returns ($r: i16);
  free requires assertsPassed;



implementation tcm_vhost_get_tag($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(0, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.2, $p3);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const tcm_vhost_get_default_depth: ref;

axiom tcm_vhost_get_default_depth == $sub.ref(0, 416318);

procedure tcm_vhost_get_default_depth($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_get_default_depth($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const tcm_vhost_get_pr_transport_id: ref;

axiom tcm_vhost_get_pr_transport_id == $sub.ref(0, 417350);

procedure tcm_vhost_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i24: i32;
  var $i17: i32;
  var vslice_dummy_var_137: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(208, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.2, $p9);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.2, $p20);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_137 := printk.ref.i32(.str.118, $i22);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i24 := sas_get_pr_transport_id($p0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 1317} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i17 := $i24;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i16 := sas_get_pr_transport_id($p0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 1312} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb11;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i19 := iscsi_get_pr_transport_id($p0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 1310} {:cexpr "tmp___1"} boogie_si_record_i32($i19);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb11;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb9:
    assume $i15 == 1;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i18 := fc_get_pr_transport_id($p0, $p1, $p2, $p3, $p4);
    call {:si_unique_call 1314} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $i17 := $i18;
    goto $bb11;
}



const tcm_vhost_get_pr_transport_id_len: ref;

axiom tcm_vhost_get_pr_transport_id_len == $sub.ref(0, 418382);

procedure tcm_vhost_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i23: i32;
  var $i16: i32;
  var vslice_dummy_var_138: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(208, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_138 := printk.ref.i32(.str.118, $i21);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i23 := sas_get_pr_transport_id_len($p0, $p1, $p2, $p3);
    call {:si_unique_call 1326} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i15 := sas_get_pr_transport_id_len($p0, $p1, $p2, $p3);
    call {:si_unique_call 1321} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb11;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $i18 := iscsi_get_pr_transport_id_len($p0, $p1, $p2, $p3);
    call {:si_unique_call 1319} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb11;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i17 := fc_get_pr_transport_id_len($p0, $p1, $p2, $p3);
    call {:si_unique_call 1323} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb11;
}



const tcm_vhost_parse_pr_out_transport_id: ref;

axiom tcm_vhost_parse_pr_out_transport_id == $sub.ref(0, 419414);

procedure tcm_vhost_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcm_vhost_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $p23: ref;
  var $p16: ref;
  var vslice_dummy_var_139: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(208, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.2, $p6);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.2, $p8);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.2, $p19);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_139 := printk.ref.i32(.str.118, $i21);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p23 := sas_parse_pr_out_transport_id($p0, $p1, $p2, $p3);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p16 := $p23;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $r := $p16;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p15 := sas_parse_pr_out_transport_id($p0, $p1, $p2, $p3);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p16 := $p15;
    goto $bb11;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $p18 := iscsi_parse_pr_out_transport_id($p0, $p1, $p2, $p3);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p16 := $p18;
    goto $bb11;

  $bb2:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb9:
    assume $i14 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $p17 := fc_parse_pr_out_transport_id($p0, $p1, $p2, $p3);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p16 := $p17;
    goto $bb11;
}



const tcm_vhost_check_true: ref;

axiom tcm_vhost_check_true == $sub.ref(0, 420446);

procedure tcm_vhost_check_true($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_check_true($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const tcm_vhost_check_false: ref;

axiom tcm_vhost_check_false == $sub.ref(0, 421478);

procedure tcm_vhost_check_false($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_check_false($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_alloc_fabric_acl: ref;

axiom tcm_vhost_alloc_fabric_acl == $sub.ref(0, 422510);

procedure tcm_vhost_alloc_fabric_acl($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation tcm_vhost_alloc_fabric_acl($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p6: ref;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $p1 := kzalloc(1512, 208);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 1512)), $mul.ref(264, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p6 := $p7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_140 := printk.ref(.str.119);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const tcm_vhost_release_fabric_acl: ref;

axiom tcm_vhost_release_fabric_acl == $sub.ref(0, 423542);

procedure tcm_vhost_release_fabric_acl($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tcm_vhost_release_fabric_acl($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 264), 1512));
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} kfree($p4);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_tpg_get_inst_index: ref;

axiom tcm_vhost_tpg_get_inst_index == $sub.ref(0, 424574);

procedure tcm_vhost_tpg_get_inst_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_tpg_get_inst_index($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const tcm_vhost_release_cmd: ref;

axiom tcm_vhost_release_cmd == $sub.ref(0, 425606);

procedure tcm_vhost_release_cmd($p0: ref);
  free requires assertsPassed;



implementation tcm_vhost_release_cmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_shutdown_session: ref;

axiom tcm_vhost_shutdown_session == $sub.ref(0, 426638);

procedure tcm_vhost_shutdown_session($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_shutdown_session($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_close_session: ref;

axiom tcm_vhost_close_session == $sub.ref(0, 427670);

procedure tcm_vhost_close_session($p0: ref);
  free requires assertsPassed;



implementation tcm_vhost_close_session($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_sess_get_index: ref;

axiom tcm_vhost_sess_get_index == $sub.ref(0, 428702);

procedure tcm_vhost_sess_get_index($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_sess_get_index($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_write_pending: ref;

axiom tcm_vhost_write_pending == $sub.ref(0, 429734);

procedure tcm_vhost_write_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_write_pending($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} target_execute_cmd($p0);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_write_pending_status: ref;

axiom tcm_vhost_write_pending_status == $sub.ref(0, 430766);

procedure tcm_vhost_write_pending_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_write_pending_status($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_set_default_node_attrs: ref;

axiom tcm_vhost_set_default_node_attrs == $sub.ref(0, 431798);

procedure tcm_vhost_set_default_node_attrs($p0: ref);
  free requires assertsPassed;



implementation tcm_vhost_set_default_node_attrs($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_get_task_tag: ref;

axiom tcm_vhost_get_task_tag == $sub.ref(0, 432830);

procedure tcm_vhost_get_task_tag($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_get_task_tag($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_get_cmd_state: ref;

axiom tcm_vhost_get_cmd_state == $sub.ref(0, 433862);

procedure tcm_vhost_get_cmd_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_get_cmd_state($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_queue_data_in: ref;

axiom tcm_vhost_queue_data_in == $sub.ref(0, 434894);

procedure tcm_vhost_queue_data_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation tcm_vhost_queue_data_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 64), 1248));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} vhost_scsi_complete_cmd($p2);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_queue_status: ref;

axiom tcm_vhost_queue_status == $sub.ref(0, 435926);

procedure tcm_vhost_queue_status($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2;



implementation tcm_vhost_queue_status($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 64), 1248));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vhost_scsi_complete_cmd($p2);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_queue_tm_rsp: ref;

axiom tcm_vhost_queue_tm_rsp == $sub.ref(0, 436958);

procedure tcm_vhost_queue_tm_rsp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcm_vhost_queue_tm_rsp($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const tcm_vhost_make_tport: ref;

axiom tcm_vhost_make_tport == $sub.ref(0, 437990);

procedure tcm_vhost_make_tport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation tcm_vhost_make_tport($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $i17: i32;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p60: ref;
  var $p11: ref;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $p4 := kzalloc(520, 208);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(8, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p12, 0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p13 := strstr($p2, .str.67);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $p18 := strstr($p2, .str.69);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} $p22 := strstr($p2, .str.71);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_142 := printk.ref.ref(.str.121, $p2);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p5);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} kfree($p27);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p28 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $p11 := $p28;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p25, 5);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i30 := strlen($p2);
    call {:si_unique_call 1344} {:cexpr "tmp___4"} boogie_si_record_i64($i30);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i64($i30, 255);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i17);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p2, $mul.ref($i39, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_144 := snprintf.ref.i64.ref.ref($p38, 256, .str.66, $p40);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p42, .str.6);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, .str.123);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p44, .str.53);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p45, .str.124);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.12, $p47);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1477);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p47, $i50);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p51, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.13, $p52);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 1356} {:cexpr "tmp___6"} boogie_si_record_i64($i56);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(272, 1));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p11 := $p60;
    goto $bb3;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $p58 := tcm_vhost_dump_proto_id($p5);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_145 := __dynamic_pr_debug.ref.ref.ref.ref($p3, .str.124, $p58, $p2);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $p32 := tcm_vhost_dump_proto_id($p5);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_143 := printk.ref.ref.ref.i32(.str.122, $p2, $p32, 256);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p5);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} kfree($p34);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p35 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p11 := $p35;
    goto $bb3;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p21, 0);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i17 := 3;
    goto $bb7;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, $p16, 6);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} vslice_dummy_var_141 := printk.ref(.str.120);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p9 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p11 := $p9;
    goto $bb3;
}



const tcm_vhost_drop_tport: ref;

axiom tcm_vhost_drop_tport == $sub.ref(0, 439022);

procedure tcm_vhost_drop_tport($p0: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation tcm_vhost_drop_tport($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var vslice_dummy_var_146: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 272), 520));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str.6);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p5, .str.125);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p6, .str.53);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p7, .str.126);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.12, $p9);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1489);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p9, $i12);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p13, 0);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.13, $p14);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1361} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} kfree($p24);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p20 := tcm_vhost_dump_proto_id($p3);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 272), 520)), $mul.ref(16, 1));
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} vslice_dummy_var_146 := __dynamic_pr_debug.ref.ref.ref.ref($p1, .str.126, $p20, $p22);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_vhost_make_tpg: ref;

axiom tcm_vhost_make_tpg == $sub.ref(0, 440054);

procedure tcm_vhost_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $M.26, $CurrAddr, assertsPassed;



implementation tcm_vhost_make_tpg($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p13: ref;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref($sub.ref(0, 272), 520));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $p7 := strstr($p2, .str.127);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p2);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i8, $i9);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref(5, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $i15 := kstrtoul($p14, 10, $p3);
    call {:si_unique_call 1370} {:cexpr "tmp___2"} boogie_si_record_i32($i15);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.28, $p3);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i64($i17, 4294967295);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $p21 := kzalloc(2192, 208);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} __mutex_init($p28, .str.129, $p4);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} INIT_LIST_HEAD($p29);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, $p6);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.28, $p3);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i16($i31);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.2 := $store.i16($M.2, $p33, $i32);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p34 := $M.29;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1304)), $mul.ref(328, 1));
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p22);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i38 := core_tpg_register($p35, $p0, $p36, $p37, 0);
    call {:si_unique_call 1378} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i38, 0);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} ldv_mutex_lock_65(tcm_vhost_mutex);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(16, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} list_add_tail($p41, tcm_vhost_list);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} ldv_mutex_unlock_66(tcm_vhost_mutex);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 2192)), $mul.ref(216, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p13 := $p42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p22);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} kfree($p40);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p13 := $0.ref;
    goto $bb3;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_147 := printk.ref(.str.128);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} $p26 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p13 := $p26;
    goto $bb3;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} $p19 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p13 := $p19;
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p11 := ERR_PTR($sub.i64(0, 22));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p13 := $p11;
    goto $bb3;
}



const tcm_vhost_drop_tpg: ref;

axiom tcm_vhost_drop_tpg == $sub.ref(0, 441086);

procedure tcm_vhost_drop_tpg($p0: ref);
  free requires assertsPassed;
  modifies $M.26, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, assertsPassed, $M.27, $CurrAddr;



implementation tcm_vhost_drop_tpg($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 216), 2192));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} ldv_mutex_lock_67(tcm_vhost_mutex);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(16, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} list_del($p3);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} ldv_mutex_unlock_68(tcm_vhost_mutex);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} vslice_dummy_var_148 := tcm_vhost_drop_nexus($p2);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} vslice_dummy_var_149 := core_tpg_deregister($p0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} kfree($p6);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const tcm_vhost_port_link: ref;

axiom tcm_vhost_port_link == $sub.ref(0, 442118);

procedure tcm_vhost_port_link($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.27, assertsPassed;



implementation tcm_vhost_port_link($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(32, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} ldv_mutex_lock_46($p4);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(4, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 1);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(4, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, $i7);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(32, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} ldv_mutex_unlock_47($p9);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;
}



const tcm_vhost_port_unlink: ref;

axiom tcm_vhost_port_unlink == $sub.ref(0, 443150);

procedure tcm_vhost_port_unlink($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.27, assertsPassed;



implementation tcm_vhost_port_unlink($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(32, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} ldv_mutex_lock_48($p4);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(4, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.2, $p5);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i6, 1);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(4, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, $p8, $i7);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 216), 2192)), $mul.ref(32, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} ldv_mutex_unlock_49($p9);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const tcm_vhost_make_nodeacl: ref;

axiom tcm_vhost_make_nodeacl == $sub.ref(0, 444182);

procedure tcm_vhost_make_nodeacl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2, $CurrAddr;



implementation tcm_vhost_make_nodeacl($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p3 := tcm_vhost_alloc_fabric_acl($p0);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p9 := core_tpg_add_initiator_node_acl($p0, $p3, $p2, 1);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i11 := IS_ERR($p10);
    call {:si_unique_call 1397} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p9);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p13, $mul.ref($sub.ref(0, 264), 1512)), $mul.ref(0, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, $p15, 0);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p8 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} tcm_vhost_release_fabric_acl($p0, $p3);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $p8 := $p9;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p6 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p8 := $p6;
    goto $bb3;
}



const tcm_vhost_drop_nodeacl: ref;

axiom tcm_vhost_drop_nodeacl == $sub.ref(0, 445214);

procedure tcm_vhost_drop_nodeacl($p0: ref);
  free requires assertsPassed;



implementation tcm_vhost_drop_nodeacl($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 264), 1512));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(360, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_150 := core_tpg_del_initiator_node_acl($p4, $p0, 1);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} kfree($p6);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    return;
}



const core_tpg_del_initiator_node_acl: ref;

axiom core_tpg_del_initiator_node_acl == $sub.ref(0, 446246);

procedure core_tpg_del_initiator_node_acl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_del_initiator_node_acl($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1401} {:cexpr "core_tpg_del_initiator_node_acl:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1402} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1403} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const core_tpg_add_initiator_node_acl: ref;

axiom core_tpg_add_initiator_node_acl == $sub.ref(0, 447278);

procedure core_tpg_add_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;



implementation core_tpg_add_initiator_node_acl($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "core_tpg_add_initiator_node_acl:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $p4 := external_alloc();
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const ldv_mutex_lock_48: ref;

axiom ldv_mutex_lock_48 == $sub.ref(0, 448310);

procedure ldv_mutex_lock_48($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_48($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} ldv_mutex_lock_tv_tpg_mutex($p0);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} mutex_lock($p0);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_310:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_49: ref;

axiom ldv_mutex_unlock_49 == $sub.ref(0, 449342);

procedure ldv_mutex_unlock_49($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} mutex_unlock($p0);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_46: ref;

axiom ldv_mutex_lock_46 == $sub.ref(0, 450374);

procedure ldv_mutex_lock_46($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_46($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} ldv_mutex_lock_tv_tpg_mutex($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} mutex_lock($p0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_316:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_47: ref;

axiom ldv_mutex_unlock_47 == $sub.ref(0, 451406);

procedure ldv_mutex_unlock_47($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_47($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} mutex_unlock($p0);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_319:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_67: ref;

axiom ldv_mutex_lock_67 == $sub.ref(0, 452438);

procedure ldv_mutex_lock_67($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_67($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} ldv_mutex_lock_tcm_vhost_mutex($p0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} mutex_lock($p0);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_68: ref;

axiom ldv_mutex_unlock_68 == $sub.ref(0, 453470);

procedure ldv_mutex_unlock_68($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_68($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} ldv_mutex_unlock_tcm_vhost_mutex($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} mutex_unlock($p0);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_325:
    assume !assertsPassed;
    return;
}



const tcm_vhost_drop_nexus: ref;

axiom tcm_vhost_drop_nexus == $sub.ref(0, 454502);

procedure tcm_vhost_drop_nexus($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.27, $CurrAddr, assertsPassed;



implementation tcm_vhost_drop_nexus($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i8: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} ldv_mutex_lock_56($p2);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(200, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.2, $p9);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.2, $p14);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.2, $p21);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p28, .str.6);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p29, .str.76);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p30, .str.53);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p31, .str.77);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.12, $p33);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 1246);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p33, $i36);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p37, 0);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.13, $p38);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1427} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.2, $p54);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} transport_deregister_session($p55);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(200, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, $0.ref);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} ldv_mutex_unlock_61($p57);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p4);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} kfree($p58);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i43 == 1;
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.2, $p44);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $p46 := tcm_vhost_dump_proto_id($p45);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.2, $p47);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 168)), $mul.ref(16, 1));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.2, $p49);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} vslice_dummy_var_153 := __dynamic_pr_debug.ref.ref.ref.ref($p1, .str.77, $p46, $p52);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_mutex_unlock_60($p24);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.2, $p25);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_152 := printk.ref.i32(.str.75, $i26);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} ldv_mutex_unlock_59($p17);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(4, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.2, $p18);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_151 := printk.ref.i32(.str.74, $i19);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} ldv_mutex_unlock_58($p13);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_mutex_unlock_57($p7);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;
}



const core_tpg_deregister: ref;

axiom core_tpg_deregister == $sub.ref(0, 455534);

procedure core_tpg_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1433} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_56: ref;

axiom ldv_mutex_lock_56 == $sub.ref(0, 456566);

procedure ldv_mutex_lock_56($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_lock_56($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} ldv_mutex_lock_tv_tpg_mutex($p0);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} mutex_lock($p0);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_346:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_57: ref;

axiom ldv_mutex_unlock_57 == $sub.ref(0, 457598);

procedure ldv_mutex_unlock_57($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_57($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} mutex_unlock($p0);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_58: ref;

axiom ldv_mutex_unlock_58 == $sub.ref(0, 458630);

procedure ldv_mutex_unlock_58($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_58($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} mutex_unlock($p0);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_352:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_59: ref;

axiom ldv_mutex_unlock_59 == $sub.ref(0, 459662);

procedure ldv_mutex_unlock_59($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_59($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} mutex_unlock($p0);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_355:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_60: ref;

axiom ldv_mutex_unlock_60 == $sub.ref(0, 460694);

procedure ldv_mutex_unlock_60($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_60($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} mutex_unlock($p0);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_358:
    assume !assertsPassed;
    return;
}



const tcm_vhost_dump_proto_id: ref;

axiom tcm_vhost_dump_proto_id == $sub.ref(0, 461726);

procedure tcm_vhost_dump_proto_id($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcm_vhost_dump_proto_id($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 520)), $mul.ref(0, 1));
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.2, $p1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p8 := .str.81;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p8 := .str.78;
    goto $bb11;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p8 := .str.80;
    goto $bb11;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p8 := .str.79;
    goto $bb11;
}



const transport_deregister_session: ref;

axiom transport_deregister_session == $sub.ref(0, 462758);

procedure transport_deregister_session($p0: ref);
  free requires assertsPassed;



implementation transport_deregister_session($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_61: ref;

axiom ldv_mutex_unlock_61 == $sub.ref(0, 463790);

procedure ldv_mutex_unlock_61($p0: ref);
  free requires assertsPassed;
  modifies $M.27, assertsPassed;



implementation ldv_mutex_unlock_61($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} ldv_mutex_unlock_tv_tpg_mutex($p0);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} mutex_unlock($p0);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;
}



const strstr: ref;

axiom strstr == $sub.ref(0, 464822);

procedure strstr($p0: ref, $p1: ref) returns ($r: ref);



const kstrtoul: ref;

axiom kstrtoul == $sub.ref(0, 465854);

procedure kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoul($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} {:cexpr "kstrtoul:arg:base"} boogie_si_record_i32($i1);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $i3 := kstrtoull($p0, $i1, $p2);
    call {:si_unique_call 1449} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const core_tpg_register: ref;

axiom core_tpg_register == $sub.ref(0, 466886);

procedure core_tpg_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation core_tpg_register($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1450} {:cexpr "core_tpg_register:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1451} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1452} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_mutex_lock_65: ref;

axiom ldv_mutex_lock_65 == $sub.ref(0, 467918);

procedure ldv_mutex_lock_65($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_lock_65($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} ldv_mutex_lock_tcm_vhost_mutex($p0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} mutex_lock($p0);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_364:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_66: ref;

axiom ldv_mutex_unlock_66 == $sub.ref(0, 468950);

procedure ldv_mutex_unlock_66($p0: ref);
  free requires assertsPassed;
  modifies $M.26, assertsPassed;



implementation ldv_mutex_unlock_66($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} ldv_mutex_unlock_tcm_vhost_mutex($p0);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} mutex_unlock($p0);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;
}



const kstrtoull: ref;

axiom kstrtoull == $sub.ref(0, 469982);

procedure kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtoull($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1457} {:cexpr "kstrtoull:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1458} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1459} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 471014);

procedure strlen($p0: ref) returns ($r: i64);



const snprintf: ref;

axiom snprintf == $sub.ref(0, 472046);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



const vhost_scsi_complete_cmd: ref;

axiom vhost_scsi_complete_cmd == $sub.ref(0, 473078);

procedure vhost_scsi_complete_cmd($p0: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation vhost_scsi_complete_cmd($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(48, 1));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} spin_lock_bh($p3);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1248)), $mul.ref(1232, 1));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 52000)), $mul.ref(51912, 1));
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} list_add_tail($p4, $p5);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 52000)), $mul.ref(51928, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} spin_unlock_bh($p6);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 52000)), $mul.ref(51784, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vhost_work_queue($p7, $p8);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    return;
}



const target_execute_cmd: ref;

axiom target_execute_cmd == $sub.ref(0, 474110);

procedure target_execute_cmd($p0: ref);
  free requires assertsPassed;



implementation target_execute_cmd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    return;
}



const sas_parse_pr_out_transport_id: ref;

axiom sas_parse_pr_out_transport_id == $sub.ref(0, 475142);

procedure sas_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sas_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p4 := external_alloc();
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const fc_parse_pr_out_transport_id: ref;

axiom fc_parse_pr_out_transport_id == $sub.ref(0, 476174);

procedure fc_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation fc_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $p4 := external_alloc();
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const iscsi_parse_pr_out_transport_id: ref;

axiom iscsi_parse_pr_out_transport_id == $sub.ref(0, 477206);

procedure iscsi_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation iscsi_parse_pr_out_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p4 := external_alloc();
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const sas_get_pr_transport_id_len: ref;

axiom sas_get_pr_transport_id_len == $sub.ref(0, 478238);

procedure sas_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1467} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1468} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const fc_get_pr_transport_id_len: ref;

axiom fc_get_pr_transport_id_len == $sub.ref(0, 479270);

procedure fc_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1469} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1470} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const iscsi_get_pr_transport_id_len: ref;

axiom iscsi_get_pr_transport_id_len == $sub.ref(0, 480302);

procedure iscsi_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsi_get_pr_transport_id_len($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1471} $i4 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1472} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i4);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const sas_get_pr_transport_id: ref;

axiom sas_get_pr_transport_id == $sub.ref(0, 481334);

procedure sas_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation sas_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1474} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const fc_get_pr_transport_id: ref;

axiom fc_get_pr_transport_id == $sub.ref(0, 482366);

procedure fc_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fc_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1476} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const iscsi_get_pr_transport_id: ref;

axiom iscsi_get_pr_transport_id == $sub.ref(0, 483398);

procedure iscsi_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iscsi_get_pr_transport_id($p0: ref, $p1: ref, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} $i5 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1478} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i5);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const sas_get_fabric_proto_ident: ref;

axiom sas_get_fabric_proto_ident == $sub.ref(0, 484430);

procedure sas_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation sas_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1479} $i1 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1480} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i1);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const fc_get_fabric_proto_ident: ref;

axiom fc_get_fabric_proto_ident == $sub.ref(0, 485462);

procedure fc_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation fc_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1481} $i1 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1482} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i1);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const iscsi_get_fabric_proto_ident: ref;

axiom iscsi_get_fabric_proto_ident == $sub.ref(0, 486494);

procedure iscsi_get_fabric_proto_ident($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation iscsi_get_fabric_proto_ident($p0: ref) returns ($r: i8)
{
  var $i1: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1483} $i1 := __VERIFIER_nondet_uchar();
    call {:si_unique_call 1484} {:cexpr "smack:ext:__VERIFIER_nondet_uchar"} boogie_si_record_i8($i1);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tcm_vhost_wwn_show_attr_version: ref;

axiom tcm_vhost_wwn_show_attr_version == $sub.ref(0, 487526);

procedure tcm_vhost_wwn_show_attr_version($p0: ref, $p1: ref) returns ($r: i64);



const utsname: ref;

axiom utsname == $sub.ref(0, 488558);

procedure utsname() returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation utsname() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p0 := get_current();
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 9512)), $mul.ref(1824, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.2, $p1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.2, $p3);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 408)), $mul.ref(4, 1));
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 489590);

procedure sprintf.ref.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);



const tcm_vhost_tpg_show_nexus: ref;

axiom tcm_vhost_tpg_show_nexus == $sub.ref(0, 490622);

procedure tcm_vhost_tpg_show_nexus($p0: ref, $p1: ref) returns ($r: i64);



const tcm_vhost_tpg_store_nexus: ref;

axiom tcm_vhost_tpg_store_nexus == $sub.ref(0, 491654);

procedure tcm_vhost_tpg_store_nexus($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);



const strncmp: ref;

axiom strncmp == $sub.ref(0, 492686);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const tcm_vhost_make_nexus: ref;

axiom tcm_vhost_make_nexus == $sub.ref(0, 493718);

procedure tcm_vhost_make_nexus($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_50: ref;

axiom ldv_mutex_lock_50 == $sub.ref(0, 494750);

procedure ldv_mutex_lock_50($p0: ref);



const ldv_mutex_unlock_51: ref;

axiom ldv_mutex_unlock_51 == $sub.ref(0, 495782);

procedure ldv_mutex_unlock_51($p0: ref);



const ldv_mutex_unlock_52: ref;

axiom ldv_mutex_unlock_52 == $sub.ref(0, 496814);

procedure ldv_mutex_unlock_52($p0: ref);



const transport_init_session: ref;

axiom transport_init_session == $sub.ref(0, 497846);

procedure transport_init_session() returns ($r: ref);



const ldv_mutex_unlock_53: ref;

axiom ldv_mutex_unlock_53 == $sub.ref(0, 498878);

procedure ldv_mutex_unlock_53($p0: ref);



const core_tpg_check_initiator_node_acl: ref;

axiom core_tpg_check_initiator_node_acl == $sub.ref(0, 499910);

procedure core_tpg_check_initiator_node_acl($p0: ref, $p1: ref) returns ($r: ref);



const ldv_mutex_unlock_54: ref;

axiom ldv_mutex_unlock_54 == $sub.ref(0, 500942);

procedure ldv_mutex_unlock_54($p0: ref);



const transport_free_session: ref;

axiom transport_free_session == $sub.ref(0, 501974);

procedure transport_free_session($p0: ref);



const __transport_register_session: ref;

axiom __transport_register_session == $sub.ref(0, 503006);

procedure __transport_register_session($p0: ref, $p1: ref, $p2: ref, $p3: ref);



const ldv_mutex_unlock_55: ref;

axiom ldv_mutex_unlock_55 == $sub.ref(0, 504038);

procedure ldv_mutex_unlock_55($p0: ref);



const ldv_mutex_lock_62: ref;

axiom ldv_mutex_lock_62 == $sub.ref(0, 505070);

procedure ldv_mutex_lock_62($p0: ref);



const ldv_mutex_unlock_63: ref;

axiom ldv_mutex_unlock_63 == $sub.ref(0, 506102);

procedure ldv_mutex_unlock_63($p0: ref);



const ldv_mutex_unlock_64: ref;

axiom ldv_mutex_unlock_64 == $sub.ref(0, 507134);

procedure ldv_mutex_unlock_64($p0: ref);



const main: ref;

axiom main == $sub.ref(0, 508166);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.29, $M.19, $M.27, $M.26, $M.16, $M.33, $M.32, $M.31, $M.25, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $CurrAddr, assertsPassed, $M.3, $M.4, $M.5, $M.6, $M.7, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i48: i1;
  var $i50: i32;
  var $i47: i32;
  var $i2: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i1;
  var vslice_dummy_var_154: ref;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: ref;
  var vslice_dummy_var_157: ref;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: ref;
  var vslice_dummy_var_170: ref;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: ref;
  var vslice_dummy_var_175: i16;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: ref;
  var vslice_dummy_var_178: i8;
  var vslice_dummy_var_179: i64;
  var vslice_dummy_var_180: i64;
  var vslice_dummy_var_181: i32;

  $bb0:
    call {:si_unique_call 1486} $initialize();
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} ldv_initialize();
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_handler_precall();
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $i0 := tcm_vhost_init();
    call {:si_unique_call 1492} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb5;

  $bb5:
    call $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i50, $i47, $i2, $i78, $i79, $i80, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181 := main_loop_$bb5($i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i48, $i50, $i47, $i2, $i78, $i79, $i80, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181);
    goto $bb5_last;

  corral_source_split_7050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} $i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i78);
    call {:si_unique_call 1496} {:cexpr "tmp___1"} boogie_si_record_i32($i78);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb99;

  $bb99:
    assume !($i79 == 1);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i2, 0);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} ldv_handler_precall();
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} tcm_vhost_exit();
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_check_final_state();
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1499} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i3, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i2 := $i47;
    goto corral_source_split_7215_dummy;

  $bb20:
    assume $i10 == 1;
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_handler_precall();
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} tcm_vhost_drop_nodeacl($u5);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb18:
    assume $i9 == 1;
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_handler_precall();
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} vslice_dummy_var_154 := tcm_vhost_make_nodeacl($u4, $u13, $u8);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb16:
    assume $i8 == 1;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_handler_precall();
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} tcm_vhost_port_unlink($u4, $u15);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i11 == 1);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_handler_precall();
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_155 := tcm_vhost_port_link($u4, $u15);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i11 == 1;
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_handler_precall();
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} tcm_vhost_drop_tpg($u4);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i3, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i3, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i14 == 1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_handler_precall();
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_157 := tcm_vhost_make_tpg($u14, $u13, $u8);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i14 == 1;
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_handler_precall();
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} tcm_vhost_drop_tport($u14);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb27:
    assume $i13 == 1;
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_handler_precall();
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_156 := tcm_vhost_make_tport($u12, $u13, $u8);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb25:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i3, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i15 == 1);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_handler_precall();
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} vslice_dummy_var_159 := tcm_vhost_queue_tm_rsp($u10);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb31:
    assume $i15 == 1;
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} ldv_handler_precall();
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_158 := tcm_vhost_queue_status($u10);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb10:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i3, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i3, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i3, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i3, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_handler_precall();
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_162 := tcm_vhost_queue_data_in($u10);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb39:
    assume $i19 == 1;
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_handler_precall();
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} vslice_dummy_var_161 := tcm_vhost_get_cmd_state($u10);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb37:
    assume $i18 == 1;
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_handler_precall();
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_160 := tcm_vhost_get_task_tag($u10);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb35:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i3, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i20 == 1);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_handler_precall();
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} tcm_vhost_set_default_node_attrs($u5);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb41:
    assume $i20 == 1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_handler_precall();
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_163 := tcm_vhost_write_pending_status($u10);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb33:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i3, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i3, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i22 == 1);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_handler_precall();
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_165 := tcm_vhost_write_pending($u10);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb45:
    assume $i22 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_handler_precall();
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_164 := tcm_vhost_sess_get_index($u11);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb43:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i3, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i23 == 1);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_handler_precall();
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} tcm_vhost_close_session($u11);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb47:
    assume $i23 == 1;
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_handler_precall();
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_166 := tcm_vhost_shutdown_session($u11);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb8:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i3, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i3, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i3, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i3, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i28 == 1);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_handler_precall();
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} tcm_vhost_release_cmd($u10);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb57:
    assume $i28 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_handler_precall();
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} vslice_dummy_var_167 := tcm_vhost_tpg_get_inst_index($u4);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb55:
    assume $i27 == 1;
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_handler_precall();
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} tcm_vhost_release_fabric_acl($u4, $u5);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb53:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i29 == 1);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_handler_precall();
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_169 := tcm_vhost_alloc_fabric_acl($u4);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb59:
    assume $i29 == 1;
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_handler_precall();
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_168 := tcm_vhost_check_false($u4);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb51:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i3, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i31 == 1);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_handler_precall();
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} vslice_dummy_var_171 := tcm_vhost_check_true($u4);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb63:
    assume $i31 == 1;
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_handler_precall();
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_170 := tcm_vhost_parse_pr_out_transport_id($u4, $u8, $u7, $u9);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb61:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i32 == 1);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_handler_precall();
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} vslice_dummy_var_173 := tcm_vhost_get_pr_transport_id_len($u4, $u5, $u6, $u7);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb65:
    assume $i32 == 1;
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_handler_precall();
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} vslice_dummy_var_172 := tcm_vhost_get_pr_transport_id($u4, $u5, $u6, $u7, $u8);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb49:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i36 == 1);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_handler_precall();
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} vslice_dummy_var_176 := tcm_vhost_get_default_depth($u4);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb73:
    assume $i36 == 1;
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_handler_precall();
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_175 := tcm_vhost_get_tag($u4);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb71:
    assume $i35 == 1;
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_handler_precall();
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_174 := tcm_vhost_get_fabric_wwn($u4);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb69:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i37 == 1);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} ldv_handler_precall();
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} vslice_dummy_var_178 := tcm_vhost_get_fabric_proto_ident($u4);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb75:
    assume $i37 == 1;
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_handler_precall();
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} vslice_dummy_var_177 := tcm_vhost_get_fabric_name();
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  $bb67:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i39 == 1);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_handler_precall();
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_180 := vhost_scsi_compat_ioctl($u2, $u0, $u3);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb79:
    assume $i39 == 1;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_handler_precall();
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} vslice_dummy_var_179 := vhost_scsi_ioctl($u2, $u0, $u3);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i47 := $i2;
    goto $bb92;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i40 == 1);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i2, 1);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i2;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i47 := $i50;
    goto $bb92;

  $bb93:
    assume $i48 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_handler_precall();
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_181 := vhost_scsi_release($u1, $u2);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb95;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb81:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb22;

  $bb83:
    assume $i41 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i2;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i47 := $i46;
    goto $bb92;

  $bb85:
    assume $i42 == 1;
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} ldv_handler_precall();
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} $i43 := vhost_scsi_open($u1, $u2);
    call {:si_unique_call 1572} {:cexpr "res_vhost_scsi_open_39"} boogie_si_record_i32($i43);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} ldv_check_return_value($i43);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i2, 1);
    call {:si_unique_call 1576} {:cexpr "ldv_s_vhost_scsi_fops_file_operations"} boogie_si_record_i32($i45);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb91;

  $bb87:
    assume $i44 == 1;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb98;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    goto $bb3;

  corral_source_split_7215_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7050;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 509198);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.31, $M.32, $M.33, $M.16, $M.26, $M.27;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $M.32 := 1;
    call {:si_unique_call 1580} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_mutex_mtx"} boogie_si_record_i32(1);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1582} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $M.26 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_mutex_tcm_vhost_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_mutex_tv_tpg_mutex"} boogie_si_record_i32(1);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    return;
}



const ldv_handler_precall: ref;

axiom ldv_handler_precall == $sub.ref(0, 510230);

procedure ldv_handler_precall();
  free requires assertsPassed;



implementation ldv_handler_precall()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_init: ref;

axiom tcm_vhost_init == $sub.ref(0, 511262);

procedure tcm_vhost_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.29, $CurrAddr;



implementation tcm_vhost_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i8: i32;
  var $p13: ref;
  var $i5: i32;
  var $i11: i32;
  var vslice_dummy_var_182: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p1 := __alloc_workqueue_key.ref.i32.i32.ref.ref(.str.6, 0, 0, $p0, .str.6);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $p2 := $M.19;
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i6 := vhost_scsi_register();
    call {:si_unique_call 1588} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $i9 := tcm_vhost_register_configfs();
    call {:si_unique_call 1591} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_182 := vhost_scsi_deregister();
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i8 := $i9;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p13 := $M.19;
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} destroy_workqueue($p13);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i5 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i11 := $i5;
    goto $bb13;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_return_value: ref;

axiom ldv_check_return_value == $sub.ref(0, 512294);

procedure ldv_check_return_value($i0: i32);
  free requires assertsPassed;



implementation ldv_check_return_value($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} {:cexpr "ldv_check_return_value:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    return;
}



const tcm_vhost_exit: ref;

axiom tcm_vhost_exit == $sub.ref(0, 513326);

procedure tcm_vhost_exit();
  free requires assertsPassed;
  modifies $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation tcm_vhost_exit()
{
  var $p1: ref;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} tcm_vhost_deregister_configfs();
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_183 := vhost_scsi_deregister();
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p1 := $M.19;
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} destroy_workqueue($p1);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 514358);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i0 := $M.31;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} ldv_error();
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.32;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} ldv_error();
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.33;
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} ldv_error();
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} ldv_error();
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.26;
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} ldv_error();
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i10 := $M.27;
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i11 == 1);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} ldv_error();
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tcm_vhost_deregister_configfs: ref;

axiom tcm_vhost_deregister_configfs == $sub.ref(0, 515390);

procedure tcm_vhost_deregister_configfs();
  free requires assertsPassed;
  modifies $M.29, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr;



implementation tcm_vhost_deregister_configfs()
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p1 := $M.29;
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $M.29;
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} target_fabric_configfs_deregister($p4);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $M.29 := $0.ref;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p5, .str.6);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p6, .str.130);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p7, .str.53);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p8, .str.131);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.12, $p10);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1610);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p10, $i13);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p14, 0);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.13, $p15);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 1606} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i20 == 1;
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} vslice_dummy_var_184 := __dynamic_pr_debug.ref.ref($p0, .str.131);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vhost_scsi_deregister: ref;

axiom vhost_scsi_deregister == $sub.ref(0, 516422);

procedure vhost_scsi_deregister() returns ($r: i32);
  free requires assertsPassed;



implementation vhost_scsi_deregister() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $i0 := misc_deregister(vhost_scsi_misc);
    call {:si_unique_call 1609} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const destroy_workqueue: ref;

axiom destroy_workqueue == $sub.ref(0, 517454);

procedure destroy_workqueue($p0: ref);
  free requires assertsPassed;



implementation destroy_workqueue($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    return;
}



const misc_deregister: ref;

axiom misc_deregister == $sub.ref(0, 518486);

procedure misc_deregister($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_deregister($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const target_fabric_configfs_deregister: ref;

axiom target_fabric_configfs_deregister == $sub.ref(0, 519518);

procedure target_fabric_configfs_deregister($p0: ref);
  free requires assertsPassed;



implementation target_fabric_configfs_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    return;
}



const __alloc_workqueue_key: ref;

axiom __alloc_workqueue_key == $sub.ref(0, 520550);

procedure __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __alloc_workqueue_key.ref.i32.i32.ref.ref($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} {:cexpr "__alloc_workqueue_key:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1613} {:cexpr "__alloc_workqueue_key:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p5 := external_alloc();
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vhost_scsi_register: ref;

axiom vhost_scsi_register == $sub.ref(0, 521582);

procedure vhost_scsi_register() returns ($r: i32);
  free requires assertsPassed;



implementation vhost_scsi_register() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $i0 := misc_register(vhost_scsi_misc);
    call {:si_unique_call 1616} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const tcm_vhost_register_configfs: ref;

axiom tcm_vhost_register_configfs == $sub.ref(0, 522614);

procedure tcm_vhost_register_configfs() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.29, $CurrAddr;



implementation tcm_vhost_register_configfs() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p34: ref;
  var $p35: ref;
  var $p38: ref;
  var $p41: ref;
  var $p44: ref;
  var $p47: ref;
  var $p50: ref;
  var $p53: ref;
  var $p56: ref;
  var $p59: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $i33: i32;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p0 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p2, .str.6);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p3, .str.52);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p4, .str.53);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p5, .str.54);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.12, $p7);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1561);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p7, $i10);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p11, 0);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.13, $p12);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1620} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} $p25 := target_fabric_configfs_init(__this_module, .str.56);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i27 := IS_ERR($p26);
    call {:si_unique_call 1626} {:cexpr "tmp___3"} boogie_si_record_i64($i27);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(328, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.2;
    cmdloc_dummy_var_24 := $M.2;
    call {:si_unique_call 1630} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p35, tcm_vhost_ops, 336, $zext.i32.i64(8), 0 == 1);
    $M.2 := cmdloc_dummy_var_25;
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(32, 1)), $mul.ref(24, 1));
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, tcm_vhost_wwn_attrs);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, tcm_vhost_tpg_attrs);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(320, 1)), $mul.ref(24, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, $0.ref);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(352, 1)), $mul.ref(24, 1));
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p47, $0.ref);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(288, 1)), $mul.ref(24, 1));
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p50, $0.ref);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(416, 1)), $mul.ref(24, 1));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p53, $0.ref);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(448, 1)), $mul.ref(24, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, $0.ref);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(480, 1)), $mul.ref(24, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p59, $0.ref);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p25, $mul.ref(0, 1304)), $mul.ref(664, 1)), $mul.ref(512, 1)), $mul.ref(24, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p62, $0.ref);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $i63 := target_fabric_configfs_register($p25);
    call {:si_unique_call 1632} {:cexpr "ret"} boogie_si_record_i32($i63);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.29 := $p25;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p66, .str.6);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p67, .str.52);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p68, .str.53);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p69, .str.59);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.12, $p71);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 1599);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, $p71, $i74);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, $p75, 0);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.13, $p76);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1635} {:cexpr "tmp___4"} boogie_si_record_i64($i80);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb11:
    assume $i81 == 1;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_188 := __dynamic_pr_debug.ref.ref($p1, .str.59);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i64 == 1;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} vslice_dummy_var_187 := printk.ref(.str.58);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i33 := $i63;
    goto $bb6;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} vslice_dummy_var_186 := printk.ref(.str.57);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p25);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i31 := PTR_ERR($p30);
    call {:si_unique_call 1629} {:cexpr "tmp___2"} boogie_si_record_i64($i31);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} $p18 := utsname();
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} $p19 := utsname();
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 390)), $mul.ref(0, 1));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p18, $mul.ref(0, 390)), $mul.ref(260, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} vslice_dummy_var_185 := __dynamic_pr_debug.ref.ref.ref.ref.ref($p0, .str.54, .str.55, $p21, $p23);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const target_fabric_configfs_init: ref;

axiom target_fabric_configfs_init == $sub.ref(0, 523646);

procedure target_fabric_configfs_init($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation target_fabric_configfs_init($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p2 := external_alloc();
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const target_fabric_configfs_register: ref;

axiom target_fabric_configfs_register == $sub.ref(0, 524678);

procedure target_fabric_configfs_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation target_fabric_configfs_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1638} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1639} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const misc_register: ref;

axiom misc_register == $sub.ref(0, 525710);

procedure misc_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation misc_register($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1640} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1641} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 526742);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1642} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 1} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 527774);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 528806);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 529838);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_412:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 530870);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 531902);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 532934);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __VERIFIER_nondet_unsigned_char: ref;

axiom __VERIFIER_nondet_unsigned_char == $sub.ref(0, 533966);

procedure __VERIFIER_nondet_unsigned_char() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_char() returns ($r: i8)
{
  var $i0: i8;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1643} $i0 := __SMACK_nondet_unsigned_char();
    call {:si_unique_call 1644} {:cexpr "smack:ext:__SMACK_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1645} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} __VERIFIER_assume($i6);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 1} true;
    $i4 := $zext.i8.i32($i0);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 255);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 534998);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 536030);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 537062);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 538094);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 539126);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 540158);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 541190);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1647} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1648} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1649} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1650} __VERIFIER_assume($i4);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 542222);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 543254);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 544286);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 545318);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1651} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1652} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1653} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1654} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1655} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1656} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1657} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1658} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1659} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} __VERIFIER_assume($i7);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1661} __VERIFIER_assume($i11);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 546350);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 547382);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 548414);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 549446);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 550478);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 551510);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1662} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1663} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1664} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1665} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1666} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1667} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1668} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1669} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1670} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1671} __VERIFIER_assume($i7);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1672} __VERIFIER_assume($i11);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 552542);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 553574);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 554606);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 555638);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 556670);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 557702);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 558734);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 559766);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 560798);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1673} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1674} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1675} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1676} __VERIFIER_assume($i10);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uchar: ref;

axiom __VERIFIER_nondet_uchar == $sub.ref(0, 561830);

procedure __VERIFIER_nondet_uchar() returns ($r: i8);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uchar() returns ($r: i8)
{
  var $i0: i8;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1677} $i0 := __VERIFIER_nondet_unsigned_char();
    call {:si_unique_call 1678} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_char"} boogie_si_record_i8($i0);
    call {:si_unique_call 1679} {:cexpr "x"} boogie_si_record_i8($i0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 562862);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1680} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1681} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1682} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 563894);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1683} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1684} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1685} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 564926);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 565958);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 566990);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1688} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1689} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 568022);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 569054);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 570086);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 571118);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.2, $M.29, $M.19, $M.27, $M.26, $M.16, $M.33, $M.32, $M.31, $M.25, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1690} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(0);
    $M.2 := $store.ref($M.2, tcm_vhost_list, tcm_vhost_list);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_list, $mul.ref(0, 16)), $mul.ref(8, 1)), tcm_vhost_list);
    $M.2 := $store.i32($M.2, tcm_vhost_mutex, 1);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.116);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(tcm_vhost_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(tcm_vhost_mutex, $mul.ref(80, 1)));
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(96, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(112, 1)), tcm_vhost_mutex);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(0, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(24, 1)), .str.117);
    $M.2 := $store.i32($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(32, 1)), 0);
    $M.2 := $store.i64($M.2, $add.ref($add.ref($add.ref(tcm_vhost_mutex, $mul.ref(0, 168)), $mul.ref(120, 1)), $mul.ref(40, 1)), 0);
    $M.29 := $0.ref;
    $M.2 := $store.ref($M.2, tcm_vhost_tpg_nexus, .str.62);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_tpg_nexus, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.2 := $store.i16($M.2, $add.ref($add.ref($add.ref(tcm_vhost_tpg_nexus, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 420);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_tpg_nexus, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_vhost_tpg_show_nexus);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_tpg_nexus, $mul.ref(0, 40)), $mul.ref(32, 1)), tcm_vhost_tpg_store_nexus);
    $M.2 := $store.ref($M.2, tcm_vhost_tpg_attrs, tcm_vhost_tpg_nexus);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_tpg_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, tcm_vhost_wwn_version, .str.60);
    $M.2 := $store.ref($M.2, $add.ref($add.ref($add.ref(tcm_vhost_wwn_version, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(8, 1)), __this_module);
    $M.2 := $store.i16($M.2, $add.ref($add.ref($add.ref(tcm_vhost_wwn_version, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(16, 1)), 292);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_wwn_version, $mul.ref(0, 40)), $mul.ref(24, 1)), tcm_vhost_wwn_show_attr_version);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_wwn_version, $mul.ref(0, 40)), $mul.ref(32, 1)), $0.ref);
    $M.2 := $store.ref($M.2, tcm_vhost_wwn_attrs, tcm_vhost_wwn_version);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_wwn_attrs, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, tcm_vhost_ops, $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(8, 1)), tcm_vhost_get_fabric_name);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(16, 1)), tcm_vhost_get_fabric_proto_ident);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(24, 1)), tcm_vhost_get_fabric_wwn);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(32, 1)), tcm_vhost_get_tag);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(40, 1)), tcm_vhost_get_default_depth);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(48, 1)), tcm_vhost_get_pr_transport_id);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(56, 1)), tcm_vhost_get_pr_transport_id_len);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(64, 1)), tcm_vhost_parse_pr_out_transport_id);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(72, 1)), tcm_vhost_check_true);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(80, 1)), tcm_vhost_check_true);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(88, 1)), tcm_vhost_check_false);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(96, 1)), tcm_vhost_check_false);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(104, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(112, 1)), tcm_vhost_alloc_fabric_acl);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(120, 1)), tcm_vhost_release_fabric_acl);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(128, 1)), tcm_vhost_tpg_get_inst_index);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(136, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(144, 1)), tcm_vhost_release_cmd);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(152, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(160, 1)), tcm_vhost_shutdown_session);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(168, 1)), tcm_vhost_close_session);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(176, 1)), tcm_vhost_sess_get_index);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(184, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(192, 1)), tcm_vhost_write_pending);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(200, 1)), tcm_vhost_write_pending_status);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(208, 1)), tcm_vhost_set_default_node_attrs);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(216, 1)), tcm_vhost_get_task_tag);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(224, 1)), tcm_vhost_get_cmd_state);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(232, 1)), tcm_vhost_queue_data_in);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(240, 1)), tcm_vhost_queue_status);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(248, 1)), tcm_vhost_queue_tm_rsp);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(256, 1)), tcm_vhost_make_tport);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(264, 1)), tcm_vhost_drop_tport);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(272, 1)), tcm_vhost_make_tpg);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(280, 1)), tcm_vhost_drop_tpg);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(288, 1)), tcm_vhost_port_link);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(296, 1)), tcm_vhost_port_unlink);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(312, 1)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(320, 1)), tcm_vhost_make_nodeacl);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(tcm_vhost_ops, $mul.ref(0, 336)), $mul.ref(328, 1)), tcm_vhost_drop_nodeacl);
    $M.19 := $0.ref;
    $M.27 := 0;
    call {:si_unique_call 1691} {:cexpr "ldv_mutex_tv_tpg_mutex"} boogie_si_record_i32(0);
    $M.26 := 0;
    call {:si_unique_call 1692} {:cexpr "ldv_mutex_tcm_vhost_mutex"} boogie_si_record_i32(0);
    $M.16 := 0;
    call {:si_unique_call 1693} {:cexpr "ldv_mutex_mutex"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1694} {:cexpr "ldv_mutex_mtx"} boogie_si_record_i32(0);
    $M.32 := 0;
    call {:si_unique_call 1695} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1696} {:cexpr "ldv_mutex_cred_guard_mutex"} boogie_si_record_i32(0);
    $M.25 := 0;
    call {:si_unique_call 1697} {:cexpr "vhost_zcopy_mask"} boogie_si_record_i32(0);
    $M.2 := $store.i8($M.2, .str.47, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(6, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(7, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(10, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(11, 1)), 121);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, .str.18, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(6, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(8, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(11, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.18, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.2 := $store.i8($M.2, .str.96, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(6, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(11, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(13, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(14, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(15, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(17, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(18, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(19, 1)), 113);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.96, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, .str.112, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(6, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(7, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(11, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(15, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(16, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(17, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(18, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(19, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(20, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(21, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(22, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(23, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(24, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.112, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, .str.23, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(6, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(7, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(8, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(9, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(10, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(11, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(13, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(15, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(16, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(17, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(18, 1)), 121);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.23, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.2 := $store.i8($M.2, .str.7, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(6, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(7, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(10, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(11, 1)), 113);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(14, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(15, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(16, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.7, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.2 := $store.i8($M.2, .str.32, 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(4, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(5, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(6, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(7, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(10, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.32, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.2 := $store.i8($M.2, .str.27, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(6, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(7, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(9, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(10, 1)), 98);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(14, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(17, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(18, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.27, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, .str.93, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(6, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(7, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(11, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(12, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(13, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(15, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(16, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(18, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(19, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(22, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(23, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.93, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, .str.91, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(6, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(7, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(11, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(12, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(13, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(15, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(16, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(17, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(18, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(19, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(20, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(22, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(23, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.91, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.2 := $store.i8($M.2, .str.87, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(1, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(2, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(4, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(5, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(6, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(7, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(8, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(9, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(10, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(11, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(12, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(13, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(14, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(15, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(16, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(18, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(20, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(21, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(22, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(23, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(24, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(25, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(26, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(27, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.87, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.2 := $store.i8($M.2, .str.76, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(17, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.76, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, .str.78, 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(1, 1)), 65);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(2, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.78, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, .str.79, 70);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(2, 1)), 80);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.79, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, .str.80, 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.80, $mul.ref(0, 6)), $mul.ref(1, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.80, $mul.ref(0, 6)), $mul.ref(2, 1)), 67);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.80, $mul.ref(0, 6)), $mul.ref(3, 1)), 83);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.80, $mul.ref(0, 6)), $mul.ref(4, 1)), 73);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.80, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, .str.81, 85);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(1, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(2, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(3, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(4, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(5, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.69 := $store.i8($M.69, .str.127, 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(1, 1)), 112);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(2, 1)), 103);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(4, 1)), 95);
    $M.69 := $store.i8($M.69, $add.ref($add.ref(.str.127, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.2 := $store.i8($M.2, .str.125, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(12, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(13, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.125, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.70 := $store.i8($M.70, .str.67, 110);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(1, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(2, 1)), 97);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(3, 1)), 46);
    $M.70 := $store.i8($M.70, $add.ref($add.ref(.str.67, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.71 := $store.i8($M.71, .str.69, 102);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.69, $mul.ref(0, 4)), $mul.ref(1, 1)), 99);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.69, $mul.ref(0, 4)), $mul.ref(2, 1)), 46);
    $M.71 := $store.i8($M.71, $add.ref($add.ref(.str.69, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.72 := $store.i8($M.72, .str.71, 105);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.71, $mul.ref(0, 5)), $mul.ref(1, 1)), 113);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.71, $mul.ref(0, 5)), $mul.ref(2, 1)), 110);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.71, $mul.ref(0, 5)), $mul.ref(3, 1)), 46);
    $M.72 := $store.i8($M.72, $add.ref($add.ref(.str.71, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.73 := $store.i8($M.73, .str.66, 37);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(.str.66, $mul.ref(0, 3)), $mul.ref(1, 1)), 115);
    $M.73 := $store.i8($M.73, $add.ref($add.ref(.str.66, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.2 := $store.i8($M.2, .str.123, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(12, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(17, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.123, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.2 := $store.i8($M.2, .str.60, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(3, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(4, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(5, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(6, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.60, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.74 := $store.i8($M.74, .str.61, 84);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(1, 1)), 67);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(2, 1)), 77);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(3, 1)), 95);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(4, 1)), 86);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(5, 1)), 72);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(6, 1)), 79);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(7, 1)), 83);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(8, 1)), 84);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(9, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(10, 1)), 102);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(11, 1)), 97);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(12, 1)), 98);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(13, 1)), 114);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(14, 1)), 105);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(15, 1)), 99);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(16, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(17, 1)), 109);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(18, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(19, 1)), 100);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(20, 1)), 117);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(21, 1)), 108);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(22, 1)), 101);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(23, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(24, 1)), 37);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(25, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(26, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(27, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(28, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(29, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(30, 1)), 37);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(31, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(32, 1)), 47);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(33, 1)), 37);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(34, 1)), 115);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(35, 1)), 111);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(36, 1)), 110);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(37, 1)), 32);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(38, 1)), 51);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(39, 1)), 46);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(40, 1)), 55);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(41, 1)), 46);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(42, 1)), 51);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(43, 1)), 10);
    $M.74 := $store.i8($M.74, $add.ref($add.ref(.str.61, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.2 := $store.i8($M.2, .str.55, 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(1, 1)), 48);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(2, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(3, 1)), 49);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.55, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, .str.62, 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(1, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(2, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.75 := $store.i8($M.75, .str.64, 78);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(1, 1)), 85);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(2, 1)), 76);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(3, 1)), 76);
    $M.75 := $store.i8($M.75, $add.ref($add.ref(.str.64, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.2 := $store.i8($M.2, .str.82, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(11, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(12, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(15, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(17, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(18, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.82, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.76 := $store.i8($M.76, .str.63, 37);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(.str.63, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.2 := $store.i8($M.2, .str.116, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(11, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(13, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(14, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(15, 1)), 46);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(16, 1)), 119);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(17, 1)), 97);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(18, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(19, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(24, 1)), 107);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.116, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.2 := $store.i8($M.2, .str.117, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(10, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(11, 1)), 117);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(13, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(14, 1)), 120);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.117, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.77 := $store.i8($M.77, .str.22, 118);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(1, 1)), 104);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(2, 1)), 111);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(3, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(6, 1)), 97);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(7, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(8, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(9, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(10, 1)), 117);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(11, 1)), 115);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(12, 1)), 101);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(13, 1)), 100);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(14, 1)), 95);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.77 := $store.i8($M.77, $add.ref($add.ref(.str.22, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.78 := $store.i8($M.78, .str.45, 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(1, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(2, 1)), 118);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(3, 1)), 104);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(4, 1)), 111);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(5, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(6, 1)), 116);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(7, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(8, 1)), 97);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(9, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(10, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(12, 1)), 117);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(14, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(15, 1)), 100);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(16, 1)), 95);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(17, 1)), 110);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.45, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.2 := $store.i8($M.2, .str.130, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(10, 1)), 100);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(11, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(12, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(13, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(14, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(15, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(16, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(17, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(18, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(19, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(20, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(21, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(22, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(23, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(24, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(25, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(26, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(27, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(28, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.130, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.2 := $store.i8($M.2, .str.52, 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(1, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(4, 1)), 118);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(5, 1)), 104);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(6, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(7, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(8, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(9, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(11, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(12, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(13, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(14, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(15, 1)), 116);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(17, 1)), 114);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(20, 1)), 111);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(21, 1)), 110);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(22, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(23, 1)), 105);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(24, 1)), 103);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(25, 1)), 102);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(26, 1)), 115);
    $M.2 := $store.i8($M.2, $add.ref($add.ref(.str.52, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    call {:si_unique_call 1698} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 572150);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1699} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 573182);

procedure devirtbounce.1(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 574214);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 575246);

procedure devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 576278);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 577310);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 578342);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 579374);

procedure devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation devirtbounce.7(funcPtr: ref, arg: ref) returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(tcm_vhost_alloc_fabric_acl, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(tcm_vhost_get_fabric_wwn, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1700} $p2 := tcm_vhost_get_fabric_wwn($p1);
    $r := $p2;
    return;

  $bb3:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1701} $p4 := tcm_vhost_alloc_fabric_acl($p3);
    $r := $p4;
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 580406);

procedure devirtbounce.8(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $M.26, $CurrAddr, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation devirtbounce.8(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i25 := $eq.ref(tcm_vhost_drop_nodeacl, $p0);
    assume true;
    goto $bb14, $bb27;

  $bb27:
    assume !($i25 == 1);
    $i24 := $eq.ref(tcm_vhost_drop_tpg, $p0);
    assume true;
    goto $bb13, $bb26;

  $bb26:
    assume !($i24 == 1);
    $i23 := $eq.ref(tcm_vhost_drop_tport, $p0);
    assume true;
    goto $bb12, $bb25;

  $bb25:
    assume !($i23 == 1);
    $i22 := $eq.ref(tcm_vhost_set_default_node_attrs, $p0);
    assume true;
    goto $bb11, $bb24;

  $bb24:
    assume !($i22 == 1);
    $i21 := $eq.ref(tcm_vhost_close_session, $p0);
    assume true;
    goto $bb10, $bb23;

  $bb23:
    assume !($i21 == 1);
    $i20 := $eq.ref(tcm_vhost_release_cmd, $p0);
    assume true;
    goto $bb9, $bb22;

  $bb22:
    assume !($i20 == 1);
    $i19 := $eq.ref(vhost_attach_cgroups_work, $p0);
    assume true;
    goto $bb8, $bb21;

  $bb21:
    assume !($i19 == 1);
    $i18 := $eq.ref(tcm_vhost_submission_work, $p0);
    assume true;
    goto $bb7, $bb20;

  $bb20:
    assume !($i18 == 1);
    $i17 := $eq.ref(vhost_scsi_handle_kick, $p0);
    assume true;
    goto $bb6, $bb19;

  $bb19:
    assume !($i17 == 1);
    $i16 := $eq.ref(vhost_scsi_evt_handle_kick, $p0);
    assume true;
    goto $bb5, $bb18;

  $bb18:
    assume !($i16 == 1);
    $i15 := $eq.ref(vhost_scsi_ctl_handle_kick, $p0);
    assume true;
    goto $bb4, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(vhost_scsi_complete_cmd_work, $p0);
    assume true;
    goto $bb3, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(vhost_zerocopy_done_signal, $p0);
    assume true;
    goto $bb2, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume false;
    return;

  $bb2:
    assume $i13 == 1;
    call {:si_unique_call 1702} vhost_zerocopy_done_signal(arg);
    return;

  $bb3:
    assume $i14 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1703} vhost_scsi_complete_cmd_work($p1);
    return;

  $bb4:
    assume $i15 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1704} vhost_scsi_ctl_handle_kick($p2);
    return;

  $bb5:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1705} vhost_scsi_evt_handle_kick($p3);
    return;

  $bb6:
    assume $i17 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1706} vhost_scsi_handle_kick($p4);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i18 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1707} tcm_vhost_submission_work($p5);
    return;

  $bb8:
    assume $i19 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1708} vhost_attach_cgroups_work($p6);
    return;

  $bb9:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1709} tcm_vhost_release_cmd($p7);
    return;

  $bb10:
    assume $i21 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1710} tcm_vhost_close_session($p8);
    return;

  $bb11:
    assume $i22 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1711} tcm_vhost_set_default_node_attrs($p9);
    return;

  $bb12:
    assume $i23 == 1;
    $p10 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1712} tcm_vhost_drop_tport($p10);
    return;

  $bb13:
    assume $i24 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1713} tcm_vhost_drop_tpg($p11);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i25 == 1;
    $p12 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1714} tcm_vhost_drop_nodeacl($p12);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 581438);

procedure devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 582470);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 583502);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 584534);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 585566);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: i64) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 586598);

procedure devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref, arg4: ref, arg5: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 587630);

procedure devirtbounce.15(funcPtr: ref, arg: i16, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: i16, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1715} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 588662);

procedure devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 589694);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.27, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, assertsPassed, $M.16, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(tcm_vhost_port_link, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i14 == 1);
    $i13 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i13 == 1);
    $i12 := $eq.ref(vhost_scsi_release, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i12 == 1);
    $i11 := $eq.ref(vhost_scsi_open, $p0);
    assume true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1716} $i3 := vhost_scsi_open($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1717} $i6 := vhost_scsi_release($p4, $p5);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    $r := $i6;
    return;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i13 == 1;
    call {:si_unique_call 1718} $i7 := __builtinx_object_size();
    $r := $i7;
    return;

  $bb5:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1719} $i10 := tcm_vhost_port_link($p8, $p9);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    $r := $i10;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 590726);

procedure devirtbounce.18(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 591758);

procedure devirtbounce.19(funcPtr: ref, arg: ref);



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 592790);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u11: ref;

const $u12: ref;

const $u13: ref;

const $u14: ref;

const $u15: ref;

const $u2: ref;

const $u3: i64;

const $u4: ref;

const $u5: ref;

const $u6: ref;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.2, $M.29, $M.19, $M.27, $M.26, $M.16, $M.33, $M.32, $M.31, $M.25, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1720} __SMACK_static_init();
    call {:si_unique_call 1721} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.29, $M.19, $M.27, $M.26, $M.16, $M.33, $M.32, $M.31, $M.25, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vhost_scsi_clear_endpoint_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i16, in_$i17, in_$i18, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_196;

  $bb10:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i16;
    goto $bb10_dummy;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, out_$i16);
    goto corral_source_split_213;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.2, in_$p5);
    goto corral_source_split_212;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i8, 1);
    call {:si_unique_call 51} {:cexpr "index"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_211;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_203;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} out_$i13 := vhost_vq_access_ok(out_$p12);
    call {:si_unique_call 49} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_202;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 17152));
    goto corral_source_split_201;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_200;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_199;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_198;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i8 := vhost_scsi_clear_endpoint_loop_$bb4(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i16, out_$i17, out_$i18, out_$i8);
    return;

  exit:
    return;
}



procedure vhost_scsi_clear_endpoint_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i8: i32);



implementation vhost_dev_cleanup_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i6: i32, in_vslice_dummy_var_29: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i6: i32, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i6, out_vslice_dummy_var_29 := in_$p7, in_$p8, in_$i9, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p27, in_$p28, in_$p29, in_$i30, in_$p32, in_$p33, in_$p34, in_$i35, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$p50, in_$p52, in_$p53, in_$i54, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$p61, in_$i62, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$p78, in_$p79, in_$p80, in_$p81, in_$i82, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$p98, in_$p99, in_$i100, in_$i101, in_$p102, in_$p103, in_$i104, in_$p106, in_$p107, in_$p108, in_$p109, in_$i110, in_$p112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$p120, in_$p121, in_$p122, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i6, in_vslice_dummy_var_29;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_275;

  $bb30:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i126;
    goto $bb30_dummy;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i128 := $sgt.i32(out_$i127, out_$i126);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.2, in_$p3);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i126 := $add.i32(out_$i6, 1);
    call {:si_unique_call 67} {:cexpr "i"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vhost_vq_reset(in_$p0, out_$p125);
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(out_$p123, $mul.ref(out_$i124, 17152));
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i6);
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.2, out_$p122);
    goto corral_source_split_424;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_423;

  $bb28:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} fput(out_$p121);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$p121 := $load.ref($M.2, out_$p120);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(out_$p117, $mul.ref(out_$i118, 17152)), $mul.ref(216, 1));
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$i118 := $sext.i32.i64(out_$i6);
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.2, out_$p116);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_415;

  $bb27:
    assume out_$i115 == 1;
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i64(out_$i114, 0);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i114 := $p2i.ref.i64(out_$p113);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$p113 := $load.ref($M.2, out_$p112);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(out_$p109, $mul.ref(out_$i110, 17152)), $mul.ref(216, 1));
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i6);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.2, out_$p108);
    goto corral_source_split_406;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_405;

  $bb25:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} eventfd_ctx_put(out_$p107);
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$p107 := $load.ref($M.2, out_$p106);
    goto corral_source_split_402;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p103, $mul.ref(out_$i104, 17152)), $mul.ref(232, 1));
    goto corral_source_split_401;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto corral_source_split_400;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i6);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.2, out_$p102);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_397;

  $bb24:
    assume out_$i101 == 1;
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i64(out_$i100, 0);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$i100 := $p2i.ref.i64(out_$p99);
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    out_$p99 := $load.ref($M.2, out_$p98);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p95, $mul.ref(out_$i96, 17152)), $mul.ref(232, 1));
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i6);
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.2, out_$p94);
    goto corral_source_split_388;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_387;

  $bb22:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} fput(out_$p93);
    goto corral_source_split_385;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.2, out_$p92);
    goto corral_source_split_384;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p89, $mul.ref(out_$i90, 17152)), $mul.ref(208, 1));
    goto corral_source_split_383;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    out_$i90 := $sext.i32.i64(out_$i6);
    goto corral_source_split_381;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.2, out_$p88);
    goto corral_source_split_380;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_379;

  $bb21:
    assume out_$i87 == 1;
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, 0);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.2, out_$p84);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p81, $mul.ref(out_$i82, 17152)), $mul.ref(208, 1));
    goto corral_source_split_373;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i82 := $sext.i32.i64(out_$i6);
    goto corral_source_split_371;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.2, out_$p80);
    goto corral_source_split_370;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_369;

  $bb19:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} fput(out_$p79);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.2, out_$p78);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p75, $mul.ref(out_$i76, 17152)), $mul.ref(224, 1));
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i6);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.2, out_$p74);
    goto corral_source_split_362;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_361;

  $bb18:
    assume out_$i73 == 1;
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i64(out_$i72, 0);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$i72 := $p2i.ref.i64(out_$p71);
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.2, out_$p70);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 17152)), $mul.ref(224, 1));
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i6);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.2, out_$p66);
    goto corral_source_split_352;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_351;

  $bb16:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} eventfd_ctx_put(out_$p65);
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.2, out_$p64);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p61, $mul.ref(out_$i62, 17152)), $mul.ref(240, 1));
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i6);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.2, out_$p60);
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_343;

  $bb15:
    assume out_$i59 == 1;
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.2, out_$p56);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p53, $mul.ref(out_$i54, 17152)), $mul.ref(240, 1));
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i6);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.2, out_$p52);
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_vslice_dummy_var_29 := vhost_zerocopy_signal_used(out_$p50);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 17152));
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    out_$i49 := $sext.i32.i64(out_$i6);
    goto corral_source_split_330;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.2, out_$p47);
    goto corral_source_split_329;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_328;

  $bb13:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_39:
    goto corral_source_split_326;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vhost_ubuf_put_and_wait(out_$p46);
    goto SeqInstr_38;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.2, out_$p45);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p42, $mul.ref(out_$i43, 17152)), $mul.ref(17144, 1));
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$i43 := $sext.i32.i64(out_$i6);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.2, out_$p41);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_320;

  $bb12:
    assume out_$i40 == 1;
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$i39 := $p2i.ref.i64(out_$p38);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.2, out_$p37);
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p34, $mul.ref(out_$i35, 17152)), $mul.ref(17144, 1));
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i6);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.2, out_$p33);
    goto corral_source_split_311;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_310;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} vhost_poll_flush(out_$p32);
    goto corral_source_split_308;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(256, 1));
    goto corral_source_split_307;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    goto corral_source_split_306;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i6);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.2, out_$p28);
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vhost_poll_stop(out_$p27);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p24, $mul.ref(out_$i25, 17152)), $mul.ref(256, 1));
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i6);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.2, out_$p23);
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_297;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_296;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_294;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_293;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.2, out_$p19);
    goto corral_source_split_292;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 17152)), $mul.ref(464, 1));
    goto corral_source_split_291;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i6);
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.2, out_$p15);
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_287;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_283;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.2, out_$p11);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 17152)), $mul.ref(208, 1));
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.2, out_$p7);
    goto corral_source_split_278;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i14 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i6, out_vslice_dummy_var_29 := vhost_dev_cleanup_loop_$bb4(in_$p0, in_$p3, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p27, out_$p28, out_$p29, out_$i30, out_$p32, out_$p33, out_$p34, out_$i35, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$p50, out_$p52, out_$p53, out_$i54, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$p61, out_$i62, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p78, out_$p79, out_$p80, out_$p81, out_$i82, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$p98, out_$p99, out_$i100, out_$i101, out_$p102, out_$p103, out_$i104, out_$p106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$p120, out_$p121, out_$p122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i6, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure vhost_dev_cleanup_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$i72: i64, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$i82: i64, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$p98: ref, in_$p99: ref, in_$i100: i64, in_$i101: i1, in_$p102: ref, in_$p103: ref, in_$i104: i64, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i64, in_$p112: ref, in_$p113: ref, in_$i114: i64, in_$i115: i1, in_$p116: ref, in_$p117: ref, in_$i118: i64, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$p123: ref, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i32, in_$i128: i1, in_$i6: i32, in_vslice_dummy_var_29: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$i72: i64, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$i82: i64, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$p98: ref, out_$p99: ref, out_$i100: i64, out_$i101: i1, out_$p102: ref, out_$p103: ref, out_$i104: i64, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i64, out_$p112: ref, out_$p113: ref, out_$i114: i64, out_$i115: i1, out_$p116: ref, out_$p117: ref, out_$i118: i64, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$p123: ref, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i32, out_$i128: i1, out_$i6: i32, out_vslice_dummy_var_29: i32);
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.26, $M.16, $M.18, $M.17, $M.20, $M.21, $M.22, assertsPassed, $M.27;



implementation vhost_ubuf_put_and_wait_loop_$bb8(in_$p1: ref, in_$p19: ref, in_$p21: ref, in_$i24: i32, in_$i25: i1) returns (out_$i24: i32, out_$i25: i1)
{

  entry:
    out_$i24, out_$i25 := in_$i24, in_$i25;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb12_dummy;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} out_$i24 := atomic_read(in_$p21);
    call {:si_unique_call 103} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} prepare_to_wait(in_$p19, in_$p1, 2);
    goto corral_source_split_578;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} schedule();
    goto corral_source_split_577;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25 := vhost_ubuf_put_and_wait_loop_$bb8(in_$p1, in_$p19, in_$p21, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure vhost_ubuf_put_and_wait_loop_$bb8(in_$p1: ref, in_$p19: ref, in_$p21: ref, in_$i24: i32, in_$i25: i1) returns (out_$i24: i32, out_$i25: i1);



implementation vhost_zerocopy_signal_used_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i17: i32, in_$i18: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i8: i32, in_$i9: i32, in_$i39: i32, in_$i40: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i17: i32, out_$i18: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i8: i32, out_$i9: i32, out_$i39: i32, out_$i40: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i17, out_$i18, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$i9, out_$i39, out_$i40 := in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$p19, in_$p20, in_$i21, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$p30, in_$i31, in_$i32, in_$i17, in_$i18, in_$i35, in_$i36, in_$i37, in_$i38, in_$i8, in_$i9, in_$i39, in_$i40;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  $bb10:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i32, out_$i36;
    goto $bb10_dummy;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i36, out_$i32;
    assume true;
    goto $bb10;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i32(out_$i37, out_$i36);
    goto corral_source_split_624;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i32($M.2, in_$p3);
    goto corral_source_split_623;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    out_$i36 := $srem.i32(out_$i35, 1024);
    call {:si_unique_call 107} {:cexpr "i"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_622;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i9, 1);
    goto corral_source_split_621;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i8, 1);
    call {:si_unique_call 106} {:cexpr "j"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vhost_add_used_and_signal(out_$p25, in_$p0, out_$i31, 0);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.2, out_$p30);
    goto corral_source_split_615;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p27, $mul.ref(out_$i28, 8)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i9);
    goto corral_source_split_612;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.2, out_$p26);
    goto corral_source_split_611;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_610;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.2, out_$p24);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 17152)), $mul.ref(0, 1));
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p23, 0);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p20, $mul.ref(out_$i21, 8)), $mul.ref(4, 1));
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i9);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.2, out_$p19);
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_602;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    out_$i17, out_$i18 := out_$i9, out_$i8;
    assume true;
    goto $bb6;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i15, 1);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.2, out_$p14);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 8)), $mul.ref(4, 1));
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.2, out_$p10);
    goto corral_source_split_594;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i17, out_$i18, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$i9, out_$i39, out_$i40 := vhost_zerocopy_signal_used_loop_$bb4(in_$p0, in_$p3, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$p30, out_$i31, out_$i32, out_$i17, out_$i18, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$i9, out_$i39, out_$i40);
    return;

  exit:
    return;
}



procedure vhost_zerocopy_signal_used_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i17: i32, in_$i18: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i8: i32, in_$i9: i32, in_$i39: i32, in_$i40: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i17: i32, out_$i18: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i8: i32, out_$i9: i32, out_$i39: i32, out_$i40: i32);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_dev_free_iovecs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  $bb6:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i9;
    goto $bb6_dummy;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i11 := $sgt.i32(out_$i10, out_$i9);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.2, in_$p1);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i32(out_$i4, 1);
    call {:si_unique_call 109} {:cexpr "i"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} vhost_vq_free_iovecs(out_$p8);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 17152));
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.2, out_$p5);
    goto corral_source_split_701;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i4 := vhost_dev_free_iovecs_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i4);
    return;

  exit:
    return;
}



procedure vhost_dev_free_iovecs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i4: i32);
  modifies $M.2;



implementation log_write_loop_$bb8(in_$i8: i64, in_$i20: i32, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1) returns (out_$i20: i32, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1)
{

  entry:
    out_$i20, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31 := in_$i20, in_$i17, in_$i18, in_$i19, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i17, out_$i18, out_$i19 := out_$i30, out_$i24, out_$i23;
    goto $bb15_dummy;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i30;
    assume true;
    goto $bb15;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 0);
    goto corral_source_split_1256;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} out_$i30 := set_bit_to_user(out_$i28, out_$p29);
    call {:si_unique_call 249} {:cexpr "r"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    out_$p29 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_1254;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i27, 7);
    call {:si_unique_call 247} {:cexpr "bit"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1253;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i64.i32(out_$i24);
    goto corral_source_split_1252;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i64(out_$i25, in_$i8);
    call {:si_unique_call 246} {:cexpr "log"} boogie_si_record_i64(out_$i26);
    goto corral_source_split_1251;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$i25 := $udiv.i64(out_$i24, 8);
    goto corral_source_split_1250;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i64(out_$i18, 1);
    call {:si_unique_call 245} {:cexpr "write_page"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1249;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i23 := $sub.i64(out_$i19, 4096);
    call {:si_unique_call 244} {:cexpr "write_length"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_1248;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i17;
    assume true;
    goto $bb12;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $ule.i64(out_$i19, 4096);
    goto corral_source_split_1244;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i20, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31 := log_write_loop_$bb8(in_$i8, out_$i20, out_$i17, out_$i18, out_$i19, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure log_write_loop_$bb8(in_$i8: i64, in_$i20: i32, in_$i17: i32, in_$i18: i64, in_$i19: i64, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i64, in_$i27: i32, in_$i28: i32, in_$p29: ref, in_$i30: i32, in_$i31: i1) returns (out_$i20: i32, out_$i17: i32, out_$i18: i64, out_$i19: i64, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i64, out_$i27: i32, out_$i28: i32, out_$p29: ref, out_$i30: i32, out_$i31: i1);
  modifies $CurrAddr, $M.2;



implementation set_bit_to_user_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} set_bit_to_user_loop_$bb7();
    return;

  exit:
    return;
}



procedure set_bit_to_user_loop_$bb7();



implementation vhost_work_flush_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i5: i32, in_$p25: ref, in_$i29: i1, in_$i30: i8, in_$i31: i1) returns (out_$i29: i1, out_$i30: i8, out_$i31: i1)
{

  entry:
    out_$i29, out_$i30, out_$i31 := in_$i29, in_$i30, in_$i31;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb12_dummy;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(out_$i30);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i8(out_$i29);
    call {:si_unique_call 321} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} out_$i29 := vhost_work_seq_done(in_$p0, in_$p1, in_$i5);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} prepare_to_wait(in_$p25, in_$p2, 2);
    goto corral_source_split_1450;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} schedule();
    goto corral_source_split_1449;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31 := vhost_work_flush_loop_$bb8(in_$p0, in_$p1, in_$p2, in_$i5, in_$p25, out_$i29, out_$i30, out_$i31);
    return;

  exit:
    return;
}



procedure vhost_work_flush_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i5: i32, in_$p25: ref, in_$i29: i1, in_$i30: i8, in_$i31: i1) returns (out_$i29: i1, out_$i30: i8, out_$i31: i1);



implementation vhost_work_flush_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} vhost_work_flush_loop_$bb15();
    return;

  exit:
    return;
}



procedure vhost_work_flush_loop_$bb15();



implementation vq_memory_access_ok_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i9 := in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$p16, in_$p17, in_$p18, in_$i19, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1675;

  $bb19:
    assume out_$i39 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i37;
    goto $bb19_dummy;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    out_$i39 := $ult.i32(out_$i37, out_$i38);
    goto corral_source_split_1713;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.2, in_$p6);
    goto corral_source_split_1712;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i9, 1);
    call {:si_unique_call 394} {:cexpr "i"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_1711;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$i36 := $eq.i32(out_$i35, 0);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} out_$i35 := log_access_ok(in_$p0, out_$i32, out_$i34);
    call {:si_unique_call 393} {:cexpr "tmp"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.2, out_$p33);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 32)), $mul.ref(8, 1));
    goto corral_source_split_1704;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.2, out_$p31);
    goto corral_source_split_1703;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 32)), $mul.ref(0, 1));
    goto corral_source_split_1702;

  $bb12:
    assume out_$i30 == 1;
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(in_$i2, 0);
    goto corral_source_split_1699;

  $bb11:
    assume !(out_$i29 == 1);
    goto corral_source_split_1698;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} out_$i28 := ldv__builtin_expect(out_$i27, 1);
    call {:si_unique_call 391} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i24, 0);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$i24 := $extractvalue(out_$p23, 0);
    call {:si_unique_call 389} {:cexpr "flag"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1689;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.2, out_$p21);
    call {:si_unique_call 388} out_$p23 := devirtbounce.13(0, out_$p17, out_$i19, out_$i22);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(out_$p16, $mul.ref(0, 104)), $mul.ref(32, 1)), $mul.ref(0, 1));
    goto corral_source_split_1687;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.2, out_$p18);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 32)), $mul.ref(8, 1));
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$p17 := $i2p.i64.ref(out_$i15);
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} out_$p16 := current_thread_info();
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.2, out_$p14);
    call {:si_unique_call 386} {:cexpr "a"} boogie_si_record_i64(out_$i15);
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 32)), $mul.ref(16, 1));
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i9);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$p11 := $bitcast.ref.ref(out_$p10);
    goto corral_source_split_1678;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p1, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_1677;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i9 := vq_memory_access_ok_loop_$bb8(in_$p0, in_$p1, in_$i2, in_$p6, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$p16, out_$p17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i9);
    return;

  exit:
    return;
}



procedure vq_memory_access_ok_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i1, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i38: i32, in_$i39: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i1, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i38: i32, out_$i39: i1, out_$i9: i32);



implementation vhost_scsi_complete_cmd_work_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i24, in_$i17: i24, in_$i18: i24, in_$p19: ref, in_$p20: ref, in_$i21: i8, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p8: ref, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i24, out_$i17: i24, out_$i18: i24, out_$p19: ref, out_$p20: ref, out_$i21: i8, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p8: ref, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32)
{

  entry:
    out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p8, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52 := in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p32, in_$p33, in_$i34, in_$p35, in_$p36, in_$i37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$p67, in_$i68, in_$i69, in_$p8, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_50, in_vslice_dummy_var_51, in_vslice_dummy_var_52;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1765;

  $bb12:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$p8 := out_$p67;
    goto $bb12_dummy;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, 0);
    goto corral_source_split_1841;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} out_$p67 := vhost_scsi_get_cmd_from_completion(in_$p4);
    goto corral_source_split_1839;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vhost_scsi_free_cmd(out_$p8);
    goto corral_source_split_1838;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_vslice_dummy_var_52 := printk.ref(.str.89);
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    goto $bb11;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} out_vslice_dummy_var_51 := vhost_add_used(out_$p62, out_$i64, 0);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.2, out_$p63);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(out_$p61, $mul.ref(2, 17152));
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 51784), 52000)), $mul.ref(328, 1));
    goto corral_source_split_1829;

  $bb9:
    assume out_$i59 == 1;
    goto corral_source_split_1828;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} out_$i58 := ldv__builtin_expect(out_$i57, 1);
    call {:si_unique_call 420} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_1825;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i32(out_$i55);
    goto corral_source_split_1823;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i54, 0);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} out_$i54 := copy_to_user(out_$p52, out_$p53, 108);
    call {:si_unique_call 418} {:cexpr "ret"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p53 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1820;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_1819;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.2, out_$p50);
    goto corral_source_split_1818;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(40, 1));
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.2;
    out_cmdloc_dummy_var_9 := $M.2;
    call {:si_unique_call 416} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p47, out_$p49, out_$i45, $zext.i32.i64(4), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_10;
    goto corral_source_split_1816;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(out_$p48);
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(1136, 1));
    goto corral_source_split_1814;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(out_$p46);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 108)), $mul.ref(12, 1));
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i32.i64(out_$i44);
    call {:si_unique_call 415} {:cexpr "__len"} boogie_si_record_i64(out_$i45);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.2, out_$p43);
    goto corral_source_split_1810;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(0, 108)), $mul.ref(0, 1));
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p42, out_$i41);
    goto corral_source_split_1808;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p1, $mul.ref(0, 108)), $mul.ref(0, 1));
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i40);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i16($M.2, out_$p39);
    goto corral_source_split_1805;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $M.2 := $store.i8($M.2, out_$p38, out_$i37);
    out_$p39 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(4, 1));
    goto corral_source_split_1804;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p1, $mul.ref(0, 108)), $mul.ref(10, 1));
    goto corral_source_split_1803;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.2, out_$p36);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p35, out_$i34);
    out_$p36 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1801;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p1, $mul.ref(0, 108)), $mul.ref(4, 1));
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.2, out_$p33);
    goto corral_source_split_1799;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.2;
    call {:si_unique_call 414} out_cmdloc_dummy_var_7 := $memset.i8(out_cmdloc_dummy_var_6, out_$p32, 0, 108, $zext.i32.i64(4), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_7;
    out_$p33 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(40, 1));
    goto corral_source_split_1798;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p32 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_1797;

  $bb7:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} out_vslice_dummy_var_50 := __dynamic_pr_debug.ref.ref.ref.ref.i32.i32(in_$p2, .str.88, .str.87, out_$p8, out_$i27, out_$i30);
    goto corral_source_split_1795;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i29);
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i8($M.2, out_$p28);
    goto corral_source_split_1793;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.2, out_$p26);
    out_$p28 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(0, 1));
    goto corral_source_split_1792;

  $bb6:
    assume out_$i25 == 1;
    out_$p26 := $add.ref($add.ref($add.ref(out_$p8, $mul.ref(0, 1248)), $mul.ref(64, 1)), $mul.ref(40, 1));
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_1789;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 412} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_1788;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    out_$i23 := $and.i64(out_$i22, 1);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i64(out_$i21);
    goto corral_source_split_1786;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i8($M.13, out_$p20);
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1784;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p19, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p15, out_$i18);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$i18 := $or.i24(out_$i17, 445);
    goto corral_source_split_1780;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    out_$i17 := $and.i24(out_$i16, $sub.i24(0, 262144));
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i24($M.12, out_$p15);
    goto corral_source_split_1778;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p13, .str.88);
    goto corral_source_split_1775;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1774;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p12, .str.53);
    goto corral_source_split_1773;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1772;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p11, .str.87);
    goto corral_source_split_1771;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1770;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p10, .str.6);
    goto corral_source_split_1769;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1768;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10:
    assume !(out_$i59 == 1);
    goto corral_source_split_1836;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p8, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52 := vhost_scsi_complete_cmd_work_loop_$bb4(in_$p1, in_$p2, in_$p3, in_$p4, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p32, out_$p33, out_$i34, out_$p35, out_$p36, out_$i37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$p67, out_$i68, out_$i69, out_$p8, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_50, out_vslice_dummy_var_51, out_vslice_dummy_var_52);
    return;

  exit:
    return;
}



procedure vhost_scsi_complete_cmd_work_loop_$bb4(in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i24, in_$i17: i24, in_$i18: i24, in_$p19: ref, in_$p20: ref, in_$i21: i8, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i8, in_$i30: i32, in_$p32: ref, in_$p33: ref, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$p38: ref, in_$p39: ref, in_$i40: i16, in_$i41: i32, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i64, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$p67: ref, in_$i68: i64, in_$i69: i1, in_$p8: ref, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_50: i32, in_vslice_dummy_var_51: i32, in_vslice_dummy_var_52: i32) returns (out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i24, out_$i17: i24, out_$i18: i24, out_$p19: ref, out_$p20: ref, out_$i21: i8, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i8, out_$i30: i32, out_$p32: ref, out_$p33: ref, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$p38: ref, out_$p39: ref, out_$i40: i16, out_$i41: i32, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i64, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$p67: ref, out_$i68: i64, out_$i69: i1, out_$p8: ref, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_50: i32, out_vslice_dummy_var_51: i32, out_vslice_dummy_var_52: i32);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.2, $CurrAddr;



implementation vhost_dev_init_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i23: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i23: i32)
{

  entry:
    out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$p53, out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i23 := in_$p24, in_$p25, in_$i26, in_$p28, in_$p29, in_$p30, in_$i31, in_$p33, in_$p34, in_$p35, in_$i36, in_$p38, in_$p39, in_$p40, in_$i41, in_$p43, in_$p44, in_$p45, in_$i46, in_$p48, in_$p49, in_$p50, in_$i51, in_$p53, in_$p54, in_$p55, in_$i56, in_$p57, in_$p58, in_$p59, in_$i60, in_$p62, in_$p63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$p70, in_$p71, in_$p72, in_$i73, in_$p75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i23;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1970;

  $bb9:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i77;
    goto $bb9_dummy;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i79 := $sgt.i32(out_$i78, out_$i77);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.2, in_$p20);
    goto corral_source_split_2037;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i23, 1);
    call {:si_unique_call 449} {:cexpr "i"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_2036;

  $bb7:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} vhost_poll_init(out_$p70, out_$p76, 1, in_$p0);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.2, out_$p75);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i73, 17152)), $mul.ref(464, 1));
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    goto corral_source_split_2031;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i23);
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.2, out_$p71);
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p67, $mul.ref(out_$i68, 17152)), $mul.ref(256, 1));
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i23);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.2, out_$p66);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2023;

  $bb6:
    assume out_$i65 == 1;
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i64(out_$i64, 0);
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    out_$i64 := $p2i.ref.i64(out_$p63);
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.2, out_$p62);
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p59, $mul.ref(out_$i60, 17152)), $mul.ref(464, 1));
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i23);
    goto corral_source_split_2015;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.2, out_$p58);
    goto corral_source_split_2014;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} vhost_vq_reset(in_$p0, out_$p57);
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p55, $mul.ref(out_$i56, 17152));
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i23);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.2, out_$p54);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __mutex_init(out_$p53, .str.3, in_$p5);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p50, $mul.ref(out_$i51, 17152)), $mul.ref(8, 1));
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto corral_source_split_2005;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i32.i64(out_$i23);
    goto corral_source_split_2004;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.2, out_$p49);
    goto corral_source_split_2003;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_2002;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p48, in_$p0);
    goto corral_source_split_2001;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p45, $mul.ref(out_$i46, 17152)), $mul.ref(0, 1));
    goto corral_source_split_2000;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.2, out_$p44);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p43, $0.ref);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1992;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.2, out_$p39);
    goto corral_source_split_1991;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1990;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p38, $0.ref);
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_1988;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.2, out_$p34);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p33, $0.ref);
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p30, $mul.ref(out_$i31, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.2, out_$p29);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p28, $0.ref);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i23);
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.2, out_$p24);
    goto corral_source_split_1973;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_1972;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$p53, out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i23 := vhost_dev_init_loop_$bb4(in_$p0, in_$p5, in_$p20, out_$p24, out_$p25, out_$i26, out_$p28, out_$p29, out_$p30, out_$i31, out_$p33, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$p45, out_$i46, out_$p48, out_$p49, out_$p50, out_$i51, out_$p53, out_$p54, out_$p55, out_$i56, out_$p57, out_$p58, out_$p59, out_$i60, out_$p62, out_$p63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p72, out_$i73, out_$p75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i23);
    return;

  exit:
    return;
}



procedure vhost_dev_init_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p20: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$i65: i1, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i23: i32) returns (out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$i65: i1, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i23: i32);
  modifies $M.2, $CurrAddr;



implementation vhost_scsi_handle_vq_loop_$bb77(in_$p19: ref, in_$i75: i32, in_$i76: i32, in_$i259: i32, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i257: i32, in_$i258: i32, in_$i269: i32) returns (out_$i259: i32, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i257: i32, out_$i258: i32, out_$i269: i32)
{

  entry:
    out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269 := in_$i259, in_$i260, in_$p263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i257, in_$i258, in_$i269;
    goto $bb77, exit;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  $bb79:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i257, out_$i258 := out_$i267, out_$i266;
    goto $bb79_dummy;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i269 := out_$i266;
    assume true;
    goto $bb79;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i268 := $ult.i32(out_$i267, in_$i75);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i267 := $add.i32(out_$i257, 1);
    call {:si_unique_call 540} {:cexpr "i"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i265, out_$i258);
    call {:si_unique_call 539} {:cexpr "exp_data_len"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i265 := $trunc.i64.i32(out_$i264);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i64($M.2, out_$p263);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(out_$i260, 16)), $mul.ref(8, 1));
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i32.i64(out_$i259);
    goto corral_source_split_2466;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i259 := $add.i32(in_$i76, out_$i257);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb79_dummy:
    call {:si_unique_call 1} out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269 := vhost_scsi_handle_vq_loop_$bb77(in_$p19, in_$i75, in_$i76, out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269);
    return;

  exit:
    return;
}



procedure vhost_scsi_handle_vq_loop_$bb77(in_$p19: ref, in_$i75: i32, in_$i76: i32, in_$i259: i32, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i257: i32, in_$i258: i32, in_$i269: i32) returns (out_$i259: i32, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i257: i32, out_$i258: i32, out_$i269: i32);



implementation vhost_scsi_handle_vq_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$p11: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i24, in_$i43: i24, in_$i44: i24, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i1, in_$i65: i8, in_$i66: i1, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i121: i32, in_$i122: i64, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i24, in_$i206: i24, in_$i207: i24, in_$p208: ref, in_$p209: ref, in_$i210: i8, in_$i211: i64, in_$i212: i64, in_$i213: i64, in_$i214: i1, in_$p217: ref, in_$p218: ref, in_$p220: ref, in_$p223: ref, in_$p224: ref, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$i230: i1, in_$i255: i1, in_$i259: i32, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i257: i32, in_$i258: i32, in_$i269: i32, in_$i256: i32, in_$p270: ref, in_$p271: ref, in_$i272: i64, in_$i273: i1, in_$p274: ref, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i24, in_$i308: i24, in_$i309: i24, in_$p310: ref, in_$p311: ref, in_$i312: i8, in_$i313: i64, in_$i314: i64, in_$i315: i64, in_$i316: i1, in_$p318: ref, in_$i319: i32, in_$i320: i64, in_$p323: ref, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$i329: i1, in_$i362: i32, in_$i363: i64, in_$p366: ref, in_$p367: ref, in_$p369: ref, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$p375: ref, in_$p376: ref, in_$p377: ref, in_$p378: ref, in_$p379: ref, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i64, in_$i385: i64, in_$i386: i1, in_$p387: ref, in_$p416: ref, in_$i417: i8, in_$i418: i32, in_$i419: i32, in_$p421: ref, in_$i422: i8, in_$i423: i32, in_$i424: i32, in_$i425: i32, in_$p426: ref, in_$p427: ref, in_$p428: ref, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i24, in_$i434: i24, in_$i435: i24, in_$p436: ref, in_$p437: ref, in_$i438: i8, in_$i439: i64, in_$i440: i64, in_$i441: i64, in_$i442: i1, in_$p444: ref, in_$i445: i8, in_$i446: i32, in_$p447: ref, in_$i448: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$i453: i64, in_$p454: ref, in_$i455: i1, in_$i456: i32, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$i460: i64, in_$i461: i64, in_$i462: i1, in_$p487: ref, in_$p488: ref, in_$p489: ref, in_$p491: ref, in_$p492: ref, in_$p493: ref, in_$p495: ref, in_$p497: ref, in_$p499: ref, in_$p500: ref, in_$p501: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_78: i1) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i24, out_$i43: i24, out_$i44: i24, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i1, out_$i65: i8, out_$i66: i1, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i121: i32, out_$i122: i64, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i24, out_$i206: i24, out_$i207: i24, out_$p208: ref, out_$p209: ref, out_$i210: i8, out_$i211: i64, out_$i212: i64, out_$i213: i64, out_$i214: i1, out_$p217: ref, out_$p218: ref, out_$p220: ref, out_$p223: ref, out_$p224: ref, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$i230: i1, out_$i255: i1, out_$i259: i32, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i257: i32, out_$i258: i32, out_$i269: i32, out_$i256: i32, out_$p270: ref, out_$p271: ref, out_$i272: i64, out_$i273: i1, out_$p274: ref, out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i24, out_$i308: i24, out_$i309: i24, out_$p310: ref, out_$p311: ref, out_$i312: i8, out_$i313: i64, out_$i314: i64, out_$i315: i64, out_$i316: i1, out_$p318: ref, out_$i319: i32, out_$i320: i64, out_$p323: ref, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$i329: i1, out_$i362: i32, out_$i363: i64, out_$p366: ref, out_$p367: ref, out_$p369: ref, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$p375: ref, out_$p376: ref, out_$p377: ref, out_$p378: ref, out_$p379: ref, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i64, out_$i385: i64, out_$i386: i1, out_$p387: ref, out_$p416: ref, out_$i417: i8, out_$i418: i32, out_$i419: i32, out_$p421: ref, out_$i422: i8, out_$i423: i32, out_$i424: i32, out_$i425: i32, out_$p426: ref, out_$p427: ref, out_$p428: ref, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i24, out_$i434: i24, out_$i435: i24, out_$p436: ref, out_$p437: ref, out_$i438: i8, out_$i439: i64, out_$i440: i64, out_$i441: i64, out_$i442: i1, out_$p444: ref, out_$i445: i8, out_$i446: i32, out_$p447: ref, out_$i448: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$i453: i64, out_$p454: ref, out_$i455: i1, out_$i456: i32, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$i460: i64, out_$i461: i64, out_$i462: i1, out_$p487: ref, out_$p488: ref, out_$p489: ref, out_$p491: ref, out_$p492: ref, out_$p493: ref, out_$p495: ref, out_$p497: ref, out_$p499: ref, out_$p500: ref, out_$p501: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_78: i1)
{

  entry:
    out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i86, out_$i87, out_$i88, out_$i75, out_$i76, out_$i77, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p217, out_$p218, out_$p220, out_$p223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i255, out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269, out_$i256, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$p318, out_$i319, out_$i320, out_$p323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i362, out_$i363, out_$p366, out_$p367, out_$p369, out_$i370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p375, out_$p376, out_$p377, out_$p378, out_$p379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p416, out_$i417, out_$i418, out_$i419, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$p427, out_$p428, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i435, out_$p436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$p451, out_$p452, out_$i453, out_$p454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p487, out_$p488, out_$p489, out_$p491, out_$p492, out_$p493, out_$p495, out_$p497, out_$p499, out_$p500, out_$p501, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_58, out_vslice_dummy_var_65, out_vslice_dummy_var_70, out_vslice_dummy_var_75, out_vslice_dummy_var_78 := in_$p32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i86, in_$i87, in_$i88, in_$i75, in_$i76, in_$i77, in_$i121, in_$i122, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$p164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$p199, in_$p200, in_$p201, in_$p202, in_$p203, in_$p204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$p217, in_$p218, in_$p220, in_$p223, in_$p224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i255, in_$i259, in_$i260, in_$p263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i257, in_$i258, in_$i269, in_$i256, in_$p270, in_$p271, in_$i272, in_$i273, in_$p274, in_$p301, in_$p302, in_$p303, in_$p304, in_$p305, in_$p306, in_$i307, in_$i308, in_$i309, in_$p310, in_$p311, in_$i312, in_$i313, in_$i314, in_$i315, in_$i316, in_$p318, in_$i319, in_$i320, in_$p323, in_$i324, in_$i325, in_$i326, in_$i327, in_$i328, in_$i329, in_$i362, in_$i363, in_$p366, in_$p367, in_$p369, in_$i370, in_$p371, in_$p372, in_$p373, in_$p374, in_$p375, in_$p376, in_$p377, in_$p378, in_$p379, in_$p380, in_$i381, in_$i382, in_$i383, in_$i384, in_$i385, in_$i386, in_$p387, in_$p416, in_$i417, in_$i418, in_$i419, in_$p421, in_$i422, in_$i423, in_$i424, in_$i425, in_$p426, in_$p427, in_$p428, in_$p429, in_$p430, in_$p431, in_$p432, in_$i433, in_$i434, in_$i435, in_$p436, in_$p437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$p444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i450, in_$p451, in_$p452, in_$i453, in_$p454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$p487, in_$p488, in_$p489, in_$p491, in_$p492, in_$p493, in_$p495, in_$p497, in_$p499, in_$p500, in_$p501, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_vslice_dummy_var_58, in_vslice_dummy_var_65, in_vslice_dummy_var_70, in_vslice_dummy_var_75, in_vslice_dummy_var_78;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2154;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vhost_disable_notify(out_$p70, in_$p20);
    goto corral_source_split_2212;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2211;

  $bb15:
    assume out_$i69 == 1;
    goto corral_source_split_2210;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i64(out_$i68, 0);
    goto corral_source_split_2208;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} out_$i68 := ldv__builtin_expect(out_$i67, 0);
    call {:si_unique_call 507} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i68);
    goto corral_source_split_2207;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i1.i64(out_$i66);
    goto corral_source_split_2206;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i8.i1(out_$i65);
    goto corral_source_split_2205;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i1.i8(out_$i64);
    call {:si_unique_call 505} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i65);
    goto corral_source_split_2204;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} out_$i64 := vhost_enable_notify(out_$p63, in_$p20);
    goto corral_source_split_2203;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 52000)), $mul.ref(8, 1));
    goto corral_source_split_2202;

  $bb13:
    assume out_$i62 == 1;
    goto corral_source_split_2201;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i35, out_$i61);
    goto corral_source_split_2199;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.2, out_$p60);
    goto corral_source_split_2198;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(176, 1));
    goto corral_source_split_2197;

  $bb10:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_2190;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} out_$i58 := ldv__builtin_expect(out_$i57, 0);
    call {:si_unique_call 502} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_2189;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i56);
    goto corral_source_split_2188;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i1.i32(out_$i55);
    goto corral_source_split_2187;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i35, 0);
    goto corral_source_split_2186;

  $bb7:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_vslice_dummy_var_58 := __dynamic_pr_debug.ref.ref.i32.i32.i32(in_$p4, .str.97, out_$i35, out_$i52, out_$i53);
    goto corral_source_split_2184;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.18, in_$p3);
    goto corral_source_split_2183;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2182;

  $bb6:
    assume out_$i51 == 1;
    goto corral_source_split_2181;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i64(out_$i50, 0);
    goto corral_source_split_2179;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} out_$i50 := ldv__builtin_expect(out_$i49, 0);
    call {:si_unique_call 499} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i50);
    goto corral_source_split_2178;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    out_$i49 := $and.i64(out_$i48, 1);
    goto corral_source_split_2177;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i64(out_$i47);
    goto corral_source_split_2176;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.13, out_$p46);
    goto corral_source_split_2175;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2174;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p45, 0);
    goto corral_source_split_2173;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2172;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p41, out_$i44);
    goto corral_source_split_2171;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    out_$i44 := $or.i24(out_$i43, 654);
    goto corral_source_split_2170;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i24(out_$i42, $sub.i24(0, 262144));
    goto corral_source_split_2169;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i24($M.12, out_$p41);
    goto corral_source_split_2168;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_2167;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2166;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p39, .str.97);
    goto corral_source_split_2165;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2164;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p38, .str.53);
    goto corral_source_split_2163;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2162;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p37, .str.96);
    goto corral_source_split_2161;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2160;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p36, .str.6);
    goto corral_source_split_2159;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2158;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} out_$i35 := vhost_get_vq_desc(out_$p32, in_$p20, out_$p34, 1024, in_$p2, in_$p3, $0.ref, $0.ref);
    call {:si_unique_call 497} {:cexpr "head"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2157;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2156;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1));
    goto corral_source_split_2155;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} out_vslice_dummy_var_78 := queue_work(out_$p500, out_$p501);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p501 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1));
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    out_$p500 := $M.19;
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p499, tcm_vhost_submission_work);
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    out_$p499 := $add.ref($add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(24, 1));
    goto corral_source_split_2781;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} INIT_LIST_HEAD(out_$p497);
    goto corral_source_split_2780;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    out_$p497 := $add.ref($add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(8, 1));
    goto corral_source_split_2779;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} lockdep_init_map(out_$p495, .str.109, in_$p16, 0);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$p495 := $add.ref($add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(32, 1));
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_17 := $M.2;
    out_cmdloc_dummy_var_18 := $M.2;
    call {:si_unique_call 583} out_cmdloc_dummy_var_19 := $memcpy.i8(out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_$p492, out_$p493, 8, $zext.i32.i64(8), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_19;
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$p493 := $bitcast.ref.ref(in_$p17);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$p492 := $bitcast.ref.ref(out_$p491);
    goto corral_source_split_2774;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p489, 4195328);
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p489 := $add.ref($add.ref(in_$p17, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} __init_work(out_$p488, 0);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$p488 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1024, 1));
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p487, out_$i35);
    goto corral_source_split_2768;

  $bb129:
    assume {:verifier.code 0} true;
    out_$p487 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(0, 1));
    goto corral_source_split_2767;

  $bb119:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb121:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    out_$i462 := $ne.i64(out_$i461, 0);
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} out_$i461 := ldv__builtin_expect(out_$i460, 0);
    call {:si_unique_call 577} {:cexpr "tmp___24"} boogie_si_record_i64(out_$i461);
    goto corral_source_split_2727;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i460 := $sext.i32.i64(out_$i459);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i459 := $zext.i1.i32(out_$i458);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$i458 := $ne.i32(out_$i457, 0);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} out_$i457 := vhost_scsi_map_iov_to_sgl(out_$p270, out_$p454, out_$i75, out_$i456);
    call {:si_unique_call 575} {:cexpr "ret"} boogie_si_record_i32(out_$i457);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i456 := $zext.i1.i32(out_$i455);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i455 := $eq.i32(out_$i77, 1);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    out_$p454 := $add.ref(out_$p452, $mul.ref(out_$i453, 16));
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$i453 := $zext.i32.i64(out_$i76);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p452 := $bitcast.ref.ref(out_$p451);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p451 := $add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1));
    goto corral_source_split_2717;

  $bb118:
    assume out_$i450 == 1;
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i450 := $ne.i32(out_$i77, 3);
    goto corral_source_split_2714;

  $bb116:
    assume !(out_$i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} out_vslice_dummy_var_75 := __dynamic_pr_debug.ref.ref.i32.i32(in_$p14, .str.107, out_$i446, out_$i448);
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i448 := $load.i32($M.2, out_$p447);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(28, 1));
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$i446 := $zext.i8.i32(out_$i445);
    goto corral_source_split_2709;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    out_$i445 := $load.i8($M.2, out_$p444);
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$p444 := $add.ref($add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1104, 1)), $mul.ref(0, 1));
    goto corral_source_split_2707;

  $bb115:
    assume out_$i442 == 1;
    goto corral_source_split_2706;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    out_$i442 := $ne.i64(out_$i441, 0);
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} out_$i441 := ldv__builtin_expect(out_$i440, 0);
    call {:si_unique_call 572} {:cexpr "tmp___22"} boogie_si_record_i64(out_$i441);
    goto corral_source_split_2703;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i440 := $and.i64(out_$i439, 1);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i439 := $zext.i8.i64(out_$i438);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i438 := $load.i8($M.13, out_$p437);
    goto corral_source_split_2700;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    out_$p437 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2699;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p436, 0);
    goto corral_source_split_2698;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    out_$p436 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2697;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p432, out_$i435);
    goto corral_source_split_2696;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    out_$i435 := $or.i24(out_$i434, 759);
    goto corral_source_split_2695;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    out_$i434 := $and.i24(out_$i433, $sub.i24(0, 262144));
    goto corral_source_split_2694;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    out_$i433 := $load.i24($M.12, out_$p432);
    goto corral_source_split_2693;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    out_$p432 := $bitcast.ref.ref(out_$p431);
    goto corral_source_split_2692;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    out_$p431 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2691;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p430, .str.107);
    goto corral_source_split_2690;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    out_$p430 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2689;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p429, .str.53);
    goto corral_source_split_2688;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    out_$p429 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2687;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p428, .str.96);
    goto corral_source_split_2686;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    out_$p428 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2685;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p427, .str.6);
    goto corral_source_split_2684;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    out_$p427 := $add.ref($add.ref(in_$p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.2 := $store.i32($M.2, out_$p426, out_$i425);
    goto corral_source_split_2682;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(28, 1));
    goto corral_source_split_2681;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    out_$i425 := $and.i32(out_$i424, 16383);
    goto corral_source_split_2680;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    out_$i424 := $or.i32(out_$i419, out_$i423);
    goto corral_source_split_2679;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    out_$i423 := $zext.i8.i32(out_$i422);
    goto corral_source_split_2678;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i8($M.2, out_$p421);
    goto corral_source_split_2677;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(3, 1));
    goto corral_source_split_2676;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    out_$i419 := $shl.i32(out_$i418, 8);
    goto corral_source_split_2675;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    out_$i418 := $zext.i8.i32(out_$i417);
    goto corral_source_split_2674;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i8($M.2, out_$p416);
    goto corral_source_split_2673;

  $bb114:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_2672;

  $bb107:
    assume !(out_$i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p387 := out_$p270;
    assume true;
    goto $bb107;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$i386 := $ne.i64(out_$i385, 0);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} out_$i385 := ldv__builtin_expect(out_$i384, 0);
    call {:si_unique_call 564} {:cexpr "tmp___21"} boogie_si_record_i64(out_$i385);
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i384 := $sext.i32.i64(out_$i383);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i383 := $zext.i1.i32(out_$i382);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i382 := $ugt.i32(out_$i381, 32);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} out_$i381 := scsi_command_size(out_$p380);
    call {:si_unique_call 562} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i381);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$p380 := $bitcast.ref.ref(out_$p379);
    goto corral_source_split_2624;

  $bb105:
    assume {:verifier.code 0} true;
    out_$p379 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.2;
    out_cmdloc_dummy_var_15 := $M.2;
    call {:si_unique_call 560} out_cmdloc_dummy_var_16 := $memcpy.i8(out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_$p376, out_$p378, 32, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_16;
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.2;
    out_cmdloc_dummy_var_12 := $M.2;
    call {:si_unique_call 559} out_cmdloc_dummy_var_13 := $memcpy.i8(out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_$p372, out_$p374, 32, $zext.i32.i64(1), 0 == 1);
    $M.2 := out_cmdloc_dummy_var_13;
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$p374 := $bitcast.ref.ref(out_$p373);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$p373 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(19, 1));
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$p372 := $bitcast.ref.ref(out_$p371);
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2611;

  $bb103:
    assume out_$i370 == 1;
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$i370 := $ugt.i64(32, 63);
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p369, out_$p367);
    goto corral_source_split_2607;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    out_$p369 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(40, 1));
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p367 := $load.ref($M.2, out_$p366);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p366 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(out_$i363, 16)), $mul.ref(0, 1));
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$i363 := $zext.i32.i64(out_$i362);
    goto corral_source_split_2602;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i362 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2601;

  $bb95:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    out_$i329 := $ne.i64(out_$i328, 0);
    goto corral_source_split_2556;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} out_$i328 := ldv__builtin_expect(out_$i327, 0);
    call {:si_unique_call 554} {:cexpr "tmp___17"} boogie_si_record_i64(out_$i328);
    goto corral_source_split_2555;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    out_$i327 := $sext.i32.i64(out_$i326);
    goto corral_source_split_2554;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    out_$i326 := $zext.i1.i32(out_$i325);
    goto corral_source_split_2553;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    out_$i325 := $ne.i64(out_$i324, 108);
    goto corral_source_split_2552;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    out_$i324 := $load.i64($M.2, out_$p323);
    goto corral_source_split_2551;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(out_$i320, 16)), $mul.ref(8, 1));
    goto corral_source_split_2550;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    out_$i320 := $zext.i32.i64(out_$i319);
    goto corral_source_split_2549;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    out_$i319 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2548;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p318, in_$p0);
    goto corral_source_split_2547;

  $bb93:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(48, 1));
    goto corral_source_split_2546;

  $bb92:
    assume !(out_$i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} out_vslice_dummy_var_70 := __dynamic_pr_debug.ref.ref.ref.i32.i32(in_$p11, .str.104, out_$p270, out_$i256, out_$i77);
    goto corral_source_split_2544;

  $bb91:
    assume out_$i316 == 1;
    goto corral_source_split_2543;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    out_$i316 := $ne.i64(out_$i315, 0);
    goto corral_source_split_2541;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} out_$i315 := ldv__builtin_expect(out_$i314, 0);
    call {:si_unique_call 551} {:cexpr "tmp___15"} boogie_si_record_i64(out_$i315);
    goto corral_source_split_2540;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    out_$i314 := $and.i64(out_$i313, 1);
    goto corral_source_split_2539;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    out_$i313 := $zext.i8.i64(out_$i312);
    goto corral_source_split_2538;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    out_$i312 := $load.i8($M.13, out_$p311);
    goto corral_source_split_2537;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    out_$p311 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2536;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p310, 0);
    goto corral_source_split_2535;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2534;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p306, out_$i309);
    goto corral_source_split_2533;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    out_$i309 := $or.i24(out_$i308, 723);
    goto corral_source_split_2532;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    out_$i308 := $and.i24(out_$i307, $sub.i24(0, 262144));
    goto corral_source_split_2531;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i24($M.12, out_$p306);
    goto corral_source_split_2530;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    out_$p306 := $bitcast.ref.ref(out_$p305);
    goto corral_source_split_2529;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2528;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p304, .str.104);
    goto corral_source_split_2527;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2526;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p303, .str.53);
    goto corral_source_split_2525;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2524;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p302, .str.96);
    goto corral_source_split_2523;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2522;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p301, .str.6);
    goto corral_source_split_2521;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p301 := $add.ref($add.ref(in_$p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2520;

  $bb83:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    out_$p274 := out_$p270;
    assume true;
    goto $bb83;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    out_$i273 := $ne.i64(out_$i272, 0);
    goto corral_source_split_2479;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$i272 := IS_ERR(out_$p271);
    call {:si_unique_call 543} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i272);
    goto corral_source_split_2478;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    out_$p271 := $bitcast.ref.ref(out_$p270);
    goto corral_source_split_2477;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} out_$p270 := vhost_scsi_allocate_cmd(in_$p22, in_$p1, out_$i256, out_$i77);
    goto corral_source_split_2476;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb75:
    assume {:verifier.code 0} true;
    assume !(out_$i255 == 1);
    goto $bb76;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    out_$i256 := out_$i269;
    goto $bb76;

  $bb80:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2474;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    out_$i269 := out_$i266;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    out_$i268 := $ult.i32(out_$i267, out_$i75);
    goto corral_source_split_2472;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    out_$i267 := $add.i32(out_$i257, 1);
    call {:si_unique_call 540} {:cexpr "i"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_2471;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    out_$i266 := $add.i32(out_$i265, out_$i258);
    call {:si_unique_call 539} {:cexpr "exp_data_len"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_2470;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    out_$i265 := $trunc.i64.i32(out_$i264);
    goto corral_source_split_2469;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i64($M.2, out_$p263);
    goto corral_source_split_2468;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(out_$i260, 16)), $mul.ref(8, 1));
    goto corral_source_split_2467;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i32.i64(out_$i259);
    goto corral_source_split_2466;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i259 := $add.i32(out_$i76, out_$i257);
    goto corral_source_split_2465;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    call out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269 := vhost_scsi_handle_vq_loop_$bb77(in_$p19, out_$i75, out_$i76, out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269);
    goto $bb77_last;

  $bb77_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i257, out_$i258 := 0, 0;
    goto $bb77;

  $bb79:
    assume out_$i268 == 1;
    assume {:verifier.code 0} true;
    out_$i257, out_$i258 := out_$i267, out_$i266;
    assume false;
    return;

  $bb74:
    assume out_$i255 == 1;
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    out_$i256 := 0;
    assume true;
    goto $bb74, $bb75;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i255 := $ult.i32(0, out_$i75);
    goto corral_source_split_2459;

  $bb66:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    out_$i230 := $ne.i64(out_$i229, 0);
    goto corral_source_split_2420;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} out_$i229 := ldv__builtin_expect(out_$i228, 0);
    call {:si_unique_call 534} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i229);
    goto corral_source_split_2419;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    out_$i228 := $sext.i32.i64(out_$i227);
    goto corral_source_split_2418;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    out_$i227 := $zext.i1.i32(out_$i226);
    goto corral_source_split_2417;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    out_$i226 := $ne.i32(out_$i225, 0);
    goto corral_source_split_2416;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} out_$i225 := __copy_from_user(out_$p220, out_$p224, 51);
    call {:si_unique_call 532} {:cexpr "ret"} boogie_si_record_i32(out_$i225);
    goto corral_source_split_2415;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    out_$p224 := $load.ref($M.2, out_$p223);
    goto corral_source_split_2414;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2413;

  $bb64:
    assume {:verifier.code 0} true;
    out_$p220 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2412;

  $bb63:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} out_vslice_dummy_var_65 := __dynamic_pr_debug.ref.ref.ref.i64(in_$p8, .str.101, out_$p218, 51);
    goto corral_source_split_2410;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    out_$p218 := $load.ref($M.2, out_$p217);
    goto corral_source_split_2409;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  $bb62:
    assume out_$i214 == 1;
    goto corral_source_split_2407;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    out_$i214 := $ne.i64(out_$i213, 0);
    goto corral_source_split_2405;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out_$i213 := ldv__builtin_expect(out_$i212, 0);
    call {:si_unique_call 529} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i213);
    goto corral_source_split_2404;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    out_$i212 := $and.i64(out_$i211, 1);
    goto corral_source_split_2403;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    out_$i211 := $zext.i8.i64(out_$i210);
    goto corral_source_split_2402;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i8($M.13, out_$p209);
    goto corral_source_split_2401;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2400;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.13 := $store.i8($M.13, out_$p208, 0);
    goto corral_source_split_2399;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2398;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.12 := $store.i24($M.12, out_$p204, out_$i207);
    goto corral_source_split_2397;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    out_$i207 := $or.i24(out_$i206, 703);
    goto corral_source_split_2396;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    out_$i206 := $and.i24(out_$i205, $sub.i24(0, 262144));
    goto corral_source_split_2395;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i24($M.12, out_$p204);
    goto corral_source_split_2394;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    out_$p204 := $bitcast.ref.ref(out_$p203);
    goto corral_source_split_2393;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2392;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, out_$p202, .str.101);
    goto corral_source_split_2391;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2390;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, out_$p201, .str.53);
    goto corral_source_split_2389;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2388;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p200, .str.96);
    goto corral_source_split_2387;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2386;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p199, .str.6);
    goto corral_source_split_2385;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2384;

  $bb54:
    assume !(out_$i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    out_$i170 := $ne.i64(out_$i169, 0);
    goto corral_source_split_2343;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} out_$i169 := ldv__builtin_expect(out_$i168, 0);
    call {:si_unique_call 523} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i169);
    goto corral_source_split_2342;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    out_$i168 := $sext.i32.i64(out_$i167);
    goto corral_source_split_2341;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i1.i32(out_$i166);
    goto corral_source_split_2340;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    out_$i166 := $ne.i64(out_$i165, 51);
    goto corral_source_split_2339;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i64($M.2, out_$p164);
    goto corral_source_split_2338;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2337;

  $bb45:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, 0);
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} out_$i130 := ldv__builtin_expect(out_$i129, 0);
    call {:si_unique_call 510} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_2234;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i128);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i1.i32(out_$i127);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i64(out_$i126, 108);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.2, out_$p125);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref($add.ref($add.ref(in_$p19, $mul.ref(2, 17152)), $mul.ref(496, 1)), $mul.ref(out_$i122, 16)), $mul.ref(8, 1));
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i32.i64(out_$i121);
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2227;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2226;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := out_$i86, out_$i87, out_$i88;
    goto $bb25;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i75, out_$i76, out_$i77 := 0, 0, 3;
    goto $bb25;

  $bb23:
    assume out_$i74 == 1;
    goto corral_source_split_2224;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i73, 1);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.18, in_$p3);
    goto corral_source_split_2218;

  $bb20:
    assume out_$i72 == 1;
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i32(out_$i71, 1);
    goto corral_source_split_2215;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2214;

  $bb14:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i86, out_$i87, out_$i88 := out_$i94, 1, 1;
    goto $bb31;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    out_$i86, out_$i87, out_$i88 := out_$i85, out_$i83, 2;
    goto $bb31;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$i85 := $sub.i32(out_$i84, 1);
    call {:si_unique_call 512} {:cexpr "data_num"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_2248;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.18, in_$p3);
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    out_$i83 := $add.i32(out_$i82, 1);
    call {:si_unique_call 511} {:cexpr "data_first"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_2246;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2245;

  $bb29:
    assume out_$i81 == 1;
    goto corral_source_split_2244;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$i81 := $ugt.i32(out_$i80, 1);
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.18, in_$p3);
    goto corral_source_split_2238;

  $bb26:
    assume out_$i79 == 1;
    goto corral_source_split_2237;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 1);
    goto corral_source_split_2222;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2221;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb22;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb22;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, 1);
    call {:si_unique_call 515} {:cexpr "data_num"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2278;

  $bb35:
    assume out_$i92 == 1;
    goto corral_source_split_2277;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 1);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.18, in_$p3);
    goto corral_source_split_2251;

  $bb32:
    assume out_$i90 == 1;
    goto corral_source_split_2250;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$i90 := $ugt.i32(out_$i89, 1);
    goto corral_source_split_2242;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.17, in_$p2);
    goto corral_source_split_2241;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i79 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i81 == 1);
    goto $bb28;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$p378 := $bitcast.ref.ref(out_$p377);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$p377 := $add.ref($add.ref(in_$p1, $mul.ref(0, 56)), $mul.ref(19, 1));
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$p376 := $bitcast.ref.ref(out_$p375);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$p375 := $add.ref($add.ref(out_$p270, $mul.ref(0, 1248)), $mul.ref(1104, 1));
    goto corral_source_split_2618;

  $bb104:
    assume !(out_$i370 == 1);
    goto corral_source_split_2617;

  $bb17_dummy:
    call {:si_unique_call 1} out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i86, out_$i87, out_$i88, out_$i75, out_$i76, out_$i77, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p217, out_$p218, out_$p220, out_$p223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i255, out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269, out_$i256, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$p318, out_$i319, out_$i320, out_$p323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i362, out_$i363, out_$p366, out_$p367, out_$p369, out_$i370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p375, out_$p376, out_$p377, out_$p378, out_$p379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p416, out_$i417, out_$i418, out_$i419, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$p427, out_$p428, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i435, out_$p436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$p451, out_$p452, out_$i453, out_$p454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p487, out_$p488, out_$p489, out_$p491, out_$p492, out_$p493, out_$p495, out_$p497, out_$p499, out_$p500, out_$p501, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_58, out_vslice_dummy_var_65, out_vslice_dummy_var_70, out_vslice_dummy_var_75, out_vslice_dummy_var_78 := vhost_scsi_handle_vq_loop_$bb5(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p8, in_$p11, in_$p14, in_$p16, in_$p17, in_$p19, in_$p20, in_$p22, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i86, out_$i87, out_$i88, out_$i75, out_$i76, out_$i77, out_$i121, out_$i122, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$p164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$p199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$p217, out_$p218, out_$p220, out_$p223, out_$p224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i255, out_$i259, out_$i260, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i257, out_$i258, out_$i269, out_$i256, out_$p270, out_$p271, out_$i272, out_$i273, out_$p274, out_$p301, out_$p302, out_$p303, out_$p304, out_$p305, out_$p306, out_$i307, out_$i308, out_$i309, out_$p310, out_$p311, out_$i312, out_$i313, out_$i314, out_$i315, out_$i316, out_$p318, out_$i319, out_$i320, out_$p323, out_$i324, out_$i325, out_$i326, out_$i327, out_$i328, out_$i329, out_$i362, out_$i363, out_$p366, out_$p367, out_$p369, out_$i370, out_$p371, out_$p372, out_$p373, out_$p374, out_$p375, out_$p376, out_$p377, out_$p378, out_$p379, out_$p380, out_$i381, out_$i382, out_$i383, out_$i384, out_$i385, out_$i386, out_$p387, out_$p416, out_$i417, out_$i418, out_$i419, out_$p421, out_$i422, out_$i423, out_$i424, out_$i425, out_$p426, out_$p427, out_$p428, out_$p429, out_$p430, out_$p431, out_$p432, out_$i433, out_$i434, out_$i435, out_$p436, out_$p437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$p444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i450, out_$p451, out_$p452, out_$i453, out_$p454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p487, out_$p488, out_$p489, out_$p491, out_$p492, out_$p493, out_$p495, out_$p497, out_$p499, out_$p500, out_$p501, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_vslice_dummy_var_58, out_vslice_dummy_var_65, out_vslice_dummy_var_70, out_vslice_dummy_var_75, out_vslice_dummy_var_78);
    return;

  exit:
    return;
}



procedure vhost_scsi_handle_vq_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$p11: ref, in_$p14: ref, in_$p16: ref, in_$p17: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$i42: i24, in_$i43: i24, in_$i44: i24, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i64, in_$i49: i64, in_$i50: i64, in_$i51: i1, in_$i52: i32, in_$i53: i32, in_$i55: i1, in_$i56: i32, in_$i57: i64, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i64: i1, in_$i65: i8, in_$i66: i1, in_$i67: i64, in_$i68: i64, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i74: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i93: i32, in_$i94: i32, in_$i86: i32, in_$i87: i32, in_$i88: i32, in_$i75: i32, in_$i76: i32, in_$i77: i32, in_$i121: i32, in_$i122: i64, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$p164: ref, in_$i165: i64, in_$i166: i1, in_$i167: i32, in_$i168: i64, in_$i169: i64, in_$i170: i1, in_$p199: ref, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$i205: i24, in_$i206: i24, in_$i207: i24, in_$p208: ref, in_$p209: ref, in_$i210: i8, in_$i211: i64, in_$i212: i64, in_$i213: i64, in_$i214: i1, in_$p217: ref, in_$p218: ref, in_$p220: ref, in_$p223: ref, in_$p224: ref, in_$i225: i32, in_$i226: i1, in_$i227: i32, in_$i228: i64, in_$i229: i64, in_$i230: i1, in_$i255: i1, in_$i259: i32, in_$i260: i64, in_$p263: ref, in_$i264: i64, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i257: i32, in_$i258: i32, in_$i269: i32, in_$i256: i32, in_$p270: ref, in_$p271: ref, in_$i272: i64, in_$i273: i1, in_$p274: ref, in_$p301: ref, in_$p302: ref, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$i307: i24, in_$i308: i24, in_$i309: i24, in_$p310: ref, in_$p311: ref, in_$i312: i8, in_$i313: i64, in_$i314: i64, in_$i315: i64, in_$i316: i1, in_$p318: ref, in_$i319: i32, in_$i320: i64, in_$p323: ref, in_$i324: i64, in_$i325: i1, in_$i326: i32, in_$i327: i64, in_$i328: i64, in_$i329: i1, in_$i362: i32, in_$i363: i64, in_$p366: ref, in_$p367: ref, in_$p369: ref, in_$i370: i1, in_$p371: ref, in_$p372: ref, in_$p373: ref, in_$p374: ref, in_$p375: ref, in_$p376: ref, in_$p377: ref, in_$p378: ref, in_$p379: ref, in_$p380: ref, in_$i381: i32, in_$i382: i1, in_$i383: i32, in_$i384: i64, in_$i385: i64, in_$i386: i1, in_$p387: ref, in_$p416: ref, in_$i417: i8, in_$i418: i32, in_$i419: i32, in_$p421: ref, in_$i422: i8, in_$i423: i32, in_$i424: i32, in_$i425: i32, in_$p426: ref, in_$p427: ref, in_$p428: ref, in_$p429: ref, in_$p430: ref, in_$p431: ref, in_$p432: ref, in_$i433: i24, in_$i434: i24, in_$i435: i24, in_$p436: ref, in_$p437: ref, in_$i438: i8, in_$i439: i64, in_$i440: i64, in_$i441: i64, in_$i442: i1, in_$p444: ref, in_$i445: i8, in_$i446: i32, in_$p447: ref, in_$i448: i32, in_$i450: i1, in_$p451: ref, in_$p452: ref, in_$i453: i64, in_$p454: ref, in_$i455: i1, in_$i456: i32, in_$i457: i32, in_$i458: i1, in_$i459: i32, in_$i460: i64, in_$i461: i64, in_$i462: i1, in_$p487: ref, in_$p488: ref, in_$p489: ref, in_$p491: ref, in_$p492: ref, in_$p493: ref, in_$p495: ref, in_$p497: ref, in_$p499: ref, in_$p500: ref, in_$p501: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_vslice_dummy_var_58: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_78: i1) returns (out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$i42: i24, out_$i43: i24, out_$i44: i24, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i64, out_$i49: i64, out_$i50: i64, out_$i51: i1, out_$i52: i32, out_$i53: i32, out_$i55: i1, out_$i56: i32, out_$i57: i64, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i64: i1, out_$i65: i8, out_$i66: i1, out_$i67: i64, out_$i68: i64, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i74: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i93: i32, out_$i94: i32, out_$i86: i32, out_$i87: i32, out_$i88: i32, out_$i75: i32, out_$i76: i32, out_$i77: i32, out_$i121: i32, out_$i122: i64, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$p164: ref, out_$i165: i64, out_$i166: i1, out_$i167: i32, out_$i168: i64, out_$i169: i64, out_$i170: i1, out_$p199: ref, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$i205: i24, out_$i206: i24, out_$i207: i24, out_$p208: ref, out_$p209: ref, out_$i210: i8, out_$i211: i64, out_$i212: i64, out_$i213: i64, out_$i214: i1, out_$p217: ref, out_$p218: ref, out_$p220: ref, out_$p223: ref, out_$p224: ref, out_$i225: i32, out_$i226: i1, out_$i227: i32, out_$i228: i64, out_$i229: i64, out_$i230: i1, out_$i255: i1, out_$i259: i32, out_$i260: i64, out_$p263: ref, out_$i264: i64, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i257: i32, out_$i258: i32, out_$i269: i32, out_$i256: i32, out_$p270: ref, out_$p271: ref, out_$i272: i64, out_$i273: i1, out_$p274: ref, out_$p301: ref, out_$p302: ref, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$i307: i24, out_$i308: i24, out_$i309: i24, out_$p310: ref, out_$p311: ref, out_$i312: i8, out_$i313: i64, out_$i314: i64, out_$i315: i64, out_$i316: i1, out_$p318: ref, out_$i319: i32, out_$i320: i64, out_$p323: ref, out_$i324: i64, out_$i325: i1, out_$i326: i32, out_$i327: i64, out_$i328: i64, out_$i329: i1, out_$i362: i32, out_$i363: i64, out_$p366: ref, out_$p367: ref, out_$p369: ref, out_$i370: i1, out_$p371: ref, out_$p372: ref, out_$p373: ref, out_$p374: ref, out_$p375: ref, out_$p376: ref, out_$p377: ref, out_$p378: ref, out_$p379: ref, out_$p380: ref, out_$i381: i32, out_$i382: i1, out_$i383: i32, out_$i384: i64, out_$i385: i64, out_$i386: i1, out_$p387: ref, out_$p416: ref, out_$i417: i8, out_$i418: i32, out_$i419: i32, out_$p421: ref, out_$i422: i8, out_$i423: i32, out_$i424: i32, out_$i425: i32, out_$p426: ref, out_$p427: ref, out_$p428: ref, out_$p429: ref, out_$p430: ref, out_$p431: ref, out_$p432: ref, out_$i433: i24, out_$i434: i24, out_$i435: i24, out_$p436: ref, out_$p437: ref, out_$i438: i8, out_$i439: i64, out_$i440: i64, out_$i441: i64, out_$i442: i1, out_$p444: ref, out_$i445: i8, out_$i446: i32, out_$p447: ref, out_$i448: i32, out_$i450: i1, out_$p451: ref, out_$p452: ref, out_$i453: i64, out_$p454: ref, out_$i455: i1, out_$i456: i32, out_$i457: i32, out_$i458: i1, out_$i459: i32, out_$i460: i64, out_$i461: i64, out_$i462: i1, out_$p487: ref, out_$p488: ref, out_$p489: ref, out_$p491: ref, out_$p492: ref, out_$p493: ref, out_$p495: ref, out_$p497: ref, out_$p499: ref, out_$p500: ref, out_$p501: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_vslice_dummy_var_58: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_78: i1);
  modifies $M.2, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $CurrAddr, $M.18, $M.17, $M.20, $M.21, $M.22;



implementation vhost_get_vq_desc_loop_$bb119()
{

  entry:
    goto $bb119, exit;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb119_dummy;

  $bb119_dummy:
    call {:si_unique_call 1} vhost_get_vq_desc_loop_$bb119();
    return;

  exit:
    return;
}



procedure vhost_get_vq_desc_loop_$bb119();



implementation vhost_get_vq_desc_loop_$bb49(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p207: ref, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i64, in_$i227: i64, in_$i228: i1, in_$i229: i32, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i64, in_$i262: i64, in_$i263: i1, in_$i264: i32, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$i295: i64, in_$p296: ref, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i64, in_$i301: i64, in_$i302: i1, in_$i303: i32, in_$p332: ref, in_$i333: i16, in_$i334: i32, in_$i335: i32, in_$i336: i1, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i64, in_$i341: i64, in_$i342: i1, in_$i343: i32, in_$i344: i32, in_$p369: ref, in_$i370: i64, in_$p371: ref, in_$i372: i32, in_$i373: i64, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i64, in_$i380: i64, in_$i381: i1, in_$i382: i32, in_$i383: i32, in_$p408: ref, in_$i409: i16, in_$i410: i32, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$i416: i1, in_$i417: i32, in_$i418: i64, in_$i419: i64, in_$i420: i1, in_$p421: ref, in_$i422: i64, in_$i423: i32, in_$i424: i64, in_$p426: ref, in_$p427: ref, in_$i428: i32, in_$i429: i64, in_$i430: i32, in_$i431: i64, in_$p433: ref, in_$i434: i32, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i64, in_$i440: i64, in_$i441: i1, in_$i442: i32, in_$i467: i32, in_$i468: i32, in_$i469: i32, in_$i470: i1) returns (out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i64, out_$i227: i64, out_$i228: i1, out_$i229: i32, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i64, out_$i262: i64, out_$i263: i1, out_$i264: i32, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$i295: i64, out_$p296: ref, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i64, out_$i301: i64, out_$i302: i1, out_$i303: i32, out_$p332: ref, out_$i333: i16, out_$i334: i32, out_$i335: i32, out_$i336: i1, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i64, out_$i341: i64, out_$i342: i1, out_$i343: i32, out_$i344: i32, out_$p369: ref, out_$i370: i64, out_$p371: ref, out_$i372: i32, out_$i373: i64, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i64, out_$i380: i64, out_$i381: i1, out_$i382: i32, out_$i383: i32, out_$p408: ref, out_$i409: i16, out_$i410: i32, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$i416: i1, out_$i417: i32, out_$i418: i64, out_$i419: i64, out_$i420: i1, out_$p421: ref, out_$i422: i64, out_$i423: i32, out_$i424: i64, out_$p426: ref, out_$p427: ref, out_$i428: i32, out_$i429: i64, out_$i430: i32, out_$i431: i64, out_$p433: ref, out_$i434: i32, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i64, out_$i440: i64, out_$i441: i1, out_$i442: i32, out_$i467: i32, out_$i468: i32, out_$i469: i32, out_$i470: i1)
{

  entry:
    out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i215, out_$i216, out_$i217, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p291, out_$p292, out_$p293, out_$p294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$p332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p369, out_$i370, out_$p371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i467, out_$i468, out_$i469, out_$i470 := in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i215, in_$i216, in_$i217, in_$i256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$p291, in_$p292, in_$p293, in_$p294, in_$i295, in_$p296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$p332, in_$i333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i342, in_$i343, in_$i344, in_$p369, in_$i370, in_$p371, in_$i372, in_$i373, in_$p374, in_$i375, in_$i376, in_$i377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p408, in_$i409, in_$i410, in_$i411, in_$i412, in_$i413, in_$i414, in_$i415, in_$i416, in_$i417, in_$i418, in_$i419, in_$i420, in_$p421, in_$i422, in_$i423, in_$i424, in_$p426, in_$p427, in_$i428, in_$i429, in_$i430, in_$i431, in_$p433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i467, in_$i468, in_$i469, in_$i470;
    goto $bb49, exit;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb52:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    out_$i215, out_$i216, out_$i217 := out_$i222, out_$i219, out_$i218;
    goto $bb52_dummy;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i229 := out_$i218;
    assume true;
    goto $bb52;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i228 := $ne.i64(out_$i227, 0);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} out_$i227 := ldv__builtin_expect(out_$i226, 0);
    call {:si_unique_call 648} {:cexpr "tmp___12"} boogie_si_record_i64(out_$i227);
    goto corral_source_split_3153;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    out_$i226 := $sext.i32.i64(out_$i225);
    goto corral_source_split_3152;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    out_$i225 := $zext.i1.i32(out_$i224);
    goto corral_source_split_3151;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i224 := $ule.i32(out_$i223, out_$i218);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i223 := $load.i32($M.2, in_$p207);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i222 := $add.i32(out_$i220, out_$i221);
    call {:si_unique_call 646} {:cexpr "iov_count"} boogie_si_record_i32(out_$i222);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i32($M.17, in_$p4);
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i220 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3146;

  $bb50:
    assume out_$i470 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3145;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    out_$i218, out_$i219 := out_$i469, out_$i256;
    assume true;
    goto $bb50;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i470 := $ne.i32(out_$i469, $sub.i32(0, 1));
    goto corral_source_split_3327;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} out_$i469 := next_desc(in_$p8);
    call {:si_unique_call 675} {:cexpr "i"} boogie_si_record_i32(out_$i469);
    goto corral_source_split_3326;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i343, out_$i344 := out_$i217, out_$i337;
    assume true;
    goto $bb81;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i342 := $ne.i64(out_$i341, 0);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} out_$i341 := ldv__builtin_expect(out_$i340, 0);
    call {:si_unique_call 669} {:cexpr "tmp___18"} boogie_si_record_i64(out_$i341);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i340 := $sext.i32.i64(out_$i339);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$i339 := $zext.i1.i32(out_$i338);
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    out_$i338 := $slt.i32(out_$i337, 0);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} out_$i337 := get_indirect(in_$p0, in_$p1, in_$p2, in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8);
    call {:si_unique_call 667} {:cexpr "ret"} boogie_si_record_i32(out_$i337);
    goto corral_source_split_3282;

  $bb78:
    assume out_$i336 == 1;
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$i336 := $ne.i32(out_$i335, 0);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$i335 := $and.i32(out_$i334, 4);
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i334 := $zext.i16.i32(out_$i333);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i333 := $load.i16($M.2, out_$p332);
    goto corral_source_split_3276;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p332 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3275;

  $bb70:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i303 := out_$i217;
    assume true;
    goto $bb70;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$i302 := $ne.i64(out_$i301, 0);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} out_$i301 := ldv__builtin_expect(out_$i300, 0);
    call {:si_unique_call 661} {:cexpr "tmp___16"} boogie_si_record_i64(out_$i301);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i300 := $sext.i32.i64(out_$i299);
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i299 := $zext.i1.i32(out_$i298);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i298 := $ne.i32(out_$i297, 0);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} out_$i297 := __copy_from_user(out_$p291, out_$p296, 16);
    call {:si_unique_call 659} {:cexpr "ret"} boogie_si_record_i32(out_$i297);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$p296 := $add.ref(out_$p294, $mul.ref(out_$i295, 1));
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i295 := $zext.i32.i64(out_$i217);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$p294 := $bitcast.ref.ref(out_$p293);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$p293 := $load.ref($M.2, out_$p292);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref(in_$p1, $mul.ref(0, 17152)), $mul.ref(184, 1));
    goto corral_source_split_3222;

  $bb68:
    assume {:verifier.code 0} true;
    out_$p291 := $bitcast.ref.ref(in_$p8);
    goto corral_source_split_3221;

  $bb61:
    assume !(out_$i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i264 := out_$i217;
    assume true;
    goto $bb61;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$i263 := $ne.i64(out_$i262, 0);
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} out_$i262 := ldv__builtin_expect(out_$i261, 0);
    call {:si_unique_call 653} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i262);
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$i261 := $sext.i32.i64(out_$i260);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$i260 := $zext.i1.i32(out_$i259);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i259 := $ugt.i32(out_$i256, out_$i258);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i258 := $load.i32($M.2, out_$p257);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(in_$p1, $mul.ref(0, 17152)), $mul.ref(176, 1));
    goto corral_source_split_3174;

  $bb59:
    assume {:verifier.code 0} true;
    out_$i256 := $add.i32(out_$i216, 1);
    call {:si_unique_call 651} {:cexpr "found"} boogie_si_record_i32(out_$i256);
    goto corral_source_split_3173;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, in_$p4, out_$i468);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume !(out_$i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p7, out_$i435);
    goto corral_source_split_3423;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    out_$i435 := $add.i32(out_$i434, 1);
    goto corral_source_split_3422;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    out_$i434 := $load.i32($M.20, in_$p7);
    goto corral_source_split_3421;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, out_$p433, out_$i429);
    goto corral_source_split_3420;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    out_$p433 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i431, 16)), $mul.ref(8, 1));
    goto corral_source_split_3419;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    goto corral_source_split_3418;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    out_$i431 := $zext.i32.i64(out_$i430);
    goto corral_source_split_3417;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    out_$i430 := $load.i32($M.20, in_$p7);
    goto corral_source_split_3416;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    out_$i429 := $zext.i32.i64(out_$i428);
    goto corral_source_split_3415;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    out_$i428 := $load.i32($M.2, out_$p427);
    goto corral_source_split_3414;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    out_$p427 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3413;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, out_$p426, out_$i422);
    goto corral_source_split_3412;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    out_$p426 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i424, 16)), $mul.ref(0, 1));
    goto corral_source_split_3411;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    out_$i424 := $zext.i32.i64(out_$i423);
    goto corral_source_split_3409;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    out_$i423 := $load.i32($M.20, in_$p7);
    goto corral_source_split_3408;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i64($M.2, out_$p421);
    goto corral_source_split_3407;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    out_$p421 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3406;

  $bb102:
    assume out_$i420 == 1;
    goto corral_source_split_3405;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    out_$i420 := $ne.i64(out_$i419, 0);
    goto corral_source_split_3395;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} out_$i419 := ldv__builtin_expect(out_$i418, 0);
    call {:si_unique_call 685} {:cexpr "tmp___21"} boogie_si_record_i64(out_$i419);
    goto corral_source_split_3394;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    out_$i418 := $sext.i32.i64(out_$i417);
    goto corral_source_split_3393;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    out_$i417 := $zext.i1.i32(out_$i416);
    goto corral_source_split_3392;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    out_$i416 := $ne.i64(out_$i415, 0);
    goto corral_source_split_3391;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    out_$i415 := $p2i.ref.i64(in_$p6);
    goto corral_source_split_3390;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, in_$p5, out_$i414);
    goto corral_source_split_3389;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    out_$i414 := $add.i32(out_$i413, out_$i376);
    goto corral_source_split_3388;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    out_$i413 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3387;

  $bb100:
    assume out_$i412 == 1;
    goto corral_source_split_3386;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    out_$i412 := $ne.i32(out_$i411, 0);
    goto corral_source_split_3384;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    out_$i411 := $and.i32(out_$i410, 2);
    goto corral_source_split_3383;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    out_$i410 := $zext.i16.i32(out_$i409);
    goto corral_source_split_3382;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    out_$i409 := $load.i16($M.2, out_$p408);
    goto corral_source_split_3381;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p408 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3380;

  $bb92:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i382, out_$i383 := out_$i217, out_$i376;
    assume true;
    goto $bb92;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$i381 := $ne.i64(out_$i380, 0);
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$i380 := ldv__builtin_expect(out_$i379, 0);
    call {:si_unique_call 679} {:cexpr "tmp___20"} boogie_si_record_i64(out_$i380);
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$i379 := $sext.i32.i64(out_$i378);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i1.i32(out_$i377);
    goto corral_source_split_3338;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    out_$i377 := $slt.i32(out_$i376, 0);
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} out_$i376 := translate_desc(in_$p0, out_$i370, out_$i372, out_$p374, out_$i375);
    call {:si_unique_call 677} {:cexpr "ret"} boogie_si_record_i32(out_$i376);
    goto corral_source_split_3336;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i375 := $sub.i32(in_$i3, out_$i215);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$p374 := $add.ref(in_$p2, $mul.ref(out_$i373, 16));
    goto corral_source_split_3334;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    out_$i373 := $zext.i32.i64(out_$i215);
    goto corral_source_split_3333;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i372 := $load.i32($M.2, out_$p371);
    goto corral_source_split_3332;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$p371 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i370 := $load.i64($M.2, out_$p369);
    goto corral_source_split_3330;

  $bb90:
    assume {:verifier.code 0} true;
    out_$p369 := $add.ref($add.ref(in_$p8, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  $bb79:
    assume !(out_$i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    out_$i468 := $add.i32(out_$i467, out_$i376);
    goto corral_source_split_3463;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i467 := $load.i32($M.17, in_$p4);
    goto corral_source_split_3462;

  $bb107:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    out_$i442 := out_$i217;
    assume true;
    goto $bb107;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    out_$i441 := $ne.i64(out_$i440, 0);
    goto corral_source_split_3403;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} out_$i440 := ldv__builtin_expect(out_$i439, 0);
    call {:si_unique_call 687} {:cexpr "tmp___23"} boogie_si_record_i64(out_$i440);
    goto corral_source_split_3402;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    out_$i439 := $sext.i32.i64(out_$i438);
    goto corral_source_split_3401;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    out_$i438 := $zext.i1.i32(out_$i437);
    goto corral_source_split_3400;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    out_$i437 := $ne.i32(out_$i436, 0);
    goto corral_source_split_3399;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    out_$i436 := $load.i32($M.18, in_$p5);
    goto corral_source_split_3398;

  $bb101:
    assume !(out_$i412 == 1);
    goto corral_source_split_3397;

  $bb52_dummy:
    call {:si_unique_call 1} out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i215, out_$i216, out_$i217, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p291, out_$p292, out_$p293, out_$p294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$p332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p369, out_$i370, out_$p371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i467, out_$i468, out_$i469, out_$i470 := vhost_get_vq_desc_loop_$bb49(in_$p0, in_$p1, in_$p2, in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p207, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i215, out_$i216, out_$i217, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p291, out_$p292, out_$p293, out_$p294, out_$i295, out_$p296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$p332, out_$i333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i342, out_$i343, out_$i344, out_$p369, out_$i370, out_$p371, out_$i372, out_$i373, out_$p374, out_$i375, out_$i376, out_$i377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p408, out_$i409, out_$i410, out_$i411, out_$i412, out_$i413, out_$i414, out_$i415, out_$i416, out_$i417, out_$i418, out_$i419, out_$i420, out_$p421, out_$i422, out_$i423, out_$i424, out_$p426, out_$p427, out_$i428, out_$i429, out_$i430, out_$i431, out_$p433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i467, out_$i468, out_$i469, out_$i470);
    return;

  exit:
    return;
}



procedure vhost_get_vq_desc_loop_$bb49(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p207: ref, in_$i218: i32, in_$i219: i32, in_$i220: i32, in_$i221: i32, in_$i222: i32, in_$i223: i32, in_$i224: i1, in_$i225: i32, in_$i226: i64, in_$i227: i64, in_$i228: i1, in_$i229: i32, in_$i215: i32, in_$i216: i32, in_$i217: i32, in_$i256: i32, in_$p257: ref, in_$i258: i32, in_$i259: i1, in_$i260: i32, in_$i261: i64, in_$i262: i64, in_$i263: i1, in_$i264: i32, in_$p291: ref, in_$p292: ref, in_$p293: ref, in_$p294: ref, in_$i295: i64, in_$p296: ref, in_$i297: i32, in_$i298: i1, in_$i299: i32, in_$i300: i64, in_$i301: i64, in_$i302: i1, in_$i303: i32, in_$p332: ref, in_$i333: i16, in_$i334: i32, in_$i335: i32, in_$i336: i1, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i64, in_$i341: i64, in_$i342: i1, in_$i343: i32, in_$i344: i32, in_$p369: ref, in_$i370: i64, in_$p371: ref, in_$i372: i32, in_$i373: i64, in_$p374: ref, in_$i375: i32, in_$i376: i32, in_$i377: i1, in_$i378: i32, in_$i379: i64, in_$i380: i64, in_$i381: i1, in_$i382: i32, in_$i383: i32, in_$p408: ref, in_$i409: i16, in_$i410: i32, in_$i411: i32, in_$i412: i1, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$i416: i1, in_$i417: i32, in_$i418: i64, in_$i419: i64, in_$i420: i1, in_$p421: ref, in_$i422: i64, in_$i423: i32, in_$i424: i64, in_$p426: ref, in_$p427: ref, in_$i428: i32, in_$i429: i64, in_$i430: i32, in_$i431: i64, in_$p433: ref, in_$i434: i32, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i64, in_$i440: i64, in_$i441: i1, in_$i442: i32, in_$i467: i32, in_$i468: i32, in_$i469: i32, in_$i470: i1) returns (out_$i218: i32, out_$i219: i32, out_$i220: i32, out_$i221: i32, out_$i222: i32, out_$i223: i32, out_$i224: i1, out_$i225: i32, out_$i226: i64, out_$i227: i64, out_$i228: i1, out_$i229: i32, out_$i215: i32, out_$i216: i32, out_$i217: i32, out_$i256: i32, out_$p257: ref, out_$i258: i32, out_$i259: i1, out_$i260: i32, out_$i261: i64, out_$i262: i64, out_$i263: i1, out_$i264: i32, out_$p291: ref, out_$p292: ref, out_$p293: ref, out_$p294: ref, out_$i295: i64, out_$p296: ref, out_$i297: i32, out_$i298: i1, out_$i299: i32, out_$i300: i64, out_$i301: i64, out_$i302: i1, out_$i303: i32, out_$p332: ref, out_$i333: i16, out_$i334: i32, out_$i335: i32, out_$i336: i1, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i64, out_$i341: i64, out_$i342: i1, out_$i343: i32, out_$i344: i32, out_$p369: ref, out_$i370: i64, out_$p371: ref, out_$i372: i32, out_$i373: i64, out_$p374: ref, out_$i375: i32, out_$i376: i32, out_$i377: i1, out_$i378: i32, out_$i379: i64, out_$i380: i64, out_$i381: i1, out_$i382: i32, out_$i383: i32, out_$p408: ref, out_$i409: i16, out_$i410: i32, out_$i411: i32, out_$i412: i1, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$i416: i1, out_$i417: i32, out_$i418: i64, out_$i419: i64, out_$i420: i1, out_$p421: ref, out_$i422: i64, out_$i423: i32, out_$i424: i64, out_$p426: ref, out_$p427: ref, out_$i428: i32, out_$i429: i64, out_$i430: i32, out_$i431: i64, out_$p433: ref, out_$i434: i32, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i64, out_$i440: i64, out_$i441: i1, out_$i442: i32, out_$i467: i32, out_$i468: i32, out_$i469: i32, out_$i470: i1);
  modifies $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.18, $M.21, $M.22, $M.20, $M.17, $M.2, $CurrAddr;



implementation vhost_scsi_map_iov_to_sgl_loop_$bb29(in_$p0: ref, in_$p96: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i99: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i99: i32)
{

  entry:
    out_$p100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i99 := in_$p100, in_$p101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i99;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  $bb31:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := out_$i105;
    goto $bb31_dummy;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i107 := $ugt.i32(out_$i106, out_$i105);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.2, in_$p96);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i99, 1);
    call {:si_unique_call 754} {:cexpr "i"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} put_page(out_$p104);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} out_$p104 := sg_page(out_$p103);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref(out_$p101, $mul.ref(out_$i102, 40));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i32.i64(out_$i99);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.2, out_$p100);
    goto corral_source_split_3866;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_3865;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i99 := vhost_scsi_map_iov_to_sgl_loop_$bb29(in_$p0, in_$p96, out_$p100, out_$p101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i99);
    return;

  exit:
    return;
}



procedure vhost_scsi_map_iov_to_sgl_loop_$bb29(in_$p0: ref, in_$p96: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i1, in_$i99: i32) returns (out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i1, out_$i99: i32);



implementation vhost_scsi_map_iov_to_sgl_loop_$bb22(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$i92: i64, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32) returns (out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$i92: i64, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32)
{

  entry:
    out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p82, out_$i83, out_$i84 := in_$i85, in_$p87, in_$p88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i113, in_$p114, in_$i115, in_$i116, in_$i117, in_$p82, in_$i83, in_$i84;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  $bb35:
    assume out_$i117 == 1;
    assume {:verifier.code 0} true;
    out_$p82, out_$i83, out_$i84 := out_$p114, out_$i115, out_$i116;
    goto $bb35_dummy;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i117 := $ult.i32(out_$i116, in_$i2);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i84, 1);
    call {:si_unique_call 757} {:cexpr "i"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i115 := $sub.i32(out_$i83, out_$i93);
    call {:si_unique_call 756} {:cexpr "sgl_count"} boogie_si_record_i32(out_$i115);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(out_$p82, $mul.ref(out_$i113, 40));
    goto corral_source_split_3887;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i113 := $sext.i32.i64(out_$i93);
    goto corral_source_split_3886;

  $bb25:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i93;
    assume true;
    goto $bb25;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i93, 0);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} out_$i93 := vhost_scsi_map_to_sgl(out_$p82, out_$i83, out_$p88, out_$i92, in_$i3);
    call {:si_unique_call 751} {:cexpr "ret"} boogie_si_record_i32(out_$i93);
    goto corral_source_split_3853;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i64($M.2, out_$p91);
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i89, 16)), $mul.ref(8, 1));
    goto corral_source_split_3851;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i32.i64(out_$i84);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.2, out_$p87);
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i85, 16)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    goto corral_source_split_3846;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i32.i64(out_$i84);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p82, out_$i83, out_$i84 := vhost_scsi_map_iov_to_sgl_loop_$bb22(in_$p1, in_$i2, in_$i3, out_$i85, out_$p87, out_$p88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p82, out_$i83, out_$i84);
    return;

  exit:
    return;
}



procedure vhost_scsi_map_iov_to_sgl_loop_$bb22(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i85: i64, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$p91: ref, in_$i92: i64, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p82: ref, in_$i83: i32, in_$i84: i32) returns (out_$i85: i64, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$p91: ref, out_$i92: i64, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p82: ref, out_$i83: i32, out_$i84: i32);
  modifies $M.2, $CurrAddr;



implementation vhost_scsi_map_iov_to_sgl_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i8: i32, in_$i9: i32, in_$i34: i32) returns (out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i8: i32, out_$i9: i32, out_$i34: i32)
{

  entry:
    out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i8, out_$i9, out_$i34 := in_$i10, in_$p12, in_$p13, in_$i14, in_$i15, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i8, in_$i9, in_$i34;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  $bb6:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i31, out_$i32;
    goto $bb6_dummy;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i31;
    assume true;
    goto $bb6;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    out_$i33 := $ult.i32(out_$i32, in_$i2);
    goto corral_source_split_3764;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i9, 1);
    call {:si_unique_call 741} {:cexpr "i"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_3763;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i30, out_$i8);
    call {:si_unique_call 740} {:cexpr "sgl_count"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_3762;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i22, out_$i29);
    goto corral_source_split_3761;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i64.i32(out_$i28);
    goto corral_source_split_3760;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    out_$i28 := $lshr.i64(out_$i27, 12);
    goto corral_source_split_3759;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_3758;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.2, out_$p25);
    goto corral_source_split_3757;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i23, 16)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i9);
    goto corral_source_split_3754;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    out_$i22 := $trunc.i64.i32(out_$i21);
    goto corral_source_split_3753;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    out_$i21 := $lshr.i64(out_$i20, 12);
    goto corral_source_split_3752;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i64(out_$i19, 4095);
    goto corral_source_split_3751;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i64(out_$i14, out_$i18);
    goto corral_source_split_3750;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i64($M.2, out_$p17);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i15, 16)), $mul.ref(8, 1));
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i32.i64(out_$i9);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.2, out_$p12);
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i10, 16)), $mul.ref(0, 1));
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i8, out_$i9, out_$i34 := vhost_scsi_map_iov_to_sgl_loop_$bb4(in_$p1, in_$i2, out_$i10, out_$p12, out_$p13, out_$i14, out_$i15, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i8, out_$i9, out_$i34);
    return;

  exit:
    return;
}



procedure vhost_scsi_map_iov_to_sgl_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i10: i64, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i64, in_$p17: ref, in_$i18: i64, in_$i19: i64, in_$i20: i64, in_$i21: i64, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i8: i32, in_$i9: i32, in_$i34: i32) returns (out_$i10: i64, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i64, out_$p17: ref, out_$i18: i64, out_$i19: i64, out_$i20: i64, out_$i21: i64, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i8: i32, out_$i9: i32, out_$i34: i32);



implementation vhost_scsi_map_to_sgl_loop_$bb27(in_$i45: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p48: ref) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p48: ref)
{

  entry:
    out_$p49, out_$p50, out_$i51, out_$i52, out_$p48 := in_$p49, in_$p50, in_$i51, in_$i52, in_$p48;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4016;

  $bb29:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p48 := out_$p50;
    goto $bb29_dummy;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(in_$i45, out_$i51);
    goto corral_source_split_4022;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_4021;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(1, 40));
    goto corral_source_split_4020;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} put_page(out_$p49);
    goto corral_source_split_4019;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} out_$p49 := sg_page(out_$p48);
    goto corral_source_split_4018;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29_dummy:
    call {:si_unique_call 1} out_$p49, out_$p50, out_$i51, out_$i52, out_$p48 := vhost_scsi_map_to_sgl_loop_$bb27(in_$i45, out_$p49, out_$p50, out_$i51, out_$i52, out_$p48);
    return;

  exit:
    return;
}



procedure vhost_scsi_map_to_sgl_loop_$bb27(in_$i45: i64, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p48: ref) returns (out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p48: ref);



implementation vhost_scsi_map_to_sgl_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} vhost_scsi_map_to_sgl_loop_$bb15();
    return;

  exit:
    return;
}



procedure vhost_scsi_map_to_sgl_loop_$bb15();



implementation vhost_scsi_map_to_sgl_loop_$bb4(in_$i1: i32, in_$i4: i32, in_$p5: ref, in_$i12: i64, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i23: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i41: i32) returns (out_$i12: i64, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i23: i64, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i41: i32)
{

  entry:
    out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i8, out_$p9, out_$i10, out_$p11, out_$i41 := in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$p35, in_$i36, in_$i37, in_$p38, in_$i39, in_$i40, in_$i8, in_$p9, in_$i10, in_$p11, in_$i41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3961;

  $bb20:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9, out_$i10, out_$p11 := out_$i39, out_$p35, out_$i37, out_$p38;
    goto $bb20_dummy;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i39;
    assume true;
    goto $bb20;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i37, 0);
    goto corral_source_split_4008;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i8, 1);
    call {:si_unique_call 800} {:cexpr "npages"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_4007;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p11, $mul.ref(1, 40));
    goto corral_source_split_4006;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i64(out_$i10, out_$i36);
    call {:si_unique_call 799} {:cexpr "len"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_4005;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i18);
    goto corral_source_split_4004;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref(out_$p9, $mul.ref(out_$i34, 1));
    goto corral_source_split_4003;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i32.i64(out_$i18);
    goto corral_source_split_4002;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} sg_set_page(out_$p11, out_$p33, out_$i18, out_$i14);
    goto corral_source_split_4001;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.14, in_$p5);
    goto corral_source_split_4000;

  $bb18:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i8, out_$i24;
    assume true;
    goto $bb18;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i24, 0);
    goto corral_source_split_3996;

  $bb14:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_3992;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} out_$i28 := ldv__builtin_expect(out_$i27, 0);
    call {:si_unique_call 796} {:cexpr "tmp"} boogie_si_record_i64(out_$i28);
    goto corral_source_split_3991;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_3990;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i1.i32(out_$i25);
    goto corral_source_split_3989;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 0);
    goto corral_source_split_3988;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} out_$i24 := get_user_pages_fast(out_$i23, 1, in_$i4, in_$p5);
    call {:si_unique_call 794} {:cexpr "ret"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_3987;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3986;

  $bb10:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i8;
    assume true;
    goto $bb10;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i8, in_$i1);
    goto corral_source_split_3975;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3974;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i16;
    goto $bb8;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i15;
    goto $bb8;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_3970;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    out_$i17 := $ult.i32(out_$i15, out_$i16);
    goto corral_source_split_3968;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i64.i32(out_$i10);
    call {:si_unique_call 792} {:cexpr "__min2"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3967;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(4096, out_$i14);
    call {:si_unique_call 791} {:cexpr "__min1"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_3966;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 4095);
    call {:si_unique_call 790} {:cexpr "offset"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_3965;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    out_$i13 := $trunc.i64.i32(out_$i12);
    goto corral_source_split_3964;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_3963;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i17 == 1);
    goto corral_source_split_3972;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i8, out_$p9, out_$i10, out_$p11, out_$i41 := vhost_scsi_map_to_sgl_loop_$bb4(in_$i1, in_$i4, in_$p5, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$p35, out_$i36, out_$i37, out_$p38, out_$i39, out_$i40, out_$i8, out_$p9, out_$i10, out_$p11, out_$i41);
    return;

  exit:
    return;
}



procedure vhost_scsi_map_to_sgl_loop_$bb4(in_$i1: i32, in_$i4: i32, in_$p5: ref, in_$i12: i64, in_$i13: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i1, in_$i20: i32, in_$i23: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i64, in_$i28: i64, in_$i29: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i64, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$p38: ref, in_$i39: i32, in_$i40: i1, in_$i8: i32, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$i41: i32) returns (out_$i12: i64, out_$i13: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i1, out_$i20: i32, out_$i23: i64, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i64, out_$i28: i64, out_$i29: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i64, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$p38: ref, out_$i39: i32, out_$i40: i1, out_$i8: i32, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$i41: i32);
  modifies $M.2;



implementation sg_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb7();



implementation sg_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb3();



implementation sg_assign_page_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb11();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb11();



implementation sg_assign_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb7();



implementation sg_assign_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb3();



implementation get_indirect_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i92: i32, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i32, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i64, in_$i179: i64, in_$i180: i1, in_$i181: i32, in_$p211: ref, in_$i212: i16, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i64, in_$i218: i64, in_$i219: i1, in_$i220: i32, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i32, in_$i254: i64, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i64, in_$i261: i64, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$p289: ref, in_$i290: i16, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i64, in_$i297: i1, in_$i298: i32, in_$i299: i64, in_$i300: i64, in_$i301: i1, in_$p302: ref, in_$i303: i64, in_$i304: i32, in_$i305: i64, in_$p307: ref, in_$p308: ref, in_$i309: i32, in_$i310: i64, in_$i311: i32, in_$i312: i64, in_$p314: ref, in_$i315: i32, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i64, in_$i321: i64, in_$i322: i1, in_$i323: i32, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i1) returns (out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i32, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i64, out_$i179: i64, out_$i180: i1, out_$i181: i32, out_$p211: ref, out_$i212: i16, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i64, out_$i218: i64, out_$i219: i1, out_$i220: i32, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i32, out_$i254: i64, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i64, out_$i261: i64, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$p289: ref, out_$i290: i16, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i64, out_$i297: i1, out_$i298: i32, out_$i299: i64, out_$i300: i64, out_$i301: i1, out_$p302: ref, out_$i303: i64, out_$i304: i32, out_$i305: i64, out_$p307: ref, out_$p308: ref, out_$i309: i32, out_$i310: i64, out_$i311: i32, out_$i312: i64, out_$p314: ref, out_$i315: i32, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i64, out_$i321: i64, out_$i322: i1, out_$i323: i32, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i1)
{

  entry:
    out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i133, out_$i134, out_$i135, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i348, out_$i349, out_$i350, out_$i351 := in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i133, in_$i134, in_$i135, in_$p172, in_$p173, in_$p174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$p250, in_$i251, in_$p252, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$p289, in_$i290, in_$i291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$i305, in_$p307, in_$p308, in_$i309, in_$i310, in_$i311, in_$i312, in_$p314, in_$i315, in_$i316, in_$i317, in_$i318, in_$i319, in_$i320, in_$i321, in_$i322, in_$i323, in_$i348, in_$i349, in_$i350, in_$i351;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    out_$i133, out_$i134, out_$i135 := out_$i141, out_$i140, out_$i136;
    goto $bb35_dummy;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i147 := out_$i136;
    assume true;
    goto $bb35;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i146 := $ne.i64(out_$i145, 0);
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} out_$i145 := ldv__builtin_expect(out_$i144, 0);
    call {:si_unique_call 890} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i145);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$i144 := $sext.i32.i64(out_$i143);
    goto corral_source_split_4425;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i1.i32(out_$i142);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$i142 := $ugt.i32(out_$i141, in_$i92);
    goto corral_source_split_4423;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i137, 1);
    call {:si_unique_call 888} {:cexpr "found"} boogie_si_record_i32(out_$i141);
    goto corral_source_split_4422;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    out_$i140 := $add.i32(out_$i138, out_$i139);
    call {:si_unique_call 887} {:cexpr "iov_count"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_4421;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4420;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.18, in_$p5);
    goto corral_source_split_4419;

  $bb33:
    assume out_$i351 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4418;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i136, out_$i137 := out_$i350, out_$i133;
    assume true;
    goto $bb33;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$i351 := $ne.i32(out_$i350, $sub.i32(0, 1));
    goto corral_source_split_4645;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_$i350 := next_desc(in_$p9);
    call {:si_unique_call 920} {:cexpr "i"} boogie_si_record_i32(out_$i350);
    goto corral_source_split_4644;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, in_$p4, out_$i349);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb73:
    assume !(out_$i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $M.20 := $store.i32($M.20, in_$p7, out_$i316);
    goto corral_source_split_4642;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    out_$i316 := $add.i32(out_$i315, 1);
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$i315 := $load.i32($M.20, in_$p7);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $M.22 := $store.i64($M.22, out_$p314, out_$i310);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$p314 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i312, 16)), $mul.ref(8, 1));
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$i312 := $zext.i32.i64(out_$i311);
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i32($M.20, in_$p7);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$i310 := $zext.i32.i64(out_$i309);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i32($M.2, out_$p308);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$p308 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4632;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.21 := $store.i64($M.21, out_$p307, out_$i303);
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p6, $mul.ref(out_$i305, 16)), $mul.ref(0, 1));
    goto corral_source_split_4630;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i305 := $zext.i32.i64(out_$i304);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i304 := $load.i32($M.20, in_$p7);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i64($M.2, out_$p302);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  $bb72:
    assume out_$i301 == 1;
    goto corral_source_split_4624;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$i301 := $ne.i64(out_$i300, 0);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} out_$i300 := ldv__builtin_expect(out_$i299, 0);
    call {:si_unique_call 916} {:cexpr "tmp___14"} boogie_si_record_i64(out_$i300);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i299 := $sext.i32.i64(out_$i298);
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$i298 := $zext.i1.i32(out_$i297);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$i297 := $ne.i64(out_$i296, 0);
    goto corral_source_split_4610;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i296 := $p2i.ref.i64(in_$p6);
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $M.18 := $store.i32($M.18, in_$p5, out_$i295);
    goto corral_source_split_4608;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    out_$i295 := $add.i32(out_$i294, out_$i257);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i294 := $load.i32($M.18, in_$p5);
    goto corral_source_split_4606;

  $bb70:
    assume out_$i293 == 1;
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    out_$i293 := $ne.i32(out_$i292, 0);
    goto corral_source_split_4603;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$i292 := $and.i32(out_$i291, 2);
    goto corral_source_split_4602;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i291 := $zext.i16.i32(out_$i290);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i290 := $load.i16($M.2, out_$p289);
    goto corral_source_split_4600;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p289 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4599;

  $bb62:
    assume !(out_$i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i263, out_$i264 := out_$i135, out_$i257;
    assume true;
    goto $bb62;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i262 := $ne.i64(out_$i261, 0);
    goto corral_source_split_4560;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} out_$i261 := ldv__builtin_expect(out_$i260, 0);
    call {:si_unique_call 910} {:cexpr "tmp___13"} boogie_si_record_i64(out_$i261);
    goto corral_source_split_4559;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    out_$i260 := $sext.i32.i64(out_$i259);
    goto corral_source_split_4558;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    out_$i259 := $zext.i1.i32(out_$i258);
    goto corral_source_split_4557;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    out_$i258 := $slt.i32(out_$i257, 0);
    goto corral_source_split_4556;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} out_$i257 := translate_desc(in_$p0, out_$i251, out_$i253, out_$p255, out_$i256);
    call {:si_unique_call 908} {:cexpr "ret"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_4555;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    out_$i256 := $sub.i32(in_$i3, out_$i134);
    goto corral_source_split_4554;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref(in_$p2, $mul.ref(out_$i254, 16));
    goto corral_source_split_4553;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    out_$i254 := $zext.i32.i64(out_$i134);
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    out_$i253 := $load.i32($M.2, out_$p252);
    goto corral_source_split_4551;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$p252 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i64($M.2, out_$p250);
    goto corral_source_split_4549;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p250 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4548;

  $bb53:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i220 := out_$i135;
    assume true;
    goto $bb53;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    out_$i219 := $ne.i64(out_$i218, 0);
    goto corral_source_split_4504;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} out_$i218 := ldv__builtin_expect(out_$i217, 0);
    call {:si_unique_call 902} {:cexpr "tmp___11"} boogie_si_record_i64(out_$i218);
    goto corral_source_split_4503;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$i217 := $sext.i32.i64(out_$i216);
    goto corral_source_split_4502;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i1.i32(out_$i215);
    goto corral_source_split_4501;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i32(out_$i214, 0);
    goto corral_source_split_4500;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    out_$i214 := $and.i32(out_$i213, 4);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$i213 := $zext.i16.i32(out_$i212);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i16($M.2, out_$p211);
    goto corral_source_split_4497;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p9, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_4496;

  $bb44:
    assume !(out_$i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    out_$i181 := out_$i135;
    assume true;
    goto $bb44;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$i180 := $ne.i64(out_$i179, 0);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} out_$i179 := ldv__builtin_expect(out_$i178, 0);
    call {:si_unique_call 896} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i179);
    goto corral_source_split_4451;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    out_$i178 := $sext.i32.i64(out_$i177);
    goto corral_source_split_4450;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i1.i32(out_$i176);
    goto corral_source_split_4449;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i176 := $ne.i32(out_$i175, 0);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} out_$i175 := memcpy_fromiovec(out_$p172, out_$p174, 16);
    call {:si_unique_call 894} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_4447;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    out_$p174 := $load.ref($M.2, out_$p173);
    goto corral_source_split_4446;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p1, $mul.ref(0, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_4445;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p172 := $bitcast.ref.ref(in_$p9);
    goto corral_source_split_4444;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$i349 := $add.i32(out_$i348, out_$i257);
    goto corral_source_split_4685;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i348 := $load.i32($M.17, in_$p4);
    goto corral_source_split_4684;

  $bb77:
    assume !(out_$i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$i323 := out_$i135;
    assume true;
    goto $bb77;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    out_$i322 := $ne.i64(out_$i321, 0);
    goto corral_source_split_4622;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} out_$i321 := ldv__builtin_expect(out_$i320, 0);
    call {:si_unique_call 918} {:cexpr "tmp___16"} boogie_si_record_i64(out_$i321);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i320 := $sext.i32.i64(out_$i319);
    goto corral_source_split_4620;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$i319 := $zext.i1.i32(out_$i318);
    goto corral_source_split_4619;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i318 := $ne.i32(out_$i317, 0);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i317 := $load.i32($M.18, in_$p5);
    goto corral_source_split_4617;

  $bb71:
    assume !(out_$i293 == 1);
    goto corral_source_split_4616;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i133, out_$i134, out_$i135, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i348, out_$i349, out_$i350, out_$i351 := get_indirect_loop_$bb32(in_$p0, in_$p1, in_$p2, in_$i3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p9, in_$i92, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i133, out_$i134, out_$i135, out_$p172, out_$p173, out_$p174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$p250, out_$i251, out_$p252, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$p289, out_$i290, out_$i291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$i305, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$i312, out_$p314, out_$i315, out_$i316, out_$i317, out_$i318, out_$i319, out_$i320, out_$i321, out_$i322, out_$i323, out_$i348, out_$i349, out_$i350, out_$i351);
    return;

  exit:
    return;
}



procedure get_indirect_loop_$bb32(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i3: i32, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p9: ref, in_$i92: i32, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$i139: i32, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i64, in_$i145: i64, in_$i146: i1, in_$i147: i32, in_$i133: i32, in_$i134: i32, in_$i135: i32, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$i177: i32, in_$i178: i64, in_$i179: i64, in_$i180: i1, in_$i181: i32, in_$p211: ref, in_$i212: i16, in_$i213: i32, in_$i214: i32, in_$i215: i1, in_$i216: i32, in_$i217: i64, in_$i218: i64, in_$i219: i1, in_$i220: i32, in_$p250: ref, in_$i251: i64, in_$p252: ref, in_$i253: i32, in_$i254: i64, in_$p255: ref, in_$i256: i32, in_$i257: i32, in_$i258: i1, in_$i259: i32, in_$i260: i64, in_$i261: i64, in_$i262: i1, in_$i263: i32, in_$i264: i32, in_$p289: ref, in_$i290: i16, in_$i291: i32, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i32, in_$i296: i64, in_$i297: i1, in_$i298: i32, in_$i299: i64, in_$i300: i64, in_$i301: i1, in_$p302: ref, in_$i303: i64, in_$i304: i32, in_$i305: i64, in_$p307: ref, in_$p308: ref, in_$i309: i32, in_$i310: i64, in_$i311: i32, in_$i312: i64, in_$p314: ref, in_$i315: i32, in_$i316: i32, in_$i317: i32, in_$i318: i1, in_$i319: i32, in_$i320: i64, in_$i321: i64, in_$i322: i1, in_$i323: i32, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i1) returns (out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$i139: i32, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i64, out_$i145: i64, out_$i146: i1, out_$i147: i32, out_$i133: i32, out_$i134: i32, out_$i135: i32, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$i177: i32, out_$i178: i64, out_$i179: i64, out_$i180: i1, out_$i181: i32, out_$p211: ref, out_$i212: i16, out_$i213: i32, out_$i214: i32, out_$i215: i1, out_$i216: i32, out_$i217: i64, out_$i218: i64, out_$i219: i1, out_$i220: i32, out_$p250: ref, out_$i251: i64, out_$p252: ref, out_$i253: i32, out_$i254: i64, out_$p255: ref, out_$i256: i32, out_$i257: i32, out_$i258: i1, out_$i259: i32, out_$i260: i64, out_$i261: i64, out_$i262: i1, out_$i263: i32, out_$i264: i32, out_$p289: ref, out_$i290: i16, out_$i291: i32, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i32, out_$i296: i64, out_$i297: i1, out_$i298: i32, out_$i299: i64, out_$i300: i64, out_$i301: i1, out_$p302: ref, out_$i303: i64, out_$i304: i32, out_$i305: i64, out_$p307: ref, out_$p308: ref, out_$i309: i32, out_$i310: i64, out_$i311: i32, out_$i312: i64, out_$p314: ref, out_$i315: i32, out_$i316: i32, out_$i317: i32, out_$i318: i1, out_$i319: i32, out_$i320: i64, out_$i321: i64, out_$i322: i1, out_$i323: i32, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i1);
  modifies $M.17, $M.20, $M.22, $M.21, $M.18, $M.2;



implementation translate_desc_loop_$bb13(in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$i12: i64, in_$i18: i1, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$i31: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i32, in_$i55: i1, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i56: i32) returns (out_$i18: i1, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$i31: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i32, out_$i55: i1, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i56: i32)
{

  entry:
    out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i15, out_$i16, out_$i17, out_$i56 := in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i15, in_$i16, in_$i17, in_$i56;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4709;

  $bb25:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17 := out_$i54, out_$i53, out_$i52;
    goto $bb25_dummy;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    assume true;
    goto $bb25;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$i55 := $ugt.i64(in_$i12, out_$i52);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$i54 := $add.i32(out_$i15, 1);
    call {:si_unique_call 944} {:cexpr "ret"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i64(out_$i16, out_$i38);
    call {:si_unique_call 943} {:cexpr "addr"} boogie_si_record_i64(out_$i53);
    goto corral_source_split_4761;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i64(out_$i17, out_$i38);
    call {:si_unique_call 942} {:cexpr "s"} boogie_si_record_i64(out_$i52);
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p51, out_$p50);
    goto corral_source_split_4759;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p3, $mul.ref(out_$i31, 16)), $mul.ref(0, 1));
    goto corral_source_split_4758;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    out_$p50 := $i2p.i64.ref(out_$i49);
    goto corral_source_split_4757;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i64(out_$i46, out_$i48);
    goto corral_source_split_4756;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.2, out_$p47);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i64(out_$i45, out_$i16);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i64($M.2, out_$p44);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_4751;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.2 := $store.i64($M.2, out_$p43, out_$i42);
    goto corral_source_split_4750;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p3, $mul.ref(out_$i31, 16)), $mul.ref(8, 1));
    goto corral_source_split_4749;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i38;
    goto $bb24;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    goto $bb24;

  $bb22:
    assume out_$i41 == 1;
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i41 := $ult.i64(out_$i40, out_$i38);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i64(out_$i39, out_$i17);
    call {:si_unique_call 941} {:cexpr "_min1"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i32.i64(in_$i2);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i64(out_$i35, out_$i37);
    call {:si_unique_call 940} {:cexpr "size"} boogie_si_record_i64(out_$i38);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i64($M.2, out_$p36);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_4737;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    out_$i35 := $sub.i64(out_$i34, out_$i16);
    goto corral_source_split_4736;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i64($M.2, out_$p33);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p24, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    goto corral_source_split_4733;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i15);
    goto corral_source_split_4732;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_4728;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} out_$i29 := ldv__builtin_expect(out_$i28, 0);
    call {:si_unique_call 939} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i29);
    goto corral_source_split_4727;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i1.i32(out_$i26);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i64(out_$i25, 0);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$i25 := $p2i.ref.i64(out_$p24);
    goto corral_source_split_4723;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} out_$p24 := find_region(in_$p6, out_$i16, in_$i2);
    goto corral_source_split_4722;

  $bb16:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_4715;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} out_$i21 := ldv__builtin_expect(out_$i20, 0);
    call {:si_unique_call 935} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i21);
    goto corral_source_split_4714;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    out_$i20 := $sext.i32.i64(out_$i19);
    goto corral_source_split_4713;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i1.i32(out_$i18);
    goto corral_source_split_4712;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i18 := $sge.i32(out_$i15, in_$i4);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb23:
    assume !(out_$i41 == 1);
    goto corral_source_split_4746;

  $bb25_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i15, out_$i16, out_$i17, out_$i56 := translate_desc_loop_$bb13(in_$i2, in_$p3, in_$i4, in_$p6, in_$i12, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i15, out_$i16, out_$i17, out_$i56);
    return;

  exit:
    return;
}



procedure translate_desc_loop_$bb13(in_$i2: i32, in_$p3: ref, in_$i4: i32, in_$p6: ref, in_$i12: i64, in_$i18: i1, in_$i19: i32, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$p24: ref, in_$i25: i64, in_$i26: i1, in_$i27: i32, in_$i28: i64, in_$i29: i64, in_$i30: i1, in_$i31: i64, in_$p33: ref, in_$i34: i64, in_$i35: i64, in_$p36: ref, in_$i37: i64, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i64, in_$p47: ref, in_$i48: i64, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i64, in_$i54: i32, in_$i55: i1, in_$i15: i32, in_$i16: i64, in_$i17: i64, in_$i56: i32) returns (out_$i18: i1, out_$i19: i32, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$p24: ref, out_$i25: i64, out_$i26: i1, out_$i27: i32, out_$i28: i64, out_$i29: i64, out_$i30: i1, out_$i31: i64, out_$p33: ref, out_$i34: i64, out_$i35: i64, out_$p36: ref, out_$i37: i64, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i64, out_$p47: ref, out_$i48: i64, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i64, out_$i54: i32, out_$i55: i1, out_$i15: i32, out_$i16: i64, out_$i17: i64, out_$i56: i32);
  modifies $M.2;



implementation find_region_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$i25, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$p21, in_$i23, in_$i24, in_$i25, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4831;

  $bb13:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i23;
    goto $bb13_dummy;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i23, out_$i24);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.2, in_$p3);
    goto corral_source_split_4855;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i6, 1);
    call {:si_unique_call 963} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_4854;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb8;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    out_$p21 := out_$p10;
    assume true;
    goto $bb10;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    out_$i20 := $uge.i64(out_$i19, in_$i1);
    goto corral_source_split_4848;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i64(out_$i18, 1);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i64(out_$i15, out_$i17);
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i64($M.2, out_$p16);
    goto corral_source_split_4845;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 32)), $mul.ref(8, 1));
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.2, out_$p14);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 32)), $mul.ref(0, 1));
    goto corral_source_split_4842;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_4841;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i13 := $ule.i64(out_$i12, in_$i1);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i64($M.2, out_$p11);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 32)), $mul.ref(0, 1));
    goto corral_source_split_4837;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref(out_$p8, $mul.ref(out_$i9, 32));
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_4835;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    out_$p8 := $bitcast.ref.ref(out_$p7);
    goto corral_source_split_4834;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 8)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$i25, out_$i6 := find_region_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$p7, out_$p8, out_$i9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$p21, out_$i23, out_$i24, out_$i25, out_$i6);
    return;

  exit:
    return;
}



procedure find_region_loop_$bb4(in_$p0: ref, in_$i1: i64, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$i15: i64, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$i15: i64, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i6: i32);



implementation vhost_scsi_free_cmd_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$i8;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;

  $bb8:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i14;
    goto $bb8_dummy;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i16 := $ugt.i32(out_$i15, out_$i14);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.2, in_$p5);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, 1);
    call {:si_unique_call 994} {:cexpr "i"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} put_page(out_$p13);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_$p13 := sg_page(out_$p12);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 40));
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i11 := $zext.i32.i64(out_$i8);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.2, out_$p9);
    goto corral_source_split_4920;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1248)), $mul.ref(32, 1));
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb8_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i8 := vhost_scsi_free_cmd_loop_$bb6(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$i8);
    return;

  exit:
    return;
}



procedure vhost_scsi_free_cmd_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$i8: i32);



implementation vhost_scsi_set_endpoint_loop_$bb16(in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p79: ref, in_$p36: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p29: ref) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p79: ref, out_$p36: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p29: ref)
{

  entry:
    out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p79, out_$p36, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p29 := in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p35, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$i50, in_$i51, in_$p52, in_$i53, in_$i54, in_$i55, in_$p56, in_$p79, in_$p36, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p29;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5079;

  $bb34:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$p29 := out_$p84;
    goto $bb34_dummy;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i64(out_$i86, $p2i.ref.i64(tcm_vhost_list));
    goto corral_source_split_5099;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    out_$i86 := $p2i.ref.i64(out_$p85);
    goto corral_source_split_5098;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p83, $mul.ref($sub.ref(0, 16), 2192)), $mul.ref(16, 1));
    goto corral_source_split_5097;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p83, $mul.ref($sub.ref(0, 16), 2192));
    goto corral_source_split_5096;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(out_$p82);
    goto corral_source_split_5095;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.2, out_$p81);
    goto corral_source_split_5094;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 2192)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_5093;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5092;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p29;
    goto $bb20;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p29;
    goto $bb20;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p29;
    goto $bb20;

  SeqInstr_99:
    goto corral_source_split_5090;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_mutex_unlock_27(out_$p35);
    goto SeqInstr_98;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5089;

  $bb18:
    assume out_$i34 == 1;
    goto corral_source_split_5088;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    out_$i34 := $eq.i64(out_$i33, 0);
    goto corral_source_split_5086;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_5085;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.2, out_$p31);
    goto corral_source_split_5084;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(200, 1));
    goto corral_source_split_5083;

  SeqInstr_96:
    goto corral_source_split_5082;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} ldv_mutex_lock_26(out_$p30);
    goto SeqInstr_95;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5081;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_102:
    goto corral_source_split_5107;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} ldv_mutex_unlock_28(out_$p40);
    goto SeqInstr_101;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5106;

  $bb22:
    assume out_$i39 == 1;
    goto corral_source_split_5105;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    out_$i39 := $ne.i32(out_$i38, 0);
    goto corral_source_split_5103;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.2, out_$p37);
    goto corral_source_split_5102;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(8, 1));
    goto corral_source_split_5101;

  $bb19:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_126:
    goto corral_source_split_5162;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} ldv_mutex_unlock_36(out_$p79);
    goto SeqInstr_125;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(32, 1));
    goto corral_source_split_5161;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i55 == 1);
    goto $bb27;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p29;
    assume true;
    goto $bb29;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i32(out_$i51, out_$i54);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i53);
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i16($M.2, out_$p52);
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(228, 1));
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i16($M.2, out_$p49);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(0, 1));
    goto corral_source_split_5119;

  $bb25:
    assume out_$i48 == 1;
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 0);
    goto corral_source_split_5116;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} out_$i47 := strcmp(out_$p44, out_$p46);
    call {:si_unique_call 1037} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    out_$p46 := $bitcast.ref.ref(out_$p45);
    goto corral_source_split_5114;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p1, $mul.ref(0, 232)), $mul.ref(4, 1));
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p43);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 520)), $mul.ref(16, 1));
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.2, out_$p41);
    goto corral_source_split_5110;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p29, $mul.ref(0, 2192)), $mul.ref(208, 1));
    goto corral_source_split_5109;

  $bb23:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p79, out_$p36, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p29 := vhost_scsi_set_endpoint_loop_$bb16(in_$p1, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p35, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$i50, out_$i51, out_$p52, out_$i53, out_$i54, out_$i55, out_$p56, out_$p79, out_$p36, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p29);
    return;

  exit:
    return;
}



procedure vhost_scsi_set_endpoint_loop_$bb16(in_$p1: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p35: ref, in_$p37: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$p52: ref, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$p79: ref, in_$p36: ref, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i64, in_$i87: i1, in_$p29: ref) returns (out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p35: ref, out_$p37: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$p52: ref, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$p79: ref, out_$p36: ref, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i64, out_$i87: i1, out_$p29: ref);
  modifies $M.27, assertsPassed;



implementation vhost_scsi_set_endpoint_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i18, out_$i19, out_$i20, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i18, in_$i19, in_$i20, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5046;

  $bb10:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i18;
    goto $bb10_dummy;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, out_$i18);
    goto corral_source_split_5063;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.2, in_$p5);
    goto corral_source_split_5062;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1030} {:cexpr "index"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5061;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 0);
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_$i13 := vhost_vq_access_ok(out_$p12);
    call {:si_unique_call 1028} {:cexpr "tmp"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_5052;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 17152));
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5050;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_5049;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 52000)), $mul.ref(328, 1));
    goto corral_source_split_5048;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i18, out_$i19, out_$i20, out_$i8 := vhost_scsi_set_endpoint_loop_$bb4(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i18, out_$i19, out_$i20, out_$i8);
    return;

  exit:
    return;
}



procedure vhost_scsi_set_endpoint_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i8: i32);



implementation vhost_dev_ioctl_loop_$bb25(in_$p0: ref, in_$p3: ref, in_$p20: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$i39: i64, in_$p42: ref, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$i25: i64, in_$i47: i64) returns (out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$i39: i64, out_$p42: ref, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$i25: i64, out_$i47: i64)
{

  entry:
    out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i39, out_$p42, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24, out_$i25, out_$i47 := in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p40, in_$i39, in_$p42, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$i24, in_$i25, in_$i47;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5242;

  $bb33:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$i25 := out_$i44, out_$i41;
    goto $bb33_dummy;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i41;
    assume true;
    goto $bb33;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    out_$i46 := $sgt.i32(out_$i45, out_$i44);
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.2, in_$p20);
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i24, 1);
    call {:si_unique_call 1076} {:cexpr "i"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_5274;

  SeqInstr_153:
    goto corral_source_split_5273;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} ldv_mutex_unlock_17(out_$p43);
    goto SeqInstr_152;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5272;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_5271;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p42, out_$p27);
    assume {:verifier.code 0} true;
    out_$i41 := out_$i25;
    goto $bb32;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    out_$i41 := out_$i39;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5269;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p40, out_$p27);
    assume {:verifier.code 0} true;
    out_$i39 := out_$i25;
    goto $bb31;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    out_$i39 := $sub.i64(0, 14);
    goto $bb31;

  $bb29:
    assume out_$i38 == 1;
    goto corral_source_split_5264;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i37, 0);
    goto corral_source_split_5259;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} out_$i37 := vq_log_access_ok(in_$p0, out_$p31, out_$p27);
    call {:si_unique_call 1074} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i37);
    goto corral_source_split_5258;

  $bb27:
    assume out_$i36 == 1;
    goto corral_source_split_5257;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_5255;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.2, out_$p33);
    goto corral_source_split_5253;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_5252;

  SeqInstr_150:
    goto corral_source_split_5251;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} ldv_mutex_lock_16(out_$p32);
    goto SeqInstr_149;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref(out_$p29, $mul.ref(out_$i30, 17152));
    goto corral_source_split_5249;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i24);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.2, out_$p28);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5246;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    out_$p27 := $i2p.i64.ref(out_$i26);
    goto corral_source_split_5245;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i64($M.2, in_$p3);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_5267;

  $bb30:
    assume !(out_$i38 == 1);
    goto corral_source_split_5266;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_5262;

  $bb28:
    assume !(out_$i36 == 1);
    goto corral_source_split_5261;

  $bb33_dummy:
    call {:si_unique_call 1} out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i39, out_$p42, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24, out_$i25, out_$i47 := vhost_dev_ioctl_loop_$bb25(in_$p0, in_$p3, in_$p20, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p40, out_$i39, out_$p42, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$i24, out_$i25, out_$i47);
    return;

  exit:
    return;
}



procedure vhost_dev_ioctl_loop_$bb25(in_$p0: ref, in_$p3: ref, in_$p20: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$i37: i32, in_$i38: i1, in_$p40: ref, in_$i39: i64, in_$p42: ref, in_$i41: i64, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i24: i32, in_$i25: i64, in_$i47: i64) returns (out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$i37: i32, out_$i38: i1, out_$p40: ref, out_$i39: i64, out_$p42: ref, out_$i41: i64, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i24: i32, out_$i25: i64, out_$i47: i64);
  modifies $M.16, assertsPassed, $M.2;



implementation vhost_dev_ioctl_loop_$bb55(in_$p0: ref, in_$p81: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i84: i32)
{

  entry:
    out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i84 := in_$p85, in_$p86, in_$i87, in_$p89, in_$p90, in_$p91, in_$p92, in_$p93, in_$i94, in_$p96, in_$p97, in_$p98, in_$i99, in_$p101, in_$i102, in_$i103, in_$i104, in_$i84;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  $bb57:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i84 := out_$i102;
    goto $bb57_dummy;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$i104 := $sgt.i32(out_$i103, out_$i102);
    goto corral_source_split_5353;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.2, in_$p81);
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$i102 := $add.i32(out_$i84, 1);
    call {:si_unique_call 1087} {:cexpr "i"} boogie_si_record_i32(out_$i102);
    goto corral_source_split_5351;

  SeqInstr_159:
    goto corral_source_split_5350;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} ldv_mutex_unlock_19(out_$p101);
    goto SeqInstr_158;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p98, $mul.ref(out_$i99, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    goto corral_source_split_5348;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i99 := $sext.i32.i64(out_$i84);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$p98 := $load.ref($M.2, out_$p97);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p96, out_$p91);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p93, $mul.ref(out_$i94, 17152)), $mul.ref(248, 1));
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i94 := $sext.i32.i64(out_$i84);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.2, out_$p92);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.2, out_$p90);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(216, 1));
    goto corral_source_split_5337;

  SeqInstr_156:
    goto corral_source_split_5336;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} ldv_mutex_lock_18(out_$p89);
    goto SeqInstr_155;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(out_$p86, $mul.ref(out_$i87, 17152)), $mul.ref(8, 1));
    goto corral_source_split_5335;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i87 := $sext.i32.i64(out_$i84);
    goto corral_source_split_5333;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.2, out_$p85);
    goto corral_source_split_5332;

  $bb56:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_5331;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57_dummy:
    call {:si_unique_call 1} out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i84 := vhost_dev_ioctl_loop_$bb55(in_$p0, in_$p81, out_$p85, out_$p86, out_$i87, out_$p89, out_$p90, out_$p91, out_$p92, out_$p93, out_$i94, out_$p96, out_$p97, out_$p98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i84);
    return;

  exit:
    return;
}



procedure vhost_dev_ioctl_loop_$bb55(in_$p0: ref, in_$p81: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$p93: ref, in_$i94: i64, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$i99: i64, in_$p101: ref, in_$i102: i32, in_$i103: i32, in_$i104: i1, in_$i84: i32) returns (out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$p93: ref, out_$i94: i64, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$i99: i64, out_$p101: ref, out_$i102: i32, out_$i103: i32, out_$i104: i1, out_$i84: i32);
  modifies $M.16, assertsPassed, $M.2;



implementation memory_access_ok_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$i33: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$i33: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i6 := in_$p7, in_$p8, in_$i9, in_$p11, in_$p12, in_$p13, in_$i14, in_$p16, in_$p17, in_$i18, in_$i19, in_$p20, in_$p21, in_$i22, in_$p24, in_$p25, in_$i26, in_$i27, in_$p28, in_$p29, in_$i30, in_$p32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6000;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i35;
    goto $bb13_dummy;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i35);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.2, in_$p3);
    goto corral_source_split_6040;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1212} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6039;

  $bb10:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i27, 0);
    goto corral_source_split_6033;

  SeqInstr_204:
    goto corral_source_split_6032;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} ldv_mutex_unlock_13(out_$p32);
    goto SeqInstr_203;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p29, $mul.ref(out_$i30, 17152)), $mul.ref(8, 1));
    goto corral_source_split_6031;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto corral_source_split_6030;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    out_$i30 := $sext.i32.i64(out_$i6);
    goto corral_source_split_6029;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.2, out_$p28);
    goto corral_source_split_6028;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6027;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6026;

  $bb7:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := 1;
    goto $bb8;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    out_$i27 := out_$i26;
    goto $bb8;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} out_$i26 := vq_memory_access_ok(out_$p25, in_$p1, in_$i2);
    call {:si_unique_call 1210} {:cexpr "ok"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_6024;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.2, out_$p24);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p21, $mul.ref(out_$i22, 17152)), $mul.ref(17112, 1));
    goto corral_source_split_6022;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i6);
    goto corral_source_split_6020;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.2, out_$p20);
    goto corral_source_split_6019;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6018;

  $bb6:
    assume out_$i19 == 1;
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i18 := $p2i.ref.i64(out_$p17);
    goto corral_source_split_6014;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.2, out_$p16);
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p13, $mul.ref(out_$i14, 17152)), $mul.ref(17104, 1));
    goto corral_source_split_6012;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i6);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.2, out_$p12);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6008;

  SeqInstr_201:
    goto corral_source_split_6007;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} ldv_mutex_lock_12(out_$p11);
    goto SeqInstr_200;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 17152)), $mul.ref(8, 1));
    goto corral_source_split_6006;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i6);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.2, out_$p7);
    goto corral_source_split_6003;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6002;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i6 := memory_access_ok_loop_$bb4(in_$p0, in_$p1, in_$i2, in_$p3, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p13, out_$i14, out_$p16, out_$p17, out_$i18, out_$i19, out_$p20, out_$p21, out_$i22, out_$p24, out_$p25, out_$i26, out_$i27, out_$p28, out_$p29, out_$i30, out_$p32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i6);
    return;

  exit:
    return;
}



procedure memory_access_ok_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$i19: i1, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p32: ref, in_$i33: i1, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$i19: i1, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p32: ref, out_$i33: i1, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i6: i32);
  modifies $M.16, assertsPassed;



implementation vhost_dev_alloc_iovecs_loop_$bb30(in_$p0: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i78: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i78: i32)
{

  entry:
    out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i78 := in_$p79, in_$p80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i78;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  $bb32:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$i78 := out_$i83;
    goto $bb32_dummy;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    out_$i84 := $sge.i32(out_$i83, 0);
    goto corral_source_split_6193;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    out_$i83 := $sub.i32(out_$i78, 1);
    call {:si_unique_call 1233} {:cexpr "i"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_6192;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} vhost_vq_free_iovecs(out_$p82);
    goto corral_source_split_6191;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p80, $mul.ref(out_$i81, 17152));
    goto corral_source_split_6190;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i78);
    goto corral_source_split_6189;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.2, out_$p79);
    goto corral_source_split_6188;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6187;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i78 := vhost_dev_alloc_iovecs_loop_$bb30(in_$p0, out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i78);
    return;

  exit:
    return;
}



procedure vhost_dev_alloc_iovecs_loop_$bb30(in_$p0: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$i83: i32, in_$i84: i1, in_$i78: i32) returns (out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$i83: i32, out_$i84: i1, out_$i78: i32);
  modifies $M.2;



implementation vhost_dev_alloc_iovecs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i47: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i4: i32) returns (out_$p5: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i47: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i47, out_$i73, out_$i74, out_$i75, out_$i4 := in_$p5, in_$p7, in_$p8, in_$i9, in_$p11, in_$p12, in_$p14, in_$p15, in_$i16, in_$p18, in_$p19, in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p34, in_$p35, in_$i36, in_$p38, in_$p39, in_$p40, in_$i41, in_$p43, in_$p44, in_$i45, in_$i46, in_$p48, in_$p49, in_$i50, in_$p52, in_$p53, in_$i54, in_$i55, in_$p56, in_$p57, in_$i58, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$p69, in_$p70, in_$i71, in_$i72, in_$i47, in_$i73, in_$i74, in_$i75, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6086;

  $bb23:
    assume out_$i75 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i73;
    goto $bb23_dummy;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    out_$i75 := $sgt.i32(out_$i74, out_$i73);
    goto corral_source_split_6177;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i32($M.2, in_$p1);
    goto corral_source_split_6176;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i4, 1);
    call {:si_unique_call 1231} {:cexpr "i"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6175;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb18;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i4;
    assume true;
    goto $bb20;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    out_$i72 := $eq.i64(out_$i71, 0);
    goto corral_source_split_6171;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    out_$i71 := $p2i.ref.i64(out_$p70);
    goto corral_source_split_6170;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.2, out_$p69);
    goto corral_source_split_6169;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p66, $mul.ref(out_$i67, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_6168;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    goto corral_source_split_6167;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    out_$i67 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6166;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.2, out_$p65);
    goto corral_source_split_6165;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6164;

  $bb16:
    assume out_$i64 == 1;
    goto corral_source_split_6163;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i8.i1(out_$i30);
    goto corral_source_split_6161;

  $bb15:
    assume !(out_$i63 == 1);
    goto corral_source_split_6160;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i4;
    assume true;
    goto $bb15;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i64(out_$i62, 0);
    goto corral_source_split_6158;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_6157;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.2, out_$p60);
    goto corral_source_split_6156;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p57, $mul.ref(out_$i58, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_6155;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto corral_source_split_6154;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6153;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.2, out_$p56);
    goto corral_source_split_6152;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6151;

  $bb13:
    assume !(out_$i55 == 1);
    goto corral_source_split_6150;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i4;
    assume true;
    goto $bb13;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i54, 0);
    goto corral_source_split_6148;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p53);
    goto corral_source_split_6147;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.2, out_$p52);
    goto corral_source_split_6146;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p49, $mul.ref(out_$i50, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_6145;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    goto corral_source_split_6144;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6143;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.2, out_$p48);
    goto corral_source_split_6142;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6141;

  $bb11:
    assume !(out_$i46 == 1);
    goto corral_source_split_6140;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i4;
    assume true;
    goto $bb11;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i64(out_$i45, 0);
    goto corral_source_split_6136;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_6135;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.2, out_$p43);
    goto corral_source_split_6134;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p40, $mul.ref(out_$i41, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_6133;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    goto corral_source_split_6132;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6131;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.2, out_$p39);
    goto corral_source_split_6130;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6129;

  $bb7:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p38, out_$p32);
    goto corral_source_split_6127;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p35, $mul.ref(out_$i36, 17152)), $mul.ref(17136, 1));
    goto corral_source_split_6126;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    goto corral_source_split_6125;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6124;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.2, out_$p34);
    goto corral_source_split_6123;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6122;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    goto corral_source_split_6121;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out_$p32 := kmalloc(24576, 208);
    goto corral_source_split_6120;

  $bb6:
    assume out_$i31 == 1;
    goto corral_source_split_6119;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i8.i1(out_$i30);
    goto corral_source_split_6117;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i1.i8(out_$i29);
    call {:si_unique_call 1229} {:cexpr "zcopy"} boogie_si_record_i8(out_$i30);
    goto corral_source_split_6116;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i32(out_$i28, 0);
    goto corral_source_split_6115;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    out_$i28 := $and.i32(out_$i26, out_$i27);
    goto corral_source_split_6114;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    out_$i27 := $M.25;
    goto corral_source_split_6113;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    out_$i26 := $shl.i32(1, out_$i4);
    goto corral_source_split_6112;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p25, out_$p19);
    goto corral_source_split_6111;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p22, $mul.ref(out_$i23, 17152)), $mul.ref(17096, 1));
    goto corral_source_split_6110;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto corral_source_split_6109;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6108;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.2, out_$p21);
    goto corral_source_split_6107;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6106;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_$p19 := kmalloc(8192, 208);
    goto corral_source_split_6104;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p18, out_$p12);
    goto corral_source_split_6103;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 17152)), $mul.ref(17120, 1));
    goto corral_source_split_6102;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    goto corral_source_split_6101;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6100;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.2, out_$p14);
    goto corral_source_split_6099;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6098;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    goto corral_source_split_6097;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} out_$p12 := kmalloc(16384, 208);
    goto corral_source_split_6096;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p11, out_$p5);
    goto corral_source_split_6095;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(out_$i9, 17152)), $mul.ref(17072, 1));
    goto corral_source_split_6094;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    goto corral_source_split_6093;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i4);
    goto corral_source_split_6092;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.2, out_$p7);
    goto corral_source_split_6091;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 320)), $mul.ref(192, 1));
    goto corral_source_split_6090;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    goto corral_source_split_6089;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} out_$p5 := kmalloc(16384, 208);
    goto corral_source_split_6088;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p5, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i47, out_$i73, out_$i74, out_$i75, out_$i4 := vhost_dev_alloc_iovecs_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p7, out_$p8, out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$p18, out_$p19, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p34, out_$p35, out_$i36, out_$p38, out_$p39, out_$p40, out_$i41, out_$p43, out_$p44, out_$i45, out_$i46, out_$p48, out_$p49, out_$i50, out_$p52, out_$p53, out_$i54, out_$i55, out_$p56, out_$p57, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p69, out_$p70, out_$i71, out_$i72, out_$i47, out_$i73, out_$i74, out_$i75, out_$i4);
    return;

  exit:
    return;
}



procedure vhost_dev_alloc_iovecs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i8, in_$i31: i1, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i64, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p52: ref, in_$p53: ref, in_$i54: i64, in_$i55: i1, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i1, in_$i47: i32, in_$i73: i32, in_$i74: i32, in_$i75: i1, in_$i4: i32) returns (out_$p5: ref, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i8, out_$i31: i1, out_$p32: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i64, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p52: ref, out_$p53: ref, out_$i54: i64, out_$i55: i1, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i1, out_$i47: i32, out_$i73: i32, out_$i74: i32, out_$i75: i1, out_$i4: i32);
  modifies $M.2, $CurrAddr;



implementation main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i48: i1, in_$i50: i32, in_$i47: i32, in_$i2: i32, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_vslice_dummy_var_154: ref, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: ref, in_vslice_dummy_var_157: ref, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: ref, in_vslice_dummy_var_170: ref, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: ref, in_vslice_dummy_var_175: i16, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: ref, in_vslice_dummy_var_178: i8, in_vslice_dummy_var_179: i64, in_vslice_dummy_var_180: i64, in_vslice_dummy_var_181: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i48: i1, out_$i50: i32, out_$i47: i32, out_$i2: i32, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_vslice_dummy_var_154: ref, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: ref, out_vslice_dummy_var_157: ref, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: ref, out_vslice_dummy_var_170: ref, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: ref, out_vslice_dummy_var_175: i16, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: ref, out_vslice_dummy_var_178: i8, out_vslice_dummy_var_179: i64, out_vslice_dummy_var_180: i64, out_vslice_dummy_var_181: i32)
{

  entry:
    out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i50, out_$i47, out_$i2, out_$i78, out_$i79, out_$i80, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181 := in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i50, in_$i47, in_$i2, in_$i78, in_$i79, in_$i80, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7050;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    out_$i2 := out_$i47;
    goto corral_source_split_7215_dummy;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_7215;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i2;
    goto $bb92;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i50;
    goto $bb92;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i46;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_7213;

  $bb86:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i2;
    goto $bb91;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i45;
    goto $bb91;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i2, 1);
    call {:si_unique_call 1576} {:cexpr "ldv_s_vhost_scsi_fops_file_operations"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_7211;

  $bb88:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i32(out_$i43, 0);
    goto corral_source_split_7204;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} ldv_check_return_value(out_$i43);
    goto corral_source_split_7203;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} out_$i43 := vhost_scsi_open($u1, $u2);
    call {:si_unique_call 1572} {:cexpr "res_vhost_scsi_open_39"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_7202;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} ldv_handler_precall();
    goto corral_source_split_7201;

  $bb85:
    assume out_$i42 == 1;
    goto corral_source_split_7200;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    out_$i42 := $eq.i32(out_$i2, 0);
    goto corral_source_split_7198;

  $bb83:
    assume out_$i41 == 1;
    goto corral_source_split_7197;

  $bb81:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb77:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i40 := $slt.i32(out_$i3, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb67:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i3, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb49:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i3, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb8:
    assume out_$i4 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := $slt.i32(out_$i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i3, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb6:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} out_$i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i3);
    call {:si_unique_call 1499} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i3);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb100:
    assume {:verifier.code 0} true;
    assume out_$i80 == 1;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    assume out_$i79 == 1;
    goto $bb98;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb99;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1494} out_$i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 1495} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i78);
    call {:si_unique_call 1496} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_7051;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i2, 0);
    goto corral_source_split_7224;

  $bb99:
    assume !(out_$i79 == 1);
    goto corral_source_split_7223;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_7221;

  $bb94:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i2;
    goto $bb95;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    out_$i50 := 0;
    goto $bb95;

  SeqInstr_393:
    goto corral_source_split_7219;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_181 := vhost_scsi_release($u1, $u2);
    goto SeqInstr_392;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} ldv_handler_precall();
    goto corral_source_split_7218;

  $bb93:
    assume out_$i48 == 1;
    goto corral_source_split_7217;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i2, 1);
    goto corral_source_split_7195;

  $bb82:
    assume !(out_$i40 == 1);
    goto corral_source_split_7194;

  SeqInstr_387:
    goto corral_source_split_7188;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} out_vslice_dummy_var_179 := vhost_scsi_ioctl($u2, $u0, $u3);
    goto SeqInstr_386;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} ldv_handler_precall();
    goto corral_source_split_7187;

  $bb79:
    assume out_$i39 == 1;
    goto corral_source_split_7186;

  $bb78:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    out_$i39 := $slt.i32(out_$i3, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  SeqInstr_390:
    goto corral_source_split_7192;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_vslice_dummy_var_180 := vhost_scsi_compat_ioctl($u2, $u0, $u3);
    goto SeqInstr_389;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_handler_precall();
    goto corral_source_split_7191;

  $bb80:
    assume !(out_$i39 == 1);
    goto corral_source_split_7190;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} out_vslice_dummy_var_177 := tcm_vhost_get_fabric_name();
    goto corral_source_split_7180;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} ldv_handler_precall();
    goto corral_source_split_7179;

  $bb75:
    assume out_$i37 == 1;
    goto corral_source_split_7178;

  $bb69:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i3, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb68:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i3, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} out_vslice_dummy_var_178 := tcm_vhost_get_fabric_proto_ident($u4);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} ldv_handler_precall();
    goto corral_source_split_7183;

  $bb76:
    assume !(out_$i37 == 1);
    goto corral_source_split_7182;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} out_vslice_dummy_var_174 := tcm_vhost_get_fabric_wwn($u4);
    goto corral_source_split_7168;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} ldv_handler_precall();
    goto corral_source_split_7167;

  $bb71:
    assume out_$i35 == 1;
    goto corral_source_split_7166;

  $bb70:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i3, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} out_vslice_dummy_var_175 := tcm_vhost_get_tag($u4);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} ldv_handler_precall();
    goto corral_source_split_7171;

  $bb73:
    assume out_$i36 == 1;
    goto corral_source_split_7170;

  $bb72:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i3, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_vslice_dummy_var_176 := tcm_vhost_get_default_depth($u4);
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} ldv_handler_precall();
    goto corral_source_split_7175;

  $bb74:
    assume !(out_$i36 == 1);
    goto corral_source_split_7174;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} out_vslice_dummy_var_172 := tcm_vhost_get_pr_transport_id($u4, $u5, $u6, $u7, $u8);
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_handler_precall();
    goto corral_source_split_7159;

  $bb65:
    assume out_$i32 == 1;
    goto corral_source_split_7158;

  $bb61:
    assume out_$i30 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb51:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i3, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb50:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    out_$i25 := $slt.i32(out_$i3, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} out_vslice_dummy_var_173 := tcm_vhost_get_pr_transport_id_len($u4, $u5, $u6, $u7);
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_handler_precall();
    goto corral_source_split_7163;

  $bb66:
    assume !(out_$i32 == 1);
    goto corral_source_split_7162;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_vslice_dummy_var_170 := tcm_vhost_parse_pr_out_transport_id($u4, $u8, $u7, $u9);
    goto corral_source_split_7152;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} ldv_handler_precall();
    goto corral_source_split_7151;

  $bb63:
    assume out_$i31 == 1;
    goto corral_source_split_7150;

  $bb62:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i3, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} out_vslice_dummy_var_171 := tcm_vhost_check_true($u4);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} ldv_handler_precall();
    goto corral_source_split_7155;

  $bb64:
    assume !(out_$i31 == 1);
    goto corral_source_split_7154;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_168 := tcm_vhost_check_false($u4);
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} ldv_handler_precall();
    goto corral_source_split_7143;

  $bb59:
    assume out_$i29 == 1;
    goto corral_source_split_7142;

  $bb53:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i3, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb52:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i3, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_169 := tcm_vhost_alloc_fabric_acl($u4);
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_handler_precall();
    goto corral_source_split_7147;

  $bb60:
    assume !(out_$i29 == 1);
    goto corral_source_split_7146;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} tcm_vhost_release_fabric_acl($u4, $u5);
    goto corral_source_split_7132;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_handler_precall();
    goto corral_source_split_7131;

  $bb55:
    assume out_$i27 == 1;
    goto corral_source_split_7130;

  $bb54:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i3, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_vslice_dummy_var_167 := tcm_vhost_tpg_get_inst_index($u4);
    goto corral_source_split_7136;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} ldv_handler_precall();
    goto corral_source_split_7135;

  $bb57:
    assume out_$i28 == 1;
    goto corral_source_split_7134;

  $bb56:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i3, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} tcm_vhost_release_cmd($u10);
    goto corral_source_split_7140;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} ldv_handler_precall();
    goto corral_source_split_7139;

  $bb58:
    assume !(out_$i28 == 1);
    goto corral_source_split_7138;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_166 := tcm_vhost_shutdown_session($u11);
    goto corral_source_split_7124;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} ldv_handler_precall();
    goto corral_source_split_7123;

  $bb47:
    assume out_$i23 == 1;
    goto corral_source_split_7122;

  $bb43:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i3, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb33:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i3, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb10:
    assume out_$i5 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i3, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb9:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $slt.i32(out_$i3, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} tcm_vhost_close_session($u11);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} ldv_handler_precall();
    goto corral_source_split_7127;

  $bb48:
    assume !(out_$i23 == 1);
    goto corral_source_split_7126;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_vslice_dummy_var_164 := tcm_vhost_sess_get_index($u11);
    goto corral_source_split_7116;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} ldv_handler_precall();
    goto corral_source_split_7115;

  $bb45:
    assume out_$i22 == 1;
    goto corral_source_split_7114;

  $bb44:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i3, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_vslice_dummy_var_165 := tcm_vhost_write_pending($u10);
    goto corral_source_split_7120;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} ldv_handler_precall();
    goto corral_source_split_7119;

  $bb46:
    assume !(out_$i22 == 1);
    goto corral_source_split_7118;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} out_vslice_dummy_var_163 := tcm_vhost_write_pending_status($u10);
    goto corral_source_split_7108;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_handler_precall();
    goto corral_source_split_7107;

  $bb41:
    assume out_$i20 == 1;
    goto corral_source_split_7106;

  $bb35:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i3, 23);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb34:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i3, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} tcm_vhost_set_default_node_attrs($u5);
    goto corral_source_split_7112;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} ldv_handler_precall();
    goto corral_source_split_7111;

  $bb42:
    assume !(out_$i20 == 1);
    goto corral_source_split_7110;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_vslice_dummy_var_160 := tcm_vhost_get_task_tag($u10);
    goto corral_source_split_7096;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_handler_precall();
    goto corral_source_split_7095;

  $bb37:
    assume out_$i18 == 1;
    goto corral_source_split_7094;

  $bb36:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i3, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_vslice_dummy_var_161 := tcm_vhost_get_cmd_state($u10);
    goto corral_source_split_7100;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} ldv_handler_precall();
    goto corral_source_split_7099;

  $bb39:
    assume out_$i19 == 1;
    goto corral_source_split_7098;

  $bb38:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i3, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_vslice_dummy_var_162 := tcm_vhost_queue_data_in($u10);
    goto corral_source_split_7104;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} ldv_handler_precall();
    goto corral_source_split_7103;

  $bb40:
    assume !(out_$i19 == 1);
    goto corral_source_split_7102;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_vslice_dummy_var_158 := tcm_vhost_queue_status($u10);
    goto corral_source_split_7088;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} ldv_handler_precall();
    goto corral_source_split_7087;

  $bb31:
    assume out_$i15 == 1;
    goto corral_source_split_7086;

  $bb25:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i3, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb12:
    assume out_$i6 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i3, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb11:
    assume !(out_$i5 == 1);
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i3, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} out_vslice_dummy_var_159 := tcm_vhost_queue_tm_rsp($u10);
    goto corral_source_split_7092;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_handler_precall();
    goto corral_source_split_7091;

  $bb32:
    assume !(out_$i15 == 1);
    goto corral_source_split_7090;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} out_vslice_dummy_var_156 := tcm_vhost_make_tport($u12, $u13, $u8);
    goto corral_source_split_7076;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_handler_precall();
    goto corral_source_split_7075;

  $bb27:
    assume out_$i13 == 1;
    goto corral_source_split_7074;

  $bb26:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := $slt.i32(out_$i3, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} tcm_vhost_drop_tport($u14);
    goto corral_source_split_7080;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_handler_precall();
    goto corral_source_split_7079;

  $bb29:
    assume out_$i14 == 1;
    goto corral_source_split_7078;

  $bb28:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    out_$i14 := $slt.i32(out_$i3, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  SeqInstr_384:
    goto corral_source_split_7084;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_vslice_dummy_var_157 := tcm_vhost_make_tpg($u14, $u13, $u8);
    goto SeqInstr_383;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_handler_precall();
    goto corral_source_split_7083;

  $bb30:
    assume !(out_$i14 == 1);
    goto corral_source_split_7082;

  SeqInstr_378:
    goto corral_source_split_7068;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} tcm_vhost_drop_tpg($u4);
    goto SeqInstr_377;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_handler_precall();
    goto corral_source_split_7067;

  $bb23:
    assume out_$i11 == 1;
    goto corral_source_split_7066;

  $bb14:
    assume out_$i7 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i3, 33);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb13:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i3, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  SeqInstr_381:
    goto corral_source_split_7072;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_vslice_dummy_var_155 := tcm_vhost_port_link($u4, $u15);
    goto SeqInstr_380;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_handler_precall();
    goto corral_source_split_7071;

  $bb24:
    assume !(out_$i11 == 1);
    goto corral_source_split_7070;

  SeqInstr_375:
    goto corral_source_split_7056;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} tcm_vhost_port_unlink($u4, $u15);
    goto SeqInstr_374;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_handler_precall();
    goto corral_source_split_7055;

  $bb16:
    assume out_$i8 == 1;
    goto corral_source_split_7054;

  $bb15:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i3, 35);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} out_vslice_dummy_var_154 := tcm_vhost_make_nodeacl($u4, $u13, $u8);
    goto corral_source_split_7060;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_handler_precall();
    goto corral_source_split_7059;

  $bb18:
    assume out_$i9 == 1;
    goto corral_source_split_7058;

  $bb17:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i3, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} tcm_vhost_drop_nodeacl($u5);
    goto corral_source_split_7064;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_handler_precall();
    goto corral_source_split_7063;

  $bb20:
    assume out_$i10 == 1;
    goto corral_source_split_7062;

  $bb19:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i32(out_$i3, 36);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i10 == 1);
    goto $bb22;

  $bb84:
    assume {:verifier.code 0} true;
    assume !(out_$i41 == 1);
    goto $bb22;

  corral_source_split_7215_dummy:
    call {:si_unique_call 1} out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i50, out_$i47, out_$i2, out_$i78, out_$i79, out_$i80, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181 := main_loop_$bb5(out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i50, out_$i47, out_$i2, out_$i78, out_$i79, out_$i80, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181);
    return;

  exit:
    return;
}



procedure main_loop_$bb5(in_$i3: i32, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i1, in_$i14: i1, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i1, in_$i41: i1, in_$i42: i1, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$i46: i32, in_$i48: i1, in_$i50: i32, in_$i47: i32, in_$i2: i32, in_$i78: i32, in_$i79: i1, in_$i80: i1, in_vslice_dummy_var_154: ref, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: ref, in_vslice_dummy_var_157: ref, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: ref, in_vslice_dummy_var_170: ref, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: ref, in_vslice_dummy_var_175: i16, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: ref, in_vslice_dummy_var_178: i8, in_vslice_dummy_var_179: i64, in_vslice_dummy_var_180: i64, in_vslice_dummy_var_181: i32) returns (out_$i3: i32, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i1, out_$i14: i1, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i1, out_$i41: i1, out_$i42: i1, out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$i46: i32, out_$i48: i1, out_$i50: i32, out_$i47: i32, out_$i2: i32, out_$i78: i32, out_$i79: i1, out_$i80: i1, out_vslice_dummy_var_154: ref, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: ref, out_vslice_dummy_var_157: ref, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: ref, out_vslice_dummy_var_170: ref, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: ref, out_vslice_dummy_var_175: i16, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: ref, out_vslice_dummy_var_178: i8, out_vslice_dummy_var_179: i64, out_vslice_dummy_var_180: i64, out_vslice_dummy_var_181: i32);
  modifies $M.2, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.16, assertsPassed, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.26, $M.18, $M.17, $M.20, $M.21, $M.22, $M.27, $M.1;


