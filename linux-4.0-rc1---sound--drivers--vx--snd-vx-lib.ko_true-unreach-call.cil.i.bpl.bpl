var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.6: [ref]i32;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i32;

var $M.14: i8;

var $M.15: [ref]i8;

var $M.45: i32;

var $M.46: i8;

var $M.50: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]ref;

var $M.54: [ref]ref;

var $M.55: [ref]ref;

var $M.56: [ref]ref;

var $M.57: [ref]ref;

var $M.58: [ref]i24;

var $M.59: [ref]i8;

var $M.60: [ref]i32;

var $M.142: [ref]ref;

var $M.143: [ref]ref;

var $M.144: [ref]ref;

var $M.145: [ref]ref;

var $M.146: i32;

var $M.147: i32;

var $M.148: i32;

var $M.149: i32;

var $M.150: i32;

var $M.151: i32;

var $M.152: i32;

var $M.153: i32;

var $M.154: i32;

var $M.155: i32;

var $M.156: i32;

var $M.157: i32;

var $M.158: i32;

var $M.159: i32;

var $M.160: i32;

var $M.161: i16;

var $M.162: i32;

var $M.163: i32;

var $M.164: i32;

var $M.165: i32;

var $M.166: i32;

var $M.171: [ref]i8;

var $M.180: [ref]ref;

var $M.181: [ref]ref;

var $M.182: [ref]ref;

var $M.183: [ref]ref;

var $M.184: [ref]ref;

var $M.185: [ref]ref;

var $M.186: [ref]ref;

var $M.187: [ref]ref;

var $M.188: [ref]ref;

var $M.189: [ref]ref;

var $M.190: [ref]ref;

var $M.191: [ref]ref;

var $M.192: [ref]ref;

var $M.193: [ref]ref;

var $M.194: [ref]i8;

var $M.195: [ref]i8;

var $M.196: [ref]i8;

var $M.197: [ref]i8;

var $M.198: [ref]i8;

var $M.199: [ref]i8;

var $M.200: [ref]i8;

var $M.201: [ref]i8;

var $M.202: [ref]i8;

var $M.203: [ref]i8;

var $M.235: [ref]i8;

var $M.236: [ref]i8;

var $M.237: [ref]i8;

var $M.238: [ref]i8;

var $M.239: [ref]i8;

var $M.240: [ref]i8;

var $M.241: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 618351);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const __ksymtab_snd_vx_check_reg_bit: ref;

axiom __ksymtab_snd_vx_check_reg_bit == $sub.ref(0, 1040);

const {:count 21} __kstrtab_snd_vx_check_reg_bit: ref;

axiom __kstrtab_snd_vx_check_reg_bit == $sub.ref(0, 2085);

const ldv_linux_lib_idr_idr: ref;

axiom ldv_linux_lib_idr_idr == $sub.ref(0, 3113);

const ldv_linux_kernel_sched_completion_completion: ref;

axiom ldv_linux_kernel_sched_completion_completion == $sub.ref(0, 4141);

const ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct == $sub.ref(0, 5169);

const ldv_linux_kernel_locking_spinlock_spin_ptl: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_ptl == $sub.ref(0, 6197);

const ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data == $sub.ref(0, 7225);

const ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN == $sub.ref(0, 8253);

const ldv_linux_kernel_locking_spinlock_spin_lock: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_lock == $sub.ref(0, 9281);

const ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode == $sub.ref(0, 10309);

const ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct: ref;

axiom ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct == $sub.ref(0, 11337);

const __ldv_in_interrupt_context: ref;

axiom __ldv_in_interrupt_context == $sub.ref(0, 12362);

const ldv_linux_block_queue_queue_state: ref;

axiom ldv_linux_block_queue_queue_state == $sub.ref(0, 13390);

const ldv_linux_block_genhd_disk_state: ref;

axiom ldv_linux_block_genhd_disk_state == $sub.ref(0, 14418);

const {:count 59} vx_dsp_cmds: ref;

axiom vx_dsp_cmds == $sub.ref(0, 16386);

const vx_control_peak_meter: ref;

axiom vx_control_peak_meter == $sub.ref(0, 17490);

const vx_control_vu_meter: ref;

axiom vx_control_vu_meter == $sub.ref(0, 18594);

const vx_control_saturation: ref;

axiom vx_control_saturation == $sub.ref(0, 19698);

const vx_control_iec958: ref;

axiom vx_control_iec958 == $sub.ref(0, 20802);

const vx_control_iec958_mask: ref;

axiom vx_control_iec958_mask == $sub.ref(0, 21906);

const vx_control_clock_mode: ref;

axiom vx_control_clock_mode == $sub.ref(0, 23010);

const vx_control_audio_src: ref;

axiom vx_control_audio_src == $sub.ref(0, 24114);

const vx_control_monitor_switch: ref;

axiom vx_control_monitor_switch == $sub.ref(0, 25218);

const vx_control_monitor_gain: ref;

axiom vx_control_monitor_gain == $sub.ref(0, 26322);

const vx_control_output_switch: ref;

axiom vx_control_output_switch == $sub.ref(0, 27426);

const {:count 4} db_scale_audio_gain: ref;

axiom db_scale_audio_gain == $sub.ref(0, 28466);

const vx_control_audio_gain: ref;

axiom vx_control_audio_gain == $sub.ref(0, 29570);

const vx_control_output_level: ref;

axiom vx_control_output_level == $sub.ref(0, 30674);

const vx_pcm_playback_hw: ref;

axiom vx_pcm_playback_hw == $sub.ref(0, 31778);

const vx_pcm_capture_hw: ref;

axiom vx_pcm_capture_hw == $sub.ref(0, 32882);

const vx_pcm_capture_ops: ref;

axiom vx_pcm_capture_ops == $sub.ref(0, 34018);

const vx_pcm_playback_ops: ref;

axiom vx_pcm_playback_ops == $sub.ref(0, 35154);

const {:count 21} __kstrtab_snd_vx_free_firmware: ref;

axiom __kstrtab_snd_vx_free_firmware == $sub.ref(0, 36199);

const {:count 22} __kstrtab_snd_vx_setup_firmware: ref;

axiom __kstrtab_snd_vx_setup_firmware == $sub.ref(0, 37245);

const {:count 14} __kstrtab_snd_vx_create: ref;

axiom __kstrtab_snd_vx_create == $sub.ref(0, 38283);

const {:count 14} __kstrtab_snd_vx_resume: ref;

axiom __kstrtab_snd_vx_resume == $sub.ref(0, 39321);

const {:count 15} __kstrtab_snd_vx_suspend: ref;

axiom __kstrtab_snd_vx_suspend == $sub.ref(0, 40360);

const {:count 16} __kstrtab_snd_vx_dsp_load: ref;

axiom __kstrtab_snd_vx_dsp_load == $sub.ref(0, 41400);

const {:count 16} __kstrtab_snd_vx_dsp_boot: ref;

axiom __kstrtab_snd_vx_dsp_boot == $sub.ref(0, 42440);

const {:count 19} __kstrtab_snd_vx_irq_handler: ref;

axiom __kstrtab_snd_vx_irq_handler == $sub.ref(0, 43483);

const {:count 28} __kstrtab_snd_vx_threaded_irq_handler: ref;

axiom __kstrtab_snd_vx_threaded_irq_handler == $sub.ref(0, 44535);

const {:count 23} __kstrtab_snd_vx_load_boot_image: ref;

axiom __kstrtab_snd_vx_load_boot_image == $sub.ref(0, 45582);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_power_lock_of_snd_card: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_power_lock_of_snd_card == $sub.ref(0, 46607);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device == $sub.ref(0, 47632);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mixer_mutex_of_vx_core: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mixer_mutex_of_vx_core == $sub.ref(0, 48657);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_vx_core: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_vx_core == $sub.ref(0, 49682);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock == $sub.ref(0, 50707);

const LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode: ref;

axiom LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode == $sub.ref(0, 51732);

const LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS: ref;

axiom LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS == $sub.ref(0, 52760);

const ldv_thread_1: ref;

axiom ldv_thread_1 == $sub.ref(0, 53800);

const ldv_thread_0: ref;

axiom ldv_thread_0 == $sub.ref(0, 54840);

const ldv_thread_2: ref;

axiom ldv_thread_2 == $sub.ref(0, 55880);

const ldv_linux_usb_urb_urb_state: ref;

axiom ldv_linux_usb_urb_urb_state == $sub.ref(0, 56908);

const ldv_linux_usb_register_probe_state: ref;

axiom ldv_linux_usb_register_probe_state == $sub.ref(0, 57936);

const ldv_linux_usb_gadget_usb_gadget: ref;

axiom ldv_linux_usb_gadget_usb_gadget == $sub.ref(0, 58964);

const ldv_linux_usb_coherent_coherent_state: ref;

axiom ldv_linux_usb_coherent_coherent_state == $sub.ref(0, 59992);

const locksocknumber: ref;

axiom locksocknumber == $sub.ref(0, 61020);

const rtnllocknumber: ref;

axiom rtnllocknumber == $sub.ref(0, 62048);

const ldv_linux_net_register_probe_state: ref;

axiom ldv_linux_net_register_probe_state == $sub.ref(0, 63076);

const ldv_linux_mmc_sdio_func_sdio_element: ref;

axiom ldv_linux_mmc_sdio_func_sdio_element == $sub.ref(0, 64102);

const ldv_linux_kernel_rcu_update_lock_rcu_nested: ref;

axiom ldv_linux_kernel_rcu_update_lock_rcu_nested == $sub.ref(0, 65130);

const ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched == $sub.ref(0, 66158);

const ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh == $sub.ref(0, 67186);

const ldv_linux_kernel_rcu_srcu_srcu_nested: ref;

axiom ldv_linux_kernel_rcu_srcu_srcu_nested == $sub.ref(0, 68214);

const ldv_linux_kernel_module_module_refcounter: ref;

axiom ldv_linux_kernel_module_module_refcounter == $sub.ref(0, 69242);

const ldv_linux_kernel_locking_rwlock_wlock: ref;

axiom ldv_linux_kernel_locking_rwlock_wlock == $sub.ref(0, 70270);

const ldv_linux_kernel_locking_rwlock_rlock: ref;

axiom ldv_linux_kernel_locking_rwlock_rlock == $sub.ref(0, 71298);

const ldv_linux_fs_sysfs_sysfs: ref;

axiom ldv_linux_fs_sysfs_sysfs == $sub.ref(0, 72326);

const ldv_linux_fs_char_dev_usb_gadget_chrdev: ref;

axiom ldv_linux_fs_char_dev_usb_gadget_chrdev == $sub.ref(0, 73354);

const ldv_linux_drivers_base_class_usb_gadget_class: ref;

axiom ldv_linux_drivers_base_class_usb_gadget_class == $sub.ref(0, 74382);

const ldv_linux_block_request_blk_rq: ref;

axiom ldv_linux_block_request_blk_rq == $sub.ref(0, 75410);

const ldv_linux_arch_io_iomem: ref;

axiom ldv_linux_arch_io_iomem == $sub.ref(0, 76438);

const ldv_linux_alloc_usb_lock_lock: ref;

axiom ldv_linux_alloc_usb_lock_lock == $sub.ref(0, 77466);

const __ksymtab_snd_vx_free_firmware: ref;

axiom __ksymtab_snd_vx_free_firmware == $sub.ref(0, 78506);

const __ksymtab_snd_vx_setup_firmware: ref;

axiom __ksymtab_snd_vx_setup_firmware == $sub.ref(0, 79546);

const __ksymtab_snd_vx_create: ref;

axiom __ksymtab_snd_vx_create == $sub.ref(0, 80586);

const __ksymtab_snd_vx_resume: ref;

axiom __ksymtab_snd_vx_resume == $sub.ref(0, 81626);

const __ksymtab_snd_vx_suspend: ref;

axiom __ksymtab_snd_vx_suspend == $sub.ref(0, 82666);

const __ksymtab_snd_vx_dsp_load: ref;

axiom __ksymtab_snd_vx_dsp_load == $sub.ref(0, 83706);

const __ksymtab_snd_vx_dsp_boot: ref;

axiom __ksymtab_snd_vx_dsp_boot == $sub.ref(0, 84746);

const __ksymtab_snd_vx_irq_handler: ref;

axiom __ksymtab_snd_vx_irq_handler == $sub.ref(0, 85786);

const __ksymtab_snd_vx_threaded_irq_handler: ref;

axiom __ksymtab_snd_vx_threaded_irq_handler == $sub.ref(0, 86826);

const __ksymtab_snd_vx_load_boot_image: ref;

axiom __ksymtab_snd_vx_load_boot_image == $sub.ref(0, 87866);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 88894);

const {:count 4} .str.1: ref;

axiom .str.1 == $sub.ref(0, 89922);

const {:count 4} .str.2: ref;

axiom .str.2 == $sub.ref(0, 90950);

const {:count 4} .str.3: ref;

axiom .str.3 == $sub.ref(0, 91978);

const {:count 4} .str.4: ref;

axiom .str.4 == $sub.ref(0, 93006);

const {:count 4} .str.5: ref;

axiom .str.5 == $sub.ref(0, 94034);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 95062);

const {:count 4} .str.7: ref;

axiom .str.7 == $sub.ref(0, 96090);

const {:count 5} .str.8: ref;

axiom .str.8 == $sub.ref(0, 97119);

const {:count 6} .str.9: ref;

axiom .str.9 == $sub.ref(0, 98149);

const {:count 8} .str.10: ref;

axiom .str.10 == $sub.ref(0, 99181);

const {:count 5} .str.11: ref;

axiom .str.11 == $sub.ref(0, 100210);

const {:count 7} .str.12: ref;

axiom .str.12 == $sub.ref(0, 101241);

const {:count 4} .str.13: ref;

axiom .str.13 == $sub.ref(0, 102269);

const {:count 5} .str.14: ref;

axiom .str.14 == $sub.ref(0, 103298);

const {:count 5} .str.15: ref;

axiom .str.15 == $sub.ref(0, 104327);

const {:count 5} .str.16: ref;

axiom .str.16 == $sub.ref(0, 105356);

const {:count 5} .str.17: ref;

axiom .str.17 == $sub.ref(0, 106385);

const {:count 5} .str.18: ref;

axiom .str.18 == $sub.ref(0, 107414);

const {:count 5} .str.19: ref;

axiom .str.19 == $sub.ref(0, 108443);

const {:count 7} .str.20: ref;

axiom .str.20 == $sub.ref(0, 109474);

const {:count 6} .str.21: ref;

axiom .str.21 == $sub.ref(0, 110504);

const {:count 6} .str.22: ref;

axiom .str.22 == $sub.ref(0, 111534);

const {:count 7} .str.23: ref;

axiom .str.23 == $sub.ref(0, 112565);

const {:count 7} .str.24: ref;

axiom .str.24 == $sub.ref(0, 113596);

const {:count 6} .str.25: ref;

axiom .str.25 == $sub.ref(0, 114626);

const {:count 5} .str.26: ref;

axiom .str.26 == $sub.ref(0, 115655);

const {:count 27} .str.27: ref;

axiom .str.27 == $sub.ref(0, 116706);

const {:count 57} .str.28: ref;

axiom .str.28 == $sub.ref(0, 117787);

const {:count 24} .str.37: ref;

axiom .str.37 == $sub.ref(0, 118835);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 119888);

const {:count 26} .str.62: ref;

axiom .str.62 == $sub.ref(0, 120938);

const {:count 19} .str.63: ref;

axiom .str.63 == $sub.ref(0, 121981);

const {:count 15} .str.110: ref;

axiom .str.110 == $sub.ref(0, 123020);

const {:count 28} .str.111: ref;

axiom .str.111 == $sub.ref(0, 124072);

const {:count 34} .str.29: ref;

axiom .str.29 == $sub.ref(0, 125130);

const {:count 35} .str.30: ref;

axiom .str.30 == $sub.ref(0, 126189);

const {:count 38} .str.31: ref;

axiom .str.31 == $sub.ref(0, 127251);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 128309);

const {:count 33} .str.33: ref;

axiom .str.33 == $sub.ref(0, 129366);

const {:count 30} .str.34: ref;

axiom .str.34 == $sub.ref(0, 130420);

const {:count 35} .str.35: ref;

axiom .str.35 == $sub.ref(0, 131479);

const {:count 30} .str.36: ref;

axiom .str.36 == $sub.ref(0, 132533);

const {:count 33} .str.75: ref;

axiom .str.75 == $sub.ref(0, 133590);

const {:count 29} .str.76: ref;

axiom .str.76 == $sub.ref(0, 134643);

const {:count 26} .str.71: ref;

axiom .str.71 == $sub.ref(0, 135693);

const {:count 26} .str.72: ref;

axiom .str.72 == $sub.ref(0, 136743);

const {:count 42} .str.73: ref;

axiom .str.73 == $sub.ref(0, 137809);

const {:count 28} .str.121: ref;

axiom .str.121 == $sub.ref(0, 138861);

const {:count 35} .str.39: ref;

axiom .str.39 == $sub.ref(0, 139920);

const {:count 20} .str.40: ref;

axiom .str.40 == $sub.ref(0, 140964);

const {:count 38} .str.41: ref;

axiom .str.41 == $sub.ref(0, 142026);

const {:count 21} .str.42: ref;

axiom .str.42 == $sub.ref(0, 143071);

const {:count 12} .str.43: ref;

axiom .str.43 == $sub.ref(0, 144107);

const {:count 19} .str.44: ref;

axiom .str.44 == $sub.ref(0, 145150);

const {:count 12} .str.45: ref;

axiom .str.45 == $sub.ref(0, 146186);

const {:count 10} .str.77: ref;

axiom .str.77 == $sub.ref(0, 147220);

const {:count 5} .str.78: ref;

axiom .str.78 == $sub.ref(0, 148249);

const {:count 4} .str.79: ref;

axiom .str.79 == $sub.ref(0, 149277);

const {:count 8} .str.80: ref;

axiom .str.80 == $sub.ref(0, 150309);

const {:count 7} .str.81: ref;

axiom .str.81 == $sub.ref(0, 151340);

const {:count 5} .str.82: ref;

axiom .str.82 == $sub.ref(0, 152369);

const {:count 9} .str.83: ref;

axiom .str.83 == $sub.ref(0, 153402);

const {:count 9} .str.84: ref;

axiom .str.84 == $sub.ref(0, 154435);

const {:count 9} .str.85: ref;

axiom .str.85 == $sub.ref(0, 155468);

const {:count 13} .str.86: ref;

axiom .str.86 == $sub.ref(0, 156505);

const {:count 12} .str.87: ref;

axiom .str.87 == $sub.ref(0, 157541);

const {:count 4} .str.88: ref;

axiom .str.88 == $sub.ref(0, 158569);

const {:count 7} .str.90: ref;

axiom .str.90 == $sub.ref(0, 159600);

const {:count 3} .str.91: ref;

axiom .str.91 == $sub.ref(0, 160627);

const {:count 21} .str.89: ref;

axiom .str.89 == $sub.ref(0, 161672);

const {:count 4} .str.93: ref;

axiom .str.93 == $sub.ref(0, 162700);

const {:count 24} .str.92: ref;

axiom .str.92 == $sub.ref(0, 163748);

const {:count 16} .str.94: ref;

axiom .str.94 == $sub.ref(0, 164788);

const {:count 10} .str.95: ref;

axiom .str.95 == $sub.ref(0, 165822);

const {:count 9} .str.96: ref;

axiom .str.96 == $sub.ref(0, 166855);

const {:count 7} .str.97: ref;

axiom .str.97 == $sub.ref(0, 167886);

const {:count 7} .str.98: ref;

axiom .str.98 == $sub.ref(0, 168917);

const {:count 9} .str.99: ref;

axiom .str.99 == $sub.ref(0, 169950);

const {:count 10} .str.100: ref;

axiom .str.100 == $sub.ref(0, 170984);

const {:count 10} .str.101: ref;

axiom .str.101 == $sub.ref(0, 172018);

const {:count 2} .str.102: ref;

axiom .str.102 == $sub.ref(0, 173044);

const {:count 18} .str.103: ref;

axiom .str.103 == $sub.ref(0, 174086);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 175126);

const {:count 18} .str.105: ref;

axiom .str.105 == $sub.ref(0, 176168);

const {:count 15} .str.106: ref;

axiom .str.106 == $sub.ref(0, 177207);

const {:count 24} .str.107: ref;

axiom .str.107 == $sub.ref(0, 178255);

const {:count 23} .str.108: ref;

axiom .str.108 == $sub.ref(0, 179302);

const {:count 44} .str.109: ref;

axiom .str.109 == $sub.ref(0, 180370);

const {:count 13} .str.46: ref;

axiom .str.46 == $sub.ref(0, 181407);

const {:count 13} .str.47: ref;

axiom .str.47 == $sub.ref(0, 182444);

const {:count 12} .str.48: ref;

axiom .str.48 == $sub.ref(0, 183480);

const {:count 13} .str.49: ref;

axiom .str.49 == $sub.ref(0, 184517);

const {:count 13} .str.50: ref;

axiom .str.50 == $sub.ref(0, 185554);

const {:count 12} .str.51: ref;

axiom .str.51 == $sub.ref(0, 186590);

const {:count 13} .str.52: ref;

axiom .str.52 == $sub.ref(0, 187627);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 188664);

const {:count 13} .str.54: ref;

axiom .str.54 == $sub.ref(0, 189701);

const {:count 12} .str.55: ref;

axiom .str.55 == $sub.ref(0, 190737);

const {:count 13} .str.56: ref;

axiom .str.56 == $sub.ref(0, 191774);

const {:count 13} .str.57: ref;

axiom .str.57 == $sub.ref(0, 192811);

const {:count 12} .str.58: ref;

axiom .str.58 == $sub.ref(0, 193847);

const {:count 6} .str.59: ref;

axiom .str.59 == $sub.ref(0, 194877);

const {:count 28} .str.60: ref;

axiom .str.60 == $sub.ref(0, 195929);

const {:count 29} .str.61: ref;

axiom .str.61 == $sub.ref(0, 196982);

const {:count 20} .str.65: ref;

axiom .str.65 == $sub.ref(0, 198026);

const {:count 19} .str.66: ref;

axiom .str.66 == $sub.ref(0, 199069);

const {:count 7} .str.67: ref;

axiom .str.67 == $sub.ref(0, 200100);

const {:count 6} .str.68: ref;

axiom .str.68 == $sub.ref(0, 201130);

const {:count 12} .str.69: ref;

axiom .str.69 == $sub.ref(0, 202166);

const {:count 14} .str.70: ref;

axiom .str.70 == $sub.ref(0, 203204);

const {:count 7} .str.64: ref;

axiom .str.64 == $sub.ref(0, 204235);

const {:count 42} .str.112: ref;

axiom .str.112 == $sub.ref(0, 205301);

const {:count 55} .str.113: ref;

axiom .str.113 == $sub.ref(0, 206380);

const {:count 11} .str.117: ref;

axiom .str.117 == $sub.ref(0, 207415);

const {:count 15} .str.118: ref;

axiom .str.118 == $sub.ref(0, 208454);

const {:count 25} .str.119: ref;

axiom .str.119 == $sub.ref(0, 209503);

const {:count 23} .str.120: ref;

axiom .str.120 == $sub.ref(0, 210550);

const {:count 38} .str.114: ref;

axiom .str.114 == $sub.ref(0, 211612);

const {:count 56} .str.115: ref;

axiom .str.115 == $sub.ref(0, 212692);

const {:count 6} .str.116: ref;

axiom .str.116 == $sub.ref(0, 213722);

const {:count 23} .str.122: ref;

axiom .str.122 == $sub.ref(0, 214769);

const {:count 20} .str.124: ref;

axiom .str.124 == $sub.ref(0, 215813);

const {:count 18} .str.125: ref;

axiom .str.125 == $sub.ref(0, 216855);

const {:count 18} .str.127: ref;

axiom .str.127 == $sub.ref(0, 217897);

const {:count 15} .str.128: ref;

axiom .str.128 == $sub.ref(0, 218936);

const {:count 11} .str.129: ref;

axiom .str.129 == $sub.ref(0, 219971);

const {:count 21} .str.130: ref;

axiom .str.130 == $sub.ref(0, 221016);

const {:count 24} .str.131: ref;

axiom .str.131 == $sub.ref(0, 222064);

const {:count 17} .str.132: ref;

axiom .str.132 == $sub.ref(0, 223105);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const .str.74: ref;

axiom .str.74 == $sub.ref(0, 224130);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 225162);

const {:count 3} .str.1.262: ref;

axiom .str.1.262 == $sub.ref(0, 226189);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 227227);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 228255);

const snd_vx_check_reg_bit: ref;

axiom snd_vx_check_reg_bit == $sub.ref(0, 229287);

procedure snd_vx_check_reg_bit($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation snd_vx_check_reg_bit($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $i51: i8;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p5 := $alloc($mul.ref(216, $zext.i32.i64(1)));
    call {:si_unique_call 1} {:cexpr "snd_vx_check_reg_bit:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 2} {:cexpr "snd_vx_check_reg_bit:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 3} {:cexpr "snd_vx_check_reg_bit:arg:bit"} boogie_si_record_i32($i3);
    call {:si_unique_call 4} {:cexpr "snd_vx_check_reg_bit:arg:time"} boogie_si_record_i32($i4);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, jiffies);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i4, 250);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, 999);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i32($i8, 1000);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i11 := $add.i64($i6, $i10);
    call {:si_unique_call 5} {:cexpr "end_time"} boogie_si_record_i64($i11);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(0, 8));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p12, .str);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(1, 8));
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str.1);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(2, 8));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p14, .str.2);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(3, 8));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str.3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(4, 8));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p16, .str.4);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(5, 8));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str.5);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(6, 8));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str.6);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(7, 8));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p19, .str.7);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(8, 8));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str.8);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(9, 8));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str.9);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(10, 8));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str.10);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(11, 8));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str.11);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(12, 8));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str.12);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(13, 8));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str.13);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(14, 8));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str.14);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(15, 8));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str.15);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(16, 8));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p28, .str.16);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(17, 8));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p29, .str.17);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(18, 8));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p30, .str.18);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(19, 8));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str.19);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(20, 8));
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p32, .str.20);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(21, 8));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p33, .str.21);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(22, 8));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p34, .str.22);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(23, 8));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p35, .str.23);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(24, 8));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, .str.24);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(25, 8));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str.25);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref(26, 8));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p38, .str.26);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i39 := snd_vx_inb($p0, $i1);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i8($i39);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $i2);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, $i3);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i42 == 1);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i43, $i44, $i45, $i46, $i48, $i49, $i50 := snd_vx_check_reg_bit_loop_$bb4($p0, $i1, $i2, $i3, $i11, $i43, $i44, $i45, $i46, $i48, $i49, $i50);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.0, jiffies);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i49 := $sub.i64($i11, $i48);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i50 := $sge.i64($i49, 0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $i51 := snd_vx_inb($p0, $i1);
    call {:si_unique_call 11} {:cexpr "tmp___0"} boogie_si_record_i8($i51);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i1);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 216)), $mul.ref($i52, 8));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.1, $p53);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i51);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} __snd_printk.i32.ref.i32.ref.ref.i32.i32(1, .str.27, 68, .str.28, $p54, $i2, $i55);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 5);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb5:
    assume $i50 == 1;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $i43 := snd_vx_inb($p0, $i1);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i8($i43);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $i2);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, $i3);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb7_dummy;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb2;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 230319);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const snd_vx_inb: ref;

axiom snd_vx_inb == $sub.ref(0, 231351);

procedure snd_vx_inb($p0: ref, $i1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation snd_vx_inb($p0: ref, $i1: i32) returns ($r: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} {:cexpr "snd_vx_inb:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    call {:si_unique_call 14} $i6 := devirtbounce($p5, $p0, $i1);
    call {:si_unique_call 15} {:cexpr "tmp"} boogie_si_record_i8($i6);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const __snd_printk: ref;

axiom __snd_printk == $sub.ref(0, 232383);

procedure __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 17} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 19} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.i32.i32.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32);



procedure __snd_printk.i32.ref.i32.ref($i0: i32, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref($i0: i32, $p1: ref, $i2: i32, $p3: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 21} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    return;
}



procedure __snd_printk.i32.ref.i32.ref.ref($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: ref);



procedure __snd_printk.i32.ref.i32.ref.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: ref, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __snd_printk.i32.ref.i32.ref.ref.i32.i32($i0: i32, $p1: ref, $i2: i32, $p3: ref, p.4: ref, p.5: i32, p.6: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} {:cexpr "__snd_printk:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 23} {:cexpr "__snd_printk:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    return;
}



const snd_vx_load_boot_image: ref;

axiom snd_vx_load_boot_image == $sub.ref(0, 233415);

procedure snd_vx_load_boot_image($p0: ref, $p1: ref) returns ($r: i32);



const vx_reset_dsp: ref;

axiom vx_reset_dsp == $sub.ref(0, 234447);

procedure vx_reset_dsp($p0: ref);



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 235479);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    return;
}



const snd_vx_outb: ref;

axiom snd_vx_outb == $sub.ref(0, 236511);

procedure snd_vx_outb($p0: ref, $i1: i32, $i2: i8);
  free requires assertsPassed;



implementation snd_vx_outb($p0: ref, $i1: i32, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} {:cexpr "snd_vx_outb:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 26} {:cexpr "snd_vx_outb:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(16, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    call {:si_unique_call 27} devirtbounce.2($p6, $p0, $i1, $i8);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    return;
}



const snd_vx_threaded_irq_handler: ref;

axiom snd_vx_threaded_irq_handler == $sub.ref(0, 237543);

procedure snd_vx_threaded_irq_handler($i0: i32, $p1: ref) returns ($r: i32);



const vx_test_irq_src: ref;

axiom vx_test_irq_src == $sub.ref(0, 238575);

procedure vx_test_irq_src($p0: ref, $p1: ref) returns ($r: i32);



const vx_change_frequency: ref;

axiom vx_change_frequency == $sub.ref(0, 239607);

procedure vx_change_frequency($p0: ref) returns ($r: i32);



const vx_pcm_update_intr: ref;

axiom vx_pcm_update_intr == $sub.ref(0, 240639);

procedure vx_pcm_update_intr($p0: ref, $i1: i32);



const vx_init_rmh: ref;

axiom vx_init_rmh == $sub.ref(0, 241671);

procedure vx_init_rmh($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vx_init_rmh($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i16;
  var $p19: ref;
  var $i20: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $i32: i64;
  var $p34: ref;
  var $i35: i32;
  var $p37: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} {:cexpr "vx_init_rmh:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 58);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 29} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 31} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 34} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref($i14, 16)), $mul.ref(4, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p19, $i18);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i20 := $zext.i32.i64($i1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref($i20, 16)), $mul.ref(12, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.7, $p22);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(2, 1));
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.8, $p28);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(132, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i30);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i1);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref($i32, 16)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.9, $p34);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} warn_slowpath_null(.str.71, 102);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_send_msg: ref;

axiom vx_send_msg == $sub.ref(0, 242703);

procedure vx_send_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.1, $M.0, assertsPassed, $CurrAddr;



implementation vx_send_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} ldv_mutex_lock_97($p2);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i3 := vx_send_msg_nolock($p0, $p1);
    call {:si_unique_call 37} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_mutex_unlock_98($p4);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 243735);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 40} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 244767);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    return;
}



const vx_pcm_playback_update: ref;

axiom vx_pcm_playback_update == $sub.ref(0, 245799);

procedure vx_pcm_playback_update($p0: ref, $p1: ref, $p2: ref);



const vx_pcm_playback_transfer: ref;

axiom vx_pcm_playback_transfer == $sub.ref(0, 246831);

procedure vx_pcm_playback_transfer($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, assertsPassed;



implementation vx_pcm_playback_transfer($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "vx_pcm_playback_transfer:arg:nchunks"} boogie_si_record_i32($i3);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(4, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 32768);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32(0, $i3);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb11;

  $bb11:
    call $p18, $i19, $i20, $i21, $i22, $i23, $i16 := vx_pcm_playback_transfer_loop_$bb11($p0, $p2, $i3, $p5, $p18, $i19, $i20, $i21, $i22, $i23, $i16);
    goto $bb11_last;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i20 := vx_pcm_playback_transfer_chunk($p0, $p5, $p2, $i19);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 44} {:cexpr "err"} boogie_si_record_i32($i20);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i16, 1);
    call {:si_unique_call 45} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, $i3);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb16:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i22;
    goto $bb16_dummy;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb16_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;
}



const vx_pcm_capture_update: ref;

axiom vx_pcm_capture_update == $sub.ref(0, 247863);

procedure vx_pcm_capture_update($p0: ref, $p1: ref, $p2: ref);



const snd_pcm_capture_avail: ref;

axiom snd_pcm_capture_avail == $sub.ref(0, 248895);

procedure snd_pcm_capture_avail($p0: ref) returns ($r: i64);



const frames_to_bytes: ref;

axiom frames_to_bytes == $sub.ref(0, 249927);

procedure frames_to_bytes($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation frames_to_bytes($p0: ref, $i1: i64) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} {:cexpr "frames_to_bytes:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1168)), $mul.ref(152, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i3);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i1, $i4);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i6 := $sdiv.i64($i5, 8);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vx_query_hbuffer_size: ref;

axiom vx_query_hbuffer_size == $sub.ref(0, 250959);

procedure vx_query_hbuffer_size($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_query_hbuffer_size($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} vx_init_rmh($p2, 15);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vx_set_pipe_cmd_params($p2, $i6, $i8, 0);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref(4, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i20 := vx_send_msg($p0, $p2);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 51} {:cexpr "result"} boogie_si_record_i32($i20);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 65535);
    call {:si_unique_call 52} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_pcm_read_per_bytes: ref;

axiom vx_pcm_read_per_bytes == $sub.ref(0, 251991);

procedure vx_pcm_read_per_bytes($p0: ref, $p1: ref, $p2: ref);



const vx_pseudo_dma_read: ref;

axiom vx_pseudo_dma_read == $sub.ref(0, 253023);

procedure vx_pseudo_dma_read($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const vx_send_rih: ref;

axiom vx_send_rih == $sub.ref(0, 254055);

procedure vx_send_rih($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.14, $CurrAddr, assertsPassed;



implementation vx_send_rih($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} {:cexpr "vx_send_rih:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} ldv_mutex_lock_99($p2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i3 := vx_send_rih_nolock($p0, $i1);
    call {:si_unique_call 56} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} ldv_mutex_unlock_100($p4);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const snd_pcm_period_elapsed: ref;

axiom snd_pcm_period_elapsed == $sub.ref(0, 255087);

procedure snd_pcm_period_elapsed($p0: ref);



const ldv_mutex_lock_99: ref;

axiom ldv_mutex_lock_99 == $sub.ref(0, 256119);

procedure ldv_mutex_lock_99($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_99($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const vx_send_rih_nolock: ref;

axiom vx_send_rih_nolock == $sub.ref(0, 257151);

procedure vx_send_rih_nolock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vx_send_rih_nolock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} {:cexpr "vx_send_rih_nolock:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32768);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i7 := vx_reset_chk($p0);
    call {:si_unique_call 61} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i9 := vx_send_irq_dsp($p0, $i1);
    call {:si_unique_call 63} {:cexpr "err"} boogie_si_record_i32($i9);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $i11 := snd_vx_check_reg_bit($p0, 2, 16, 16, 200);
    call {:si_unique_call 65} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} $i13 := snd_vx_inb($p0, 2);
    call {:si_unique_call 67} {:cexpr "tmp___2"} boogie_si_record_i8($i13);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 8);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i16 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i17 := snd_vx_check_reg_bit($p0, 2, 1, 1, 200);
    call {:si_unique_call 69} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i19 := snd_vx_inb($p0, 4);
    call {:si_unique_call 71} {:cexpr "tmp"} boogie_si_record_i8($i19);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 16);
    call {:si_unique_call 72} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i22 := snd_vx_inb($p0, 5);
    call {:si_unique_call 74} {:cexpr "tmp___0"} boogie_si_record_i8($i22);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 8);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i21, $i24);
    call {:si_unique_call 75} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i26 := snd_vx_inb($p0, 6);
    call {:si_unique_call 77} {:cexpr "tmp___1"} boogie_si_record_i8($i26);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $i27);
    call {:si_unique_call 78} {:cexpr "err"} boogie_si_record_i32($i28);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 16777216);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, $i29);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i6 := $i30;
    goto $bb3;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;
}



const ldv_mutex_unlock_100: ref;

axiom ldv_mutex_unlock_100 == $sub.ref(0, 258183);

procedure ldv_mutex_unlock_100($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_100($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core == $sub.ref(0, 259215);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i3);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 81} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_vx_core"} boogie_si_record_i8(0);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock == $sub.ref(0, 260247);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_unlock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 1} true;
    call {:si_unique_call 83} __VERIFIER_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_reset_chk: ref;

axiom vx_reset_chk == $sub.ref(0, 261279);

procedure vx_reset_chk($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vx_reset_chk($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $i1 := vx_send_irq_dsp($p0, 58);
    call {:si_unique_call 85} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $i4 := snd_vx_check_reg_bit($p0, 2, 16, 0, 200);
    call {:si_unique_call 87} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 5);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 5);
    goto $bb3;
}



const vx_send_irq_dsp: ref;

axiom vx_send_irq_dsp == $sub.ref(0, 262311);

procedure vx_send_irq_dsp($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vx_send_irq_dsp($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "vx_send_irq_dsp:arg:num"} boogie_si_record_i32($i1);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i2 := snd_vx_check_reg_bit($p0, 1, 128, 0, 200);
    call {:si_unique_call 90} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 91} {:cexpr "vx_send_irq_dsp:arg:nirq"} boogie_si_record_i32($i1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(24, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i10 := $ashr.i32($i9, 1);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i12 := $sext.i8.i32($i11);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, $sub.i32(0, 128));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} snd_vx_outb($p0, 1, $i16);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i1, 64);
    call {:si_unique_call 92} {:cexpr "nirq"} boogie_si_record_i32($i8);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb7;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core == $sub.ref(0, 263343);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0: ref)
{
  var $i1: i8;
  var $i2: i1;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i8.i1($i1);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i3 := $xor.i1($i2, 1);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i4);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 95} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_vx_core"} boogie_si_record_i8(1);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock: ref;

axiom ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock == $sub.ref(0, 264375);

procedure ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "ldv_assert_linux_kernel_locking_mutex__one_thread_double_lock:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 1} true;
    call {:si_unique_call 97} __VERIFIER_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_set_pipe_cmd_params: ref;

axiom vx_set_pipe_cmd_params == $sub.ref(0, 265407);

procedure vx_set_pipe_cmd_params($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vx_set_pipe_cmd_params($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "vx_set_pipe_cmd_params:arg:is_capture"} boogie_si_record_i32($i1);
    call {:si_unique_call 99} {:cexpr "vx_set_pipe_cmd_params:arg:param1"} boogie_si_record_i32($i2);
    call {:si_unique_call 100} {:cexpr "vx_set_pipe_cmd_params:arg:param2"} boogie_si_record_i32($i3);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i2, 31);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 5);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16777215);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i13, $i16);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i3, 0);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i3, 31);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i23, $i24);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 2048);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i8);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_pcm_playback_transfer_chunk: ref;

axiom vx_pcm_playback_transfer_chunk == $sub.ref(0, 266439);

procedure vx_pcm_playback_transfer_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.14, $CurrAddr, assertsPassed;



implementation vx_pcm_playback_transfer_chunk($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $p13: ref;
  var $i7: i32;
  var vslice_dummy_var_10: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} {:cexpr "vx_pcm_playback_transfer_chunk:arg:size"} boogie_si_record_i32($i3);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i4 := vx_query_hbuffer_size($p0, $p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 103} {:cexpr "space"} boogie_si_record_i32($i4);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i4, $i3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} ldv_mutex_lock_97___0($p10);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} vx_pseudo_dma_write($p0, $p1, $p2, $i3);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i11 := vx_notify_end_of_buffer($p0, $p2);
    call {:si_unique_call 111} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_12 := vx_send_rih_nolock($p0, 38);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} ldv_mutex_unlock_98___0($p13);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i7 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_11 := vx_send_rih($p0, 38);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} __snd_printk.i32.ref.i32.ref.i32(1, .str.62, 639, .str.111, $i4);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} vslice_dummy_var_10 := vx_send_rih($p0, 38);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} __snd_printk.i32.ref.i32.ref(1, .str.62, 634, .str.110);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i7 := $i4;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_97___0: ref;

axiom ldv_mutex_lock_97___0 == $sub.ref(0, 267471);

procedure ldv_mutex_lock_97___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_97___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const vx_pseudo_dma_write: ref;

axiom vx_pseudo_dma_write == $sub.ref(0, 268503);

procedure vx_pseudo_dma_write($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation vx_pseudo_dma_write($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} {:cexpr "vx_pseudo_dma_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    call {:si_unique_call 116} devirtbounce.3($p7, $p0, $p1, $p2, $i3);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    return;
}



const vx_notify_end_of_buffer: ref;

axiom vx_notify_end_of_buffer == $sub.ref(0, 269535);

procedure vx_notify_end_of_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation vx_notify_end_of_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var vslice_dummy_var_13: i32;
  var vslice_dummy_var_14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} vslice_dummy_var_13 := vx_send_rih_nolock($p0, 42);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} vx_init_rmh($p2, 57);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vx_set_stream_cmd_params($p2, 0, $i5);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} $i6 := vx_send_msg_nolock($p0, $p2);
    call {:si_unique_call 122} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} vslice_dummy_var_14 := vx_send_rih_nolock($p0, 42);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    goto $bb3;
}



const ldv_mutex_unlock_98___0: ref;

axiom ldv_mutex_unlock_98___0 == $sub.ref(0, 270567);

procedure ldv_mutex_unlock_98___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_98___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const vx_set_stream_cmd_params: ref;

axiom vx_set_stream_cmd_params == $sub.ref(0, 271599);

procedure vx_set_stream_cmd_params($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vx_set_stream_cmd_params($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} {:cexpr "vx_set_stream_cmd_params:arg:is_capture"} boogie_si_record_i32($i1);
    call {:si_unique_call 126} {:cexpr "vx_set_stream_cmd_params:arg:pipe"} boogie_si_record_i32($i2);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i2, 31);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i14 := $shl.i32($i13, 5);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16777215);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i12, $i15);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 2048);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i7);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_send_msg_nolock: ref;

axiom vx_send_msg_nolock == $sub.ref(0, 272631);

procedure vx_send_msg_nolock($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation vx_send_msg_nolock($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i8;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $p42: ref;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i64;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i8;
  var $i89: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $i97: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i8;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i32;
  var $i108: i16;
  var $i109: i32;
  var $i110: i1;
  var $i77: i32;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32768);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $i7 := vx_reset_chk($p0);
    call {:si_unique_call 128} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 1);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 16744447);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i22);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i25 := snd_vx_check_reg_bit($p0, 2, 2, 2, 200);
    call {:si_unique_call 131} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i30 := $lshr.i32($i29, 16);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} snd_vx_outb($p0, 4, $i33);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i32($i36, 8);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} snd_vx_outb($p0, 5, $i40);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} snd_vx_outb($p0, 6, $i46);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $i47 := vx_send_irq_dsp($p0, 56);
    call {:si_unique_call 137} {:cexpr "err"} boogie_si_record_i32($i47);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i49 := snd_vx_check_reg_bit($p0, 2, 16, 16, 200);
    call {:si_unique_call 140} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i49, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i51 := snd_vx_inb($p0, 2);
    call {:si_unique_call 142} {:cexpr "tmp___2"} boogie_si_record_i8($i51);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 8);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i72 := $ugt.i32($i71, 1);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i115 := vx_read_status($p0, $p1);
    call {:si_unique_call 173} {:cexpr "tmp___3"} boogie_si_record_i32($i115);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i6 := $i115;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.0, $p73);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32(1, $i75);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i111 := snd_vx_check_reg_bit($p0, 2, 4, 4, 200);
    call {:si_unique_call 168} {:cexpr "err"} boogie_si_record_i32($i111);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 0);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i112} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i113 := vx_transfer_end($p0, 54);
    call {:si_unique_call 171} {:cexpr "err"} boogie_si_record_i32($i113);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i114 == 1;
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i6 := $i113;
    goto $bb3;

  $bb42:
    assume $i112 == 1;
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} __snd_printk.i32.ref.i32.ref(1, .str.27, 326, .str.36);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i6 := $i111;
    goto $bb3;

  $bb28:
    assume $i76 == 1;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i77 := 1;
    goto $bb31;

  $bb31:
    call $i78, $i79, $i80, $i81, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i77 := vx_send_msg_nolock_loop_$bb31($p0, $p1, $p73, $i78, $i79, $i80, $i81, $p83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i77);
    goto $bb31_last;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i78 := snd_vx_check_reg_bit($p0, 2, 4, 4, 200);
    call {:si_unique_call 158} {:cexpr "err"} boogie_si_record_i32($i78);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i80 := $i78;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i81 := $sext.i32.i64($i77);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref($i81, 4));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i85 := $lshr.i32($i84, 16);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} snd_vx_outb($p0, 4, $i88);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i77);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref($i89, 4));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.0, $p91);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i93 := $lshr.i32($i92, 8);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i8($i93);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} snd_vx_outb($p0, 5, $i96);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i77);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref($i97, 4));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} snd_vx_outb($p0, 6, $i103);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i104 := vx_send_irq_dsp($p0, 52);
    call {:si_unique_call 164} {:cexpr "err"} boogie_si_record_i32($i104);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i106 := $i104;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i77, 1);
    call {:si_unique_call 166} {:cexpr "i"} boogie_si_record_i32($i107);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p73);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i107, $i109);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i110 == 1);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb39:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i77 := $i107;
    goto $bb39_dummy;

  $bb36:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} __snd_printk.i32.ref.i32.ref(1, .str.27, 320, .str.35);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $i6 := $i106;
    goto $bb3;

  $bb33:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} __snd_printk.i32.ref.i32.ref(1, .str.27, 309, .str.34);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $i6 := $i80;
    goto $bb3;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i55 := snd_vx_check_reg_bit($p0, 2, 1, 1, 200);
    call {:si_unique_call 144} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i57 := snd_vx_inb($p0, 4);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i8($i57);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 16);
    call {:si_unique_call 148} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i60 := snd_vx_inb($p0, 5);
    call {:si_unique_call 150} {:cexpr "tmp___0"} boogie_si_record_i8($i60);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i62 := $shl.i32($i61, 8);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i59, $i62);
    call {:si_unique_call 151} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i64 := snd_vx_inb($p0, 6);
    call {:si_unique_call 153} {:cexpr "tmp___1"} boogie_si_record_i8($i64);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i63, $i65);
    call {:si_unique_call 154} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} __snd_printk.i32.ref.i32.ref.i32(1, .str.27, 299, .str.33, $i66);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 16777216);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32(0, $i67);
    call {:si_unique_call 156} {:cexpr "err"} boogie_si_record_i32($i68);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i6 := $i68;
    goto $bb3;

  $bb22:
    assume $i56 == 1;
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} __snd_printk.i32.ref.i32.ref(1, .str.27, 293, .str.32);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i6 := $i55;
    goto $bb3;

  $bb17:
    assume $i50 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i6 := $i49;
    goto $bb3;

  $bb14:
    assume $i48 == 1;
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} __snd_printk.i32.ref.i32.ref(1, .str.27, 282, .str.31);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i6 := $i47;
    goto $bb3;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} __snd_printk.i32.ref.i32.ref(1, .str.27, 271, .str.30);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32768);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} __snd_printk.i32.ref.i32.ref(1, .str.27, 249, .str.29);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 16);
    goto $bb3;

  $bb39_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;
}



const vx_transfer_end: ref;

axiom vx_transfer_end == $sub.ref(0, 273663);

procedure vx_transfer_end($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vx_transfer_end($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} {:cexpr "vx_transfer_end:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i2 := vx_reset_chk($p0);
    call {:si_unique_call 176} {:cexpr "err"} boogie_si_record_i32($i2);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i5 := vx_send_irq_dsp($p0, $i1);
    call {:si_unique_call 178} {:cexpr "err"} boogie_si_record_i32($i5);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i7 := snd_vx_check_reg_bit($p0, 2, 16, 16, 200);
    call {:si_unique_call 180} {:cexpr "err"} boogie_si_record_i32($i7);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $i9 := snd_vx_inb($p0, 2);
    call {:si_unique_call 182} {:cexpr "tmp___2"} boogie_si_record_i8($i9);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 183} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 8);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $i13 := snd_vx_check_reg_bit($p0, 2, 1, 1, 200);
    call {:si_unique_call 185} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $i15 := snd_vx_inb($p0, 4);
    call {:si_unique_call 188} {:cexpr "tmp"} boogie_si_record_i8($i15);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 16);
    call {:si_unique_call 189} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $i18 := snd_vx_inb($p0, 5);
    call {:si_unique_call 191} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32($i19, 8);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    call {:si_unique_call 192} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $i22 := snd_vx_inb($p0, 6);
    call {:si_unique_call 194} {:cexpr "tmp___1"} boogie_si_record_i8($i22);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i21, $i23);
    call {:si_unique_call 195} {:cexpr "err"} boogie_si_record_i32($i24);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} __snd_printk.i32.ref.i32.ref.i32(1, .str.27, 146, .str.76, $i24);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 16777216);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, $i25);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i4 := $i26;
    goto $bb3;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} __snd_printk.i32.ref.i32.ref(1, .str.27, 140, .str.75);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb3;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i4 := $i7;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i4 := $i2;
    goto $bb3;
}



const vx_read_status: ref;

axiom vx_read_status == $sub.ref(0, 274695);

procedure vx_read_status($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr;



implementation vx_read_status($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $p42: ref;
  var $i43: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i45: i32;
  var $i46: i32;
  var $i53: i32;
  var $i44: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $p58: ref;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $p63: ref;
  var $i64: i32;
  var $i40: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $i78: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i64;
  var $p102: ref;
  var $i103: i8;
  var $i104: i64;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i64;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $i79: i32;
  var $i115: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(132, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i11 := snd_vx_check_reg_bit($p0, 2, 1, 1, 200);
    call {:si_unique_call 198} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i13 := snd_vx_inb($p0, 4);
    call {:si_unique_call 200} {:cexpr "tmp"} boogie_si_record_i8($i13);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 16);
    call {:si_unique_call 201} {:cexpr "val"} boogie_si_record_i32($i15);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i16 := snd_vx_inb($p0, 5);
    call {:si_unique_call 203} {:cexpr "tmp___0"} boogie_si_record_i8($i16);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i18 := $shl.i32($i17, 8);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i15, $i18);
    call {:si_unique_call 204} {:cexpr "val"} boogie_si_record_i32($i19);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i20 := snd_vx_inb($p0, 6);
    call {:si_unique_call 206} {:cexpr "tmp___1"} boogie_si_record_i8($i20);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i19, $i21);
    call {:si_unique_call 207} {:cexpr "val"} boogie_si_record_i32($i22);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(132, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 1);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(132, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(2, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    call {:si_unique_call 209} {:cexpr "size"} boogie_si_record_i32($i61);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i22);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i61, 1);
    call {:si_unique_call 210} {:cexpr "size"} boogie_si_record_i32($i64);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i40 := $i64;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i65 := $sle.i32($i40, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i65} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i40, 15);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 213} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i67);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 215} {:cexpr "tmp___2"} boogie_si_record_i64($i71);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 218} {:cexpr "tmp___3"} boogie_si_record_i64($i76);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i78 := $sle.i32(1, $i40);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i115 := vx_transfer_end($p0, 48);
    call {:si_unique_call 231} {:cexpr "tmp___7"} boogie_si_record_i32($i115);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i10 := $i115;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb42:
    assume $i78 == 1;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $i79 := 1;
    goto $bb45;

  $bb45:
    call $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $p95, $i96, $i97, $i98, $i99, $i100, $p102, $i103, $i104, $p106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i79 := vx_read_status_loop_$bb45($p0, $p1, $i40, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $p95, $i96, $i97, $i98, $i99, $i100, $p102, $i103, $i104, $p106, $i107, $i108, $i109, $i110, $p112, $i113, $i114, $i79);
    goto $bb45_last;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i80 := vx_send_irq_dsp($p0, 50);
    call {:si_unique_call 220} {:cexpr "err"} boogie_si_record_i32($i80);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $i83 := snd_vx_check_reg_bit($p0, 2, 1, 1, 200);
    call {:si_unique_call 222} {:cexpr "err"} boogie_si_record_i32($i83);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i86 := snd_vx_inb($p0, 4);
    call {:si_unique_call 224} {:cexpr "tmp___4"} boogie_si_record_i8($i86);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32($i87, 16);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i79);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref($i89, 4));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i88);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i92 := snd_vx_inb($p0, 5);
    call {:si_unique_call 226} {:cexpr "tmp___5"} boogie_si_record_i8($i92);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i79);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref($i93, 4));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i92);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 8);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i96, $i98);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i79);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref($i100, 4));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i99);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i103 := snd_vx_inb($p0, 6);
    call {:si_unique_call 228} {:cexpr "tmp___6"} boogie_si_record_i8($i103);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i79);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref($i104, 4));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i103);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i107, $i108);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i79);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref($i110, 4));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p112, $i109);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i79, 1);
    call {:si_unique_call 229} {:cexpr "i"} boogie_si_record_i32($i113);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i114 := $sle.i32($i113, $i40);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i114 == 1);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb53:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i79 := $i113;
    goto $bb53_dummy;

  $bb50:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i10 := $i85;
    goto $bb6;

  $bb47:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i10 := $i82;
    goto $bb6;

  $bb39:
    assume $i77 == 1;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb36:
    assume $i72 == 1;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} warn_slowpath_null(.str.27, 208);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i65 == 1;
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i22);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i22, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i44 := 0;
    assume {:branchcond $i43} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i44);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 1);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(2, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i57);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i40 := $i44;
    goto $bb20;

  $bb21:
    assume $i43 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i45, $i46 := 0, $i22;
    goto $bb24;

  $bb24:
    call $i47, $i48, $i49, $i50, $i51, $i52, $i45, $i46, $i53 := vx_read_status_loop_$bb24($i47, $i48, $i49, $i50, $i51, $i52, $i45, $i46, $i53);
    goto $bb24_last;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 1);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i45;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i51 := $ashr.i32($i46, 1);
    call {:si_unique_call 212} {:cexpr "val"} boogie_si_record_i32($i51);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i53 := $i50;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i44 := $i53;
    goto $bb23;

  $bb29:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i45, $i46 := $i50, $i51;
    goto $bb29_dummy;

  $bb26:
    assume $i48 == 1;
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i45, 1);
    call {:si_unique_call 211} {:cexpr "size"} boogie_si_record_i32($i49);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb28;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i22, 255);
    call {:si_unique_call 208} {:cexpr "size"} boogie_si_record_i32($i31);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i22, 16776960);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i32);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i31);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(2, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i40 := $i31;
    goto $bb20;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(2, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb53_dummy:
    assume false;
    return;

  $bb45_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  $bb29_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_750;
}



const vx_update_pipe_position: ref;

axiom vx_update_pipe_position == $sub.ref(0, 275727);

procedure vx_update_pipe_position($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_update_pipe_position($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p3 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vx_init_rmh($p3, 46);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vx_set_pipe_cmd_params($p3, $i7, $i9, 0);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $i10 := vx_send_msg($p0, $p3);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 236} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1048575);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i18 := $shl.i64($i17, 24);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(1, 4));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i18, $i22);
    call {:si_unique_call 237} {:cexpr "count"} boogie_si_record_i64($i23);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i26 := $load.i64($M.0, $p25);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i64.i32($i26);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i24, $i27);
    call {:si_unique_call 238} {:cexpr "update"} boogie_si_record_i32($i28);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(64, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i23);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, $i28);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 1168)), $mul.ref(128, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i39 := $sge.i32($i35, $i38);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(52, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $i28);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(52, 1));
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i50);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i39 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 1168)), $mul.ref(128, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i45 := $urem.i64($i42, $i44);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_97: ref;

axiom ldv_mutex_lock_97 == $sub.ref(0, 276759);

procedure ldv_mutex_lock_97($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_97($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_98: ref;

axiom ldv_mutex_unlock_98 == $sub.ref(0, 277791);

procedure ldv_mutex_unlock_98($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_98($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const vx_read_uer_status: ref;

axiom vx_read_uer_status == $sub.ref(0, 278823);

procedure vx_read_uer_status($p0: ref, $p1: ref) returns ($r: i32);



const snd_vx_inl: ref;

axiom snd_vx_inl == $sub.ref(0, 279855);

procedure snd_vx_inl($p0: ref, $i1: i32) returns ($r: i32);



const vx_read_one_cbit: ref;

axiom vx_read_one_cbit == $sub.ref(0, 280887);

procedure vx_read_one_cbit($p0: ref, $i1: i32) returns ($r: i32);



const ldv_mutex_lock_89___0: ref;

axiom ldv_mutex_lock_89___0 == $sub.ref(0, 281919);

procedure ldv_mutex_lock_89___0($p0: ref);



const snd_vx_outl: ref;

axiom snd_vx_outl == $sub.ref(0, 282951);

procedure snd_vx_outl($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation snd_vx_outl($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "snd_vx_outl:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 242} {:cexpr "snd_vx_outl:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(24, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 243} devirtbounce.5($p6, $p0, $i1, $i2);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mutex_unlock_90___0: ref;

axiom ldv_mutex_unlock_90___0 == $sub.ref(0, 283983);

procedure ldv_mutex_unlock_90___0($p0: ref);



const ldv_mutex_lock_101: ref;

axiom ldv_mutex_lock_101 == $sub.ref(0, 285015);

procedure ldv_mutex_lock_101($p0: ref);



const ldv_mutex_unlock_102: ref;

axiom ldv_mutex_unlock_102 == $sub.ref(0, 286047);

procedure ldv_mutex_unlock_102($p0: ref);



const snd_vx_irq_handler: ref;

axiom snd_vx_irq_handler == $sub.ref(0, 287079);

procedure snd_vx_irq_handler($i0: i32, $p1: ref) returns ($r: i32);



const vx_test_and_ack: ref;

axiom vx_test_and_ack == $sub.ref(0, 288111);

procedure vx_test_and_ack($p0: ref) returns ($r: i32);



const snd_vx_dsp_boot: ref;

axiom snd_vx_dsp_boot == $sub.ref(0, 289143);

procedure snd_vx_dsp_boot($p0: ref, $p1: ref) returns ($r: i32);



const vx_reset_board: ref;

axiom vx_reset_board == $sub.ref(0, 290175);

procedure vx_reset_board($p0: ref, $i1: i32);



const vx_validate_irq: ref;

axiom vx_validate_irq == $sub.ref(0, 291207);

procedure vx_validate_irq($p0: ref, $i1: i32);



const msleep: ref;

axiom msleep == $sub.ref(0, 292239);

procedure msleep($i0: i32);



const vx_reset_codec: ref;

axiom vx_reset_codec == $sub.ref(0, 293271);

procedure vx_reset_codec($p0: ref, $i1: i32);



const vx_set_internal_clock: ref;

axiom vx_set_internal_clock == $sub.ref(0, 294303);

procedure vx_set_internal_clock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation vx_set_internal_clock($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $i12: i8;
  var $i13: i32;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "vx_set_internal_clock:arg:freq"} boogie_si_record_i32($i1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i2 := vx_calc_clock_from_freq($p0, $i1);
    call {:si_unique_call 246} {:cexpr "clock"} boogie_si_record_i32($i2);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} __snd_printk.i32.ref.i32.ref.i32.i32(2, .str.72, 212, .str.73, $i2, $i1);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} ldv_mutex_lock_95___0($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(24, 1));
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 2);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i15 := $ashr.i32($i2, 8);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 15);
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} snd_vx_outl($p0, 24, $i16);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i2, 255);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} snd_vx_outl($p0, 23, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} ldv_mutex_unlock_96___0($p18);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i32($i2, 8);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} snd_vx_outb($p0, 24, $i11);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i2);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} snd_vx_outb($p0, 23, $i14);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const vx_set_iec958_status: ref;

axiom vx_set_iec958_status == $sub.ref(0, 295335);

procedure vx_set_iec958_status($p0: ref, $i1: i32);



const vx_write_one_cbit: ref;

axiom vx_write_one_cbit == $sub.ref(0, 296367);

procedure vx_write_one_cbit($p0: ref, $i1: i32, $i2: i32);



const ldv_mutex_lock_91___0: ref;

axiom ldv_mutex_lock_91___0 == $sub.ref(0, 297399);

procedure ldv_mutex_lock_91___0($p0: ref);



const ldv_mutex_unlock_92___0: ref;

axiom ldv_mutex_unlock_92___0 == $sub.ref(0, 298431);

procedure ldv_mutex_unlock_92___0($p0: ref);



const vx_calc_clock_from_freq: ref;

axiom vx_calc_clock_from_freq == $sub.ref(0, 299463);

procedure vx_calc_clock_from_freq($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vx_calc_clock_from_freq($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i1;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "vx_calc_clock_from_freq:arg:freq"} boogie_si_record_i32($i1);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 255} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 257} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 260} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i15 := $sdiv.i32(282240000, $i1);
    call {:si_unique_call 261} {:cexpr "hexfreq"} boogie_si_record_i32($i15);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, 5);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i17 := $sdiv.i32($i16, 10);
    call {:si_unique_call 262} {:cexpr "hexfreq"} boogie_si_record_i32($i17);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i18 := $sle.i32($i17, 512);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 263} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i19);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 265} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i19, 0);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 268} {:cexpr "tmp___2"} boogie_si_record_i64($i28);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i30 := $sle.i32($i17, 1023);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i32 := $sle.i32($i17, 2047);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i35 := $sle.i32($i17, 4095);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i14 := 1534;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i36 := $sdiv.i32($i17, 4);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 511);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i14 := $i37;
    goto $bb6;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i33 := $sdiv.i32($i17, 2);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $sub.i32(0, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i14 := $i34;
    goto $bb6;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i17, $sub.i32(0, 513));
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i14 := $i31;
    goto $bb6;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} warn_slowpath_null(.str.72, 172);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} warn_slowpath_null(.str.72, 165);
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_95___0: ref;

axiom ldv_mutex_lock_95___0 == $sub.ref(0, 300495);

procedure ldv_mutex_lock_95___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_95___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_96___0: ref;

axiom ldv_mutex_unlock_96___0 == $sub.ref(0, 301527);

procedure ldv_mutex_unlock_96___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_96___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const vx_set_codec_reg: ref;

axiom vx_set_codec_reg == $sub.ref(0, 302559);

procedure vx_set_codec_reg($p0: ref, $i1: i32, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.15, $CurrAddr, $M.14, assertsPassed;



implementation vx_set_codec_reg($p0: ref, $i1: i32, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 272} {:cexpr "vx_set_codec_reg:arg:codec"} boogie_si_record_i32($i1);
    call {:si_unique_call 273} {:cexpr "vx_set_codec_reg:arg:reg"} boogie_si_record_i32($i2);
    call {:si_unique_call 274} {:cexpr "vx_set_codec_reg:arg:val"} boogie_si_record_i32($i3);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.15 := $store.i32($M.15, $p5, 0);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p7, 32);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i2);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p10, $i8);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i3);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p13, $i11);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p4);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.15, $p14);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} vx_write_codec_reg($p0, $i1, $i15);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const vx_set_analog_output_level: ref;

axiom vx_set_analog_output_level == $sub.ref(0, 303591);

procedure vx_set_analog_output_level($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const vx_write_codec_reg: ref;

axiom vx_write_codec_reg == $sub.ref(0, 304623);

procedure vx_write_codec_reg($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation vx_write_codec_reg($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} {:cexpr "vx_write_codec_reg:arg:codec"} boogie_si_record_i32($i1);
    call {:si_unique_call 277} {:cexpr "vx_write_codec_reg:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 278} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 280} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 283} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 32768);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} ldv_mutex_lock_89($p24);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 136)), $mul.ref(48, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    call {:si_unique_call 285} devirtbounce.5($p28, $p0, $i1, $i2);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} ldv_mutex_unlock_90($p29);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} warn_slowpath_null(.str.121, 35);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_89: ref;

axiom ldv_mutex_lock_89 == $sub.ref(0, 305655);

procedure ldv_mutex_lock_89($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_89($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_90: ref;

axiom ldv_mutex_unlock_90 == $sub.ref(0, 306687);

procedure ldv_mutex_unlock_90($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_90($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const snd_vx_dsp_load: ref;

axiom snd_vx_dsp_load == $sub.ref(0, 307719);

procedure snd_vx_dsp_load($p0: ref, $p1: ref) returns ($r: i32);



const vx_toggle_dac_mute: ref;

axiom vx_toggle_dac_mute == $sub.ref(0, 308751);

procedure vx_toggle_dac_mute($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.15, $CurrAddr, $M.14, assertsPassed;



implementation vx_toggle_dac_mute($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} {:cexpr "vx_toggle_dac_mute:arg:mute"} boogie_si_record_i32($i1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(32, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i7 := vx_toggle_dac_mute_loop_$bb4($p0, $i1, $p2, $p8, $p9, $p10, $p11, $i12, $i13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $p21, $p22, $i23, $i24, $i7);
    goto $bb4_last;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i1, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 56 else 8);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vx_set_codec_reg($p0, $i7, 2, $i19);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p2);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32($i20, $i23);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb9_dummy;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 290} devirtbounce.5($p17, $p0, 2, $i1);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;
}



const printk: ref;

axiom printk == $sub.ref(0, 309783);

procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);



const snd_vx_suspend: ref;

axiom snd_vx_suspend == $sub.ref(0, 310815);

procedure snd_vx_suspend($p0: ref) returns ($r: i32);



const snd_power_change_state: ref;

axiom snd_power_change_state == $sub.ref(0, 311847);

procedure snd_power_change_state($p0: ref, $i1: i32);



const snd_pcm_suspend_all: ref;

axiom snd_pcm_suspend_all == $sub.ref(0, 312879);

procedure snd_pcm_suspend_all($p0: ref) returns ($r: i32);



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 313911);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);



const snd_vx_resume: ref;

axiom snd_vx_resume == $sub.ref(0, 314943);

procedure snd_vx_resume($p0: ref) returns ($r: i32);



const snd_vx_create: ref;

axiom snd_vx_create == $sub.ref(0, 315975);

procedure snd_vx_create($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 317007);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed, $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 294} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p2 := ldv_kzalloc($i0, $i1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 318039);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const strcpy: ref;

axiom strcpy == $sub.ref(0, 319071);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const sprintf: ref;

axiom sprintf == $sub.ref(0, 320103);

procedure sprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const vx_proc_init: ref;

axiom vx_proc_init == $sub.ref(0, 321135);

procedure vx_proc_init($p0: ref);



const snd_card_proc_new: ref;

axiom snd_card_proc_new == $sub.ref(0, 322167);

procedure snd_card_proc_new($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const vx_proc_read: ref;

axiom vx_proc_read == $sub.ref(0, 323199);

procedure vx_proc_read($p0: ref, $p1: ref);



const snd_info_set_text_ops: ref;

axiom snd_info_set_text_ops == $sub.ref(0, 324231);

procedure snd_info_set_text_ops($p0: ref, $p1: ref, $p2: ref);



const snd_iprintf: ref;

axiom snd_iprintf == $sub.ref(0, 325263);

procedure snd_iprintf.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure snd_iprintf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure snd_iprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



procedure snd_iprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const ldv_kzalloc: ref;

axiom ldv_kzalloc == $sub.ref(0, 326295);

procedure ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, assertsPassed, $CurrAddr;



implementation ldv_kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} {:cexpr "ldv_kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 297} {:cexpr "ldv_kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} ldv_check_alloc_flags($i1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $p2 := ldv_zalloc($i0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} ldv_after_alloc($p2);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 327327);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} ldv_linux_alloc_irq_check_alloc_flags($i0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} ldv_linux_alloc_usb_lock_check_alloc_flags($i0);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 328359);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p1 := ldv_calloc(1, $i0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_after_alloc: ref;

axiom ldv_after_alloc == $sub.ref(0, 329391);

procedure ldv_after_alloc($p0: ref);
  free requires assertsPassed;



implementation ldv_after_alloc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    return;
}



const ldv_calloc: ref;

axiom ldv_calloc == $sub.ref(0, 330423);

procedure ldv_calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "ldv_calloc:arg:nmemb"} boogie_si_record_i64($i0);
    call {:si_unique_call 307} {:cexpr "ldv_calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i2 := ldv_undef_int();
    call {:si_unique_call 309} {:cexpr "tmp___1"} boogie_si_record_i32($i2);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p4 := calloc($i0, $i1);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} ldv_assume($i7);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i8 := ldv_is_err($p4);
    call {:si_unique_call 313} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} ldv_assume($i10);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb3;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 331455);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_assume: ref;

axiom ldv_assume == $sub.ref(0, 332487);

procedure ldv_assume($i0: i32);
  free requires assertsPassed;



implementation ldv_assume($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "ldv_assume:arg:expression"} boogie_si_record_i32($i0);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ldv_assume_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 333519);

procedure ldv_is_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 4294967295);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_linux_alloc_irq_check_alloc_flags: ref;

axiom ldv_linux_alloc_irq_check_alloc_flags == $sub.ref(0, 334551);

procedure ldv_linux_alloc_irq_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_irq_check_alloc_flags($i0: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i6: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "ldv_linux_alloc_irq_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i1 := ldv_in_interrupt_context();
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 321} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, 32);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i6);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} ldv_assert_linux_alloc_irq__wrong_flags($i8);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const ldv_linux_alloc_usb_lock_check_alloc_flags: ref;

axiom ldv_linux_alloc_usb_lock_check_alloc_flags == $sub.ref(0, 335583);

procedure ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_alloc_usb_lock_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i1;
  var $i5: i1;
  var $i4: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} {:cexpr "ldv_linux_alloc_usb_lock_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i1 := $M.45;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 16);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i4 := 1;
    assume {:branchcond $i3} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 32);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i4 := $i5;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i4);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} ldv_assert_linux_alloc_usb_lock__wrong_flags($i6);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb4;
}



const ldv_assert_linux_alloc_usb_lock__wrong_flags: ref;

axiom ldv_assert_linux_alloc_usb_lock__wrong_flags == $sub.ref(0, 336615);

procedure ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_usb_lock__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} {:cexpr "ldv_assert_linux_alloc_usb_lock__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 1} true;
    call {:si_unique_call 326} __VERIFIER_error();
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_in_interrupt_context: ref;

axiom ldv_in_interrupt_context == $sub.ref(0, 337647);

procedure ldv_in_interrupt_context() returns ($r: i1);
  free requires assertsPassed;



implementation ldv_in_interrupt_context() returns ($r: i1)
{
  var $i0: i8;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i0 := $M.46;
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i8.i1($i0);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_assert_linux_alloc_irq__wrong_flags: ref;

axiom ldv_assert_linux_alloc_irq__wrong_flags == $sub.ref(0, 338679);

procedure ldv_assert_linux_alloc_irq__wrong_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_alloc_irq__wrong_flags($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} {:cexpr "ldv_assert_linux_alloc_irq__wrong_flags:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} __VERIFIER_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const snd_vx_setup_firmware: ref;

axiom snd_vx_setup_firmware == $sub.ref(0, 339711);

procedure snd_vx_setup_firmware($p0: ref) returns ($r: i32);



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 340743);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 341775);

procedure release_firmware($p0: ref);



const snd_vx_pcm_new: ref;

axiom snd_vx_pcm_new == $sub.ref(0, 342807);

procedure snd_vx_pcm_new($p0: ref) returns ($r: i32);



const snd_vx_mixer_new: ref;

axiom snd_vx_mixer_new == $sub.ref(0, 343839);

procedure snd_vx_mixer_new($p0: ref) returns ($r: i32);



const snd_card_register: ref;

axiom snd_card_register == $sub.ref(0, 344871);

procedure snd_card_register($p0: ref) returns ($r: i32);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 345903);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const snd_ctl_new1: ref;

axiom snd_ctl_new1 == $sub.ref(0, 346935);

procedure snd_ctl_new1($p0: ref, $p1: ref) returns ($r: ref);



const snd_ctl_add: ref;

axiom snd_ctl_add == $sub.ref(0, 347967);

procedure snd_ctl_add($p0: ref, $p1: ref) returns ($r: i32);



const vx_reset_audio_levels: ref;

axiom vx_reset_audio_levels == $sub.ref(0, 348999);

procedure vx_reset_audio_levels($p0: ref);



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 350031);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const vx_adjust_audio_level: ref;

axiom vx_adjust_audio_level == $sub.ref(0, 351063);

procedure vx_adjust_audio_level($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_adjust_audio_level($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p16: ref;
  var $i17: i32;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $p52: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p102: ref;
  var $i103: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $p4 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 330} {:cexpr "vx_adjust_audio_level:arg:audio"} boogie_si_record_i32($i1);
    call {:si_unique_call 331} {:cexpr "vx_adjust_audio_level:arg:capture"} boogie_si_record_i32($i2);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 32768);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} vx_init_rmh($p4, 28);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i2, 0);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32(1, $i1);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i17);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(0, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.52, $p23);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p3);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p42, $mul.ref(0, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.52, $p43);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p3);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(0, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.52, $p64);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p3);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p83, $mul.ref(0, 1));
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.52, $p84);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i103 := vx_send_msg($p0, $p4);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 334} {:cexpr "tmp"} boogie_si_record_i32($i103);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i9 := $i103;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i87 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 24);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i91);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.52, $p94);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i96 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 2097152);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i100);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i67 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 4);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i71);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.52, $p74);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i76 == 1;
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i79, 4194304);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i80);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 2);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i50);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.52, $p56);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 10);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i60 := $or.i32($i55, $i59);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p62, $i60);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 1);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i30);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.52, $p36);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i38 := $sext.i16.i32($i37);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i35, $i38);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(2, 4));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i39);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 2048);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i14);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 352095);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vx_init_audio_io: ref;

axiom vx_init_audio_io == $sub.ref(0, 353127);

procedure vx_init_audio_io($p0: ref) returns ($r: i32);



const snd_pcm_new: ref;

axiom snd_pcm_new == $sub.ref(0, 354159);

procedure snd_pcm_new($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32, $p5: ref) returns ($r: i32);



const snd_pcm_set_ops: ref;

axiom snd_pcm_set_ops == $sub.ref(0, 355191);

procedure snd_pcm_set_ops($p0: ref, $i1: i32, $p2: ref);



const snd_vx_pcm_free: ref;

axiom snd_vx_pcm_free == $sub.ref(0, 356223);

procedure snd_vx_pcm_free($p0: ref);



const kfree: ref;

axiom kfree == $sub.ref(0, 357255);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} free_($p0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 358287);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 338} $free($p0);
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 359319);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);



const vx_set_ibl: ref;

axiom vx_set_ibl == $sub.ref(0, 360351);

procedure vx_set_ibl($p0: ref, $p1: ref) returns ($r: i32);



const ldv_malloc_unknown_size: ref;

axiom ldv_malloc_unknown_size == $sub.ref(0, 361383);

procedure ldv_malloc_unknown_size() returns ($r: ref);



const external_allocated_data: ref;

axiom external_allocated_data == $sub.ref(0, 362415);

procedure external_allocated_data() returns ($r: ref);



const snd_vx_free_firmware: ref;

axiom snd_vx_free_firmware == $sub.ref(0, 363447);

procedure snd_vx_free_firmware($p0: ref);



const vx_pcm_playback_open: ref;

axiom vx_pcm_playback_open == $sub.ref(0, 364479);

procedure vx_pcm_playback_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr, $M.14, $M.1, assertsPassed;



implementation vx_pcm_playback_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i11: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_15: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p1, $0.ref);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 32768);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 3792)), $mul.ref(24, 1));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i16 := $mul.i32($i15, 2);
    call {:si_unique_call 340} {:cexpr "audio"} boogie_si_record_i32($i16);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(376, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i19 := $uge.i32($i16, $i18);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 341} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 346} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i16);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 8));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p1, $p35);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.53, $p1);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.53, $p1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.53, $p1);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, $i49);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.53, $p1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.53, $p1);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i16);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 8));
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p58, $p54);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(480, 1));
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 349} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p60, vx_pcm_playback_hw, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(480, 1)), $mul.ref(48, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i64);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.53, $p1);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p67);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} vslice_dummy_var_15 := snd_pcm_hw_constraint_step($p3, 0, 18, 4);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} vslice_dummy_var_16 := snd_pcm_hw_constraint_step($p3, 0, 14, 4);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb11:
    assume $i38 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $i39 := vx_alloc_pipe($p6, 0, $i16, 2, $p1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 348} {:cexpr "err"} boogie_si_record_i32($i39);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.53, $p1);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i16);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p43, $mul.ref($i44, 8));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p41);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i11 := $i39;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} warn_slowpath_null(.str.62, 538);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;
}



const vx_pcm_playback_close: ref;

axiom vx_pcm_playback_close == $sub.ref(0, 365511);

procedure vx_pcm_playback_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_pcm_playback_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i10: i32;
  var vslice_dummy_var_17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p24, $mul.ref($i27, 8));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} vslice_dummy_var_17 := vx_free_pipe($p3, $p15);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const snd_pcm_lib_ioctl: ref;

axiom snd_pcm_lib_ioctl == $sub.ref(0, 366543);

procedure snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 353} {:cexpr "snd_pcm_lib_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 1} true;
    call {:si_unique_call 354} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 355} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const vx_pcm_hw_params: ref;

axiom vx_pcm_hw_params == $sub.ref(0, 367575);

procedure vx_pcm_hw_params($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vx_pcm_hw_params($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i2 := params_buffer_bytes($p1);
    call {:si_unique_call 357} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i4 := snd_pcm_lib_alloc_vmalloc_32_buffer($p0, $i3);
    call {:si_unique_call 359} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vx_pcm_hw_free: ref;

axiom vx_pcm_hw_free == $sub.ref(0, 368607);

procedure vx_pcm_hw_free($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vx_pcm_hw_free($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $i1 := snd_pcm_lib_free_vmalloc_buffer($p0);
    call {:si_unique_call 361} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vx_pcm_prepare: ref;

axiom vx_pcm_prepare == $sub.ref(0, 369639);

procedure vx_pcm_prepare($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, $M.15, assertsPassed;



implementation vx_pcm_prepare($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $i68: i32;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i8;
  var $i94: i8;
  var $i14: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p1 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 32768);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(428, 1));
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    call {:si_unique_call 363} {:cexpr "data_mode"} boogie_si_record_i32($i19);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i8($i21, 1);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i23 := $and.i8($i22, 1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i19, $i24);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(100, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_18 := vx_set_clock($p4, $i68);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i70 := vx_set_format($p4, $p9, $p6);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 376} {:cexpr "err"} boogie_si_record_i32($i70);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, 0);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(24, 1));
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i73, 2);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i74 == 1);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p76, 4);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(128, 1));
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i78 := $load.i64($M.0, $p77);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} $i79 := frames_to_bytes($p6, $i78);
    call {:si_unique_call 378} {:cexpr "tmp"} boogie_si_record_i64($i79);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i79);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(36, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(112, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i84 := frames_to_bytes($p6, $i83);
    call {:si_unique_call 380} {:cexpr "tmp___0"} boogie_si_record_i64($i84);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(40, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(44, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, 0);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_19 := vx_update_pipe_position($p4, $p6, $p9);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(52, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, 0);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $p91);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i93 := $and.i8($i92, $sub.i8(0, 9));
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i94 := $or.i8($i93, 8);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $i94);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(56, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, 2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i14 := $i70;
    goto $bb3;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(100, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i59, $i61);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb22;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 1168)), $mul.ref(100, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __snd_printk.i32.ref.i32.ref.i32.i32(0, .str.62, 843, .str.115, $i64, $i66);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p9);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(4, 1));
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __snd_printk.i32.ref.i32.ref.i32(2, .str.62, 827, .str.114, $i19);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} vx_init_rmh($p1, 7);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vx_set_pipe_cmd_params($p1, 0, $i32, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i33 := vx_send_msg($p4, $p1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 368} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vx_init_rmh($p1, 6);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vx_set_pipe_cmd_params($p1, 0, $i36, $i38);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i19, 0);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i46 := vx_send_msg($p4, $p1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 372} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i19);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p9, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i51 := $and.i8($i48, 1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i52 := $shl.i8($i51, 1);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i53 := $and.i8($i50, $sub.i8(0, 3));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i54 := $or.i8($i53, $i52);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, $i54);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i47 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i14 := $i46;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 16);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i43);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb3;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb3;
}



const vx_pcm_trigger: ref;

axiom vx_pcm_trigger == $sub.ref(0, 370671);

procedure vx_pcm_trigger($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $CurrAddr, $M.60, $M.14, assertsPassed;



implementation vx_pcm_trigger($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i24;
  var $i55: i24;
  var $i56: i24;
  var $p57: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i8;
  var $i72: i8;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i16: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 384} {:cexpr "vx_pcm_trigger:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 32768);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i1, 1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i1, 6);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 0);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 5);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, 3);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i1, 4);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb25:
    assume $i22 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $i85 := vx_toggle_pipe($p6, $p11, 1);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 391} {:cexpr "err"} boogie_si_record_i32($i85);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb49:
    assume $i86 == 1;
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i16 := $i85;
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i21 == 1;
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i83 := vx_toggle_pipe($p6, $p11, 0);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 389} {:cexpr "err"} boogie_si_record_i32($i83);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb46:
    assume $i84 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i16 := $i83;
    goto $bb3;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} vslice_dummy_var_20 := vx_toggle_pipe($p6, $p11, 0);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} vslice_dummy_var_21 := vx_stop_pipe($p6, $p11);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_22 := vx_stop_stream($p6, $p11);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32($i77, 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p11, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i82 := $and.i8($i81, $sub.i8(0, 5));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $i82);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p11);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(4, 1));
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i28 := vx_start_stream($p6, $p11);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    call {:si_unique_call 394} {:cexpr "err"} boogie_si_record_i32($i28);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i46 := vx_toggle_pipe($p6, $p11, 1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 399} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, 1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, $i67);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p11, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i71 := $and.i8($i70, $sub.i8(0, 5));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i72 := $or.i8($i71, 4);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $i72);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i47 == 1;
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $M.54 := $store.ref($M.54, $p48, .str.117);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $M.55 := $store.ref($M.55, $p49, .str.118);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p50, .str.62);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.57 := $store.ref($M.57, $p51, .str.120);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i54 := $load.i24($M.58, $p53);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i55 := $and.i24($i54, $sub.i24(0, 262144));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i56 := $or.i24($i55, 751);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.58 := $store.i24($M.58, $p53, $i56);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.59 := $store.i8($M.59, $p57, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.59, $p58);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i64($i59);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i61 := $and.i64($i60, 1);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $i62 := ldv__builtin_expect($i61, 0);
    call {:si_unique_call 401} {:cexpr "tmp___0"} boogie_si_record_i64($i62);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i63} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} vslice_dummy_var_23 := vx_stop_stream($p6, $p11);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i16 := $i46;
    goto $bb3;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb41:
    assume $i63 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} __dynamic_pr_debug.ref.ref($p3, .str.120);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i29 == 1;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.54 := $store.ref($M.54, $p30, .str.117);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.55 := $store.ref($M.55, $p31, .str.118);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.56 := $store.ref($M.56, $p32, .str.62);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.57 := $store.ref($M.57, $p33, .str.119);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.58, $p35);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 746);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.58 := $store.i24($M.58, $p35, $i38);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.59 := $store.i8($M.59, $p39, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.59, $p40);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 396} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb3;

  $bb35:
    assume $i45 == 1;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} __dynamic_pr_debug.ref.ref($p2, .str.119);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i27 == 1;
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} vx_pcm_playback_transfer($p6, $p0, $p11, 2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 16);
    goto $bb3;
}



const vx_pcm_playback_pointer: ref;

axiom vx_pcm_playback_pointer == $sub.ref(0, 371703);

procedure vx_pcm_playback_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vx_pcm_playback_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(48, 1));
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const snd_pcm_lib_get_vmalloc_page: ref;

axiom snd_pcm_lib_get_vmalloc_page == $sub.ref(0, 372735);

procedure snd_pcm_lib_get_vmalloc_page($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation snd_pcm_lib_get_vmalloc_page($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} {:cexpr "snd_pcm_lib_get_vmalloc_page:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} $p2 := external_alloc();
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const vx_start_stream: ref;

axiom vx_start_stream == $sub.ref(0, 373767);

procedure vx_start_stream($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_start_stream($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i10: i32;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vx_init_rmh($p2, 17);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vx_set_stream_cmd_params($p2, $i6, $i8);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_24 := vx_set_differed_time($p0, $p2, $p1);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i10 := vx_send_msg($p0, $p2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 411} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_172:
    assume !assertsPassed;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 374799);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    return;
}



const vx_toggle_pipe: ref;

axiom vx_toggle_pipe == $sub.ref(0, 375831);

procedure vx_toggle_pipe($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.60, $CurrAddr, $M.14, $M.1, assertsPassed;



implementation vx_toggle_pipe($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i10: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i21: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i6: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i1;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i1;
  var $i165: i32;
  var $i166: i1;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $i205: i32;
  var $i206: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $i225: i32;
  var $i226: i1;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i230: i1;
  var $i231: i32;
  var $i232: i1;
  var $i233: i32;
  var $i234: i1;
  var $i235: i32;
  var $i236: i1;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i1;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i1;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i32;
  var $i278: i1;
  var $i279: i32;
  var $i280: i1;
  var $i281: i32;
  var $i282: i1;
  var $i283: i32;
  var $i284: i1;
  var $i285: i32;
  var $i286: i1;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $i293: i32;
  var $i294: i1;
  var $i295: i32;
  var $i296: i1;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i1;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i320: i1;
  var $i321: i32;
  var $i322: i1;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i1;
  var $i329: i32;
  var $i330: i1;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i1;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $i341: i32;
  var $i342: i1;
  var $i343: i32;
  var $i344: i1;
  var $i345: i32;
  var $i346: i1;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i32;
  var $i352: i1;
  var $i353: i32;
  var $i354: i1;
  var $i355: i32;
  var $i356: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i361: i32;
  var $i362: i1;
  var $i363: i32;
  var $i364: i1;
  var $i365: i32;
  var $i366: i1;
  var $i367: i32;
  var $i368: i1;
  var $i369: i32;
  var $i370: i1;
  var $i371: i32;
  var $i372: i1;
  var $i373: i32;
  var $i374: i1;
  var $i375: i32;
  var $i376: i1;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i1;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i1;
  var $i387: i32;
  var $i388: i1;
  var $i389: i32;
  var $i390: i1;
  var $i391: i32;
  var $i392: i1;
  var $i393: i32;
  var $i394: i1;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i1;
  var $i399: i32;
  var $i400: i1;
  var $i401: i32;
  var $i402: i1;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i32;
  var $i408: i1;
  var $i409: i32;
  var $i410: i1;
  var $i411: i32;
  var $i412: i1;
  var $i413: i32;
  var $i414: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $i418: i1;
  var $i419: i32;
  var $i420: i1;
  var $i421: i32;
  var $i422: i1;
  var $i423: i32;
  var $i424: i1;
  var $i425: i32;
  var $i426: i1;
  var $i427: i32;
  var $i428: i1;
  var $i429: i32;
  var $i430: i1;
  var $i431: i32;
  var $i432: i1;
  var $i433: i32;
  var $i434: i1;
  var $i435: i32;
  var $i436: i1;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i1;
  var $i441: i32;
  var $i442: i1;
  var $i443: i32;
  var $i444: i1;
  var $i445: i32;
  var $i446: i1;
  var $i447: i32;
  var $i448: i1;
  var $i449: i32;
  var $i450: i1;
  var $i451: i32;
  var $i452: i1;
  var $i453: i32;
  var $i454: i1;
  var $i455: i32;
  var $i456: i1;
  var $i457: i32;
  var $i458: i1;
  var $i459: i32;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i1;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $i471: i32;
  var $i472: i1;
  var $i473: i32;
  var $i474: i1;
  var $i475: i32;
  var $i476: i1;
  var $i477: i32;
  var $i478: i1;
  var $i479: i32;
  var $i480: i1;
  var $i481: i32;
  var $i482: i1;
  var $i483: i32;
  var $i484: i1;
  var $i485: i32;
  var $i486: i1;
  var $i487: i32;
  var $i488: i1;
  var $i489: i32;
  var $i490: i1;
  var $i491: i32;
  var $i492: i1;
  var $i493: i32;
  var $i494: i1;
  var $i495: i32;
  var $i496: i1;
  var $i497: i32;
  var $i498: i1;
  var $i499: i32;
  var $i500: i1;
  var $i501: i32;
  var $i502: i1;
  var $i503: i32;
  var $i504: i1;
  var $i505: i32;
  var $i506: i1;
  var $i507: i32;
  var $i508: i1;
  var $i509: i32;
  var $i510: i1;
  var $i511: i32;
  var $i512: i1;
  var $i513: i32;
  var $i514: i1;
  var $i515: i32;
  var $i516: i1;
  var $i517: i32;
  var $i518: i1;
  var $i519: i32;
  var $i520: i1;
  var $i521: i32;
  var $i522: i1;
  var $i523: i32;
  var $i524: i1;
  var $i525: i32;
  var $i526: i1;
  var $i527: i32;
  var $i528: i1;
  var $i529: i32;
  var $i530: i1;
  var $i531: i32;
  var $i532: i1;
  var $i533: i32;
  var $i534: i1;
  var $i535: i32;
  var $i536: i1;
  var $i537: i32;
  var $i538: i1;
  var $i539: i32;
  var $i540: i1;
  var $i541: i32;
  var $i542: i1;
  var $i543: i32;
  var $i544: i1;
  var $i545: i32;
  var $i546: i1;
  var $i547: i32;
  var $i548: i1;
  var $i549: i32;
  var $i550: i1;
  var $i551: i32;
  var $i552: i1;
  var $i553: i32;
  var $i554: i1;
  var $i555: i32;
  var $i556: i1;
  var $i557: i32;
  var $i558: i1;
  var $i559: i32;
  var $i560: i1;
  var $i561: i32;
  var $i562: i1;
  var $i563: i32;
  var $i564: i1;
  var $i565: i32;
  var $i566: i1;
  var $i567: i32;
  var $i568: i1;
  var $i569: i32;
  var $i570: i1;
  var $i571: i32;
  var $i572: i1;
  var $i573: i32;
  var $i574: i1;
  var $i575: i32;
  var $i576: i1;
  var $i577: i32;
  var $i578: i1;
  var $i579: i32;
  var $i580: i1;
  var $i581: i32;
  var $i582: i1;
  var $i583: i32;
  var $i584: i1;
  var $i585: i32;
  var $i586: i1;
  var $i587: i32;
  var $i588: i1;
  var $i589: i32;
  var $i590: i1;
  var $i591: i32;
  var $i592: i1;
  var $i593: i32;
  var $i594: i1;
  var $i595: i32;
  var $i596: i1;
  var $i597: i32;
  var $i598: i1;
  var $i599: i32;
  var $i600: i1;
  var $i601: i32;
  var $i602: i1;
  var $i603: i32;
  var $i604: i1;
  var $i605: i32;
  var $i606: i1;
  var $i607: i32;
  var $i608: i1;
  var $i609: i32;
  var $i610: i1;
  var $i611: i32;
  var $i612: i1;
  var $i613: i32;
  var $i614: i1;
  var $i615: i32;
  var $i616: i1;
  var $i617: i32;
  var $i618: i1;
  var $i619: i32;
  var $i620: i1;
  var $i621: i32;
  var $i622: i1;
  var $i623: i32;
  var $i624: i1;
  var $i625: i32;
  var $i626: i1;
  var $i627: i32;
  var $i628: i1;
  var $i629: i32;
  var $i630: i1;
  var $i631: i32;
  var $i632: i1;
  var $i633: i32;
  var $i634: i1;
  var $i635: i32;
  var $i636: i1;
  var $i637: i32;
  var $i638: i1;
  var $i639: i32;
  var $i640: i1;
  var $i641: i32;
  var $i642: i1;
  var $i643: i32;
  var $i644: i1;
  var $i645: i32;
  var $i646: i1;
  var $i647: i32;
  var $i648: i1;
  var $i649: i32;
  var $i650: i1;
  var $i651: i32;
  var $i652: i1;
  var $i653: i32;
  var $i654: i1;
  var $i655: i32;
  var $i656: i1;
  var $i657: i32;
  var $i658: i1;
  var $i659: i32;
  var $i660: i1;
  var $i661: i32;
  var $i662: i1;
  var $i663: i32;
  var $i664: i1;
  var $i665: i32;
  var $i666: i1;
  var $i667: i32;
  var $i668: i1;
  var $i669: i32;
  var $i670: i1;
  var $i671: i32;
  var $i672: i1;
  var $i673: i32;
  var $i674: i1;
  var $i675: i32;
  var $i676: i1;
  var $i677: i32;
  var $i678: i1;
  var $i679: i32;
  var $i680: i1;
  var $i681: i32;
  var $i682: i1;
  var $i683: i32;
  var $i684: i1;
  var $i685: i32;
  var $i686: i1;
  var $i687: i32;
  var $i688: i1;
  var $i689: i32;
  var $i690: i1;
  var $i691: i32;
  var $i692: i1;
  var $i693: i32;
  var $i694: i1;
  var $i695: i32;
  var $i696: i1;
  var $i697: i32;
  var $i698: i1;
  var $i699: i32;
  var $i700: i1;
  var $i701: i32;
  var $i702: i1;
  var $i703: i32;
  var $i704: i1;
  var $i705: i32;
  var $i706: i1;
  var $i707: i32;
  var $i708: i1;
  var $i709: i32;
  var $i710: i1;
  var $i711: i32;
  var $i712: i1;
  var $i713: i32;
  var $i714: i1;
  var $i715: i32;
  var $i716: i1;
  var $i717: i32;
  var $i718: i1;
  var $i719: i32;
  var $i720: i1;
  var $i721: i32;
  var $i722: i1;
  var $i723: i32;
  var $i724: i1;
  var $i725: i32;
  var $i726: i1;
  var $i727: i32;
  var $i728: i1;
  var $i729: i32;
  var $i730: i1;
  var $i731: i32;
  var $i732: i1;
  var $i733: i32;
  var $i734: i1;
  var $i735: i32;
  var $i736: i1;
  var $i737: i32;
  var $i738: i1;
  var $i739: i32;
  var $i740: i1;
  var $i741: i32;
  var $i742: i1;
  var $i743: i32;
  var $i744: i1;
  var $i745: i32;
  var $i746: i1;
  var $i747: i32;
  var $i748: i1;
  var $i749: i32;
  var $i750: i1;
  var $i751: i32;
  var $i752: i1;
  var $i753: i32;
  var $i754: i1;
  var $i755: i32;
  var $i756: i1;
  var $i757: i32;
  var $i758: i1;
  var $i759: i32;
  var $i760: i1;
  var $i761: i32;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $i765: i32;
  var $i766: i1;
  var $i767: i32;
  var $i768: i1;
  var $i769: i32;
  var $i770: i1;
  var $i771: i32;
  var $i772: i1;
  var $i773: i32;
  var $i774: i1;
  var $i775: i32;
  var $i776: i1;
  var $i777: i32;
  var $i778: i1;
  var $i779: i32;
  var $i780: i1;
  var $i781: i32;
  var $i782: i1;
  var $i783: i32;
  var $i784: i1;
  var $i785: i32;
  var $i786: i1;
  var $i787: i32;
  var $i788: i1;
  var $i789: i32;
  var $i790: i1;
  var $i791: i32;
  var $i792: i1;
  var $i793: i32;
  var $i794: i1;
  var $i795: i32;
  var $i796: i1;
  var $i797: i32;
  var $i798: i1;
  var $i799: i32;
  var $i800: i1;
  var $i801: i32;
  var $i802: i1;
  var $i803: i32;
  var $i804: i1;
  var $i805: i32;
  var $i806: i1;
  var $i807: i32;
  var $i808: i1;
  var $i809: i32;
  var $i810: i1;
  var $i811: i32;
  var $i812: i1;
  var $i813: i32;
  var $i814: i1;
  var $i815: i32;
  var $i816: i1;
  var $i817: i32;
  var $i818: i1;
  var $i819: i32;
  var $i820: i1;
  var $i821: i32;
  var $i822: i1;
  var $i823: i32;
  var $i824: i1;
  var $i825: i32;
  var $i826: i1;
  var $i827: i32;
  var $i828: i1;
  var $i829: i32;
  var $i830: i1;
  var $i831: i32;
  var $i832: i1;
  var $i833: i32;
  var $i834: i1;
  var $i835: i32;
  var $i836: i1;
  var $i837: i32;
  var $i838: i1;
  var $i839: i32;
  var $i840: i1;
  var $i841: i32;
  var $i842: i1;
  var $i843: i32;
  var $i844: i1;
  var $i845: i32;
  var $i846: i1;
  var $i847: i32;
  var $i848: i1;
  var $i849: i32;
  var $i850: i1;
  var $i851: i32;
  var $i852: i1;
  var $i853: i32;
  var $i854: i1;
  var $i855: i32;
  var $i856: i1;
  var $i857: i32;
  var $i858: i1;
  var $i859: i32;
  var $i860: i1;
  var $i861: i32;
  var $i862: i1;
  var $i863: i32;
  var $i864: i1;
  var $i865: i32;
  var $i866: i1;
  var $i867: i32;
  var $i868: i1;
  var $i869: i32;
  var $i870: i1;
  var $i871: i32;
  var $i872: i1;
  var $i873: i32;
  var $i874: i1;
  var $i875: i32;
  var $i876: i1;
  var $i877: i32;
  var $i878: i1;
  var $i879: i32;
  var $i880: i1;
  var $i881: i32;
  var $i882: i1;
  var $i883: i32;
  var $i884: i1;
  var $i885: i32;
  var $i886: i1;
  var $i887: i32;
  var $i888: i1;
  var $i889: i32;
  var $i890: i1;
  var $i891: i32;
  var $i892: i1;
  var $i893: i32;
  var $i894: i1;
  var $i895: i32;
  var $i896: i1;
  var $i897: i32;
  var $i898: i1;
  var $i899: i32;
  var $i900: i1;
  var $i901: i32;
  var $i902: i1;
  var $i903: i32;
  var $i904: i1;
  var $i905: i32;
  var $i906: i1;
  var $i907: i32;
  var $i908: i1;
  var $i909: i32;
  var $i910: i1;
  var $i911: i32;
  var $i912: i1;
  var $i913: i32;
  var $i914: i1;
  var $i915: i32;
  var $i916: i1;
  var $i917: i32;
  var $i918: i1;
  var $i919: i32;
  var $i920: i1;
  var $i921: i32;
  var $i922: i1;
  var $i923: i32;
  var $i924: i1;
  var $i925: i32;
  var $i926: i1;
  var $i927: i32;
  var $i928: i1;
  var $i929: i32;
  var $i930: i1;
  var $i931: i32;
  var $i932: i1;
  var $i933: i32;
  var $i934: i1;
  var $i935: i32;
  var $i936: i1;
  var $i937: i32;
  var $i938: i1;
  var $i939: i32;
  var $i940: i1;
  var $i941: i32;
  var $i942: i1;
  var $i943: i32;
  var $i944: i1;
  var $i945: i32;
  var $i946: i1;
  var $i947: i32;
  var $i948: i1;
  var $i949: i32;
  var $i950: i1;
  var $i951: i32;
  var $i952: i1;
  var $i953: i32;
  var $i954: i1;
  var $i955: i32;
  var $i956: i1;
  var $i957: i32;
  var $i958: i1;
  var $i959: i32;
  var $i960: i1;
  var $i961: i32;
  var $i962: i1;
  var $i963: i32;
  var $i964: i1;
  var $i965: i32;
  var $i966: i1;
  var $i967: i32;
  var $i968: i1;
  var $i969: i32;
  var $i970: i1;
  var $i971: i32;
  var $i972: i1;
  var $i973: i32;
  var $i974: i1;
  var $i975: i32;
  var $i976: i1;
  var $i977: i32;
  var $i978: i1;
  var $i979: i32;
  var $i980: i1;
  var $i981: i32;
  var $i982: i1;
  var $i983: i32;
  var $i984: i1;
  var $i985: i32;
  var $i986: i1;
  var $i987: i32;
  var $i988: i1;
  var $i989: i32;
  var $i990: i1;
  var $i991: i32;
  var $i992: i1;
  var $i993: i32;
  var $i994: i1;
  var $i995: i32;
  var $i996: i1;
  var $i997: i32;
  var $i998: i1;
  var $i999: i32;
  var $i1000: i1;
  var $i1001: i32;
  var $i1002: i1;
  var $i1003: i32;
  var $i1004: i1;
  var $i1005: i32;
  var $i1006: i1;
  var $i1007: i32;
  var $i1008: i1;
  var $i1009: i32;
  var $i1010: i1;
  var $i1011: i32;
  var $i1012: i1;
  var $i1013: i32;
  var $i1014: i1;
  var $i1015: i32;
  var $i1016: i1;
  var $i1017: i32;
  var $i1018: i1;
  var $i1019: i32;
  var $i1020: i1;
  var $i1021: i32;
  var $i1022: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 413} {:cexpr "vx_toggle_pipe:arg:state"} boogie_si_record_i32($i2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i4 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.60, $p3);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, $i7);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i15 := vx_conf_pipe($p0, $p1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 422} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i17 := vx_send_irqa($p0);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 424} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i19 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    call {:si_unique_call 426} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume {:branchcond $i20} true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i20 == 1);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.60, $p3);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, $i2);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb41, $bb42;

  $bb42:
    assume !(1 == 1);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i27 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 0);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i21 := $i27;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i28 == 1);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.60, $p3);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, $i2);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i21 := $i27;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb54, $bb55;

  $bb55:
    assume !(1 == 1);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} $i31 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    assume {:branchcond $i32} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i32 == 1);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.60, $p3);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $i2);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i21 := $i31;
    assume {:branchcond $i34} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb66, $bb67;

  $bb67:
    assume !(1 == 1);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $i35 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i35, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    assume {:branchcond $i36} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i36 == 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.60, $p3);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, $i2);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i21 := $i35;
    assume {:branchcond $i38} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb78, $bb79;

  $bb79:
    assume !(1 == 1);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i39 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i21 := $i39;
    assume {:branchcond $i40} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i40 == 1);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.60, $p3);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, $i2);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i21 := $i39;
    assume {:branchcond $i42} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb90, $bb91;

  $bb91:
    assume !(1 == 1);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i43 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    assume {:branchcond $i44} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i44 == 1);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.60, $p3);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, $i2);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb102, $bb103;

  $bb103:
    assume !(1 == 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i47 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i21 := $i47;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i48 == 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.60, $p3);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, $i2);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i21 := $i47;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb114, $bb115;

  $bb115:
    assume !(1 == 1);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $i51 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i21 := $i51;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i52 == 1);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.60, $p3);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, $i2);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i21 := $i51;
    assume {:branchcond $i54} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb126, $bb127;

  $bb127:
    assume !(1 == 1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i55 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i21 := $i55;
    assume {:branchcond $i56} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i56 == 1);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.60, $p3);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, $i2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i21 := $i55;
    assume {:branchcond $i58} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb138, $bb139;

  $bb139:
    assume !(1 == 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i59 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i21 := $i59;
    assume {:branchcond $i60} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i60 == 1);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.60, $p3);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, $i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i21 := $i59;
    assume {:branchcond $i62} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb150, $bb151;

  $bb151:
    assume !(1 == 1);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i63 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i21 := $i63;
    assume {:branchcond $i64} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i64 == 1);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.60, $p3);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, $i2);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i21 := $i63;
    assume {:branchcond $i66} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb162, $bb163;

  $bb163:
    assume !(1 == 1);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i67 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i21 := $i67;
    assume {:branchcond $i68} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i68 == 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.60, $p3);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, $i2);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i21 := $i67;
    assume {:branchcond $i70} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb174, $bb175;

  $bb175:
    assume !(1 == 1);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i71 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i21 := $i71;
    assume {:branchcond $i72} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i72 == 1);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.60, $p3);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, $i2);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i21 := $i71;
    assume {:branchcond $i74} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb186, $bb187;

  $bb187:
    assume !(1 == 1);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $i75 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 0);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i21 := $i75;
    assume {:branchcond $i76} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i76 == 1);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.60, $p3);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, $i2);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i21 := $i75;
    assume {:branchcond $i78} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb198, $bb199;

  $bb199:
    assume !(1 == 1);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i79 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i80 := $slt.i32($i79, 0);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i21 := $i79;
    assume {:branchcond $i80} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i80 == 1);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.60, $p3);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, $i2);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i21 := $i79;
    assume {:branchcond $i82} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb210, $bb211;

  $bb211:
    assume !(1 == 1);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $i83 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i84 := $slt.i32($i83, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i21 := $i83;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i84 == 1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.60, $p3);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, $i2);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i21 := $i83;
    assume {:branchcond $i86} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb222, $bb223;

  $bb223:
    assume !(1 == 1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i87 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i87, 0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i21 := $i87;
    assume {:branchcond $i88} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i88 == 1);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.60, $p3);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, $i2);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i21 := $i87;
    assume {:branchcond $i90} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb234, $bb235;

  $bb235:
    assume !(1 == 1);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $i91 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i21 := $i91;
    assume {:branchcond $i92} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i92 == 1);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.60, $p3);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, $i2);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i21 := $i91;
    assume {:branchcond $i94} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb246, $bb247;

  $bb247:
    assume !(1 == 1);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i95 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i21 := $i95;
    assume {:branchcond $i96} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i96 == 1);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.60, $p3);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, $i2);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i21 := $i95;
    assume {:branchcond $i98} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb258, $bb259;

  $bb259:
    assume !(1 == 1);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $i99 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i21 := $i99;
    assume {:branchcond $i100} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i100 == 1);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.60, $p3);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, $i2);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i21 := $i99;
    assume {:branchcond $i102} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb270, $bb271;

  $bb271:
    assume !(1 == 1);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i103 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i21 := $i103;
    assume {:branchcond $i104} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i104 == 1);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.60, $p3);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, $i2);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i21 := $i103;
    assume {:branchcond $i106} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb282, $bb283;

  $bb283:
    assume !(1 == 1);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i107 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32($i107, 0);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i21 := $i107;
    assume {:branchcond $i108} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i108 == 1);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.60, $p3);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, $i2);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i21 := $i107;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb294, $bb295;

  $bb295:
    assume !(1 == 1);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i111 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i112 := $slt.i32($i111, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i21 := $i111;
    assume {:branchcond $i112} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i112 == 1);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.60, $p3);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, $i2);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i21 := $i111;
    assume true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb306, $bb307;

  $bb307:
    assume !(1 == 1);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i115 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i21 := $i115;
    assume {:branchcond $i116} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i116 == 1);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.60, $p3);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, $i2);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i21 := $i115;
    assume {:branchcond $i118} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb318, $bb319;

  $bb319:
    assume !(1 == 1);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} $i119 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i119, 0);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i21 := $i119;
    assume {:branchcond $i120} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i120 == 1);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.60, $p3);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, $i2);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i21 := $i119;
    assume {:branchcond $i122} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb330, $bb331;

  $bb331:
    assume !(1 == 1);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i123 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i21 := $i123;
    assume {:branchcond $i124} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i124 == 1);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.60, $p3);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i125, $i2);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i21 := $i123;
    assume {:branchcond $i126} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb342, $bb343;

  $bb343:
    assume !(1 == 1);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i127 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i127, 0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i21 := $i127;
    assume {:branchcond $i128} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i128 == 1);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.60, $p3);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, $i2);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i21 := $i127;
    assume {:branchcond $i130} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb354, $bb355;

  $bb355:
    assume !(1 == 1);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i131 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i131, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i21 := $i131;
    assume {:branchcond $i132} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i132 == 1);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.60, $p3);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, $i2);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i21 := $i131;
    assume {:branchcond $i134} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb366, $bb367;

  $bb367:
    assume !(1 == 1);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i135 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i135, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i21 := $i135;
    assume {:branchcond $i136} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i136 == 1);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.60, $p3);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, $i2);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i21 := $i135;
    assume {:branchcond $i138} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb378, $bb379;

  $bb379:
    assume !(1 == 1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $i139 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i140 := $slt.i32($i139, 0);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i21 := $i139;
    assume {:branchcond $i140} true;
    goto $bb385, $bb386;

  $bb386:
    assume !($i140 == 1);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.60, $p3);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, $i2);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i21 := $i139;
    assume {:branchcond $i142} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb390, $bb391;

  $bb391:
    assume !(1 == 1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i143 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i21 := $i143;
    assume {:branchcond $i144} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i144 == 1);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.60, $p3);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, $i2);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i21 := $i143;
    assume {:branchcond $i146} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb402, $bb403;

  $bb403:
    assume !(1 == 1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i147 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i148 := $slt.i32($i147, 0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i21 := $i147;
    assume {:branchcond $i148} true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i148 == 1);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.60, $p3);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, $i2);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i21 := $i147;
    assume {:branchcond $i150} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb414, $bb415;

  $bb415:
    assume !(1 == 1);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb420;

  $bb420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i151 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i151, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i21 := $i151;
    assume {:branchcond $i152} true;
    goto $bb421, $bb422;

  $bb422:
    assume !($i152 == 1);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.60, $p3);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, $i2);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i21 := $i151;
    assume {:branchcond $i154} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb426, $bb427;

  $bb427:
    assume !(1 == 1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i155 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i155, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i21 := $i155;
    assume {:branchcond $i156} true;
    goto $bb433, $bb434;

  $bb434:
    assume !($i156 == 1);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.60, $p3);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, $i2);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i21 := $i155;
    assume {:branchcond $i158} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb438, $bb439;

  $bb439:
    assume !(1 == 1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i159 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i159, 0);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i21 := $i159;
    assume {:branchcond $i160} true;
    goto $bb445, $bb446;

  $bb446:
    assume !($i160 == 1);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.60, $p3);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, $i2);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i21 := $i159;
    assume {:branchcond $i162} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb450, $bb451;

  $bb451:
    assume !(1 == 1);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    goto $bb456;

  $bb456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i163 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i163, 0);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i21 := $i163;
    assume {:branchcond $i164} true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i164 == 1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.60, $p3);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, $i2);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i21 := $i163;
    assume {:branchcond $i166} true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb462, $bb463;

  $bb463:
    assume !(1 == 1);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    goto $bb468;

  $bb468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i167 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i168 := $slt.i32($i167, 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i21 := $i167;
    assume {:branchcond $i168} true;
    goto $bb469, $bb470;

  $bb470:
    assume !($i168 == 1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.60, $p3);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i170 := $eq.i32($i169, $i2);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i21 := $i167;
    assume {:branchcond $i170} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb474, $bb475;

  $bb475:
    assume !(1 == 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i171 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i171, 0);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i21 := $i171;
    assume {:branchcond $i172} true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i172 == 1);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.60, $p3);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, $i2);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i21 := $i171;
    assume {:branchcond $i174} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb486, $bb487;

  $bb487:
    assume !(1 == 1);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i175 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i175, 0);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i21 := $i175;
    assume {:branchcond $i176} true;
    goto $bb493, $bb494;

  $bb494:
    assume !($i176 == 1);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.60, $p3);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, $i2);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i21 := $i175;
    assume {:branchcond $i178} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb498, $bb499;

  $bb499:
    assume !(1 == 1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    goto $bb504;

  $bb504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i179 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i180 := $slt.i32($i179, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i21 := $i179;
    assume {:branchcond $i180} true;
    goto $bb505, $bb506;

  $bb506:
    assume !($i180 == 1);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.60, $p3);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, $i2);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i21 := $i179;
    assume {:branchcond $i182} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb510, $bb511;

  $bb511:
    assume !(1 == 1);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    goto $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $i183 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i183, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i21 := $i183;
    assume {:branchcond $i184} true;
    goto $bb517, $bb518;

  $bb518:
    assume !($i184 == 1);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.60, $p3);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, $i2);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i21 := $i183;
    assume {:branchcond $i186} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb522, $bb523;

  $bb523:
    assume !(1 == 1);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i187 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i187, 0);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i21 := $i187;
    assume {:branchcond $i188} true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i188 == 1);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.60, $p3);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, $i2);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i21 := $i187;
    assume {:branchcond $i190} true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb534, $bb535;

  $bb535:
    assume !(1 == 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    goto $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $i191 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i191, 0);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i21 := $i191;
    assume {:branchcond $i192} true;
    goto $bb541, $bb542;

  $bb542:
    assume !($i192 == 1);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.60, $p3);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, $i2);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i21 := $i191;
    assume {:branchcond $i194} true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb546, $bb547;

  $bb547:
    assume !(1 == 1);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $i195 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i195, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i21 := $i195;
    assume {:branchcond $i196} true;
    goto $bb553, $bb554;

  $bb554:
    assume !($i196 == 1);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $i197 := $load.i32($M.60, $p3);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, $i2);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i21 := $i195;
    assume {:branchcond $i198} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb558, $bb559;

  $bb559:
    assume !(1 == 1);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    goto $bb560;

  $bb560:
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i199 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i199, 0);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i21 := $i199;
    assume {:branchcond $i200} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i200 == 1);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.60, $p3);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, $i2);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i21 := $i199;
    assume {:branchcond $i202} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb570, $bb571;

  $bb571:
    assume !(1 == 1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $i203 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i203, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i21 := $i203;
    assume {:branchcond $i204} true;
    goto $bb577, $bb578;

  $bb578:
    assume !($i204 == 1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.60, $p3);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, $i2);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i21 := $i203;
    assume {:branchcond $i206} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb582, $bb583;

  $bb583:
    assume !(1 == 1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    goto $bb588;

  $bb588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i207 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i207, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i21 := $i207;
    assume {:branchcond $i208} true;
    goto $bb589, $bb590;

  $bb590:
    assume !($i208 == 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.60, $p3);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, $i2);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i21 := $i207;
    assume {:branchcond $i210} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb594, $bb595;

  $bb595:
    assume !(1 == 1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    goto $bb596;

  $bb596:
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i211 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i212 := $slt.i32($i211, 0);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i21 := $i211;
    assume {:branchcond $i212} true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i212 == 1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i213 := $load.i32($M.60, $p3);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, $i2);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i21 := $i211;
    assume {:branchcond $i214} true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb606, $bb607;

  $bb607:
    assume !(1 == 1);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    goto $bb608;

  $bb608:
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $i215 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i216 := $slt.i32($i215, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i21 := $i215;
    assume {:branchcond $i216} true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i216 == 1);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i217 := $load.i32($M.60, $p3);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, $i2);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i21 := $i215;
    assume {:branchcond $i218} true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb618, $bb619;

  $bb619:
    assume !(1 == 1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $i219 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i219, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i21 := $i219;
    assume {:branchcond $i220} true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i220 == 1);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.60, $p3);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, $i2);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i21 := $i219;
    assume {:branchcond $i222} true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb630, $bb631;

  $bb631:
    assume !(1 == 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i223 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i223, 0);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i21 := $i223;
    assume {:branchcond $i224} true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i224 == 1);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.60, $p3);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, $i2);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i21 := $i223;
    assume {:branchcond $i226} true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb642, $bb643;

  $bb643:
    assume !(1 == 1);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    goto $bb644;

  $bb644:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i227 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i227, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i21 := $i227;
    assume {:branchcond $i228} true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i228 == 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.60, $p3);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, $i2);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i21 := $i227;
    assume {:branchcond $i230} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb654, $bb655;

  $bb655:
    assume !(1 == 1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    goto $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i231 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i232 := $slt.i32($i231, 0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i21 := $i231;
    assume {:branchcond $i232} true;
    goto $bb661, $bb662;

  $bb662:
    assume !($i232 == 1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.60, $p3);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, $i2);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i21 := $i231;
    assume {:branchcond $i234} true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb666, $bb667;

  $bb667:
    assume !(1 == 1);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    goto $bb672;

  $bb672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $i235 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i21 := $i235;
    assume {:branchcond $i236} true;
    goto $bb673, $bb674;

  $bb674:
    assume !($i236 == 1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.60, $p3);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, $i2);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i21 := $i235;
    assume {:branchcond $i238} true;
    goto $bb675, $bb676;

  $bb676:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb678, $bb679;

  $bb679:
    assume !(1 == 1);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb680;

  $bb680:
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    goto $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} $i239 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i240 := $slt.i32($i239, 0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i21 := $i239;
    assume {:branchcond $i240} true;
    goto $bb685, $bb686;

  $bb686:
    assume !($i240 == 1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i241 := $load.i32($M.60, $p3);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, $i2);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i21 := $i239;
    assume {:branchcond $i242} true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb690, $bb691;

  $bb691:
    assume !(1 == 1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb692;

  $bb692:
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    goto $bb696;

  $bb696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i243 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i244 := $slt.i32($i243, 0);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i21 := $i243;
    assume {:branchcond $i244} true;
    goto $bb697, $bb698;

  $bb698:
    assume !($i244 == 1);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.60, $p3);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, $i2);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i21 := $i243;
    assume {:branchcond $i246} true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb702, $bb703;

  $bb703:
    assume !(1 == 1);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb704;

  $bb704:
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    goto $bb708;

  $bb708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} $i247 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i21 := $i247;
    assume {:branchcond $i248} true;
    goto $bb709, $bb710;

  $bb710:
    assume !($i248 == 1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.60, $p3);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, $i2);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i21 := $i247;
    assume {:branchcond $i250} true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb714, $bb715;

  $bb715:
    assume !(1 == 1);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb716;

  $bb716:
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    goto $bb720;

  $bb720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i251 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i252 := $slt.i32($i251, 0);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i21 := $i251;
    assume {:branchcond $i252} true;
    goto $bb721, $bb722;

  $bb722:
    assume !($i252 == 1);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i253 := $load.i32($M.60, $p3);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, $i2);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i21 := $i251;
    assume {:branchcond $i254} true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb726, $bb727;

  $bb727:
    assume !(1 == 1);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb728;

  $bb728:
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    goto $bb732;

  $bb732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i255 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i256 := $slt.i32($i255, 0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i21 := $i255;
    assume {:branchcond $i256} true;
    goto $bb733, $bb734;

  $bb734:
    assume !($i256 == 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.60, $p3);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, $i2);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i21 := $i255;
    assume {:branchcond $i258} true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb738, $bb739;

  $bb739:
    assume !(1 == 1);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    goto $bb740;

  $bb740:
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    goto $bb744;

  $bb744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i259 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i259, 0);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i21 := $i259;
    assume {:branchcond $i260} true;
    goto $bb745, $bb746;

  $bb746:
    assume !($i260 == 1);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.60, $p3);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, $i2);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i21 := $i259;
    assume {:branchcond $i262} true;
    goto $bb747, $bb748;

  $bb748:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb750, $bb751;

  $bb751:
    assume !(1 == 1);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    goto $bb752;

  $bb752:
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    goto $bb756;

  $bb756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} $i263 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i264 := $slt.i32($i263, 0);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i21 := $i263;
    assume {:branchcond $i264} true;
    goto $bb757, $bb758;

  $bb758:
    assume !($i264 == 1);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.60, $p3);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, $i2);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i21 := $i263;
    assume {:branchcond $i266} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb762, $bb763;

  $bb763:
    assume !(1 == 1);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    goto $bb764;

  $bb764:
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    goto $bb768;

  $bb768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i267 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i268 := $slt.i32($i267, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i21 := $i267;
    assume {:branchcond $i268} true;
    goto $bb769, $bb770;

  $bb770:
    assume !($i268 == 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.60, $p3);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, $i2);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i21 := $i267;
    assume {:branchcond $i270} true;
    goto $bb771, $bb772;

  $bb772:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb774, $bb775;

  $bb775:
    assume !(1 == 1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb776;

  $bb776:
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    goto $bb780;

  $bb780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $i271 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i272 := $slt.i32($i271, 0);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i21 := $i271;
    assume {:branchcond $i272} true;
    goto $bb781, $bb782;

  $bb782:
    assume !($i272 == 1);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i273 := $load.i32($M.60, $p3);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i274 := $eq.i32($i273, $i2);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i21 := $i271;
    assume {:branchcond $i274} true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb786, $bb787;

  $bb787:
    assume !(1 == 1);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb788;

  $bb788:
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    goto $bb792;

  $bb792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i275 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i275, 0);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i21 := $i275;
    assume {:branchcond $i276} true;
    goto $bb793, $bb794;

  $bb794:
    assume !($i276 == 1);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.60, $p3);
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, $i2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i21 := $i275;
    assume {:branchcond $i278} true;
    goto $bb795, $bb796;

  $bb796:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb798, $bb799;

  $bb799:
    assume !(1 == 1);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    goto $bb800;

  $bb800:
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    goto $bb804;

  $bb804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $i279 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i280 := $slt.i32($i279, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i21 := $i279;
    assume {:branchcond $i280} true;
    goto $bb805, $bb806;

  $bb806:
    assume !($i280 == 1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.60, $p3);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, $i2);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i21 := $i279;
    assume {:branchcond $i282} true;
    goto $bb807, $bb808;

  $bb808:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb810, $bb811;

  $bb811:
    assume !(1 == 1);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    goto $bb812;

  $bb812:
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    goto $bb816;

  $bb816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $i283 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i283, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i21 := $i283;
    assume {:branchcond $i284} true;
    goto $bb817, $bb818;

  $bb818:
    assume !($i284 == 1);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.60, $p3);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i285, $i2);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i21 := $i283;
    assume {:branchcond $i286} true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb822, $bb823;

  $bb823:
    assume !(1 == 1);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb824;

  $bb824:
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    goto $bb828;

  $bb828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i287 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i287, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i21 := $i287;
    assume {:branchcond $i288} true;
    goto $bb829, $bb830;

  $bb830:
    assume !($i288 == 1);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i289 := $load.i32($M.60, $p3);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, $i2);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i21 := $i287;
    assume {:branchcond $i290} true;
    goto $bb831, $bb832;

  $bb832:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb834, $bb835;

  $bb835:
    assume !(1 == 1);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    goto $bb836;

  $bb836:
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    goto $bb840;

  $bb840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i291 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i292 := $slt.i32($i291, 0);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i21 := $i291;
    assume {:branchcond $i292} true;
    goto $bb841, $bb842;

  $bb842:
    assume !($i292 == 1);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.60, $p3);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i294 := $eq.i32($i293, $i2);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i21 := $i291;
    assume {:branchcond $i294} true;
    goto $bb843, $bb844;

  $bb844:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb846, $bb847;

  $bb847:
    assume !(1 == 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i295 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i296 := $slt.i32($i295, 0);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i21 := $i295;
    assume {:branchcond $i296} true;
    goto $bb853, $bb854;

  $bb854:
    assume !($i296 == 1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.60, $p3);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i298 := $eq.i32($i297, $i2);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i21 := $i295;
    assume {:branchcond $i298} true;
    goto $bb855, $bb856;

  $bb856:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb858, $bb859;

  $bb859:
    assume !(1 == 1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb862;

  $bb862:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb863:
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i299 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i300 := $slt.i32($i299, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i21 := $i299;
    assume {:branchcond $i300} true;
    goto $bb865, $bb866;

  $bb866:
    assume !($i300 == 1);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i301 := $load.i32($M.60, $p3);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, $i2);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i21 := $i299;
    assume {:branchcond $i302} true;
    goto $bb867, $bb868;

  $bb868:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb870, $bb871;

  $bb871:
    assume !(1 == 1);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb874;

  $bb874:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb875:
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $i303 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i303, 0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i21 := $i303;
    assume {:branchcond $i304} true;
    goto $bb877, $bb878;

  $bb878:
    assume !($i304 == 1);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.60, $p3);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, $i2);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i21 := $i303;
    assume {:branchcond $i306} true;
    goto $bb879, $bb880;

  $bb880:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb882, $bb883;

  $bb883:
    assume !(1 == 1);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb886;

  $bb886:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb887:
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i307 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i308 := $slt.i32($i307, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i21 := $i307;
    assume {:branchcond $i308} true;
    goto $bb889, $bb890;

  $bb890:
    assume !($i308 == 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.60, $p3);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, $i2);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i21 := $i307;
    assume {:branchcond $i310} true;
    goto $bb891, $bb892;

  $bb892:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb894, $bb895;

  $bb895:
    assume !(1 == 1);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb898;

  $bb898:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb899:
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i311 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i312 := $slt.i32($i311, 0);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i21 := $i311;
    assume {:branchcond $i312} true;
    goto $bb901, $bb902;

  $bb902:
    assume !($i312 == 1);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.60, $p3);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, $i2);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i21 := $i311;
    assume {:branchcond $i314} true;
    goto $bb903, $bb904;

  $bb904:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb906, $bb907;

  $bb907:
    assume !(1 == 1);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb910;

  $bb910:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $i315 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i316 := $slt.i32($i315, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i21 := $i315;
    assume {:branchcond $i316} true;
    goto $bb913, $bb914;

  $bb914:
    assume !($i316 == 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.60, $p3);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, $i2);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i21 := $i315;
    assume {:branchcond $i318} true;
    goto $bb915, $bb916;

  $bb916:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb918, $bb919;

  $bb919:
    assume !(1 == 1);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb922;

  $bb922:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb923:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i319 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i320 := $slt.i32($i319, 0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i21 := $i319;
    assume {:branchcond $i320} true;
    goto $bb925, $bb926;

  $bb926:
    assume !($i320 == 1);
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.60, $p3);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i321, $i2);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i21 := $i319;
    assume {:branchcond $i322} true;
    goto $bb927, $bb928;

  $bb928:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb930, $bb931;

  $bb931:
    assume !(1 == 1);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb934;

  $bb934:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb935:
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $i323 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i323, 0);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i21 := $i323;
    assume {:branchcond $i324} true;
    goto $bb937, $bb938;

  $bb938:
    assume !($i324 == 1);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.60, $p3);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, $i2);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i21 := $i323;
    assume {:branchcond $i326} true;
    goto $bb939, $bb940;

  $bb940:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb942, $bb943;

  $bb943:
    assume !(1 == 1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb946;

  $bb946:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i327 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i328 := $slt.i32($i327, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i21 := $i327;
    assume {:branchcond $i328} true;
    goto $bb949, $bb950;

  $bb950:
    assume !($i328 == 1);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $i329 := $load.i32($M.60, $p3);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, $i2);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i21 := $i327;
    assume {:branchcond $i330} true;
    goto $bb951, $bb952;

  $bb952:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb954, $bb955;

  $bb955:
    assume !(1 == 1);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb958;

  $bb958:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb959:
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i331 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i332 := $slt.i32($i331, 0);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i21 := $i331;
    assume {:branchcond $i332} true;
    goto $bb961, $bb962;

  $bb962:
    assume !($i332 == 1);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i333 := $load.i32($M.60, $p3);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, $i2);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i21 := $i331;
    assume {:branchcond $i334} true;
    goto $bb963, $bb964;

  $bb964:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb966, $bb967;

  $bb967:
    assume !(1 == 1);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb970;

  $bb970:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb971:
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i335 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i336 := $slt.i32($i335, 0);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i21 := $i335;
    assume {:branchcond $i336} true;
    goto $bb973, $bb974;

  $bb974:
    assume !($i336 == 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i337 := $load.i32($M.60, $p3);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, $i2);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i21 := $i335;
    assume {:branchcond $i338} true;
    goto $bb975, $bb976;

  $bb976:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb978, $bb979;

  $bb979:
    assume !(1 == 1);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb982;

  $bb982:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb983:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i339 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i340 := $slt.i32($i339, 0);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i21 := $i339;
    assume {:branchcond $i340} true;
    goto $bb985, $bb986;

  $bb986:
    assume !($i340 == 1);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.60, $p3);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, $i2);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i21 := $i339;
    assume {:branchcond $i342} true;
    goto $bb987, $bb988;

  $bb988:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb990, $bb991;

  $bb991:
    assume !(1 == 1);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb994;

  $bb994:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb995:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $i343 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i344 := $slt.i32($i343, 0);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i21 := $i343;
    assume {:branchcond $i344} true;
    goto $bb997, $bb998;

  $bb998:
    assume !($i344 == 1);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i345 := $load.i32($M.60, $p3);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, $i2);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i21 := $i343;
    assume {:branchcond $i346} true;
    goto $bb999, $bb1000;

  $bb1000:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1002, $bb1003;

  $bb1003:
    assume !(1 == 1);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1006;

  $bb1006:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb1007:
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $i347 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i348 := $slt.i32($i347, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i21 := $i347;
    assume {:branchcond $i348} true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume !($i348 == 1);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.60, $p3);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, $i2);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i21 := $i347;
    assume {:branchcond $i350} true;
    goto $bb1011, $bb1012;

  $bb1012:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1014, $bb1015;

  $bb1015:
    assume !(1 == 1);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1018;

  $bb1018:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1019:
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i351 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i352 := $slt.i32($i351, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i21 := $i351;
    assume {:branchcond $i352} true;
    goto $bb1021, $bb1022;

  $bb1022:
    assume !($i352 == 1);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i353 := $load.i32($M.60, $p3);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, $i2);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i21 := $i351;
    assume {:branchcond $i354} true;
    goto $bb1023, $bb1024;

  $bb1024:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1026, $bb1027;

  $bb1027:
    assume !(1 == 1);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb1028;

  $bb1028:
    assume {:verifier.code 0} true;
    goto $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1030;

  $bb1030:
    assume {:verifier.code 0} true;
    goto $bb1031;

  $bb1031:
    assume {:verifier.code 0} true;
    goto $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i355 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i356 := $slt.i32($i355, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i21 := $i355;
    assume {:branchcond $i356} true;
    goto $bb1033, $bb1034;

  $bb1034:
    assume !($i356 == 1);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i357 := $load.i32($M.60, $p3);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, $i2);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i21 := $i355;
    assume {:branchcond $i358} true;
    goto $bb1035, $bb1036;

  $bb1036:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb1037;

  $bb1037:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1038, $bb1039;

  $bb1039:
    assume !(1 == 1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    goto $bb1040;

  $bb1040:
    assume {:verifier.code 0} true;
    goto $bb1041;

  $bb1041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1042;

  $bb1042:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i359 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i360 := $slt.i32($i359, 0);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i21 := $i359;
    assume {:branchcond $i360} true;
    goto $bb1045, $bb1046;

  $bb1046:
    assume !($i360 == 1);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.60, $p3);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, $i2);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i21 := $i359;
    assume {:branchcond $i362} true;
    goto $bb1047, $bb1048;

  $bb1048:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb1049;

  $bb1049:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1050, $bb1051;

  $bb1051:
    assume !(1 == 1);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    goto $bb1052;

  $bb1052:
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1054;

  $bb1054:
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1055:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i363 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i364 := $slt.i32($i363, 0);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i21 := $i363;
    assume {:branchcond $i364} true;
    goto $bb1057, $bb1058;

  $bb1058:
    assume !($i364 == 1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.60, $p3);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, $i2);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i21 := $i363;
    assume {:branchcond $i366} true;
    goto $bb1059, $bb1060;

  $bb1060:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb1061;

  $bb1061:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1062, $bb1063;

  $bb1063:
    assume !(1 == 1);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    goto $bb1064;

  $bb1064:
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1066;

  $bb1066:
    assume {:verifier.code 0} true;
    goto $bb1067;

  $bb1067:
    assume {:verifier.code 0} true;
    goto $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i367 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i368 := $slt.i32($i367, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i21 := $i367;
    assume {:branchcond $i368} true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume !($i368 == 1);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.60, $p3);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, $i2);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i21 := $i367;
    assume {:branchcond $i370} true;
    goto $bb1071, $bb1072;

  $bb1072:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb1073;

  $bb1073:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1074, $bb1075;

  $bb1075:
    assume !(1 == 1);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    goto $bb1076;

  $bb1076:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1078;

  $bb1078:
    assume {:verifier.code 0} true;
    goto $bb1079;

  $bb1079:
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $i371 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i372 := $slt.i32($i371, 0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i21 := $i371;
    assume {:branchcond $i372} true;
    goto $bb1081, $bb1082;

  $bb1082:
    assume !($i372 == 1);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.60, $p3);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, $i2);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i21 := $i371;
    assume {:branchcond $i374} true;
    goto $bb1083, $bb1084;

  $bb1084:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb1085;

  $bb1085:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1086, $bb1087;

  $bb1087:
    assume !(1 == 1);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb1088;

  $bb1088:
    assume {:verifier.code 0} true;
    goto $bb1089;

  $bb1089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1090;

  $bb1090:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1091:
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i375 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i376 := $slt.i32($i375, 0);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i21 := $i375;
    assume {:branchcond $i376} true;
    goto $bb1093, $bb1094;

  $bb1094:
    assume !($i376 == 1);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.60, $p3);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, $i2);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i21 := $i375;
    assume {:branchcond $i378} true;
    goto $bb1095, $bb1096;

  $bb1096:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb1097;

  $bb1097:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1098, $bb1099;

  $bb1099:
    assume !(1 == 1);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    goto $bb1100;

  $bb1100:
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1102;

  $bb1102:
    assume {:verifier.code 0} true;
    goto $bb1103;

  $bb1103:
    assume {:verifier.code 0} true;
    goto $bb1104;

  $bb1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i379 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i380 := $slt.i32($i379, 0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i21 := $i379;
    assume {:branchcond $i380} true;
    goto $bb1105, $bb1106;

  $bb1106:
    assume !($i380 == 1);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.60, $p3);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, $i2);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i21 := $i379;
    assume {:branchcond $i382} true;
    goto $bb1107, $bb1108;

  $bb1108:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb1109;

  $bb1109:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1110, $bb1111;

  $bb1111:
    assume !(1 == 1);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    goto $bb1112;

  $bb1112:
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1114;

  $bb1114:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1115:
    assume {:verifier.code 0} true;
    goto $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $i383 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i384 := $slt.i32($i383, 0);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i21 := $i383;
    assume {:branchcond $i384} true;
    goto $bb1117, $bb1118;

  $bb1118:
    assume !($i384 == 1);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i385 := $load.i32($M.60, $p3);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i386 := $eq.i32($i385, $i2);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i21 := $i383;
    assume {:branchcond $i386} true;
    goto $bb1119, $bb1120;

  $bb1120:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1122, $bb1123;

  $bb1123:
    assume !(1 == 1);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    goto $bb1124;

  $bb1124:
    assume {:verifier.code 0} true;
    goto $bb1125;

  $bb1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1126;

  $bb1126:
    assume {:verifier.code 0} true;
    goto $bb1127;

  $bb1127:
    assume {:verifier.code 0} true;
    goto $bb1128;

  $bb1128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $i387 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i388 := $slt.i32($i387, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i21 := $i387;
    assume {:branchcond $i388} true;
    goto $bb1129, $bb1130;

  $bb1130:
    assume !($i388 == 1);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.60, $p3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i390 := $eq.i32($i389, $i2);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i21 := $i387;
    assume {:branchcond $i390} true;
    goto $bb1131, $bb1132;

  $bb1132:
    assume !($i390 == 1);
    assume {:verifier.code 0} true;
    goto $bb1133;

  $bb1133:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1134, $bb1135;

  $bb1135:
    assume !(1 == 1);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    goto $bb1136;

  $bb1136:
    assume {:verifier.code 0} true;
    goto $bb1137;

  $bb1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1138;

  $bb1138:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1139:
    assume {:verifier.code 0} true;
    goto $bb1140;

  $bb1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i391 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i392 := $slt.i32($i391, 0);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i21 := $i391;
    assume {:branchcond $i392} true;
    goto $bb1141, $bb1142;

  $bb1142:
    assume !($i392 == 1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.60, $p3);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i393, $i2);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i21 := $i391;
    assume {:branchcond $i394} true;
    goto $bb1143, $bb1144;

  $bb1144:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb1145;

  $bb1145:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1146, $bb1147;

  $bb1147:
    assume !(1 == 1);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb1148;

  $bb1148:
    assume {:verifier.code 0} true;
    goto $bb1149;

  $bb1149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1150;

  $bb1150:
    assume {:verifier.code 0} true;
    goto $bb1151;

  $bb1151:
    assume {:verifier.code 0} true;
    goto $bb1152;

  $bb1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i395 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i396 := $slt.i32($i395, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i21 := $i395;
    assume {:branchcond $i396} true;
    goto $bb1153, $bb1154;

  $bb1154:
    assume !($i396 == 1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i397 := $load.i32($M.60, $p3);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i398 := $eq.i32($i397, $i2);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i21 := $i395;
    assume {:branchcond $i398} true;
    goto $bb1155, $bb1156;

  $bb1156:
    assume !($i398 == 1);
    assume {:verifier.code 0} true;
    goto $bb1157;

  $bb1157:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1158, $bb1159;

  $bb1159:
    assume !(1 == 1);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    goto $bb1160;

  $bb1160:
    assume {:verifier.code 0} true;
    goto $bb1161;

  $bb1161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1162;

  $bb1162:
    assume {:verifier.code 0} true;
    goto $bb1163;

  $bb1163:
    assume {:verifier.code 0} true;
    goto $bb1164;

  $bb1164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i399 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $i400 := $slt.i32($i399, 0);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $i21 := $i399;
    assume {:branchcond $i400} true;
    goto $bb1165, $bb1166;

  $bb1166:
    assume !($i400 == 1);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i401 := $load.i32($M.60, $p3);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i402 := $eq.i32($i401, $i2);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i21 := $i399;
    assume {:branchcond $i402} true;
    goto $bb1167, $bb1168;

  $bb1168:
    assume !($i402 == 1);
    assume {:verifier.code 0} true;
    goto $bb1169;

  $bb1169:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1170, $bb1171;

  $bb1171:
    assume !(1 == 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    goto $bb1172;

  $bb1172:
    assume {:verifier.code 0} true;
    goto $bb1173;

  $bb1173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1174;

  $bb1174:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1175:
    assume {:verifier.code 0} true;
    goto $bb1176;

  $bb1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i403 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i404 := $slt.i32($i403, 0);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i21 := $i403;
    assume {:branchcond $i404} true;
    goto $bb1177, $bb1178;

  $bb1178:
    assume !($i404 == 1);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i405 := $load.i32($M.60, $p3);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i406 := $eq.i32($i405, $i2);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i21 := $i403;
    assume {:branchcond $i406} true;
    goto $bb1179, $bb1180;

  $bb1180:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb1181;

  $bb1181:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1182, $bb1183;

  $bb1183:
    assume !(1 == 1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    goto $bb1184;

  $bb1184:
    assume {:verifier.code 0} true;
    goto $bb1185;

  $bb1185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1186;

  $bb1186:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1187:
    assume {:verifier.code 0} true;
    goto $bb1188;

  $bb1188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} $i407 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i408 := $slt.i32($i407, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i21 := $i407;
    assume {:branchcond $i408} true;
    goto $bb1189, $bb1190;

  $bb1190:
    assume !($i408 == 1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i409 := $load.i32($M.60, $p3);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, $i2);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i21 := $i407;
    assume {:branchcond $i410} true;
    goto $bb1191, $bb1192;

  $bb1192:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb1193;

  $bb1193:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1194, $bb1195;

  $bb1195:
    assume !(1 == 1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb1196;

  $bb1196:
    assume {:verifier.code 0} true;
    goto $bb1197;

  $bb1197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1198;

  $bb1198:
    assume {:verifier.code 0} true;
    goto $bb1199;

  $bb1199:
    assume {:verifier.code 0} true;
    goto $bb1200;

  $bb1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i411 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i412 := $slt.i32($i411, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i21 := $i411;
    assume {:branchcond $i412} true;
    goto $bb1201, $bb1202;

  $bb1202:
    assume !($i412 == 1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.60, $p3);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i414 := $eq.i32($i413, $i2);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i21 := $i411;
    assume {:branchcond $i414} true;
    goto $bb1203, $bb1204;

  $bb1204:
    assume !($i414 == 1);
    assume {:verifier.code 0} true;
    goto $bb1205;

  $bb1205:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1206, $bb1207;

  $bb1207:
    assume !(1 == 1);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb1208;

  $bb1208:
    assume {:verifier.code 0} true;
    goto $bb1209;

  $bb1209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1210;

  $bb1210:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1211:
    assume {:verifier.code 0} true;
    goto $bb1212;

  $bb1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} $i415 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i416 := $slt.i32($i415, 0);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i21 := $i415;
    assume {:branchcond $i416} true;
    goto $bb1213, $bb1214;

  $bb1214:
    assume !($i416 == 1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i417 := $load.i32($M.60, $p3);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i418 := $eq.i32($i417, $i2);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i21 := $i415;
    assume {:branchcond $i418} true;
    goto $bb1215, $bb1216;

  $bb1216:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb1217;

  $bb1217:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1218, $bb1219;

  $bb1219:
    assume !(1 == 1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb1220;

  $bb1220:
    assume {:verifier.code 0} true;
    goto $bb1221;

  $bb1221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1222;

  $bb1222:
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1223:
    assume {:verifier.code 0} true;
    goto $bb1224;

  $bb1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i419 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i420 := $slt.i32($i419, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i21 := $i419;
    assume {:branchcond $i420} true;
    goto $bb1225, $bb1226;

  $bb1226:
    assume !($i420 == 1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.60, $p3);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, $i2);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $i21 := $i419;
    assume {:branchcond $i422} true;
    goto $bb1227, $bb1228;

  $bb1228:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb1229;

  $bb1229:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1230, $bb1231;

  $bb1231:
    assume !(1 == 1);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb1232;

  $bb1232:
    assume {:verifier.code 0} true;
    goto $bb1233;

  $bb1233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1234;

  $bb1234:
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1235:
    assume {:verifier.code 0} true;
    goto $bb1236;

  $bb1236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i423 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i424 := $slt.i32($i423, 0);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i21 := $i423;
    assume {:branchcond $i424} true;
    goto $bb1237, $bb1238;

  $bb1238:
    assume !($i424 == 1);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.60, $p3);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i425, $i2);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i21 := $i423;
    assume {:branchcond $i426} true;
    goto $bb1239, $bb1240;

  $bb1240:
    assume !($i426 == 1);
    assume {:verifier.code 0} true;
    goto $bb1241;

  $bb1241:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1242, $bb1243;

  $bb1243:
    assume !(1 == 1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    goto $bb1244;

  $bb1244:
    assume {:verifier.code 0} true;
    goto $bb1245;

  $bb1245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1246;

  $bb1246:
    assume {:verifier.code 0} true;
    goto $bb1247;

  $bb1247:
    assume {:verifier.code 0} true;
    goto $bb1248;

  $bb1248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i427 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i428 := $slt.i32($i427, 0);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i21 := $i427;
    assume {:branchcond $i428} true;
    goto $bb1249, $bb1250;

  $bb1250:
    assume !($i428 == 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i429 := $load.i32($M.60, $p3);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32($i429, $i2);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i21 := $i427;
    assume {:branchcond $i430} true;
    goto $bb1251, $bb1252;

  $bb1252:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb1253;

  $bb1253:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1254, $bb1255;

  $bb1255:
    assume !(1 == 1);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    goto $bb1256;

  $bb1256:
    assume {:verifier.code 0} true;
    goto $bb1257;

  $bb1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1258;

  $bb1258:
    assume {:verifier.code 0} true;
    goto $bb1259;

  $bb1259:
    assume {:verifier.code 0} true;
    goto $bb1260;

  $bb1260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $i431 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i432 := $slt.i32($i431, 0);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i21 := $i431;
    assume {:branchcond $i432} true;
    goto $bb1261, $bb1262;

  $bb1262:
    assume !($i432 == 1);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.60, $p3);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i434 := $eq.i32($i433, $i2);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i21 := $i431;
    assume {:branchcond $i434} true;
    goto $bb1263, $bb1264;

  $bb1264:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb1265;

  $bb1265:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1266, $bb1267;

  $bb1267:
    assume !(1 == 1);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb1268;

  $bb1268:
    assume {:verifier.code 0} true;
    goto $bb1269;

  $bb1269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1270;

  $bb1270:
    assume {:verifier.code 0} true;
    goto $bb1271;

  $bb1271:
    assume {:verifier.code 0} true;
    goto $bb1272;

  $bb1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i435 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i436 := $slt.i32($i435, 0);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i21 := $i435;
    assume {:branchcond $i436} true;
    goto $bb1273, $bb1274;

  $bb1274:
    assume !($i436 == 1);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.60, $p3);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i438 := $eq.i32($i437, $i2);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i21 := $i435;
    assume {:branchcond $i438} true;
    goto $bb1275, $bb1276;

  $bb1276:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    goto $bb1277;

  $bb1277:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1278, $bb1279;

  $bb1279:
    assume !(1 == 1);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    goto $bb1280;

  $bb1280:
    assume {:verifier.code 0} true;
    goto $bb1281;

  $bb1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1282;

  $bb1282:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1283:
    assume {:verifier.code 0} true;
    goto $bb1284;

  $bb1284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i439 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i440 := $slt.i32($i439, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $i21 := $i439;
    assume {:branchcond $i440} true;
    goto $bb1285, $bb1286;

  $bb1286:
    assume !($i440 == 1);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.60, $p3);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i442 := $eq.i32($i441, $i2);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i21 := $i439;
    assume {:branchcond $i442} true;
    goto $bb1287, $bb1288;

  $bb1288:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb1289;

  $bb1289:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1290, $bb1291;

  $bb1291:
    assume !(1 == 1);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    goto $bb1292;

  $bb1292:
    assume {:verifier.code 0} true;
    goto $bb1293;

  $bb1293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1294;

  $bb1294:
    assume {:verifier.code 0} true;
    goto $bb1295;

  $bb1295:
    assume {:verifier.code 0} true;
    goto $bb1296;

  $bb1296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i443 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i444 := $slt.i32($i443, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $i21 := $i443;
    assume {:branchcond $i444} true;
    goto $bb1297, $bb1298;

  $bb1298:
    assume !($i444 == 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.60, $p3);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i446 := $eq.i32($i445, $i2);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i21 := $i443;
    assume {:branchcond $i446} true;
    goto $bb1299, $bb1300;

  $bb1300:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb1301;

  $bb1301:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1302, $bb1303;

  $bb1303:
    assume !(1 == 1);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    goto $bb1304;

  $bb1304:
    assume {:verifier.code 0} true;
    goto $bb1305;

  $bb1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1306;

  $bb1306:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1307:
    assume {:verifier.code 0} true;
    goto $bb1308;

  $bb1308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i447 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $i448 := $slt.i32($i447, 0);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i21 := $i447;
    assume {:branchcond $i448} true;
    goto $bb1309, $bb1310;

  $bb1310:
    assume !($i448 == 1);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i449 := $load.i32($M.60, $p3);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i450 := $eq.i32($i449, $i2);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i21 := $i447;
    assume {:branchcond $i450} true;
    goto $bb1311, $bb1312;

  $bb1312:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb1313;

  $bb1313:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1314, $bb1315;

  $bb1315:
    assume !(1 == 1);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    goto $bb1316;

  $bb1316:
    assume {:verifier.code 0} true;
    goto $bb1317;

  $bb1317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1318;

  $bb1318:
    assume {:verifier.code 0} true;
    goto $bb1319;

  $bb1319:
    assume {:verifier.code 0} true;
    goto $bb1320;

  $bb1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $i451 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i452 := $slt.i32($i451, 0);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i21 := $i451;
    assume {:branchcond $i452} true;
    goto $bb1321, $bb1322;

  $bb1322:
    assume !($i452 == 1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i453 := $load.i32($M.60, $p3);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, $i2);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i21 := $i451;
    assume {:branchcond $i454} true;
    goto $bb1323, $bb1324;

  $bb1324:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb1325;

  $bb1325:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1326, $bb1327;

  $bb1327:
    assume !(1 == 1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb1328;

  $bb1328:
    assume {:verifier.code 0} true;
    goto $bb1329;

  $bb1329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1330;

  $bb1330:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1331:
    assume {:verifier.code 0} true;
    goto $bb1332;

  $bb1332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i455 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i456 := $slt.i32($i455, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i21 := $i455;
    assume {:branchcond $i456} true;
    goto $bb1333, $bb1334;

  $bb1334:
    assume !($i456 == 1);
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i457 := $load.i32($M.60, $p3);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, $i2);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i21 := $i455;
    assume {:branchcond $i458} true;
    goto $bb1335, $bb1336;

  $bb1336:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb1337;

  $bb1337:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1338, $bb1339;

  $bb1339:
    assume !(1 == 1);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    goto $bb1340;

  $bb1340:
    assume {:verifier.code 0} true;
    goto $bb1341;

  $bb1341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1342;

  $bb1342:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1343:
    assume {:verifier.code 0} true;
    goto $bb1344;

  $bb1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i459 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i460 := $slt.i32($i459, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i21 := $i459;
    assume {:branchcond $i460} true;
    goto $bb1345, $bb1346;

  $bb1346:
    assume !($i460 == 1);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.60, $p3);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, $i2);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i21 := $i459;
    assume {:branchcond $i462} true;
    goto $bb1347, $bb1348;

  $bb1348:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb1349;

  $bb1349:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1350, $bb1351;

  $bb1351:
    assume !(1 == 1);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    goto $bb1352;

  $bb1352:
    assume {:verifier.code 0} true;
    goto $bb1353;

  $bb1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1354;

  $bb1354:
    assume {:verifier.code 0} true;
    goto $bb1355;

  $bb1355:
    assume {:verifier.code 0} true;
    goto $bb1356;

  $bb1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i463 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i464 := $slt.i32($i463, 0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i21 := $i463;
    assume {:branchcond $i464} true;
    goto $bb1357, $bb1358;

  $bb1358:
    assume !($i464 == 1);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i465 := $load.i32($M.60, $p3);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, $i2);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i21 := $i463;
    assume {:branchcond $i466} true;
    goto $bb1359, $bb1360;

  $bb1360:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb1361;

  $bb1361:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1362, $bb1363;

  $bb1363:
    assume !(1 == 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb1364;

  $bb1364:
    assume {:verifier.code 0} true;
    goto $bb1365;

  $bb1365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1366;

  $bb1366:
    assume {:verifier.code 0} true;
    goto $bb1367;

  $bb1367:
    assume {:verifier.code 0} true;
    goto $bb1368;

  $bb1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i467 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i468 := $slt.i32($i467, 0);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i21 := $i467;
    assume {:branchcond $i468} true;
    goto $bb1369, $bb1370;

  $bb1370:
    assume !($i468 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i469 := $load.i32($M.60, $p3);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i470 := $eq.i32($i469, $i2);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i21 := $i467;
    assume {:branchcond $i470} true;
    goto $bb1371, $bb1372;

  $bb1372:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb1373;

  $bb1373:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1374, $bb1375;

  $bb1375:
    assume !(1 == 1);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    goto $bb1376;

  $bb1376:
    assume {:verifier.code 0} true;
    goto $bb1377;

  $bb1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1378;

  $bb1378:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1379:
    assume {:verifier.code 0} true;
    goto $bb1380;

  $bb1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i471 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i472 := $slt.i32($i471, 0);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i21 := $i471;
    assume {:branchcond $i472} true;
    goto $bb1381, $bb1382;

  $bb1382:
    assume !($i472 == 1);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i473 := $load.i32($M.60, $p3);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i474 := $eq.i32($i473, $i2);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i21 := $i471;
    assume {:branchcond $i474} true;
    goto $bb1383, $bb1384;

  $bb1384:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb1385;

  $bb1385:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1386, $bb1387;

  $bb1387:
    assume !(1 == 1);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    goto $bb1388;

  $bb1388:
    assume {:verifier.code 0} true;
    goto $bb1389;

  $bb1389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1390;

  $bb1390:
    assume {:verifier.code 0} true;
    goto $bb1391;

  $bb1391:
    assume {:verifier.code 0} true;
    goto $bb1392;

  $bb1392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} $i475 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i476 := $slt.i32($i475, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i21 := $i475;
    assume {:branchcond $i476} true;
    goto $bb1393, $bb1394;

  $bb1394:
    assume !($i476 == 1);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i477 := $load.i32($M.60, $p3);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i478 := $eq.i32($i477, $i2);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i21 := $i475;
    assume {:branchcond $i478} true;
    goto $bb1395, $bb1396;

  $bb1396:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb1397;

  $bb1397:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1398, $bb1399;

  $bb1399:
    assume !(1 == 1);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    goto $bb1400;

  $bb1400:
    assume {:verifier.code 0} true;
    goto $bb1401;

  $bb1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1402;

  $bb1402:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1403:
    assume {:verifier.code 0} true;
    goto $bb1404;

  $bb1404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $i479 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i480 := $slt.i32($i479, 0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i21 := $i479;
    assume {:branchcond $i480} true;
    goto $bb1405, $bb1406;

  $bb1406:
    assume !($i480 == 1);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.60, $p3);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i481, $i2);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i21 := $i479;
    assume {:branchcond $i482} true;
    goto $bb1407, $bb1408;

  $bb1408:
    assume !($i482 == 1);
    assume {:verifier.code 0} true;
    goto $bb1409;

  $bb1409:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1410, $bb1411;

  $bb1411:
    assume !(1 == 1);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    goto $bb1412;

  $bb1412:
    assume {:verifier.code 0} true;
    goto $bb1413;

  $bb1413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1414;

  $bb1414:
    assume {:verifier.code 0} true;
    goto $bb1415;

  $bb1415:
    assume {:verifier.code 0} true;
    goto $bb1416;

  $bb1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $i483 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i484 := $slt.i32($i483, 0);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i21 := $i483;
    assume {:branchcond $i484} true;
    goto $bb1417, $bb1418;

  $bb1418:
    assume !($i484 == 1);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i485 := $load.i32($M.60, $p3);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, $i2);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i21 := $i483;
    assume {:branchcond $i486} true;
    goto $bb1419, $bb1420;

  $bb1420:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb1421;

  $bb1421:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1422, $bb1423;

  $bb1423:
    assume !(1 == 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb1424;

  $bb1424:
    assume {:verifier.code 0} true;
    goto $bb1425;

  $bb1425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1426;

  $bb1426:
    assume {:verifier.code 0} true;
    goto $bb1427;

  $bb1427:
    assume {:verifier.code 0} true;
    goto $bb1428;

  $bb1428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i487 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i488 := $slt.i32($i487, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i21 := $i487;
    assume {:branchcond $i488} true;
    goto $bb1429, $bb1430;

  $bb1430:
    assume !($i488 == 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i489 := $load.i32($M.60, $p3);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, $i2);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $i21 := $i487;
    assume {:branchcond $i490} true;
    goto $bb1431, $bb1432;

  $bb1432:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb1433;

  $bb1433:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1434, $bb1435;

  $bb1435:
    assume !(1 == 1);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    goto $bb1436;

  $bb1436:
    assume {:verifier.code 0} true;
    goto $bb1437;

  $bb1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1438;

  $bb1438:
    assume {:verifier.code 0} true;
    goto $bb1439;

  $bb1439:
    assume {:verifier.code 0} true;
    goto $bb1440;

  $bb1440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i491 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i492 := $slt.i32($i491, 0);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i21 := $i491;
    assume {:branchcond $i492} true;
    goto $bb1441, $bb1442;

  $bb1442:
    assume !($i492 == 1);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i493 := $load.i32($M.60, $p3);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, $i2);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i21 := $i491;
    assume {:branchcond $i494} true;
    goto $bb1443, $bb1444;

  $bb1444:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb1445;

  $bb1445:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1446, $bb1447;

  $bb1447:
    assume !(1 == 1);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    goto $bb1448;

  $bb1448:
    assume {:verifier.code 0} true;
    goto $bb1449;

  $bb1449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1450;

  $bb1450:
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1451:
    assume {:verifier.code 0} true;
    goto $bb1452;

  $bb1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i495 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i496 := $slt.i32($i495, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i21 := $i495;
    assume {:branchcond $i496} true;
    goto $bb1453, $bb1454;

  $bb1454:
    assume !($i496 == 1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i497 := $load.i32($M.60, $p3);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i497, $i2);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i21 := $i495;
    assume {:branchcond $i498} true;
    goto $bb1455, $bb1456;

  $bb1456:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb1457;

  $bb1457:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1458, $bb1459;

  $bb1459:
    assume !(1 == 1);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    goto $bb1460;

  $bb1460:
    assume {:verifier.code 0} true;
    goto $bb1461;

  $bb1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1462;

  $bb1462:
    assume {:verifier.code 0} true;
    goto $bb1463;

  $bb1463:
    assume {:verifier.code 0} true;
    goto $bb1464;

  $bb1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $i499 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i500 := $slt.i32($i499, 0);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i21 := $i499;
    assume {:branchcond $i500} true;
    goto $bb1465, $bb1466;

  $bb1466:
    assume !($i500 == 1);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i501 := $load.i32($M.60, $p3);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i502 := $eq.i32($i501, $i2);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i21 := $i499;
    assume {:branchcond $i502} true;
    goto $bb1467, $bb1468;

  $bb1468:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb1469;

  $bb1469:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1470, $bb1471;

  $bb1471:
    assume !(1 == 1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    goto $bb1472;

  $bb1472:
    assume {:verifier.code 0} true;
    goto $bb1473;

  $bb1473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1474;

  $bb1474:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1475:
    assume {:verifier.code 0} true;
    goto $bb1476;

  $bb1476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} $i503 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i504 := $slt.i32($i503, 0);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i21 := $i503;
    assume {:branchcond $i504} true;
    goto $bb1477, $bb1478;

  $bb1478:
    assume !($i504 == 1);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i505 := $load.i32($M.60, $p3);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i506 := $eq.i32($i505, $i2);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i21 := $i503;
    assume {:branchcond $i506} true;
    goto $bb1479, $bb1480;

  $bb1480:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb1481;

  $bb1481:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1482, $bb1483;

  $bb1483:
    assume !(1 == 1);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    goto $bb1484;

  $bb1484:
    assume {:verifier.code 0} true;
    goto $bb1485;

  $bb1485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1486;

  $bb1486:
    assume {:verifier.code 0} true;
    goto $bb1487;

  $bb1487:
    assume {:verifier.code 0} true;
    goto $bb1488;

  $bb1488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i507 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i508 := $slt.i32($i507, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $i21 := $i507;
    assume {:branchcond $i508} true;
    goto $bb1489, $bb1490;

  $bb1490:
    assume !($i508 == 1);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i509 := $load.i32($M.60, $p3);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i510 := $eq.i32($i509, $i2);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i21 := $i507;
    assume {:branchcond $i510} true;
    goto $bb1491, $bb1492;

  $bb1492:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    goto $bb1493;

  $bb1493:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1494, $bb1495;

  $bb1495:
    assume !(1 == 1);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    goto $bb1496;

  $bb1496:
    assume {:verifier.code 0} true;
    goto $bb1497;

  $bb1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1498;

  $bb1498:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1499:
    assume {:verifier.code 0} true;
    goto $bb1500;

  $bb1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i511 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i512 := $slt.i32($i511, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i21 := $i511;
    assume {:branchcond $i512} true;
    goto $bb1501, $bb1502;

  $bb1502:
    assume !($i512 == 1);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i513 := $load.i32($M.60, $p3);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i513, $i2);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i21 := $i511;
    assume {:branchcond $i514} true;
    goto $bb1503, $bb1504;

  $bb1504:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb1505;

  $bb1505:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1506, $bb1507;

  $bb1507:
    assume !(1 == 1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    goto $bb1508;

  $bb1508:
    assume {:verifier.code 0} true;
    goto $bb1509;

  $bb1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1510;

  $bb1510:
    assume {:verifier.code 0} true;
    goto $bb1511;

  $bb1511:
    assume {:verifier.code 0} true;
    goto $bb1512;

  $bb1512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i515 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i516 := $slt.i32($i515, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $i21 := $i515;
    assume {:branchcond $i516} true;
    goto $bb1513, $bb1514;

  $bb1514:
    assume !($i516 == 1);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i517 := $load.i32($M.60, $p3);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, $i2);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i21 := $i515;
    assume {:branchcond $i518} true;
    goto $bb1515, $bb1516;

  $bb1516:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb1517;

  $bb1517:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1518, $bb1519;

  $bb1519:
    assume !(1 == 1);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb1520;

  $bb1520:
    assume {:verifier.code 0} true;
    goto $bb1521;

  $bb1521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1522;

  $bb1522:
    assume {:verifier.code 0} true;
    goto $bb1523;

  $bb1523:
    assume {:verifier.code 0} true;
    goto $bb1524;

  $bb1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i519 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i520 := $slt.i32($i519, 0);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i21 := $i519;
    assume {:branchcond $i520} true;
    goto $bb1525, $bb1526;

  $bb1526:
    assume !($i520 == 1);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i521 := $load.i32($M.60, $p3);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, $i2);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i21 := $i519;
    assume {:branchcond $i522} true;
    goto $bb1527, $bb1528;

  $bb1528:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb1529;

  $bb1529:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1530, $bb1531;

  $bb1531:
    assume !(1 == 1);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    goto $bb1532;

  $bb1532:
    assume {:verifier.code 0} true;
    goto $bb1533;

  $bb1533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1534;

  $bb1534:
    assume {:verifier.code 0} true;
    goto $bb1535;

  $bb1535:
    assume {:verifier.code 0} true;
    goto $bb1536;

  $bb1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i523 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i524 := $slt.i32($i523, 0);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i21 := $i523;
    assume {:branchcond $i524} true;
    goto $bb1537, $bb1538;

  $bb1538:
    assume !($i524 == 1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i525 := $load.i32($M.60, $p3);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i526 := $eq.i32($i525, $i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i21 := $i523;
    assume {:branchcond $i526} true;
    goto $bb1539, $bb1540;

  $bb1540:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb1541;

  $bb1541:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1542, $bb1543;

  $bb1543:
    assume !(1 == 1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto $bb1544;

  $bb1544:
    assume {:verifier.code 0} true;
    goto $bb1545;

  $bb1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1546;

  $bb1546:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1547:
    assume {:verifier.code 0} true;
    goto $bb1548;

  $bb1548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i527 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i528 := $slt.i32($i527, 0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i21 := $i527;
    assume {:branchcond $i528} true;
    goto $bb1549, $bb1550;

  $bb1550:
    assume !($i528 == 1);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.60, $p3);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i530 := $eq.i32($i529, $i2);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i21 := $i527;
    assume {:branchcond $i530} true;
    goto $bb1551, $bb1552;

  $bb1552:
    assume !($i530 == 1);
    assume {:verifier.code 0} true;
    goto $bb1553;

  $bb1553:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1554, $bb1555;

  $bb1555:
    assume !(1 == 1);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    goto $bb1556;

  $bb1556:
    assume {:verifier.code 0} true;
    goto $bb1557;

  $bb1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1558;

  $bb1558:
    assume {:verifier.code 0} true;
    goto $bb1559;

  $bb1559:
    assume {:verifier.code 0} true;
    goto $bb1560;

  $bb1560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i531 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i532 := $slt.i32($i531, 0);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i21 := $i531;
    assume {:branchcond $i532} true;
    goto $bb1561, $bb1562;

  $bb1562:
    assume !($i532 == 1);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i533 := $load.i32($M.60, $p3);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, $i2);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i21 := $i531;
    assume {:branchcond $i534} true;
    goto $bb1563, $bb1564;

  $bb1564:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb1565;

  $bb1565:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1566, $bb1567;

  $bb1567:
    assume !(1 == 1);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    goto $bb1568;

  $bb1568:
    assume {:verifier.code 0} true;
    goto $bb1569;

  $bb1569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1570;

  $bb1570:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1571:
    assume {:verifier.code 0} true;
    goto $bb1572;

  $bb1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i535 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $i536 := $slt.i32($i535, 0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i21 := $i535;
    assume {:branchcond $i536} true;
    goto $bb1573, $bb1574;

  $bb1574:
    assume !($i536 == 1);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i537 := $load.i32($M.60, $p3);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i538 := $eq.i32($i537, $i2);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i21 := $i535;
    assume {:branchcond $i538} true;
    goto $bb1575, $bb1576;

  $bb1576:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb1577;

  $bb1577:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1578, $bb1579;

  $bb1579:
    assume !(1 == 1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb1580;

  $bb1580:
    assume {:verifier.code 0} true;
    goto $bb1581;

  $bb1581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1582;

  $bb1582:
    assume {:verifier.code 0} true;
    goto $bb1583;

  $bb1583:
    assume {:verifier.code 0} true;
    goto $bb1584;

  $bb1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i539 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i540 := $slt.i32($i539, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i21 := $i539;
    assume {:branchcond $i540} true;
    goto $bb1585, $bb1586;

  $bb1586:
    assume !($i540 == 1);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i541 := $load.i32($M.60, $p3);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i541, $i2);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i21 := $i539;
    assume {:branchcond $i542} true;
    goto $bb1587, $bb1588;

  $bb1588:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb1589;

  $bb1589:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1590, $bb1591;

  $bb1591:
    assume !(1 == 1);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb1592;

  $bb1592:
    assume {:verifier.code 0} true;
    goto $bb1593;

  $bb1593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1594;

  $bb1594:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1595:
    assume {:verifier.code 0} true;
    goto $bb1596;

  $bb1596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i543 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i544 := $slt.i32($i543, 0);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i21 := $i543;
    assume {:branchcond $i544} true;
    goto $bb1597, $bb1598;

  $bb1598:
    assume !($i544 == 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i545 := $load.i32($M.60, $p3);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, $i2);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i21 := $i543;
    assume {:branchcond $i546} true;
    goto $bb1599, $bb1600;

  $bb1600:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb1601;

  $bb1601:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1602, $bb1603;

  $bb1603:
    assume !(1 == 1);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    goto $bb1604;

  $bb1604:
    assume {:verifier.code 0} true;
    goto $bb1605;

  $bb1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1606;

  $bb1606:
    assume {:verifier.code 0} true;
    goto $bb1607;

  $bb1607:
    assume {:verifier.code 0} true;
    goto $bb1608;

  $bb1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $i547 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i548 := $slt.i32($i547, 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i21 := $i547;
    assume {:branchcond $i548} true;
    goto $bb1609, $bb1610;

  $bb1610:
    assume !($i548 == 1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i549 := $load.i32($M.60, $p3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, $i2);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i21 := $i547;
    assume {:branchcond $i550} true;
    goto $bb1611, $bb1612;

  $bb1612:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb1613;

  $bb1613:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1614, $bb1615;

  $bb1615:
    assume !(1 == 1);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb1616;

  $bb1616:
    assume {:verifier.code 0} true;
    goto $bb1617;

  $bb1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1618;

  $bb1618:
    assume {:verifier.code 0} true;
    goto $bb1619;

  $bb1619:
    assume {:verifier.code 0} true;
    goto $bb1620;

  $bb1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i551 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i552 := $slt.i32($i551, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i21 := $i551;
    assume {:branchcond $i552} true;
    goto $bb1621, $bb1622;

  $bb1622:
    assume !($i552 == 1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i553 := $load.i32($M.60, $p3);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, $i2);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i21 := $i551;
    assume {:branchcond $i554} true;
    goto $bb1623, $bb1624;

  $bb1624:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb1625;

  $bb1625:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1626, $bb1627;

  $bb1627:
    assume !(1 == 1);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    goto $bb1628;

  $bb1628:
    assume {:verifier.code 0} true;
    goto $bb1629;

  $bb1629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1630;

  $bb1630:
    assume {:verifier.code 0} true;
    goto $bb1631;

  $bb1631:
    assume {:verifier.code 0} true;
    goto $bb1632;

  $bb1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i555 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i556 := $slt.i32($i555, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i21 := $i555;
    assume {:branchcond $i556} true;
    goto $bb1633, $bb1634;

  $bb1634:
    assume !($i556 == 1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.60, $p3);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, $i2);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i21 := $i555;
    assume {:branchcond $i558} true;
    goto $bb1635, $bb1636;

  $bb1636:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb1637;

  $bb1637:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1638, $bb1639;

  $bb1639:
    assume !(1 == 1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb1640;

  $bb1640:
    assume {:verifier.code 0} true;
    goto $bb1641;

  $bb1641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1642;

  $bb1642:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1643:
    assume {:verifier.code 0} true;
    goto $bb1644;

  $bb1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i559 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i560 := $slt.i32($i559, 0);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i21 := $i559;
    assume {:branchcond $i560} true;
    goto $bb1645, $bb1646;

  $bb1646:
    assume !($i560 == 1);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i561 := $load.i32($M.60, $p3);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i562 := $eq.i32($i561, $i2);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i21 := $i559;
    assume {:branchcond $i562} true;
    goto $bb1647, $bb1648;

  $bb1648:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb1649;

  $bb1649:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1650, $bb1651;

  $bb1651:
    assume !(1 == 1);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb1652;

  $bb1652:
    assume {:verifier.code 0} true;
    goto $bb1653;

  $bb1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1654;

  $bb1654:
    assume {:verifier.code 0} true;
    goto $bb1655;

  $bb1655:
    assume {:verifier.code 0} true;
    goto $bb1656;

  $bb1656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i563 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i564 := $slt.i32($i563, 0);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i21 := $i563;
    assume {:branchcond $i564} true;
    goto $bb1657, $bb1658;

  $bb1658:
    assume !($i564 == 1);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.60, $p3);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i566 := $eq.i32($i565, $i2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i21 := $i563;
    assume {:branchcond $i566} true;
    goto $bb1659, $bb1660;

  $bb1660:
    assume !($i566 == 1);
    assume {:verifier.code 0} true;
    goto $bb1661;

  $bb1661:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1662, $bb1663;

  $bb1663:
    assume !(1 == 1);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb1664;

  $bb1664:
    assume {:verifier.code 0} true;
    goto $bb1665;

  $bb1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1666;

  $bb1666:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1667:
    assume {:verifier.code 0} true;
    goto $bb1668;

  $bb1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i567 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i568 := $slt.i32($i567, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i21 := $i567;
    assume {:branchcond $i568} true;
    goto $bb1669, $bb1670;

  $bb1670:
    assume !($i568 == 1);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i569 := $load.i32($M.60, $p3);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i570 := $eq.i32($i569, $i2);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i21 := $i567;
    assume {:branchcond $i570} true;
    goto $bb1671, $bb1672;

  $bb1672:
    assume !($i570 == 1);
    assume {:verifier.code 0} true;
    goto $bb1673;

  $bb1673:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1674, $bb1675;

  $bb1675:
    assume !(1 == 1);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    goto $bb1676;

  $bb1676:
    assume {:verifier.code 0} true;
    goto $bb1677;

  $bb1677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1678;

  $bb1678:
    assume {:verifier.code 0} true;
    goto $bb1679;

  $bb1679:
    assume {:verifier.code 0} true;
    goto $bb1680;

  $bb1680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i571 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i572 := $slt.i32($i571, 0);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i21 := $i571;
    assume {:branchcond $i572} true;
    goto $bb1681, $bb1682;

  $bb1682:
    assume !($i572 == 1);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i573 := $load.i32($M.60, $p3);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i574 := $eq.i32($i573, $i2);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i21 := $i571;
    assume {:branchcond $i574} true;
    goto $bb1683, $bb1684;

  $bb1684:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb1685;

  $bb1685:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1686, $bb1687;

  $bb1687:
    assume !(1 == 1);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    goto $bb1688;

  $bb1688:
    assume {:verifier.code 0} true;
    goto $bb1689;

  $bb1689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1690;

  $bb1690:
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1691:
    assume {:verifier.code 0} true;
    goto $bb1692;

  $bb1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i575 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i576 := $slt.i32($i575, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i21 := $i575;
    assume {:branchcond $i576} true;
    goto $bb1693, $bb1694;

  $bb1694:
    assume !($i576 == 1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i577 := $load.i32($M.60, $p3);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i578 := $eq.i32($i577, $i2);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i21 := $i575;
    assume {:branchcond $i578} true;
    goto $bb1695, $bb1696;

  $bb1696:
    assume !($i578 == 1);
    assume {:verifier.code 0} true;
    goto $bb1697;

  $bb1697:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1698, $bb1699;

  $bb1699:
    assume !(1 == 1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    goto $bb1700;

  $bb1700:
    assume {:verifier.code 0} true;
    goto $bb1701;

  $bb1701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1702;

  $bb1702:
    assume {:verifier.code 0} true;
    goto $bb1703;

  $bb1703:
    assume {:verifier.code 0} true;
    goto $bb1704;

  $bb1704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i579 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $i580 := $slt.i32($i579, 0);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i21 := $i579;
    assume {:branchcond $i580} true;
    goto $bb1705, $bb1706;

  $bb1706:
    assume !($i580 == 1);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i581 := $load.i32($M.60, $p3);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, $i2);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i21 := $i579;
    assume {:branchcond $i582} true;
    goto $bb1707, $bb1708;

  $bb1708:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb1709;

  $bb1709:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1710, $bb1711;

  $bb1711:
    assume !(1 == 1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb1712;

  $bb1712:
    assume {:verifier.code 0} true;
    goto $bb1713;

  $bb1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1714;

  $bb1714:
    assume {:verifier.code 0} true;
    goto $bb1715;

  $bb1715:
    assume {:verifier.code 0} true;
    goto $bb1716;

  $bb1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $i583 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i584 := $slt.i32($i583, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i21 := $i583;
    assume {:branchcond $i584} true;
    goto $bb1717, $bb1718;

  $bb1718:
    assume !($i584 == 1);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i585 := $load.i32($M.60, $p3);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i586 := $eq.i32($i585, $i2);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i21 := $i583;
    assume {:branchcond $i586} true;
    goto $bb1719, $bb1720;

  $bb1720:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb1721;

  $bb1721:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1722, $bb1723;

  $bb1723:
    assume !(1 == 1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    goto $bb1724;

  $bb1724:
    assume {:verifier.code 0} true;
    goto $bb1725;

  $bb1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1726;

  $bb1726:
    assume {:verifier.code 0} true;
    goto $bb1727;

  $bb1727:
    assume {:verifier.code 0} true;
    goto $bb1728;

  $bb1728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i587 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i588 := $slt.i32($i587, 0);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i21 := $i587;
    assume {:branchcond $i588} true;
    goto $bb1729, $bb1730;

  $bb1730:
    assume !($i588 == 1);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.60, $p3);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i589, $i2);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i21 := $i587;
    assume {:branchcond $i590} true;
    goto $bb1731, $bb1732;

  $bb1732:
    assume !($i590 == 1);
    assume {:verifier.code 0} true;
    goto $bb1733;

  $bb1733:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1734, $bb1735;

  $bb1735:
    assume !(1 == 1);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb1736;

  $bb1736:
    assume {:verifier.code 0} true;
    goto $bb1737;

  $bb1737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1738;

  $bb1738:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1739:
    assume {:verifier.code 0} true;
    goto $bb1740;

  $bb1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $i591 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i592 := $slt.i32($i591, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i21 := $i591;
    assume {:branchcond $i592} true;
    goto $bb1741, $bb1742;

  $bb1742:
    assume !($i592 == 1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i593 := $load.i32($M.60, $p3);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i594 := $eq.i32($i593, $i2);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i21 := $i591;
    assume {:branchcond $i594} true;
    goto $bb1743, $bb1744;

  $bb1744:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb1745;

  $bb1745:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1746, $bb1747;

  $bb1747:
    assume !(1 == 1);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    goto $bb1748;

  $bb1748:
    assume {:verifier.code 0} true;
    goto $bb1749;

  $bb1749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1750;

  $bb1750:
    assume {:verifier.code 0} true;
    goto $bb1751;

  $bb1751:
    assume {:verifier.code 0} true;
    goto $bb1752;

  $bb1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i595 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i596 := $slt.i32($i595, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i21 := $i595;
    assume {:branchcond $i596} true;
    goto $bb1753, $bb1754;

  $bb1754:
    assume !($i596 == 1);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i597 := $load.i32($M.60, $p3);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, $i2);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i21 := $i595;
    assume {:branchcond $i598} true;
    goto $bb1755, $bb1756;

  $bb1756:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb1757;

  $bb1757:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1758, $bb1759;

  $bb1759:
    assume !(1 == 1);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    goto $bb1760;

  $bb1760:
    assume {:verifier.code 0} true;
    goto $bb1761;

  $bb1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1762;

  $bb1762:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1763:
    assume {:verifier.code 0} true;
    goto $bb1764;

  $bb1764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i599 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i600 := $slt.i32($i599, 0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i21 := $i599;
    assume {:branchcond $i600} true;
    goto $bb1765, $bb1766;

  $bb1766:
    assume !($i600 == 1);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.60, $p3);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, $i2);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i21 := $i599;
    assume {:branchcond $i602} true;
    goto $bb1767, $bb1768;

  $bb1768:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb1769;

  $bb1769:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1770, $bb1771;

  $bb1771:
    assume !(1 == 1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    goto $bb1772;

  $bb1772:
    assume {:verifier.code 0} true;
    goto $bb1773;

  $bb1773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1774;

  $bb1774:
    assume {:verifier.code 0} true;
    goto $bb1775;

  $bb1775:
    assume {:verifier.code 0} true;
    goto $bb1776;

  $bb1776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i603 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i604 := $slt.i32($i603, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i21 := $i603;
    assume {:branchcond $i604} true;
    goto $bb1777, $bb1778;

  $bb1778:
    assume !($i604 == 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i605 := $load.i32($M.60, $p3);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i606 := $eq.i32($i605, $i2);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i21 := $i603;
    assume {:branchcond $i606} true;
    goto $bb1779, $bb1780;

  $bb1780:
    assume !($i606 == 1);
    assume {:verifier.code 0} true;
    goto $bb1781;

  $bb1781:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1782, $bb1783;

  $bb1783:
    assume !(1 == 1);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    goto $bb1784;

  $bb1784:
    assume {:verifier.code 0} true;
    goto $bb1785;

  $bb1785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1786;

  $bb1786:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1787:
    assume {:verifier.code 0} true;
    goto $bb1788;

  $bb1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i607 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i608 := $slt.i32($i607, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i21 := $i607;
    assume {:branchcond $i608} true;
    goto $bb1789, $bb1790;

  $bb1790:
    assume !($i608 == 1);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i609 := $load.i32($M.60, $p3);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i610 := $eq.i32($i609, $i2);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i21 := $i607;
    assume {:branchcond $i610} true;
    goto $bb1791, $bb1792;

  $bb1792:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb1793;

  $bb1793:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1794, $bb1795;

  $bb1795:
    assume !(1 == 1);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb1796;

  $bb1796:
    assume {:verifier.code 0} true;
    goto $bb1797;

  $bb1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1798;

  $bb1798:
    assume {:verifier.code 0} true;
    goto $bb1799;

  $bb1799:
    assume {:verifier.code 0} true;
    goto $bb1800;

  $bb1800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i611 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i612 := $slt.i32($i611, 0);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i21 := $i611;
    assume {:branchcond $i612} true;
    goto $bb1801, $bb1802;

  $bb1802:
    assume !($i612 == 1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.60, $p3);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i613, $i2);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i21 := $i611;
    assume {:branchcond $i614} true;
    goto $bb1803, $bb1804;

  $bb1804:
    assume !($i614 == 1);
    assume {:verifier.code 0} true;
    goto $bb1805;

  $bb1805:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1806, $bb1807;

  $bb1807:
    assume !(1 == 1);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    goto $bb1808;

  $bb1808:
    assume {:verifier.code 0} true;
    goto $bb1809;

  $bb1809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1810;

  $bb1810:
    assume {:verifier.code 0} true;
    goto $bb1811;

  $bb1811:
    assume {:verifier.code 0} true;
    goto $bb1812;

  $bb1812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i615 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i616 := $slt.i32($i615, 0);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i21 := $i615;
    assume {:branchcond $i616} true;
    goto $bb1813, $bb1814;

  $bb1814:
    assume !($i616 == 1);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i617 := $load.i32($M.60, $p3);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i618 := $eq.i32($i617, $i2);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i21 := $i615;
    assume {:branchcond $i618} true;
    goto $bb1815, $bb1816;

  $bb1816:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb1817;

  $bb1817:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1818, $bb1819;

  $bb1819:
    assume !(1 == 1);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    goto $bb1820;

  $bb1820:
    assume {:verifier.code 0} true;
    goto $bb1821;

  $bb1821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1822;

  $bb1822:
    assume {:verifier.code 0} true;
    goto $bb1823;

  $bb1823:
    assume {:verifier.code 0} true;
    goto $bb1824;

  $bb1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i619 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i620 := $slt.i32($i619, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i21 := $i619;
    assume {:branchcond $i620} true;
    goto $bb1825, $bb1826;

  $bb1826:
    assume !($i620 == 1);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i621 := $load.i32($M.60, $p3);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i622 := $eq.i32($i621, $i2);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i21 := $i619;
    assume {:branchcond $i622} true;
    goto $bb1827, $bb1828;

  $bb1828:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb1829;

  $bb1829:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1830, $bb1831;

  $bb1831:
    assume !(1 == 1);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    goto $bb1832;

  $bb1832:
    assume {:verifier.code 0} true;
    goto $bb1833;

  $bb1833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1834;

  $bb1834:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1835:
    assume {:verifier.code 0} true;
    goto $bb1836;

  $bb1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i623 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i624 := $slt.i32($i623, 0);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i21 := $i623;
    assume {:branchcond $i624} true;
    goto $bb1837, $bb1838;

  $bb1838:
    assume !($i624 == 1);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i625 := $load.i32($M.60, $p3);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i626 := $eq.i32($i625, $i2);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i21 := $i623;
    assume {:branchcond $i626} true;
    goto $bb1839, $bb1840;

  $bb1840:
    assume !($i626 == 1);
    assume {:verifier.code 0} true;
    goto $bb1841;

  $bb1841:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1842, $bb1843;

  $bb1843:
    assume !(1 == 1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    goto $bb1844;

  $bb1844:
    assume {:verifier.code 0} true;
    goto $bb1845;

  $bb1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1846;

  $bb1846:
    assume {:verifier.code 0} true;
    goto $bb1847;

  $bb1847:
    assume {:verifier.code 0} true;
    goto $bb1848;

  $bb1848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i627 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i628 := $slt.i32($i627, 0);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i21 := $i627;
    assume {:branchcond $i628} true;
    goto $bb1849, $bb1850;

  $bb1850:
    assume !($i628 == 1);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i629 := $load.i32($M.60, $p3);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $i630 := $eq.i32($i629, $i2);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i21 := $i627;
    assume {:branchcond $i630} true;
    goto $bb1851, $bb1852;

  $bb1852:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb1853;

  $bb1853:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1854, $bb1855;

  $bb1855:
    assume !(1 == 1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    goto $bb1856;

  $bb1856:
    assume {:verifier.code 0} true;
    goto $bb1857;

  $bb1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1858;

  $bb1858:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1859:
    assume {:verifier.code 0} true;
    goto $bb1860;

  $bb1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i631 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i632 := $slt.i32($i631, 0);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i21 := $i631;
    assume {:branchcond $i632} true;
    goto $bb1861, $bb1862;

  $bb1862:
    assume !($i632 == 1);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i633 := $load.i32($M.60, $p3);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i634 := $eq.i32($i633, $i2);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i21 := $i631;
    assume {:branchcond $i634} true;
    goto $bb1863, $bb1864;

  $bb1864:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb1865;

  $bb1865:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1866, $bb1867;

  $bb1867:
    assume !(1 == 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto $bb1868;

  $bb1868:
    assume {:verifier.code 0} true;
    goto $bb1869;

  $bb1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1870;

  $bb1870:
    assume {:verifier.code 0} true;
    goto $bb1871;

  $bb1871:
    assume {:verifier.code 0} true;
    goto $bb1872;

  $bb1872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} $i635 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i636 := $slt.i32($i635, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i21 := $i635;
    assume {:branchcond $i636} true;
    goto $bb1873, $bb1874;

  $bb1874:
    assume !($i636 == 1);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i637 := $load.i32($M.60, $p3);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i637, $i2);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i21 := $i635;
    assume {:branchcond $i638} true;
    goto $bb1875, $bb1876;

  $bb1876:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb1877;

  $bb1877:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1878, $bb1879;

  $bb1879:
    assume !(1 == 1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    goto $bb1880;

  $bb1880:
    assume {:verifier.code 0} true;
    goto $bb1881;

  $bb1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1882;

  $bb1882:
    assume {:verifier.code 0} true;
    goto $bb1883;

  $bb1883:
    assume {:verifier.code 0} true;
    goto $bb1884;

  $bb1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $i639 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i640 := $slt.i32($i639, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i21 := $i639;
    assume {:branchcond $i640} true;
    goto $bb1885, $bb1886;

  $bb1886:
    assume !($i640 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i641 := $load.i32($M.60, $p3);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i642 := $eq.i32($i641, $i2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i21 := $i639;
    assume {:branchcond $i642} true;
    goto $bb1887, $bb1888;

  $bb1888:
    assume !($i642 == 1);
    assume {:verifier.code 0} true;
    goto $bb1889;

  $bb1889:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1890, $bb1891;

  $bb1891:
    assume !(1 == 1);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb1892;

  $bb1892:
    assume {:verifier.code 0} true;
    goto $bb1893;

  $bb1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1894;

  $bb1894:
    assume {:verifier.code 0} true;
    goto $bb1895;

  $bb1895:
    assume {:verifier.code 0} true;
    goto $bb1896;

  $bb1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} $i643 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i644 := $slt.i32($i643, 0);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i21 := $i643;
    assume {:branchcond $i644} true;
    goto $bb1897, $bb1898;

  $bb1898:
    assume !($i644 == 1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i645 := $load.i32($M.60, $p3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i646 := $eq.i32($i645, $i2);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $i21 := $i643;
    assume {:branchcond $i646} true;
    goto $bb1899, $bb1900;

  $bb1900:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb1901;

  $bb1901:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1902, $bb1903;

  $bb1903:
    assume !(1 == 1);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    goto $bb1904;

  $bb1904:
    assume {:verifier.code 0} true;
    goto $bb1905;

  $bb1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1906;

  $bb1906:
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1907:
    assume {:verifier.code 0} true;
    goto $bb1908;

  $bb1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i647 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i648 := $slt.i32($i647, 0);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i21 := $i647;
    assume {:branchcond $i648} true;
    goto $bb1909, $bb1910;

  $bb1910:
    assume !($i648 == 1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i649 := $load.i32($M.60, $p3);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i649, $i2);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i21 := $i647;
    assume {:branchcond $i650} true;
    goto $bb1911, $bb1912;

  $bb1912:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb1913;

  $bb1913:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1914, $bb1915;

  $bb1915:
    assume !(1 == 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb1916;

  $bb1916:
    assume {:verifier.code 0} true;
    goto $bb1917;

  $bb1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1918;

  $bb1918:
    assume {:verifier.code 0} true;
    goto $bb1919;

  $bb1919:
    assume {:verifier.code 0} true;
    goto $bb1920;

  $bb1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i651 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i652 := $slt.i32($i651, 0);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i21 := $i651;
    assume {:branchcond $i652} true;
    goto $bb1921, $bb1922;

  $bb1922:
    assume !($i652 == 1);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i653 := $load.i32($M.60, $p3);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i654 := $eq.i32($i653, $i2);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i21 := $i651;
    assume {:branchcond $i654} true;
    goto $bb1923, $bb1924;

  $bb1924:
    assume !($i654 == 1);
    assume {:verifier.code 0} true;
    goto $bb1925;

  $bb1925:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1926, $bb1927;

  $bb1927:
    assume !(1 == 1);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb1928;

  $bb1928:
    assume {:verifier.code 0} true;
    goto $bb1929;

  $bb1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1930;

  $bb1930:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1931:
    assume {:verifier.code 0} true;
    goto $bb1932;

  $bb1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $i655 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i656 := $slt.i32($i655, 0);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i21 := $i655;
    assume {:branchcond $i656} true;
    goto $bb1933, $bb1934;

  $bb1934:
    assume !($i656 == 1);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i657 := $load.i32($M.60, $p3);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i658 := $eq.i32($i657, $i2);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i21 := $i655;
    assume {:branchcond $i658} true;
    goto $bb1935, $bb1936;

  $bb1936:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb1937;

  $bb1937:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1938, $bb1939;

  $bb1939:
    assume !(1 == 1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    goto $bb1940;

  $bb1940:
    assume {:verifier.code 0} true;
    goto $bb1941;

  $bb1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1942;

  $bb1942:
    assume {:verifier.code 0} true;
    goto $bb1943;

  $bb1943:
    assume {:verifier.code 0} true;
    goto $bb1944;

  $bb1944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $i659 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i660 := $slt.i32($i659, 0);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i21 := $i659;
    assume {:branchcond $i660} true;
    goto $bb1945, $bb1946;

  $bb1946:
    assume !($i660 == 1);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i661 := $load.i32($M.60, $p3);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i662 := $eq.i32($i661, $i2);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i21 := $i659;
    assume {:branchcond $i662} true;
    goto $bb1947, $bb1948;

  $bb1948:
    assume !($i662 == 1);
    assume {:verifier.code 0} true;
    goto $bb1949;

  $bb1949:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1950, $bb1951;

  $bb1951:
    assume !(1 == 1);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    goto $bb1952;

  $bb1952:
    assume {:verifier.code 0} true;
    goto $bb1953;

  $bb1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1954;

  $bb1954:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1955:
    assume {:verifier.code 0} true;
    goto $bb1956;

  $bb1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i663 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i664 := $slt.i32($i663, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i21 := $i663;
    assume {:branchcond $i664} true;
    goto $bb1957, $bb1958;

  $bb1958:
    assume !($i664 == 1);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i665 := $load.i32($M.60, $p3);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i666 := $eq.i32($i665, $i2);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i21 := $i663;
    assume {:branchcond $i666} true;
    goto $bb1959, $bb1960;

  $bb1960:
    assume !($i666 == 1);
    assume {:verifier.code 0} true;
    goto $bb1961;

  $bb1961:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1962, $bb1963;

  $bb1963:
    assume !(1 == 1);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb1964;

  $bb1964:
    assume {:verifier.code 0} true;
    goto $bb1965;

  $bb1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1966;

  $bb1966:
    assume {:verifier.code 0} true;
    goto $bb1967;

  $bb1967:
    assume {:verifier.code 0} true;
    goto $bb1968;

  $bb1968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $i667 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $i668 := $slt.i32($i667, 0);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i21 := $i667;
    assume {:branchcond $i668} true;
    goto $bb1969, $bb1970;

  $bb1970:
    assume !($i668 == 1);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i669 := $load.i32($M.60, $p3);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i670 := $eq.i32($i669, $i2);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i21 := $i667;
    assume {:branchcond $i670} true;
    goto $bb1971, $bb1972;

  $bb1972:
    assume !($i670 == 1);
    assume {:verifier.code 0} true;
    goto $bb1973;

  $bb1973:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1974, $bb1975;

  $bb1975:
    assume !(1 == 1);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    goto $bb1976;

  $bb1976:
    assume {:verifier.code 0} true;
    goto $bb1977;

  $bb1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1978;

  $bb1978:
    assume {:verifier.code 0} true;
    goto $bb1979;

  $bb1979:
    assume {:verifier.code 0} true;
    goto $bb1980;

  $bb1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $i671 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i672 := $slt.i32($i671, 0);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i21 := $i671;
    assume {:branchcond $i672} true;
    goto $bb1981, $bb1982;

  $bb1982:
    assume !($i672 == 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i673 := $load.i32($M.60, $p3);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i674 := $eq.i32($i673, $i2);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i21 := $i671;
    assume {:branchcond $i674} true;
    goto $bb1983, $bb1984;

  $bb1984:
    assume !($i674 == 1);
    assume {:verifier.code 0} true;
    goto $bb1985;

  $bb1985:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1986, $bb1987;

  $bb1987:
    assume !(1 == 1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb1988;

  $bb1988:
    assume {:verifier.code 0} true;
    goto $bb1989;

  $bb1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb1990;

  $bb1990:
    assume {:verifier.code 0} true;
    goto $bb1991;

  $bb1991:
    assume {:verifier.code 0} true;
    goto $bb1992;

  $bb1992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i675 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i676 := $slt.i32($i675, 0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i21 := $i675;
    assume {:branchcond $i676} true;
    goto $bb1993, $bb1994;

  $bb1994:
    assume !($i676 == 1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i677 := $load.i32($M.60, $p3);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i678 := $eq.i32($i677, $i2);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i21 := $i675;
    assume {:branchcond $i678} true;
    goto $bb1995, $bb1996;

  $bb1996:
    assume !($i678 == 1);
    assume {:verifier.code 0} true;
    goto $bb1997;

  $bb1997:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb1998, $bb1999;

  $bb1999:
    assume !(1 == 1);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    goto $bb2000;

  $bb2000:
    assume {:verifier.code 0} true;
    goto $bb2001;

  $bb2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2002;

  $bb2002:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb2003:
    assume {:verifier.code 0} true;
    goto $bb2004;

  $bb2004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i679 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i680 := $slt.i32($i679, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $i21 := $i679;
    assume {:branchcond $i680} true;
    goto $bb2005, $bb2006;

  $bb2006:
    assume !($i680 == 1);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i681 := $load.i32($M.60, $p3);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i682 := $eq.i32($i681, $i2);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i21 := $i679;
    assume {:branchcond $i682} true;
    goto $bb2007, $bb2008;

  $bb2008:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb2009;

  $bb2009:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2010, $bb2011;

  $bb2011:
    assume !(1 == 1);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    goto $bb2012;

  $bb2012:
    assume {:verifier.code 0} true;
    goto $bb2013;

  $bb2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2014;

  $bb2014:
    assume {:verifier.code 0} true;
    goto $bb2015;

  $bb2015:
    assume {:verifier.code 0} true;
    goto $bb2016;

  $bb2016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $i683 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i684 := $slt.i32($i683, 0);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i21 := $i683;
    assume {:branchcond $i684} true;
    goto $bb2017, $bb2018;

  $bb2018:
    assume !($i684 == 1);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i685 := $load.i32($M.60, $p3);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i686 := $eq.i32($i685, $i2);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i21 := $i683;
    assume {:branchcond $i686} true;
    goto $bb2019, $bb2020;

  $bb2020:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb2021;

  $bb2021:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2022, $bb2023;

  $bb2023:
    assume !(1 == 1);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    goto $bb2024;

  $bb2024:
    assume {:verifier.code 0} true;
    goto $bb2025;

  $bb2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2026;

  $bb2026:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2027:
    assume {:verifier.code 0} true;
    goto $bb2028;

  $bb2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i687 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i688 := $slt.i32($i687, 0);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i21 := $i687;
    assume {:branchcond $i688} true;
    goto $bb2029, $bb2030;

  $bb2030:
    assume !($i688 == 1);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i689 := $load.i32($M.60, $p3);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i690 := $eq.i32($i689, $i2);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i21 := $i687;
    assume {:branchcond $i690} true;
    goto $bb2031, $bb2032;

  $bb2032:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb2033;

  $bb2033:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2034, $bb2035;

  $bb2035:
    assume !(1 == 1);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    goto $bb2036;

  $bb2036:
    assume {:verifier.code 0} true;
    goto $bb2037;

  $bb2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2038;

  $bb2038:
    assume {:verifier.code 0} true;
    goto $bb2039;

  $bb2039:
    assume {:verifier.code 0} true;
    goto $bb2040;

  $bb2040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} $i691 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i692 := $slt.i32($i691, 0);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i21 := $i691;
    assume {:branchcond $i692} true;
    goto $bb2041, $bb2042;

  $bb2042:
    assume !($i692 == 1);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i693 := $load.i32($M.60, $p3);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $i694 := $eq.i32($i693, $i2);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i21 := $i691;
    assume {:branchcond $i694} true;
    goto $bb2043, $bb2044;

  $bb2044:
    assume !($i694 == 1);
    assume {:verifier.code 0} true;
    goto $bb2045;

  $bb2045:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2046, $bb2047;

  $bb2047:
    assume !(1 == 1);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    goto $bb2048;

  $bb2048:
    assume {:verifier.code 0} true;
    goto $bb2049;

  $bb2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2050;

  $bb2050:
    assume {:verifier.code 0} true;
    goto $bb2051;

  $bb2051:
    assume {:verifier.code 0} true;
    goto $bb2052;

  $bb2052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i695 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i696 := $slt.i32($i695, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i21 := $i695;
    assume {:branchcond $i696} true;
    goto $bb2053, $bb2054;

  $bb2054:
    assume !($i696 == 1);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i697 := $load.i32($M.60, $p3);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i698 := $eq.i32($i697, $i2);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i21 := $i695;
    assume {:branchcond $i698} true;
    goto $bb2055, $bb2056;

  $bb2056:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    goto $bb2057;

  $bb2057:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2058, $bb2059;

  $bb2059:
    assume !(1 == 1);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    goto $bb2060;

  $bb2060:
    assume {:verifier.code 0} true;
    goto $bb2061;

  $bb2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2062;

  $bb2062:
    assume {:verifier.code 0} true;
    goto $bb2063;

  $bb2063:
    assume {:verifier.code 0} true;
    goto $bb2064;

  $bb2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i699 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i700 := $slt.i32($i699, 0);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i21 := $i699;
    assume {:branchcond $i700} true;
    goto $bb2065, $bb2066;

  $bb2066:
    assume !($i700 == 1);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i701 := $load.i32($M.60, $p3);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32($i701, $i2);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i21 := $i699;
    assume {:branchcond $i702} true;
    goto $bb2067, $bb2068;

  $bb2068:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb2069;

  $bb2069:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2070, $bb2071;

  $bb2071:
    assume !(1 == 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    goto $bb2072;

  $bb2072:
    assume {:verifier.code 0} true;
    goto $bb2073;

  $bb2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2074;

  $bb2074:
    assume {:verifier.code 0} true;
    goto $bb2075;

  $bb2075:
    assume {:verifier.code 0} true;
    goto $bb2076;

  $bb2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i703 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i704 := $slt.i32($i703, 0);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i21 := $i703;
    assume {:branchcond $i704} true;
    goto $bb2077, $bb2078;

  $bb2078:
    assume !($i704 == 1);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i705 := $load.i32($M.60, $p3);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i706 := $eq.i32($i705, $i2);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i21 := $i703;
    assume {:branchcond $i706} true;
    goto $bb2079, $bb2080;

  $bb2080:
    assume !($i706 == 1);
    assume {:verifier.code 0} true;
    goto $bb2081;

  $bb2081:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2082, $bb2083;

  $bb2083:
    assume !(1 == 1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb2084;

  $bb2084:
    assume {:verifier.code 0} true;
    goto $bb2085;

  $bb2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2086;

  $bb2086:
    assume {:verifier.code 0} true;
    goto $bb2087;

  $bb2087:
    assume {:verifier.code 0} true;
    goto $bb2088;

  $bb2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i707 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i708 := $slt.i32($i707, 0);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i21 := $i707;
    assume {:branchcond $i708} true;
    goto $bb2089, $bb2090;

  $bb2090:
    assume !($i708 == 1);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i709 := $load.i32($M.60, $p3);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i710 := $eq.i32($i709, $i2);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i21 := $i707;
    assume {:branchcond $i710} true;
    goto $bb2091, $bb2092;

  $bb2092:
    assume !($i710 == 1);
    assume {:verifier.code 0} true;
    goto $bb2093;

  $bb2093:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2094, $bb2095;

  $bb2095:
    assume !(1 == 1);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    goto $bb2096;

  $bb2096:
    assume {:verifier.code 0} true;
    goto $bb2097;

  $bb2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2098;

  $bb2098:
    assume {:verifier.code 0} true;
    goto $bb2099;

  $bb2099:
    assume {:verifier.code 0} true;
    goto $bb2100;

  $bb2100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} $i711 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $i712 := $slt.i32($i711, 0);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i21 := $i711;
    assume {:branchcond $i712} true;
    goto $bb2101, $bb2102;

  $bb2102:
    assume !($i712 == 1);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i713 := $load.i32($M.60, $p3);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i714 := $eq.i32($i713, $i2);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i21 := $i711;
    assume {:branchcond $i714} true;
    goto $bb2103, $bb2104;

  $bb2104:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb2105;

  $bb2105:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2106, $bb2107;

  $bb2107:
    assume !(1 == 1);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    goto $bb2108;

  $bb2108:
    assume {:verifier.code 0} true;
    goto $bb2109;

  $bb2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2110;

  $bb2110:
    assume {:verifier.code 0} true;
    goto $bb2111;

  $bb2111:
    assume {:verifier.code 0} true;
    goto $bb2112;

  $bb2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i715 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i716 := $slt.i32($i715, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i21 := $i715;
    assume {:branchcond $i716} true;
    goto $bb2113, $bb2114;

  $bb2114:
    assume !($i716 == 1);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i717 := $load.i32($M.60, $p3);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i718 := $eq.i32($i717, $i2);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i21 := $i715;
    assume {:branchcond $i718} true;
    goto $bb2115, $bb2116;

  $bb2116:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb2117;

  $bb2117:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2118, $bb2119;

  $bb2119:
    assume !(1 == 1);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    goto $bb2120;

  $bb2120:
    assume {:verifier.code 0} true;
    goto $bb2121;

  $bb2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2122;

  $bb2122:
    assume {:verifier.code 0} true;
    goto $bb2123;

  $bb2123:
    assume {:verifier.code 0} true;
    goto $bb2124;

  $bb2124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} $i719 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i720 := $slt.i32($i719, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i21 := $i719;
    assume {:branchcond $i720} true;
    goto $bb2125, $bb2126;

  $bb2126:
    assume !($i720 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i721 := $load.i32($M.60, $p3);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i722 := $eq.i32($i721, $i2);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i21 := $i719;
    assume {:branchcond $i722} true;
    goto $bb2127, $bb2128;

  $bb2128:
    assume !($i722 == 1);
    assume {:verifier.code 0} true;
    goto $bb2129;

  $bb2129:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2130, $bb2131;

  $bb2131:
    assume !(1 == 1);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    goto $bb2132;

  $bb2132:
    assume {:verifier.code 0} true;
    goto $bb2133;

  $bb2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2134;

  $bb2134:
    assume {:verifier.code 0} true;
    goto $bb2135;

  $bb2135:
    assume {:verifier.code 0} true;
    goto $bb2136;

  $bb2136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i723 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i724 := $slt.i32($i723, 0);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i21 := $i723;
    assume {:branchcond $i724} true;
    goto $bb2137, $bb2138;

  $bb2138:
    assume !($i724 == 1);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i725 := $load.i32($M.60, $p3);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i726 := $eq.i32($i725, $i2);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i21 := $i723;
    assume {:branchcond $i726} true;
    goto $bb2139, $bb2140;

  $bb2140:
    assume !($i726 == 1);
    assume {:verifier.code 0} true;
    goto $bb2141;

  $bb2141:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2142, $bb2143;

  $bb2143:
    assume !(1 == 1);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    goto $bb2144;

  $bb2144:
    assume {:verifier.code 0} true;
    goto $bb2145;

  $bb2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2146;

  $bb2146:
    assume {:verifier.code 0} true;
    goto $bb2147;

  $bb2147:
    assume {:verifier.code 0} true;
    goto $bb2148;

  $bb2148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i727 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i728 := $slt.i32($i727, 0);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i21 := $i727;
    assume {:branchcond $i728} true;
    goto $bb2149, $bb2150;

  $bb2150:
    assume !($i728 == 1);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i729 := $load.i32($M.60, $p3);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i730 := $eq.i32($i729, $i2);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i21 := $i727;
    assume {:branchcond $i730} true;
    goto $bb2151, $bb2152;

  $bb2152:
    assume !($i730 == 1);
    assume {:verifier.code 0} true;
    goto $bb2153;

  $bb2153:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2154, $bb2155;

  $bb2155:
    assume !(1 == 1);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb2156;

  $bb2156:
    assume {:verifier.code 0} true;
    goto $bb2157;

  $bb2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2158;

  $bb2158:
    assume {:verifier.code 0} true;
    goto $bb2159;

  $bb2159:
    assume {:verifier.code 0} true;
    goto $bb2160;

  $bb2160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i731 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i732 := $slt.i32($i731, 0);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i21 := $i731;
    assume {:branchcond $i732} true;
    goto $bb2161, $bb2162;

  $bb2162:
    assume !($i732 == 1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.60, $p3);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i734 := $eq.i32($i733, $i2);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i21 := $i731;
    assume {:branchcond $i734} true;
    goto $bb2163, $bb2164;

  $bb2164:
    assume !($i734 == 1);
    assume {:verifier.code 0} true;
    goto $bb2165;

  $bb2165:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2166, $bb2167;

  $bb2167:
    assume !(1 == 1);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    goto $bb2168;

  $bb2168:
    assume {:verifier.code 0} true;
    goto $bb2169;

  $bb2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2170;

  $bb2170:
    assume {:verifier.code 0} true;
    goto $bb2171;

  $bb2171:
    assume {:verifier.code 0} true;
    goto $bb2172;

  $bb2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} $i735 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i736 := $slt.i32($i735, 0);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i21 := $i735;
    assume {:branchcond $i736} true;
    goto $bb2173, $bb2174;

  $bb2174:
    assume !($i736 == 1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i737 := $load.i32($M.60, $p3);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i738 := $eq.i32($i737, $i2);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i21 := $i735;
    assume {:branchcond $i738} true;
    goto $bb2175, $bb2176;

  $bb2176:
    assume !($i738 == 1);
    assume {:verifier.code 0} true;
    goto $bb2177;

  $bb2177:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2178, $bb2179;

  $bb2179:
    assume !(1 == 1);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    goto $bb2180;

  $bb2180:
    assume {:verifier.code 0} true;
    goto $bb2181;

  $bb2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2182;

  $bb2182:
    assume {:verifier.code 0} true;
    goto $bb2183;

  $bb2183:
    assume {:verifier.code 0} true;
    goto $bb2184;

  $bb2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i739 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i740 := $slt.i32($i739, 0);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i21 := $i739;
    assume {:branchcond $i740} true;
    goto $bb2185, $bb2186;

  $bb2186:
    assume !($i740 == 1);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $i741 := $load.i32($M.60, $p3);
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i742 := $eq.i32($i741, $i2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i21 := $i739;
    assume {:branchcond $i742} true;
    goto $bb2187, $bb2188;

  $bb2188:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb2189;

  $bb2189:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2190, $bb2191;

  $bb2191:
    assume !(1 == 1);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb2192;

  $bb2192:
    assume {:verifier.code 0} true;
    goto $bb2193;

  $bb2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2194;

  $bb2194:
    assume {:verifier.code 0} true;
    goto $bb2195;

  $bb2195:
    assume {:verifier.code 0} true;
    goto $bb2196;

  $bb2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i743 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i744 := $slt.i32($i743, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i21 := $i743;
    assume {:branchcond $i744} true;
    goto $bb2197, $bb2198;

  $bb2198:
    assume !($i744 == 1);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i745 := $load.i32($M.60, $p3);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i745, $i2);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $i21 := $i743;
    assume {:branchcond $i746} true;
    goto $bb2199, $bb2200;

  $bb2200:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb2201;

  $bb2201:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2202, $bb2203;

  $bb2203:
    assume !(1 == 1);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    goto $bb2204;

  $bb2204:
    assume {:verifier.code 0} true;
    goto $bb2205;

  $bb2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2206;

  $bb2206:
    assume {:verifier.code 0} true;
    goto $bb2207;

  $bb2207:
    assume {:verifier.code 0} true;
    goto $bb2208;

  $bb2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i747 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i748 := $slt.i32($i747, 0);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i21 := $i747;
    assume {:branchcond $i748} true;
    goto $bb2209, $bb2210;

  $bb2210:
    assume !($i748 == 1);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i749 := $load.i32($M.60, $p3);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i750 := $eq.i32($i749, $i2);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i21 := $i747;
    assume {:branchcond $i750} true;
    goto $bb2211, $bb2212;

  $bb2212:
    assume !($i750 == 1);
    assume {:verifier.code 0} true;
    goto $bb2213;

  $bb2213:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2214, $bb2215;

  $bb2215:
    assume !(1 == 1);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    goto $bb2216;

  $bb2216:
    assume {:verifier.code 0} true;
    goto $bb2217;

  $bb2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2218;

  $bb2218:
    assume {:verifier.code 0} true;
    goto $bb2219;

  $bb2219:
    assume {:verifier.code 0} true;
    goto $bb2220;

  $bb2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i751 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i752 := $slt.i32($i751, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i21 := $i751;
    assume {:branchcond $i752} true;
    goto $bb2221, $bb2222;

  $bb2222:
    assume !($i752 == 1);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i753 := $load.i32($M.60, $p3);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i754 := $eq.i32($i753, $i2);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i21 := $i751;
    assume {:branchcond $i754} true;
    goto $bb2223, $bb2224;

  $bb2224:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb2225;

  $bb2225:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2226, $bb2227;

  $bb2227:
    assume !(1 == 1);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    goto $bb2228;

  $bb2228:
    assume {:verifier.code 0} true;
    goto $bb2229;

  $bb2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2230;

  $bb2230:
    assume {:verifier.code 0} true;
    goto $bb2231;

  $bb2231:
    assume {:verifier.code 0} true;
    goto $bb2232;

  $bb2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $i755 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i756 := $slt.i32($i755, 0);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i21 := $i755;
    assume {:branchcond $i756} true;
    goto $bb2233, $bb2234;

  $bb2234:
    assume !($i756 == 1);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i757 := $load.i32($M.60, $p3);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i757, $i2);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i21 := $i755;
    assume {:branchcond $i758} true;
    goto $bb2235, $bb2236;

  $bb2236:
    assume !($i758 == 1);
    assume {:verifier.code 0} true;
    goto $bb2237;

  $bb2237:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2238, $bb2239;

  $bb2239:
    assume !(1 == 1);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    goto $bb2240;

  $bb2240:
    assume {:verifier.code 0} true;
    goto $bb2241;

  $bb2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2242;

  $bb2242:
    assume {:verifier.code 0} true;
    goto $bb2243;

  $bb2243:
    assume {:verifier.code 0} true;
    goto $bb2244;

  $bb2244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i759 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i760 := $slt.i32($i759, 0);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i21 := $i759;
    assume {:branchcond $i760} true;
    goto $bb2245, $bb2246;

  $bb2246:
    assume !($i760 == 1);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i761 := $load.i32($M.60, $p3);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i761, $i2);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i21 := $i759;
    assume {:branchcond $i762} true;
    goto $bb2247, $bb2248;

  $bb2248:
    assume !($i762 == 1);
    assume {:verifier.code 0} true;
    goto $bb2249;

  $bb2249:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2250, $bb2251;

  $bb2251:
    assume !(1 == 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    goto $bb2252;

  $bb2252:
    assume {:verifier.code 0} true;
    goto $bb2253;

  $bb2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2254;

  $bb2254:
    assume {:verifier.code 0} true;
    goto $bb2255;

  $bb2255:
    assume {:verifier.code 0} true;
    goto $bb2256;

  $bb2256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i763 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i764 := $slt.i32($i763, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i21 := $i763;
    assume {:branchcond $i764} true;
    goto $bb2257, $bb2258;

  $bb2258:
    assume !($i764 == 1);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i765 := $load.i32($M.60, $p3);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i766 := $eq.i32($i765, $i2);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i21 := $i763;
    assume {:branchcond $i766} true;
    goto $bb2259, $bb2260;

  $bb2260:
    assume !($i766 == 1);
    assume {:verifier.code 0} true;
    goto $bb2261;

  $bb2261:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2262, $bb2263;

  $bb2263:
    assume !(1 == 1);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    goto $bb2264;

  $bb2264:
    assume {:verifier.code 0} true;
    goto $bb2265;

  $bb2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2266;

  $bb2266:
    assume {:verifier.code 0} true;
    goto $bb2267;

  $bb2267:
    assume {:verifier.code 0} true;
    goto $bb2268;

  $bb2268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i767 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i768 := $slt.i32($i767, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i21 := $i767;
    assume {:branchcond $i768} true;
    goto $bb2269, $bb2270;

  $bb2270:
    assume !($i768 == 1);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i769 := $load.i32($M.60, $p3);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i770 := $eq.i32($i769, $i2);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i21 := $i767;
    assume {:branchcond $i770} true;
    goto $bb2271, $bb2272;

  $bb2272:
    assume !($i770 == 1);
    assume {:verifier.code 0} true;
    goto $bb2273;

  $bb2273:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2274, $bb2275;

  $bb2275:
    assume !(1 == 1);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    goto $bb2276;

  $bb2276:
    assume {:verifier.code 0} true;
    goto $bb2277;

  $bb2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2278;

  $bb2278:
    assume {:verifier.code 0} true;
    goto $bb2279;

  $bb2279:
    assume {:verifier.code 0} true;
    goto $bb2280;

  $bb2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i771 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i772 := $slt.i32($i771, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i21 := $i771;
    assume {:branchcond $i772} true;
    goto $bb2281, $bb2282;

  $bb2282:
    assume !($i772 == 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i773 := $load.i32($M.60, $p3);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i774 := $eq.i32($i773, $i2);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $i21 := $i771;
    assume {:branchcond $i774} true;
    goto $bb2283, $bb2284;

  $bb2284:
    assume !($i774 == 1);
    assume {:verifier.code 0} true;
    goto $bb2285;

  $bb2285:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2286, $bb2287;

  $bb2287:
    assume !(1 == 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    goto $bb2288;

  $bb2288:
    assume {:verifier.code 0} true;
    goto $bb2289;

  $bb2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2290;

  $bb2290:
    assume {:verifier.code 0} true;
    goto $bb2291;

  $bb2291:
    assume {:verifier.code 0} true;
    goto $bb2292;

  $bb2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i775 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i776 := $slt.i32($i775, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i21 := $i775;
    assume {:branchcond $i776} true;
    goto $bb2293, $bb2294;

  $bb2294:
    assume !($i776 == 1);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i777 := $load.i32($M.60, $p3);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $i778 := $eq.i32($i777, $i2);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i21 := $i775;
    assume {:branchcond $i778} true;
    goto $bb2295, $bb2296;

  $bb2296:
    assume !($i778 == 1);
    assume {:verifier.code 0} true;
    goto $bb2297;

  $bb2297:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2298, $bb2299;

  $bb2299:
    assume !(1 == 1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    goto $bb2300;

  $bb2300:
    assume {:verifier.code 0} true;
    goto $bb2301;

  $bb2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2302;

  $bb2302:
    assume {:verifier.code 0} true;
    goto $bb2303;

  $bb2303:
    assume {:verifier.code 0} true;
    goto $bb2304;

  $bb2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i779 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i780 := $slt.i32($i779, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i21 := $i779;
    assume {:branchcond $i780} true;
    goto $bb2305, $bb2306;

  $bb2306:
    assume !($i780 == 1);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i781 := $load.i32($M.60, $p3);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i782 := $eq.i32($i781, $i2);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i21 := $i779;
    assume {:branchcond $i782} true;
    goto $bb2307, $bb2308;

  $bb2308:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    goto $bb2309;

  $bb2309:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2310, $bb2311;

  $bb2311:
    assume !(1 == 1);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb2312;

  $bb2312:
    assume {:verifier.code 0} true;
    goto $bb2313;

  $bb2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2314;

  $bb2314:
    assume {:verifier.code 0} true;
    goto $bb2315;

  $bb2315:
    assume {:verifier.code 0} true;
    goto $bb2316;

  $bb2316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} $i783 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i784 := $slt.i32($i783, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i21 := $i783;
    assume {:branchcond $i784} true;
    goto $bb2317, $bb2318;

  $bb2318:
    assume !($i784 == 1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i785 := $load.i32($M.60, $p3);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i786 := $eq.i32($i785, $i2);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i21 := $i783;
    assume {:branchcond $i786} true;
    goto $bb2319, $bb2320;

  $bb2320:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb2321;

  $bb2321:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2322, $bb2323;

  $bb2323:
    assume !(1 == 1);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    goto $bb2324;

  $bb2324:
    assume {:verifier.code 0} true;
    goto $bb2325;

  $bb2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2326;

  $bb2326:
    assume {:verifier.code 0} true;
    goto $bb2327;

  $bb2327:
    assume {:verifier.code 0} true;
    goto $bb2328;

  $bb2328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i787 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i788 := $slt.i32($i787, 0);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i21 := $i787;
    assume {:branchcond $i788} true;
    goto $bb2329, $bb2330;

  $bb2330:
    assume !($i788 == 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i789 := $load.i32($M.60, $p3);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i790 := $eq.i32($i789, $i2);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i21 := $i787;
    assume {:branchcond $i790} true;
    goto $bb2331, $bb2332;

  $bb2332:
    assume !($i790 == 1);
    assume {:verifier.code 0} true;
    goto $bb2333;

  $bb2333:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2334, $bb2335;

  $bb2335:
    assume !(1 == 1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    goto $bb2336;

  $bb2336:
    assume {:verifier.code 0} true;
    goto $bb2337;

  $bb2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2338;

  $bb2338:
    assume {:verifier.code 0} true;
    goto $bb2339;

  $bb2339:
    assume {:verifier.code 0} true;
    goto $bb2340;

  $bb2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i791 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i792 := $slt.i32($i791, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i21 := $i791;
    assume {:branchcond $i792} true;
    goto $bb2341, $bb2342;

  $bb2342:
    assume !($i792 == 1);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i793 := $load.i32($M.60, $p3);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i794 := $eq.i32($i793, $i2);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i21 := $i791;
    assume {:branchcond $i794} true;
    goto $bb2343, $bb2344;

  $bb2344:
    assume !($i794 == 1);
    assume {:verifier.code 0} true;
    goto $bb2345;

  $bb2345:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2346, $bb2347;

  $bb2347:
    assume !(1 == 1);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb2348;

  $bb2348:
    assume {:verifier.code 0} true;
    goto $bb2349;

  $bb2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2350;

  $bb2350:
    assume {:verifier.code 0} true;
    goto $bb2351;

  $bb2351:
    assume {:verifier.code 0} true;
    goto $bb2352;

  $bb2352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i795 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i796 := $slt.i32($i795, 0);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i21 := $i795;
    assume {:branchcond $i796} true;
    goto $bb2353, $bb2354;

  $bb2354:
    assume !($i796 == 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i797 := $load.i32($M.60, $p3);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i798 := $eq.i32($i797, $i2);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i21 := $i795;
    assume {:branchcond $i798} true;
    goto $bb2355, $bb2356;

  $bb2356:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb2357;

  $bb2357:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2358, $bb2359;

  $bb2359:
    assume !(1 == 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb2360;

  $bb2360:
    assume {:verifier.code 0} true;
    goto $bb2361;

  $bb2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2362;

  $bb2362:
    assume {:verifier.code 0} true;
    goto $bb2363;

  $bb2363:
    assume {:verifier.code 0} true;
    goto $bb2364;

  $bb2364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i799 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i800 := $slt.i32($i799, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i21 := $i799;
    assume {:branchcond $i800} true;
    goto $bb2365, $bb2366;

  $bb2366:
    assume !($i800 == 1);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i801 := $load.i32($M.60, $p3);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i802 := $eq.i32($i801, $i2);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i21 := $i799;
    assume {:branchcond $i802} true;
    goto $bb2367, $bb2368;

  $bb2368:
    assume !($i802 == 1);
    assume {:verifier.code 0} true;
    goto $bb2369;

  $bb2369:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2370, $bb2371;

  $bb2371:
    assume !(1 == 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    goto $bb2372;

  $bb2372:
    assume {:verifier.code 0} true;
    goto $bb2373;

  $bb2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2374;

  $bb2374:
    assume {:verifier.code 0} true;
    goto $bb2375;

  $bb2375:
    assume {:verifier.code 0} true;
    goto $bb2376;

  $bb2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i803 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i804 := $slt.i32($i803, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i21 := $i803;
    assume {:branchcond $i804} true;
    goto $bb2377, $bb2378;

  $bb2378:
    assume !($i804 == 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i805 := $load.i32($M.60, $p3);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i806 := $eq.i32($i805, $i2);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i21 := $i803;
    assume {:branchcond $i806} true;
    goto $bb2379, $bb2380;

  $bb2380:
    assume !($i806 == 1);
    assume {:verifier.code 0} true;
    goto $bb2381;

  $bb2381:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2382, $bb2383;

  $bb2383:
    assume !(1 == 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    goto $bb2384;

  $bb2384:
    assume {:verifier.code 0} true;
    goto $bb2385;

  $bb2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2386;

  $bb2386:
    assume {:verifier.code 0} true;
    goto $bb2387;

  $bb2387:
    assume {:verifier.code 0} true;
    goto $bb2388;

  $bb2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i807 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i808 := $slt.i32($i807, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i21 := $i807;
    assume {:branchcond $i808} true;
    goto $bb2389, $bb2390;

  $bb2390:
    assume !($i808 == 1);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i809 := $load.i32($M.60, $p3);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i809, $i2);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i21 := $i807;
    assume {:branchcond $i810} true;
    goto $bb2391, $bb2392;

  $bb2392:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb2393;

  $bb2393:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2394, $bb2395;

  $bb2395:
    assume !(1 == 1);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    goto $bb2396;

  $bb2396:
    assume {:verifier.code 0} true;
    goto $bb2397;

  $bb2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2398;

  $bb2398:
    assume {:verifier.code 0} true;
    goto $bb2399;

  $bb2399:
    assume {:verifier.code 0} true;
    goto $bb2400;

  $bb2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $i811 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i812 := $slt.i32($i811, 0);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i21 := $i811;
    assume {:branchcond $i812} true;
    goto $bb2401, $bb2402;

  $bb2402:
    assume !($i812 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i813 := $load.i32($M.60, $p3);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i814 := $eq.i32($i813, $i2);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i21 := $i811;
    assume {:branchcond $i814} true;
    goto $bb2403, $bb2404;

  $bb2404:
    assume !($i814 == 1);
    assume {:verifier.code 0} true;
    goto $bb2405;

  $bb2405:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2406, $bb2407;

  $bb2407:
    assume !(1 == 1);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb2408;

  $bb2408:
    assume {:verifier.code 0} true;
    goto $bb2409;

  $bb2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2410;

  $bb2410:
    assume {:verifier.code 0} true;
    goto $bb2411;

  $bb2411:
    assume {:verifier.code 0} true;
    goto $bb2412;

  $bb2412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} $i815 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i816 := $slt.i32($i815, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i21 := $i815;
    assume {:branchcond $i816} true;
    goto $bb2413, $bb2414;

  $bb2414:
    assume !($i816 == 1);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i817 := $load.i32($M.60, $p3);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i817, $i2);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i21 := $i815;
    assume {:branchcond $i818} true;
    goto $bb2415, $bb2416;

  $bb2416:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb2417;

  $bb2417:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2418, $bb2419;

  $bb2419:
    assume !(1 == 1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    goto $bb2420;

  $bb2420:
    assume {:verifier.code 0} true;
    goto $bb2421;

  $bb2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2422;

  $bb2422:
    assume {:verifier.code 0} true;
    goto $bb2423;

  $bb2423:
    assume {:verifier.code 0} true;
    goto $bb2424;

  $bb2424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i819 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i820 := $slt.i32($i819, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i21 := $i819;
    assume {:branchcond $i820} true;
    goto $bb2425, $bb2426;

  $bb2426:
    assume !($i820 == 1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i821 := $load.i32($M.60, $p3);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i822 := $eq.i32($i821, $i2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i21 := $i819;
    assume {:branchcond $i822} true;
    goto $bb2427, $bb2428;

  $bb2428:
    assume !($i822 == 1);
    assume {:verifier.code 0} true;
    goto $bb2429;

  $bb2429:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2430, $bb2431;

  $bb2431:
    assume !(1 == 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb2432;

  $bb2432:
    assume {:verifier.code 0} true;
    goto $bb2433;

  $bb2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2434;

  $bb2434:
    assume {:verifier.code 0} true;
    goto $bb2435;

  $bb2435:
    assume {:verifier.code 0} true;
    goto $bb2436;

  $bb2436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i823 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i824 := $slt.i32($i823, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i21 := $i823;
    assume {:branchcond $i824} true;
    goto $bb2437, $bb2438;

  $bb2438:
    assume !($i824 == 1);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i825 := $load.i32($M.60, $p3);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i826 := $eq.i32($i825, $i2);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i21 := $i823;
    assume {:branchcond $i826} true;
    goto $bb2439, $bb2440;

  $bb2440:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb2441;

  $bb2441:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2442, $bb2443;

  $bb2443:
    assume !(1 == 1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb2444;

  $bb2444:
    assume {:verifier.code 0} true;
    goto $bb2445;

  $bb2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2446;

  $bb2446:
    assume {:verifier.code 0} true;
    goto $bb2447;

  $bb2447:
    assume {:verifier.code 0} true;
    goto $bb2448;

  $bb2448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i827 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i828 := $slt.i32($i827, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i21 := $i827;
    assume {:branchcond $i828} true;
    goto $bb2449, $bb2450;

  $bb2450:
    assume !($i828 == 1);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i829 := $load.i32($M.60, $p3);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i829, $i2);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i21 := $i827;
    assume {:branchcond $i830} true;
    goto $bb2451, $bb2452;

  $bb2452:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb2453;

  $bb2453:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2454, $bb2455;

  $bb2455:
    assume !(1 == 1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    goto $bb2456;

  $bb2456:
    assume {:verifier.code 0} true;
    goto $bb2457;

  $bb2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2458;

  $bb2458:
    assume {:verifier.code 0} true;
    goto $bb2459;

  $bb2459:
    assume {:verifier.code 0} true;
    goto $bb2460;

  $bb2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i831 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i832 := $slt.i32($i831, 0);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i21 := $i831;
    assume {:branchcond $i832} true;
    goto $bb2461, $bb2462;

  $bb2462:
    assume !($i832 == 1);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i833 := $load.i32($M.60, $p3);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i834 := $eq.i32($i833, $i2);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i21 := $i831;
    assume {:branchcond $i834} true;
    goto $bb2463, $bb2464;

  $bb2464:
    assume !($i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb2465;

  $bb2465:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2466, $bb2467;

  $bb2467:
    assume !(1 == 1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    goto $bb2468;

  $bb2468:
    assume {:verifier.code 0} true;
    goto $bb2469;

  $bb2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2470;

  $bb2470:
    assume {:verifier.code 0} true;
    goto $bb2471;

  $bb2471:
    assume {:verifier.code 0} true;
    goto $bb2472;

  $bb2472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i835 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i836 := $slt.i32($i835, 0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i21 := $i835;
    assume {:branchcond $i836} true;
    goto $bb2473, $bb2474;

  $bb2474:
    assume !($i836 == 1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i837 := $load.i32($M.60, $p3);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $i838 := $eq.i32($i837, $i2);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i21 := $i835;
    assume {:branchcond $i838} true;
    goto $bb2475, $bb2476;

  $bb2476:
    assume !($i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb2477;

  $bb2477:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2478, $bb2479;

  $bb2479:
    assume !(1 == 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    goto $bb2480;

  $bb2480:
    assume {:verifier.code 0} true;
    goto $bb2481;

  $bb2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2482;

  $bb2482:
    assume {:verifier.code 0} true;
    goto $bb2483;

  $bb2483:
    assume {:verifier.code 0} true;
    goto $bb2484;

  $bb2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i839 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i840 := $slt.i32($i839, 0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i21 := $i839;
    assume {:branchcond $i840} true;
    goto $bb2485, $bb2486;

  $bb2486:
    assume !($i840 == 1);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i841 := $load.i32($M.60, $p3);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i841, $i2);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i21 := $i839;
    assume {:branchcond $i842} true;
    goto $bb2487, $bb2488;

  $bb2488:
    assume !($i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb2489;

  $bb2489:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2490, $bb2491;

  $bb2491:
    assume !(1 == 1);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto $bb2492;

  $bb2492:
    assume {:verifier.code 0} true;
    goto $bb2493;

  $bb2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2494;

  $bb2494:
    assume {:verifier.code 0} true;
    goto $bb2495;

  $bb2495:
    assume {:verifier.code 0} true;
    goto $bb2496;

  $bb2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i843 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i844 := $slt.i32($i843, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i21 := $i843;
    assume {:branchcond $i844} true;
    goto $bb2497, $bb2498;

  $bb2498:
    assume !($i844 == 1);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i845 := $load.i32($M.60, $p3);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i846 := $eq.i32($i845, $i2);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i21 := $i843;
    assume {:branchcond $i846} true;
    goto $bb2499, $bb2500;

  $bb2500:
    assume !($i846 == 1);
    assume {:verifier.code 0} true;
    goto $bb2501;

  $bb2501:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2502, $bb2503;

  $bb2503:
    assume !(1 == 1);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    goto $bb2504;

  $bb2504:
    assume {:verifier.code 0} true;
    goto $bb2505;

  $bb2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2506;

  $bb2506:
    assume {:verifier.code 0} true;
    goto $bb2507;

  $bb2507:
    assume {:verifier.code 0} true;
    goto $bb2508;

  $bb2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i847 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i848 := $slt.i32($i847, 0);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i21 := $i847;
    assume {:branchcond $i848} true;
    goto $bb2509, $bb2510;

  $bb2510:
    assume !($i848 == 1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i849 := $load.i32($M.60, $p3);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i850 := $eq.i32($i849, $i2);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i21 := $i847;
    assume {:branchcond $i850} true;
    goto $bb2511, $bb2512;

  $bb2512:
    assume !($i850 == 1);
    assume {:verifier.code 0} true;
    goto $bb2513;

  $bb2513:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2514, $bb2515;

  $bb2515:
    assume !(1 == 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    goto $bb2516;

  $bb2516:
    assume {:verifier.code 0} true;
    goto $bb2517;

  $bb2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2518;

  $bb2518:
    assume {:verifier.code 0} true;
    goto $bb2519;

  $bb2519:
    assume {:verifier.code 0} true;
    goto $bb2520;

  $bb2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $i851 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i852 := $slt.i32($i851, 0);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i21 := $i851;
    assume {:branchcond $i852} true;
    goto $bb2521, $bb2522;

  $bb2522:
    assume !($i852 == 1);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i853 := $load.i32($M.60, $p3);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i854 := $eq.i32($i853, $i2);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i21 := $i851;
    assume {:branchcond $i854} true;
    goto $bb2523, $bb2524;

  $bb2524:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb2525;

  $bb2525:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2526, $bb2527;

  $bb2527:
    assume !(1 == 1);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb2528;

  $bb2528:
    assume {:verifier.code 0} true;
    goto $bb2529;

  $bb2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2530;

  $bb2530:
    assume {:verifier.code 0} true;
    goto $bb2531;

  $bb2531:
    assume {:verifier.code 0} true;
    goto $bb2532;

  $bb2532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i855 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i856 := $slt.i32($i855, 0);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i21 := $i855;
    assume {:branchcond $i856} true;
    goto $bb2533, $bb2534;

  $bb2534:
    assume !($i856 == 1);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i857 := $load.i32($M.60, $p3);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i858 := $eq.i32($i857, $i2);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i21 := $i855;
    assume {:branchcond $i858} true;
    goto $bb2535, $bb2536;

  $bb2536:
    assume !($i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb2537;

  $bb2537:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2538, $bb2539;

  $bb2539:
    assume !(1 == 1);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    goto $bb2540;

  $bb2540:
    assume {:verifier.code 0} true;
    goto $bb2541;

  $bb2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2542;

  $bb2542:
    assume {:verifier.code 0} true;
    goto $bb2543;

  $bb2543:
    assume {:verifier.code 0} true;
    goto $bb2544;

  $bb2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i859 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i860 := $slt.i32($i859, 0);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i21 := $i859;
    assume {:branchcond $i860} true;
    goto $bb2545, $bb2546;

  $bb2546:
    assume !($i860 == 1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i861 := $load.i32($M.60, $p3);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i862 := $eq.i32($i861, $i2);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i21 := $i859;
    assume {:branchcond $i862} true;
    goto $bb2547, $bb2548;

  $bb2548:
    assume !($i862 == 1);
    assume {:verifier.code 0} true;
    goto $bb2549;

  $bb2549:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2550, $bb2551;

  $bb2551:
    assume !(1 == 1);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    goto $bb2552;

  $bb2552:
    assume {:verifier.code 0} true;
    goto $bb2553;

  $bb2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2554;

  $bb2554:
    assume {:verifier.code 0} true;
    goto $bb2555;

  $bb2555:
    assume {:verifier.code 0} true;
    goto $bb2556;

  $bb2556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i863 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i864 := $slt.i32($i863, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i21 := $i863;
    assume {:branchcond $i864} true;
    goto $bb2557, $bb2558;

  $bb2558:
    assume !($i864 == 1);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i865 := $load.i32($M.60, $p3);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i866 := $eq.i32($i865, $i2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i21 := $i863;
    assume {:branchcond $i866} true;
    goto $bb2559, $bb2560;

  $bb2560:
    assume !($i866 == 1);
    assume {:verifier.code 0} true;
    goto $bb2561;

  $bb2561:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2562, $bb2563;

  $bb2563:
    assume !(1 == 1);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    goto $bb2564;

  $bb2564:
    assume {:verifier.code 0} true;
    goto $bb2565;

  $bb2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2566;

  $bb2566:
    assume {:verifier.code 0} true;
    goto $bb2567;

  $bb2567:
    assume {:verifier.code 0} true;
    goto $bb2568;

  $bb2568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $i867 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i868 := $slt.i32($i867, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i21 := $i867;
    assume {:branchcond $i868} true;
    goto $bb2569, $bb2570;

  $bb2570:
    assume !($i868 == 1);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i869 := $load.i32($M.60, $p3);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i870 := $eq.i32($i869, $i2);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i21 := $i867;
    assume {:branchcond $i870} true;
    goto $bb2571, $bb2572;

  $bb2572:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb2573;

  $bb2573:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2574, $bb2575;

  $bb2575:
    assume !(1 == 1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    goto $bb2576;

  $bb2576:
    assume {:verifier.code 0} true;
    goto $bb2577;

  $bb2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2578;

  $bb2578:
    assume {:verifier.code 0} true;
    goto $bb2579;

  $bb2579:
    assume {:verifier.code 0} true;
    goto $bb2580;

  $bb2580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i871 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i872 := $slt.i32($i871, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i21 := $i871;
    assume {:branchcond $i872} true;
    goto $bb2581, $bb2582;

  $bb2582:
    assume !($i872 == 1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i873 := $load.i32($M.60, $p3);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i874 := $eq.i32($i873, $i2);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i21 := $i871;
    assume {:branchcond $i874} true;
    goto $bb2583, $bb2584;

  $bb2584:
    assume !($i874 == 1);
    assume {:verifier.code 0} true;
    goto $bb2585;

  $bb2585:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2586, $bb2587;

  $bb2587:
    assume !(1 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    goto $bb2588;

  $bb2588:
    assume {:verifier.code 0} true;
    goto $bb2589;

  $bb2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2590;

  $bb2590:
    assume {:verifier.code 0} true;
    goto $bb2591;

  $bb2591:
    assume {:verifier.code 0} true;
    goto $bb2592;

  $bb2592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i875 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i876 := $slt.i32($i875, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i21 := $i875;
    assume {:branchcond $i876} true;
    goto $bb2593, $bb2594;

  $bb2594:
    assume !($i876 == 1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i877 := $load.i32($M.60, $p3);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i878 := $eq.i32($i877, $i2);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i21 := $i875;
    assume {:branchcond $i878} true;
    goto $bb2595, $bb2596;

  $bb2596:
    assume !($i878 == 1);
    assume {:verifier.code 0} true;
    goto $bb2597;

  $bb2597:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2598, $bb2599;

  $bb2599:
    assume !(1 == 1);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb2600;

  $bb2600:
    assume {:verifier.code 0} true;
    goto $bb2601;

  $bb2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2602;

  $bb2602:
    assume {:verifier.code 0} true;
    goto $bb2603;

  $bb2603:
    assume {:verifier.code 0} true;
    goto $bb2604;

  $bb2604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $i879 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i880 := $slt.i32($i879, 0);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i21 := $i879;
    assume {:branchcond $i880} true;
    goto $bb2605, $bb2606;

  $bb2606:
    assume !($i880 == 1);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i881 := $load.i32($M.60, $p3);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i882 := $eq.i32($i881, $i2);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i21 := $i879;
    assume {:branchcond $i882} true;
    goto $bb2607, $bb2608;

  $bb2608:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb2609;

  $bb2609:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2610, $bb2611;

  $bb2611:
    assume !(1 == 1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    goto $bb2612;

  $bb2612:
    assume {:verifier.code 0} true;
    goto $bb2613;

  $bb2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2614;

  $bb2614:
    assume {:verifier.code 0} true;
    goto $bb2615;

  $bb2615:
    assume {:verifier.code 0} true;
    goto $bb2616;

  $bb2616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i883 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i884 := $slt.i32($i883, 0);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i21 := $i883;
    assume {:branchcond $i884} true;
    goto $bb2617, $bb2618;

  $bb2618:
    assume !($i884 == 1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i885 := $load.i32($M.60, $p3);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i886 := $eq.i32($i885, $i2);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i21 := $i883;
    assume {:branchcond $i886} true;
    goto $bb2619, $bb2620;

  $bb2620:
    assume !($i886 == 1);
    assume {:verifier.code 0} true;
    goto $bb2621;

  $bb2621:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2622, $bb2623;

  $bb2623:
    assume !(1 == 1);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    goto $bb2624;

  $bb2624:
    assume {:verifier.code 0} true;
    goto $bb2625;

  $bb2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2626;

  $bb2626:
    assume {:verifier.code 0} true;
    goto $bb2627;

  $bb2627:
    assume {:verifier.code 0} true;
    goto $bb2628;

  $bb2628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $i887 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i888 := $slt.i32($i887, 0);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i21 := $i887;
    assume {:branchcond $i888} true;
    goto $bb2629, $bb2630;

  $bb2630:
    assume !($i888 == 1);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i889 := $load.i32($M.60, $p3);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i890 := $eq.i32($i889, $i2);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i21 := $i887;
    assume {:branchcond $i890} true;
    goto $bb2631, $bb2632;

  $bb2632:
    assume !($i890 == 1);
    assume {:verifier.code 0} true;
    goto $bb2633;

  $bb2633:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2634, $bb2635;

  $bb2635:
    assume !(1 == 1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb2636;

  $bb2636:
    assume {:verifier.code 0} true;
    goto $bb2637;

  $bb2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2638;

  $bb2638:
    assume {:verifier.code 0} true;
    goto $bb2639;

  $bb2639:
    assume {:verifier.code 0} true;
    goto $bb2640;

  $bb2640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i891 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i892 := $slt.i32($i891, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i21 := $i891;
    assume {:branchcond $i892} true;
    goto $bb2641, $bb2642;

  $bb2642:
    assume !($i892 == 1);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i893 := $load.i32($M.60, $p3);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i894 := $eq.i32($i893, $i2);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i21 := $i891;
    assume {:branchcond $i894} true;
    goto $bb2643, $bb2644;

  $bb2644:
    assume !($i894 == 1);
    assume {:verifier.code 0} true;
    goto $bb2645;

  $bb2645:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2646, $bb2647;

  $bb2647:
    assume !(1 == 1);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    goto $bb2648;

  $bb2648:
    assume {:verifier.code 0} true;
    goto $bb2649;

  $bb2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2650;

  $bb2650:
    assume {:verifier.code 0} true;
    goto $bb2651;

  $bb2651:
    assume {:verifier.code 0} true;
    goto $bb2652;

  $bb2652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i895 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i896 := $slt.i32($i895, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i21 := $i895;
    assume {:branchcond $i896} true;
    goto $bb2653, $bb2654;

  $bb2654:
    assume !($i896 == 1);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i897 := $load.i32($M.60, $p3);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i898 := $eq.i32($i897, $i2);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i21 := $i895;
    assume {:branchcond $i898} true;
    goto $bb2655, $bb2656;

  $bb2656:
    assume !($i898 == 1);
    assume {:verifier.code 0} true;
    goto $bb2657;

  $bb2657:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2658, $bb2659;

  $bb2659:
    assume !(1 == 1);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb2660;

  $bb2660:
    assume {:verifier.code 0} true;
    goto $bb2661;

  $bb2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2662;

  $bb2662:
    assume {:verifier.code 0} true;
    goto $bb2663;

  $bb2663:
    assume {:verifier.code 0} true;
    goto $bb2664;

  $bb2664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} $i899 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i900 := $slt.i32($i899, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i21 := $i899;
    assume {:branchcond $i900} true;
    goto $bb2665, $bb2666;

  $bb2666:
    assume !($i900 == 1);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i901 := $load.i32($M.60, $p3);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i902 := $eq.i32($i901, $i2);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i21 := $i899;
    assume {:branchcond $i902} true;
    goto $bb2667, $bb2668;

  $bb2668:
    assume !($i902 == 1);
    assume {:verifier.code 0} true;
    goto $bb2669;

  $bb2669:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2670, $bb2671;

  $bb2671:
    assume !(1 == 1);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb2672;

  $bb2672:
    assume {:verifier.code 0} true;
    goto $bb2673;

  $bb2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2674;

  $bb2674:
    assume {:verifier.code 0} true;
    goto $bb2675;

  $bb2675:
    assume {:verifier.code 0} true;
    goto $bb2676;

  $bb2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i903 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i904 := $slt.i32($i903, 0);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $i21 := $i903;
    assume {:branchcond $i904} true;
    goto $bb2677, $bb2678;

  $bb2678:
    assume !($i904 == 1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i905 := $load.i32($M.60, $p3);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i906 := $eq.i32($i905, $i2);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i21 := $i903;
    assume {:branchcond $i906} true;
    goto $bb2679, $bb2680;

  $bb2680:
    assume !($i906 == 1);
    assume {:verifier.code 0} true;
    goto $bb2681;

  $bb2681:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2682, $bb2683;

  $bb2683:
    assume !(1 == 1);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    goto $bb2684;

  $bb2684:
    assume {:verifier.code 0} true;
    goto $bb2685;

  $bb2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2686;

  $bb2686:
    assume {:verifier.code 0} true;
    goto $bb2687;

  $bb2687:
    assume {:verifier.code 0} true;
    goto $bb2688;

  $bb2688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i907 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i908 := $slt.i32($i907, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i21 := $i907;
    assume {:branchcond $i908} true;
    goto $bb2689, $bb2690;

  $bb2690:
    assume !($i908 == 1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i909 := $load.i32($M.60, $p3);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i910 := $eq.i32($i909, $i2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i21 := $i907;
    assume {:branchcond $i910} true;
    goto $bb2691, $bb2692;

  $bb2692:
    assume !($i910 == 1);
    assume {:verifier.code 0} true;
    goto $bb2693;

  $bb2693:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2694, $bb2695;

  $bb2695:
    assume !(1 == 1);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    goto $bb2696;

  $bb2696:
    assume {:verifier.code 0} true;
    goto $bb2697;

  $bb2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2698;

  $bb2698:
    assume {:verifier.code 0} true;
    goto $bb2699;

  $bb2699:
    assume {:verifier.code 0} true;
    goto $bb2700;

  $bb2700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i911 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i912 := $slt.i32($i911, 0);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i21 := $i911;
    assume {:branchcond $i912} true;
    goto $bb2701, $bb2702;

  $bb2702:
    assume !($i912 == 1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i913 := $load.i32($M.60, $p3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i914 := $eq.i32($i913, $i2);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i21 := $i911;
    assume {:branchcond $i914} true;
    goto $bb2703, $bb2704;

  $bb2704:
    assume !($i914 == 1);
    assume {:verifier.code 0} true;
    goto $bb2705;

  $bb2705:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2706, $bb2707;

  $bb2707:
    assume !(1 == 1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    goto $bb2708;

  $bb2708:
    assume {:verifier.code 0} true;
    goto $bb2709;

  $bb2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2710;

  $bb2710:
    assume {:verifier.code 0} true;
    goto $bb2711;

  $bb2711:
    assume {:verifier.code 0} true;
    goto $bb2712;

  $bb2712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i915 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i916 := $slt.i32($i915, 0);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i21 := $i915;
    assume {:branchcond $i916} true;
    goto $bb2713, $bb2714;

  $bb2714:
    assume !($i916 == 1);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i917 := $load.i32($M.60, $p3);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i918 := $eq.i32($i917, $i2);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i21 := $i915;
    assume {:branchcond $i918} true;
    goto $bb2715, $bb2716;

  $bb2716:
    assume !($i918 == 1);
    assume {:verifier.code 0} true;
    goto $bb2717;

  $bb2717:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2718, $bb2719;

  $bb2719:
    assume !(1 == 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb2720;

  $bb2720:
    assume {:verifier.code 0} true;
    goto $bb2721;

  $bb2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2722;

  $bb2722:
    assume {:verifier.code 0} true;
    goto $bb2723;

  $bb2723:
    assume {:verifier.code 0} true;
    goto $bb2724;

  $bb2724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} $i919 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i920 := $slt.i32($i919, 0);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i21 := $i919;
    assume {:branchcond $i920} true;
    goto $bb2725, $bb2726;

  $bb2726:
    assume !($i920 == 1);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i921 := $load.i32($M.60, $p3);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i922 := $eq.i32($i921, $i2);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i21 := $i919;
    assume {:branchcond $i922} true;
    goto $bb2727, $bb2728;

  $bb2728:
    assume !($i922 == 1);
    assume {:verifier.code 0} true;
    goto $bb2729;

  $bb2729:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2730, $bb2731;

  $bb2731:
    assume !(1 == 1);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb2732;

  $bb2732:
    assume {:verifier.code 0} true;
    goto $bb2733;

  $bb2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2734;

  $bb2734:
    assume {:verifier.code 0} true;
    goto $bb2735;

  $bb2735:
    assume {:verifier.code 0} true;
    goto $bb2736;

  $bb2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i923 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i924 := $slt.i32($i923, 0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i21 := $i923;
    assume {:branchcond $i924} true;
    goto $bb2737, $bb2738;

  $bb2738:
    assume !($i924 == 1);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i925 := $load.i32($M.60, $p3);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i926 := $eq.i32($i925, $i2);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i21 := $i923;
    assume {:branchcond $i926} true;
    goto $bb2739, $bb2740;

  $bb2740:
    assume !($i926 == 1);
    assume {:verifier.code 0} true;
    goto $bb2741;

  $bb2741:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2742, $bb2743;

  $bb2743:
    assume !(1 == 1);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    goto $bb2744;

  $bb2744:
    assume {:verifier.code 0} true;
    goto $bb2745;

  $bb2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2746;

  $bb2746:
    assume {:verifier.code 0} true;
    goto $bb2747;

  $bb2747:
    assume {:verifier.code 0} true;
    goto $bb2748;

  $bb2748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $i927 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i928 := $slt.i32($i927, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i21 := $i927;
    assume {:branchcond $i928} true;
    goto $bb2749, $bb2750;

  $bb2750:
    assume !($i928 == 1);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i929 := $load.i32($M.60, $p3);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i930 := $eq.i32($i929, $i2);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i21 := $i927;
    assume {:branchcond $i930} true;
    goto $bb2751, $bb2752;

  $bb2752:
    assume !($i930 == 1);
    assume {:verifier.code 0} true;
    goto $bb2753;

  $bb2753:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2754, $bb2755;

  $bb2755:
    assume !(1 == 1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb2756;

  $bb2756:
    assume {:verifier.code 0} true;
    goto $bb2757;

  $bb2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2758;

  $bb2758:
    assume {:verifier.code 0} true;
    goto $bb2759;

  $bb2759:
    assume {:verifier.code 0} true;
    goto $bb2760;

  $bb2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i931 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i932 := $slt.i32($i931, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i21 := $i931;
    assume {:branchcond $i932} true;
    goto $bb2761, $bb2762;

  $bb2762:
    assume !($i932 == 1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i933 := $load.i32($M.60, $p3);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i934 := $eq.i32($i933, $i2);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i21 := $i931;
    assume {:branchcond $i934} true;
    goto $bb2763, $bb2764;

  $bb2764:
    assume !($i934 == 1);
    assume {:verifier.code 0} true;
    goto $bb2765;

  $bb2765:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2766, $bb2767;

  $bb2767:
    assume !(1 == 1);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb2768;

  $bb2768:
    assume {:verifier.code 0} true;
    goto $bb2769;

  $bb2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2770;

  $bb2770:
    assume {:verifier.code 0} true;
    goto $bb2771;

  $bb2771:
    assume {:verifier.code 0} true;
    goto $bb2772;

  $bb2772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i935 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i936 := $slt.i32($i935, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i21 := $i935;
    assume {:branchcond $i936} true;
    goto $bb2773, $bb2774;

  $bb2774:
    assume !($i936 == 1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i937 := $load.i32($M.60, $p3);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i938 := $eq.i32($i937, $i2);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i21 := $i935;
    assume {:branchcond $i938} true;
    goto $bb2775, $bb2776;

  $bb2776:
    assume !($i938 == 1);
    assume {:verifier.code 0} true;
    goto $bb2777;

  $bb2777:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2778, $bb2779;

  $bb2779:
    assume !(1 == 1);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    goto $bb2780;

  $bb2780:
    assume {:verifier.code 0} true;
    goto $bb2781;

  $bb2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2782;

  $bb2782:
    assume {:verifier.code 0} true;
    goto $bb2783;

  $bb2783:
    assume {:verifier.code 0} true;
    goto $bb2784;

  $bb2784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i939 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i940 := $slt.i32($i939, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i21 := $i939;
    assume {:branchcond $i940} true;
    goto $bb2785, $bb2786;

  $bb2786:
    assume !($i940 == 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i941 := $load.i32($M.60, $p3);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i942 := $eq.i32($i941, $i2);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i21 := $i939;
    assume {:branchcond $i942} true;
    goto $bb2787, $bb2788;

  $bb2788:
    assume !($i942 == 1);
    assume {:verifier.code 0} true;
    goto $bb2789;

  $bb2789:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2790, $bb2791;

  $bb2791:
    assume !(1 == 1);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto $bb2792;

  $bb2792:
    assume {:verifier.code 0} true;
    goto $bb2793;

  $bb2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2794;

  $bb2794:
    assume {:verifier.code 0} true;
    goto $bb2795;

  $bb2795:
    assume {:verifier.code 0} true;
    goto $bb2796;

  $bb2796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i943 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i944 := $slt.i32($i943, 0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i21 := $i943;
    assume {:branchcond $i944} true;
    goto $bb2797, $bb2798;

  $bb2798:
    assume !($i944 == 1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i945 := $load.i32($M.60, $p3);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i946 := $eq.i32($i945, $i2);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i21 := $i943;
    assume {:branchcond $i946} true;
    goto $bb2799, $bb2800;

  $bb2800:
    assume !($i946 == 1);
    assume {:verifier.code 0} true;
    goto $bb2801;

  $bb2801:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2802, $bb2803;

  $bb2803:
    assume !(1 == 1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    goto $bb2804;

  $bb2804:
    assume {:verifier.code 0} true;
    goto $bb2805;

  $bb2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2806;

  $bb2806:
    assume {:verifier.code 0} true;
    goto $bb2807;

  $bb2807:
    assume {:verifier.code 0} true;
    goto $bb2808;

  $bb2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i947 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i948 := $slt.i32($i947, 0);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i21 := $i947;
    assume {:branchcond $i948} true;
    goto $bb2809, $bb2810;

  $bb2810:
    assume !($i948 == 1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i949 := $load.i32($M.60, $p3);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i950 := $eq.i32($i949, $i2);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i21 := $i947;
    assume {:branchcond $i950} true;
    goto $bb2811, $bb2812;

  $bb2812:
    assume !($i950 == 1);
    assume {:verifier.code 0} true;
    goto $bb2813;

  $bb2813:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2814, $bb2815;

  $bb2815:
    assume !(1 == 1);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    goto $bb2816;

  $bb2816:
    assume {:verifier.code 0} true;
    goto $bb2817;

  $bb2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2818;

  $bb2818:
    assume {:verifier.code 0} true;
    goto $bb2819;

  $bb2819:
    assume {:verifier.code 0} true;
    goto $bb2820;

  $bb2820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $i951 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i952 := $slt.i32($i951, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i21 := $i951;
    assume {:branchcond $i952} true;
    goto $bb2821, $bb2822;

  $bb2822:
    assume !($i952 == 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i953 := $load.i32($M.60, $p3);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i954 := $eq.i32($i953, $i2);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i21 := $i951;
    assume {:branchcond $i954} true;
    goto $bb2823, $bb2824;

  $bb2824:
    assume !($i954 == 1);
    assume {:verifier.code 0} true;
    goto $bb2825;

  $bb2825:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2826, $bb2827;

  $bb2827:
    assume !(1 == 1);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    goto $bb2828;

  $bb2828:
    assume {:verifier.code 0} true;
    goto $bb2829;

  $bb2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2830;

  $bb2830:
    assume {:verifier.code 0} true;
    goto $bb2831;

  $bb2831:
    assume {:verifier.code 0} true;
    goto $bb2832;

  $bb2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i955 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i956 := $slt.i32($i955, 0);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i21 := $i955;
    assume {:branchcond $i956} true;
    goto $bb2833, $bb2834;

  $bb2834:
    assume !($i956 == 1);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i957 := $load.i32($M.60, $p3);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i958 := $eq.i32($i957, $i2);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i21 := $i955;
    assume {:branchcond $i958} true;
    goto $bb2835, $bb2836;

  $bb2836:
    assume !($i958 == 1);
    assume {:verifier.code 0} true;
    goto $bb2837;

  $bb2837:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2838, $bb2839;

  $bb2839:
    assume !(1 == 1);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    goto $bb2840;

  $bb2840:
    assume {:verifier.code 0} true;
    goto $bb2841;

  $bb2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2842;

  $bb2842:
    assume {:verifier.code 0} true;
    goto $bb2843;

  $bb2843:
    assume {:verifier.code 0} true;
    goto $bb2844;

  $bb2844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} $i959 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i960 := $slt.i32($i959, 0);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i21 := $i959;
    assume {:branchcond $i960} true;
    goto $bb2845, $bb2846;

  $bb2846:
    assume !($i960 == 1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i961 := $load.i32($M.60, $p3);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i962 := $eq.i32($i961, $i2);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i21 := $i959;
    assume {:branchcond $i962} true;
    goto $bb2847, $bb2848;

  $bb2848:
    assume !($i962 == 1);
    assume {:verifier.code 0} true;
    goto $bb2849;

  $bb2849:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2850, $bb2851;

  $bb2851:
    assume !(1 == 1);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb2852;

  $bb2852:
    assume {:verifier.code 0} true;
    goto $bb2853;

  $bb2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2854;

  $bb2854:
    assume {:verifier.code 0} true;
    goto $bb2855;

  $bb2855:
    assume {:verifier.code 0} true;
    goto $bb2856;

  $bb2856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $i963 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i964 := $slt.i32($i963, 0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i21 := $i963;
    assume {:branchcond $i964} true;
    goto $bb2857, $bb2858;

  $bb2858:
    assume !($i964 == 1);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i965 := $load.i32($M.60, $p3);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i966 := $eq.i32($i965, $i2);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i21 := $i963;
    assume {:branchcond $i966} true;
    goto $bb2859, $bb2860;

  $bb2860:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb2861;

  $bb2861:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2862, $bb2863;

  $bb2863:
    assume !(1 == 1);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb2864;

  $bb2864:
    assume {:verifier.code 0} true;
    goto $bb2865;

  $bb2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2866;

  $bb2866:
    assume {:verifier.code 0} true;
    goto $bb2867;

  $bb2867:
    assume {:verifier.code 0} true;
    goto $bb2868;

  $bb2868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i967 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i968 := $slt.i32($i967, 0);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i21 := $i967;
    assume {:branchcond $i968} true;
    goto $bb2869, $bb2870;

  $bb2870:
    assume !($i968 == 1);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i969 := $load.i32($M.60, $p3);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i970 := $eq.i32($i969, $i2);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i21 := $i967;
    assume {:branchcond $i970} true;
    goto $bb2871, $bb2872;

  $bb2872:
    assume !($i970 == 1);
    assume {:verifier.code 0} true;
    goto $bb2873;

  $bb2873:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2874, $bb2875;

  $bb2875:
    assume !(1 == 1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb2876;

  $bb2876:
    assume {:verifier.code 0} true;
    goto $bb2877;

  $bb2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2878;

  $bb2878:
    assume {:verifier.code 0} true;
    goto $bb2879;

  $bb2879:
    assume {:verifier.code 0} true;
    goto $bb2880;

  $bb2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $i971 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i972 := $slt.i32($i971, 0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i21 := $i971;
    assume {:branchcond $i972} true;
    goto $bb2881, $bb2882;

  $bb2882:
    assume !($i972 == 1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i973 := $load.i32($M.60, $p3);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i974 := $eq.i32($i973, $i2);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i21 := $i971;
    assume {:branchcond $i974} true;
    goto $bb2883, $bb2884;

  $bb2884:
    assume !($i974 == 1);
    assume {:verifier.code 0} true;
    goto $bb2885;

  $bb2885:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2886, $bb2887;

  $bb2887:
    assume !(1 == 1);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb2888;

  $bb2888:
    assume {:verifier.code 0} true;
    goto $bb2889;

  $bb2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2890;

  $bb2890:
    assume {:verifier.code 0} true;
    goto $bb2891;

  $bb2891:
    assume {:verifier.code 0} true;
    goto $bb2892;

  $bb2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i975 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i976 := $slt.i32($i975, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i21 := $i975;
    assume {:branchcond $i976} true;
    goto $bb2893, $bb2894;

  $bb2894:
    assume !($i976 == 1);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i977 := $load.i32($M.60, $p3);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i978 := $eq.i32($i977, $i2);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i21 := $i975;
    assume {:branchcond $i978} true;
    goto $bb2895, $bb2896;

  $bb2896:
    assume !($i978 == 1);
    assume {:verifier.code 0} true;
    goto $bb2897;

  $bb2897:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2898, $bb2899;

  $bb2899:
    assume !(1 == 1);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    goto $bb2900;

  $bb2900:
    assume {:verifier.code 0} true;
    goto $bb2901;

  $bb2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2902;

  $bb2902:
    assume {:verifier.code 0} true;
    goto $bb2903;

  $bb2903:
    assume {:verifier.code 0} true;
    goto $bb2904;

  $bb2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $i979 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i980 := $slt.i32($i979, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i21 := $i979;
    assume {:branchcond $i980} true;
    goto $bb2905, $bb2906;

  $bb2906:
    assume !($i980 == 1);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i981 := $load.i32($M.60, $p3);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i982 := $eq.i32($i981, $i2);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i21 := $i979;
    assume {:branchcond $i982} true;
    goto $bb2907, $bb2908;

  $bb2908:
    assume !($i982 == 1);
    assume {:verifier.code 0} true;
    goto $bb2909;

  $bb2909:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2910, $bb2911;

  $bb2911:
    assume !(1 == 1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb2912;

  $bb2912:
    assume {:verifier.code 0} true;
    goto $bb2913;

  $bb2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2914;

  $bb2914:
    assume {:verifier.code 0} true;
    goto $bb2915;

  $bb2915:
    assume {:verifier.code 0} true;
    goto $bb2916;

  $bb2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i983 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_907, SeqInstr_908;

  SeqInstr_908:
    assume assertsPassed;
    goto SeqInstr_909;

  SeqInstr_909:
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i984 := $slt.i32($i983, 0);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i21 := $i983;
    assume {:branchcond $i984} true;
    goto $bb2917, $bb2918;

  $bb2918:
    assume !($i984 == 1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i985 := $load.i32($M.60, $p3);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i986 := $eq.i32($i985, $i2);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i21 := $i983;
    assume {:branchcond $i986} true;
    goto $bb2919, $bb2920;

  $bb2920:
    assume !($i986 == 1);
    assume {:verifier.code 0} true;
    goto $bb2921;

  $bb2921:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2922, $bb2923;

  $bb2923:
    assume !(1 == 1);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb2924;

  $bb2924:
    assume {:verifier.code 0} true;
    goto $bb2925;

  $bb2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2926;

  $bb2926:
    assume {:verifier.code 0} true;
    goto $bb2927;

  $bb2927:
    assume {:verifier.code 0} true;
    goto $bb2928;

  $bb2928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i987 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_910, SeqInstr_911;

  SeqInstr_911:
    assume assertsPassed;
    goto SeqInstr_912;

  SeqInstr_912:
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i988 := $slt.i32($i987, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $i21 := $i987;
    assume {:branchcond $i988} true;
    goto $bb2929, $bb2930;

  $bb2930:
    assume !($i988 == 1);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i989 := $load.i32($M.60, $p3);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i990 := $eq.i32($i989, $i2);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i21 := $i987;
    assume {:branchcond $i990} true;
    goto $bb2931, $bb2932;

  $bb2932:
    assume !($i990 == 1);
    assume {:verifier.code 0} true;
    goto $bb2933;

  $bb2933:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2934, $bb2935;

  $bb2935:
    assume !(1 == 1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb2936;

  $bb2936:
    assume {:verifier.code 0} true;
    goto $bb2937;

  $bb2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2938;

  $bb2938:
    assume {:verifier.code 0} true;
    goto $bb2939;

  $bb2939:
    assume {:verifier.code 0} true;
    goto $bb2940;

  $bb2940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $i991 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_913, SeqInstr_914;

  SeqInstr_914:
    assume assertsPassed;
    goto SeqInstr_915;

  SeqInstr_915:
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i992 := $slt.i32($i991, 0);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i21 := $i991;
    assume {:branchcond $i992} true;
    goto $bb2941, $bb2942;

  $bb2942:
    assume !($i992 == 1);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i993 := $load.i32($M.60, $p3);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i994 := $eq.i32($i993, $i2);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i21 := $i991;
    assume {:branchcond $i994} true;
    goto $bb2943, $bb2944;

  $bb2944:
    assume !($i994 == 1);
    assume {:verifier.code 0} true;
    goto $bb2945;

  $bb2945:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2946, $bb2947;

  $bb2947:
    assume !(1 == 1);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb2948;

  $bb2948:
    assume {:verifier.code 0} true;
    goto $bb2949;

  $bb2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2950;

  $bb2950:
    assume {:verifier.code 0} true;
    goto $bb2951;

  $bb2951:
    assume {:verifier.code 0} true;
    goto $bb2952;

  $bb2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i995 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_916, SeqInstr_917;

  SeqInstr_917:
    assume assertsPassed;
    goto SeqInstr_918;

  SeqInstr_918:
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i996 := $slt.i32($i995, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i21 := $i995;
    assume {:branchcond $i996} true;
    goto $bb2953, $bb2954;

  $bb2954:
    assume !($i996 == 1);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i997 := $load.i32($M.60, $p3);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i998 := $eq.i32($i997, $i2);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i21 := $i995;
    assume {:branchcond $i998} true;
    goto $bb2955, $bb2956;

  $bb2956:
    assume !($i998 == 1);
    assume {:verifier.code 0} true;
    goto $bb2957;

  $bb2957:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2958, $bb2959;

  $bb2959:
    assume !(1 == 1);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    goto $bb2960;

  $bb2960:
    assume {:verifier.code 0} true;
    goto $bb2961;

  $bb2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2962;

  $bb2962:
    assume {:verifier.code 0} true;
    goto $bb2963;

  $bb2963:
    assume {:verifier.code 0} true;
    goto $bb2964;

  $bb2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i999 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_919, SeqInstr_920;

  SeqInstr_920:
    assume assertsPassed;
    goto SeqInstr_921;

  SeqInstr_921:
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i1000 := $slt.i32($i999, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i21 := $i999;
    assume {:branchcond $i1000} true;
    goto $bb2965, $bb2966;

  $bb2966:
    assume !($i1000 == 1);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i1001 := $load.i32($M.60, $p3);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i1002 := $eq.i32($i1001, $i2);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i21 := $i999;
    assume {:branchcond $i1002} true;
    goto $bb2967, $bb2968;

  $bb2968:
    assume !($i1002 == 1);
    assume {:verifier.code 0} true;
    goto $bb2969;

  $bb2969:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2970, $bb2971;

  $bb2971:
    assume !(1 == 1);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb2972;

  $bb2972:
    assume {:verifier.code 0} true;
    goto $bb2973;

  $bb2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2974;

  $bb2974:
    assume {:verifier.code 0} true;
    goto $bb2975;

  $bb2975:
    assume {:verifier.code 0} true;
    goto $bb2976;

  $bb2976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i1003 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_922, SeqInstr_923;

  SeqInstr_923:
    assume assertsPassed;
    goto SeqInstr_924;

  SeqInstr_924:
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i1004 := $slt.i32($i1003, 0);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i21 := $i1003;
    assume {:branchcond $i1004} true;
    goto $bb2977, $bb2978;

  $bb2978:
    assume !($i1004 == 1);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i1005 := $load.i32($M.60, $p3);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i1006 := $eq.i32($i1005, $i2);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i21 := $i1003;
    assume {:branchcond $i1006} true;
    goto $bb2979, $bb2980;

  $bb2980:
    assume !($i1006 == 1);
    assume {:verifier.code 0} true;
    goto $bb2981;

  $bb2981:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2982, $bb2983;

  $bb2983:
    assume !(1 == 1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    goto $bb2984;

  $bb2984:
    assume {:verifier.code 0} true;
    goto $bb2985;

  $bb2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2986;

  $bb2986:
    assume {:verifier.code 0} true;
    goto $bb2987;

  $bb2987:
    assume {:verifier.code 0} true;
    goto $bb2988;

  $bb2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $i1007 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_925, SeqInstr_926;

  SeqInstr_926:
    assume assertsPassed;
    goto SeqInstr_927;

  SeqInstr_927:
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i1008 := $slt.i32($i1007, 0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i21 := $i1007;
    assume {:branchcond $i1008} true;
    goto $bb2989, $bb2990;

  $bb2990:
    assume !($i1008 == 1);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i1009 := $load.i32($M.60, $p3);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i1010 := $eq.i32($i1009, $i2);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i21 := $i1007;
    assume {:branchcond $i1010} true;
    goto $bb2991, $bb2992;

  $bb2992:
    assume !($i1010 == 1);
    assume {:verifier.code 0} true;
    goto $bb2993;

  $bb2993:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb2994, $bb2995;

  $bb2995:
    assume !(1 == 1);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    goto $bb2996;

  $bb2996:
    assume {:verifier.code 0} true;
    goto $bb2997;

  $bb2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb2998;

  $bb2998:
    assume {:verifier.code 0} true;
    goto $bb2999;

  $bb2999:
    assume {:verifier.code 0} true;
    goto $bb3000;

  $bb3000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i1011 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_928, SeqInstr_929;

  SeqInstr_929:
    assume assertsPassed;
    goto SeqInstr_930;

  SeqInstr_930:
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i1012 := $slt.i32($i1011, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i21 := $i1011;
    assume {:branchcond $i1012} true;
    goto $bb3001, $bb3002;

  $bb3002:
    assume !($i1012 == 1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i1013 := $load.i32($M.60, $p3);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i1014 := $eq.i32($i1013, $i2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i21 := $i1011;
    assume {:branchcond $i1014} true;
    goto $bb3003, $bb3004;

  $bb3004:
    assume !($i1014 == 1);
    assume {:verifier.code 0} true;
    goto $bb3005;

  $bb3005:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3006, $bb3007;

  $bb3007:
    assume !(1 == 1);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb3008;

  $bb3008:
    assume {:verifier.code 0} true;
    goto $bb3009;

  $bb3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3010;

  $bb3010:
    assume {:verifier.code 0} true;
    goto $bb3011;

  $bb3011:
    assume {:verifier.code 0} true;
    goto $bb3012;

  $bb3012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i1015 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_931, SeqInstr_932;

  SeqInstr_932:
    assume assertsPassed;
    goto SeqInstr_933;

  SeqInstr_933:
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i1016 := $slt.i32($i1015, 0);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i21 := $i1015;
    assume {:branchcond $i1016} true;
    goto $bb3013, $bb3014;

  $bb3014:
    assume !($i1016 == 1);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i1017 := $load.i32($M.60, $p3);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i1018 := $eq.i32($i1017, $i2);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i21 := $i1015;
    assume {:branchcond $i1018} true;
    goto $bb3015, $bb3016;

  $bb3016:
    assume !($i1018 == 1);
    assume {:verifier.code 0} true;
    goto $bb3017;

  $bb3017:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3018, $bb3019;

  $bb3019:
    assume !(1 == 1);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb3020;

  $bb3020:
    assume {:verifier.code 0} true;
    goto $bb3021;

  $bb3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3022;

  $bb3022:
    assume {:verifier.code 0} true;
    goto $bb3023;

  $bb3023:
    assume {:verifier.code 0} true;
    goto $bb3024;

  $bb3024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i1019 := vx_get_pipe_state($p0, $p1, $p3);
    goto SeqInstr_934, SeqInstr_935;

  SeqInstr_935:
    assume assertsPassed;
    goto SeqInstr_936;

  SeqInstr_936:
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i1020 := $slt.i32($i1019, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i21 := $i1019;
    assume {:branchcond $i1020} true;
    goto $bb3025, $bb3026;

  $bb3026:
    assume !($i1020 == 1);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $i1021 := $load.i32($M.60, $p3);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i1022 := $eq.i32($i1021, $i2);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i21 := $i1019;
    assume {:branchcond $i1022} true;
    goto $bb3027, $bb3028;

  $bb3028:
    assume !($i1022 == 1);
    assume {:verifier.code 0} true;
    goto $bb3029;

  $bb3029:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb3030, $bb3031;

  $bb3031:
    assume !(1 == 1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    goto $bb3032;

  $bb3032:
    assume {:verifier.code 0} true;
    goto $bb3033;

  $bb3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb3034;

  $bb3034:
    assume {:verifier.code 0} true;
    goto $bb3035;

  $bb3035:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 5);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i26 := (if $i25 == 1 then $sub.i32(0, 5) else 0);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i6 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb3030:
    assume 1 == 1;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} __const_udelay(4295000);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb3035;

  $bb3027:
    assume {:verifier.code 0} true;
    assume $i1022 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i24 := $i21;
    goto $bb39;

  $bb3025:
    assume {:verifier.code 0} true;
    assume $i1020 == 1;
    goto $bb35;

  SeqInstr_934:
    assume !assertsPassed;
    return;

  $bb3018:
    assume 1 == 1;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} __const_udelay(4295000);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    goto $bb3023;

  $bb3015:
    assume {:verifier.code 0} true;
    assume $i1018 == 1;
    goto $bb35;

  $bb3013:
    assume {:verifier.code 0} true;
    assume $i1016 == 1;
    goto $bb35;

  SeqInstr_931:
    assume !assertsPassed;
    return;

  $bb3006:
    assume 1 == 1;
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} __const_udelay(4295000);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    goto $bb3011;

  $bb3003:
    assume {:verifier.code 0} true;
    assume $i1014 == 1;
    goto $bb35;

  $bb3001:
    assume {:verifier.code 0} true;
    assume $i1012 == 1;
    goto $bb35;

  SeqInstr_928:
    assume !assertsPassed;
    return;

  $bb2994:
    assume 1 == 1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} __const_udelay(4295000);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    goto $bb2999;

  $bb2991:
    assume {:verifier.code 0} true;
    assume $i1010 == 1;
    goto $bb35;

  $bb2989:
    assume {:verifier.code 0} true;
    assume $i1008 == 1;
    goto $bb35;

  SeqInstr_925:
    assume !assertsPassed;
    return;

  $bb2982:
    assume 1 == 1;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} __const_udelay(4295000);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    goto $bb2987;

  $bb2979:
    assume {:verifier.code 0} true;
    assume $i1006 == 1;
    goto $bb35;

  $bb2977:
    assume {:verifier.code 0} true;
    assume $i1004 == 1;
    goto $bb35;

  SeqInstr_922:
    assume !assertsPassed;
    return;

  $bb2970:
    assume 1 == 1;
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} __const_udelay(4295000);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb2975;

  $bb2967:
    assume {:verifier.code 0} true;
    assume $i1002 == 1;
    goto $bb35;

  $bb2965:
    assume {:verifier.code 0} true;
    assume $i1000 == 1;
    goto $bb35;

  SeqInstr_919:
    assume !assertsPassed;
    return;

  $bb2958:
    assume 1 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} __const_udelay(4295000);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    goto $bb2963;

  $bb2955:
    assume {:verifier.code 0} true;
    assume $i998 == 1;
    goto $bb35;

  $bb2953:
    assume {:verifier.code 0} true;
    assume $i996 == 1;
    goto $bb35;

  SeqInstr_916:
    assume !assertsPassed;
    return;

  $bb2946:
    assume 1 == 1;
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __const_udelay(4295000);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb2951;

  $bb2943:
    assume {:verifier.code 0} true;
    assume $i994 == 1;
    goto $bb35;

  $bb2941:
    assume {:verifier.code 0} true;
    assume $i992 == 1;
    goto $bb35;

  SeqInstr_913:
    assume !assertsPassed;
    return;

  $bb2934:
    assume 1 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} __const_udelay(4295000);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    goto $bb2939;

  $bb2931:
    assume {:verifier.code 0} true;
    assume $i990 == 1;
    goto $bb35;

  $bb2929:
    assume {:verifier.code 0} true;
    assume $i988 == 1;
    goto $bb35;

  SeqInstr_910:
    assume !assertsPassed;
    return;

  $bb2922:
    assume 1 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} __const_udelay(4295000);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb2927;

  $bb2919:
    assume {:verifier.code 0} true;
    assume $i986 == 1;
    goto $bb35;

  $bb2917:
    assume {:verifier.code 0} true;
    assume $i984 == 1;
    goto $bb35;

  SeqInstr_907:
    assume !assertsPassed;
    return;

  $bb2910:
    assume 1 == 1;
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} __const_udelay(4295000);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    goto $bb2915;

  $bb2907:
    assume {:verifier.code 0} true;
    assume $i982 == 1;
    goto $bb35;

  $bb2905:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb35;

  SeqInstr_904:
    assume !assertsPassed;
    return;

  $bb2898:
    assume 1 == 1;
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} __const_udelay(4295000);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb2903;

  $bb2895:
    assume {:verifier.code 0} true;
    assume $i978 == 1;
    goto $bb35;

  $bb2893:
    assume {:verifier.code 0} true;
    assume $i976 == 1;
    goto $bb35;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb2886:
    assume 1 == 1;
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} __const_udelay(4295000);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    goto $bb2891;

  $bb2883:
    assume {:verifier.code 0} true;
    assume $i974 == 1;
    goto $bb35;

  $bb2881:
    assume {:verifier.code 0} true;
    assume $i972 == 1;
    goto $bb35;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb2874:
    assume 1 == 1;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} __const_udelay(4295000);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    goto $bb2879;

  $bb2871:
    assume {:verifier.code 0} true;
    assume $i970 == 1;
    goto $bb35;

  $bb2869:
    assume {:verifier.code 0} true;
    assume $i968 == 1;
    goto $bb35;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb2862:
    assume 1 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} __const_udelay(4295000);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb2867;

  $bb2859:
    assume {:verifier.code 0} true;
    assume $i966 == 1;
    goto $bb35;

  $bb2857:
    assume {:verifier.code 0} true;
    assume $i964 == 1;
    goto $bb35;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb2850:
    assume 1 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} __const_udelay(4295000);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb2855;

  $bb2847:
    assume {:verifier.code 0} true;
    assume $i962 == 1;
    goto $bb35;

  $bb2845:
    assume {:verifier.code 0} true;
    assume $i960 == 1;
    goto $bb35;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb2838:
    assume 1 == 1;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} __const_udelay(4295000);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    goto $bb2843;

  $bb2835:
    assume {:verifier.code 0} true;
    assume $i958 == 1;
    goto $bb35;

  $bb2833:
    assume {:verifier.code 0} true;
    assume $i956 == 1;
    goto $bb35;

  SeqInstr_886:
    assume !assertsPassed;
    return;

  $bb2826:
    assume 1 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} __const_udelay(4295000);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    goto $bb2831;

  $bb2823:
    assume {:verifier.code 0} true;
    assume $i954 == 1;
    goto $bb35;

  $bb2821:
    assume {:verifier.code 0} true;
    assume $i952 == 1;
    goto $bb35;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb2814:
    assume 1 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} __const_udelay(4295000);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    goto $bb2819;

  $bb2811:
    assume {:verifier.code 0} true;
    assume $i950 == 1;
    goto $bb35;

  $bb2809:
    assume {:verifier.code 0} true;
    assume $i948 == 1;
    goto $bb35;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb2802:
    assume 1 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} __const_udelay(4295000);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    goto $bb2807;

  $bb2799:
    assume {:verifier.code 0} true;
    assume $i946 == 1;
    goto $bb35;

  $bb2797:
    assume {:verifier.code 0} true;
    assume $i944 == 1;
    goto $bb35;

  SeqInstr_877:
    assume !assertsPassed;
    return;

  $bb2790:
    assume 1 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} __const_udelay(4295000);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    goto $bb2795;

  $bb2787:
    assume {:verifier.code 0} true;
    assume $i942 == 1;
    goto $bb35;

  $bb2785:
    assume {:verifier.code 0} true;
    assume $i940 == 1;
    goto $bb35;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb2778:
    assume 1 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} __const_udelay(4295000);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb2783;

  $bb2775:
    assume {:verifier.code 0} true;
    assume $i938 == 1;
    goto $bb35;

  $bb2773:
    assume {:verifier.code 0} true;
    assume $i936 == 1;
    goto $bb35;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb2766:
    assume 1 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} __const_udelay(4295000);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    goto $bb2771;

  $bb2763:
    assume {:verifier.code 0} true;
    assume $i934 == 1;
    goto $bb35;

  $bb2761:
    assume {:verifier.code 0} true;
    assume $i932 == 1;
    goto $bb35;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb2754:
    assume 1 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} __const_udelay(4295000);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    goto $bb2759;

  $bb2751:
    assume {:verifier.code 0} true;
    assume $i930 == 1;
    goto $bb35;

  $bb2749:
    assume {:verifier.code 0} true;
    assume $i928 == 1;
    goto $bb35;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb2742:
    assume 1 == 1;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} __const_udelay(4295000);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    goto $bb2747;

  $bb2739:
    assume {:verifier.code 0} true;
    assume $i926 == 1;
    goto $bb35;

  $bb2737:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb35;

  SeqInstr_862:
    assume !assertsPassed;
    return;

  $bb2730:
    assume 1 == 1;
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} __const_udelay(4295000);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    goto $bb2735;

  $bb2727:
    assume {:verifier.code 0} true;
    assume $i922 == 1;
    goto $bb35;

  $bb2725:
    assume {:verifier.code 0} true;
    assume $i920 == 1;
    goto $bb35;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb2718:
    assume 1 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} __const_udelay(4295000);
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb2723;

  $bb2715:
    assume {:verifier.code 0} true;
    assume $i918 == 1;
    goto $bb35;

  $bb2713:
    assume {:verifier.code 0} true;
    assume $i916 == 1;
    goto $bb35;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb2706:
    assume 1 == 1;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} __const_udelay(4295000);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    goto $bb2711;

  $bb2703:
    assume {:verifier.code 0} true;
    assume $i914 == 1;
    goto $bb35;

  $bb2701:
    assume {:verifier.code 0} true;
    assume $i912 == 1;
    goto $bb35;

  SeqInstr_853:
    assume !assertsPassed;
    return;

  $bb2694:
    assume 1 == 1;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} __const_udelay(4295000);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    goto $bb2699;

  $bb2691:
    assume {:verifier.code 0} true;
    assume $i910 == 1;
    goto $bb35;

  $bb2689:
    assume {:verifier.code 0} true;
    assume $i908 == 1;
    goto $bb35;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb2682:
    assume 1 == 1;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} __const_udelay(4295000);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb2687;

  $bb2679:
    assume {:verifier.code 0} true;
    assume $i906 == 1;
    goto $bb35;

  $bb2677:
    assume {:verifier.code 0} true;
    assume $i904 == 1;
    goto $bb35;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb2670:
    assume 1 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} __const_udelay(4295000);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    goto $bb2675;

  $bb2667:
    assume {:verifier.code 0} true;
    assume $i902 == 1;
    goto $bb35;

  $bb2665:
    assume {:verifier.code 0} true;
    assume $i900 == 1;
    goto $bb35;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb2658:
    assume 1 == 1;
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} __const_udelay(4295000);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb2663;

  $bb2655:
    assume {:verifier.code 0} true;
    assume $i898 == 1;
    goto $bb35;

  $bb2653:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb35;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb2646:
    assume 1 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} __const_udelay(4295000);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    goto $bb2651;

  $bb2643:
    assume {:verifier.code 0} true;
    assume $i894 == 1;
    goto $bb35;

  $bb2641:
    assume {:verifier.code 0} true;
    assume $i892 == 1;
    goto $bb35;

  SeqInstr_838:
    assume !assertsPassed;
    return;

  $bb2634:
    assume 1 == 1;
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} __const_udelay(4295000);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    goto $bb2639;

  $bb2631:
    assume {:verifier.code 0} true;
    assume $i890 == 1;
    goto $bb35;

  $bb2629:
    assume {:verifier.code 0} true;
    assume $i888 == 1;
    goto $bb35;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb2622:
    assume 1 == 1;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} __const_udelay(4295000);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    goto $bb2627;

  $bb2619:
    assume {:verifier.code 0} true;
    assume $i886 == 1;
    goto $bb35;

  $bb2617:
    assume {:verifier.code 0} true;
    assume $i884 == 1;
    goto $bb35;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb2610:
    assume 1 == 1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} __const_udelay(4295000);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    goto $bb2615;

  $bb2607:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb35;

  $bb2605:
    assume {:verifier.code 0} true;
    assume $i880 == 1;
    goto $bb35;

  SeqInstr_829:
    assume !assertsPassed;
    return;

  $bb2598:
    assume 1 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} __const_udelay(4295000);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    goto $bb2603;

  $bb2595:
    assume {:verifier.code 0} true;
    assume $i878 == 1;
    goto $bb35;

  $bb2593:
    assume {:verifier.code 0} true;
    assume $i876 == 1;
    goto $bb35;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb2586:
    assume 1 == 1;
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __const_udelay(4295000);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb2591;

  $bb2583:
    assume {:verifier.code 0} true;
    assume $i874 == 1;
    goto $bb35;

  $bb2581:
    assume {:verifier.code 0} true;
    assume $i872 == 1;
    goto $bb35;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb2574:
    assume 1 == 1;
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __const_udelay(4295000);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    goto $bb2579;

  $bb2571:
    assume {:verifier.code 0} true;
    assume $i870 == 1;
    goto $bb35;

  $bb2569:
    assume {:verifier.code 0} true;
    assume $i868 == 1;
    goto $bb35;

  SeqInstr_820:
    assume !assertsPassed;
    return;

  $bb2562:
    assume 1 == 1;
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} __const_udelay(4295000);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb2567;

  $bb2559:
    assume {:verifier.code 0} true;
    assume $i866 == 1;
    goto $bb35;

  $bb2557:
    assume {:verifier.code 0} true;
    assume $i864 == 1;
    goto $bb35;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  $bb2550:
    assume 1 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} __const_udelay(4295000);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb2555;

  $bb2547:
    assume {:verifier.code 0} true;
    assume $i862 == 1;
    goto $bb35;

  $bb2545:
    assume {:verifier.code 0} true;
    assume $i860 == 1;
    goto $bb35;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb2538:
    assume 1 == 1;
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} __const_udelay(4295000);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb2543;

  $bb2535:
    assume {:verifier.code 0} true;
    assume $i858 == 1;
    goto $bb35;

  $bb2533:
    assume {:verifier.code 0} true;
    assume $i856 == 1;
    goto $bb35;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb2526:
    assume 1 == 1;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} __const_udelay(4295000);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb2531;

  $bb2523:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb35;

  $bb2521:
    assume {:verifier.code 0} true;
    assume $i852 == 1;
    goto $bb35;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb2514:
    assume 1 == 1;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} __const_udelay(4295000);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    goto $bb2519;

  $bb2511:
    assume {:verifier.code 0} true;
    assume $i850 == 1;
    goto $bb35;

  $bb2509:
    assume {:verifier.code 0} true;
    assume $i848 == 1;
    goto $bb35;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb2502:
    assume 1 == 1;
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} __const_udelay(4295000);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    goto $bb2507;

  $bb2499:
    assume {:verifier.code 0} true;
    assume $i846 == 1;
    goto $bb35;

  $bb2497:
    assume {:verifier.code 0} true;
    assume $i844 == 1;
    goto $bb35;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb2490:
    assume 1 == 1;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} __const_udelay(4295000);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    goto $bb2495;

  $bb2487:
    assume {:verifier.code 0} true;
    assume $i842 == 1;
    goto $bb35;

  $bb2485:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb35;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb2478:
    assume 1 == 1;
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} __const_udelay(4295000);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    goto $bb2483;

  $bb2475:
    assume {:verifier.code 0} true;
    assume $i838 == 1;
    goto $bb35;

  $bb2473:
    assume {:verifier.code 0} true;
    assume $i836 == 1;
    goto $bb35;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb2466:
    assume 1 == 1;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} __const_udelay(4295000);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    goto $bb2471;

  $bb2463:
    assume {:verifier.code 0} true;
    assume $i834 == 1;
    goto $bb35;

  $bb2461:
    assume {:verifier.code 0} true;
    assume $i832 == 1;
    goto $bb35;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb2454:
    assume 1 == 1;
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} __const_udelay(4295000);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb2459;

  $bb2451:
    assume {:verifier.code 0} true;
    assume $i830 == 1;
    goto $bb35;

  $bb2449:
    assume {:verifier.code 0} true;
    assume $i828 == 1;
    goto $bb35;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb2442:
    assume 1 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} __const_udelay(4295000);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    goto $bb2447;

  $bb2439:
    assume {:verifier.code 0} true;
    assume $i826 == 1;
    goto $bb35;

  $bb2437:
    assume {:verifier.code 0} true;
    assume $i824 == 1;
    goto $bb35;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb2430:
    assume 1 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __const_udelay(4295000);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    goto $bb2435;

  $bb2427:
    assume {:verifier.code 0} true;
    assume $i822 == 1;
    goto $bb35;

  $bb2425:
    assume {:verifier.code 0} true;
    assume $i820 == 1;
    goto $bb35;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb2418:
    assume 1 == 1;
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} __const_udelay(4295000);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    goto $bb2423;

  $bb2415:
    assume {:verifier.code 0} true;
    assume $i818 == 1;
    goto $bb35;

  $bb2413:
    assume {:verifier.code 0} true;
    assume $i816 == 1;
    goto $bb35;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb2406:
    assume 1 == 1;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} __const_udelay(4295000);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    goto $bb2411;

  $bb2403:
    assume {:verifier.code 0} true;
    assume $i814 == 1;
    goto $bb35;

  $bb2401:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb35;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb2394:
    assume 1 == 1;
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __const_udelay(4295000);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    goto $bb2399;

  $bb2391:
    assume {:verifier.code 0} true;
    assume $i810 == 1;
    goto $bb35;

  $bb2389:
    assume {:verifier.code 0} true;
    assume $i808 == 1;
    goto $bb35;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb2382:
    assume 1 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} __const_udelay(4295000);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    goto $bb2387;

  $bb2379:
    assume {:verifier.code 0} true;
    assume $i806 == 1;
    goto $bb35;

  $bb2377:
    assume {:verifier.code 0} true;
    assume $i804 == 1;
    goto $bb35;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb2370:
    assume 1 == 1;
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} __const_udelay(4295000);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto $bb2375;

  $bb2367:
    assume {:verifier.code 0} true;
    assume $i802 == 1;
    goto $bb35;

  $bb2365:
    assume {:verifier.code 0} true;
    assume $i800 == 1;
    goto $bb35;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb2358:
    assume 1 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __const_udelay(4295000);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    goto $bb2363;

  $bb2355:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb35;

  $bb2353:
    assume {:verifier.code 0} true;
    assume $i796 == 1;
    goto $bb35;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb2346:
    assume 1 == 1;
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __const_udelay(4295000);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    goto $bb2351;

  $bb2343:
    assume {:verifier.code 0} true;
    assume $i794 == 1;
    goto $bb35;

  $bb2341:
    assume {:verifier.code 0} true;
    assume $i792 == 1;
    goto $bb35;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb2334:
    assume 1 == 1;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __const_udelay(4295000);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb2339;

  $bb2331:
    assume {:verifier.code 0} true;
    assume $i790 == 1;
    goto $bb35;

  $bb2329:
    assume {:verifier.code 0} true;
    assume $i788 == 1;
    goto $bb35;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb2322:
    assume 1 == 1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __const_udelay(4295000);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    goto $bb2327;

  $bb2319:
    assume {:verifier.code 0} true;
    assume $i786 == 1;
    goto $bb35;

  $bb2317:
    assume {:verifier.code 0} true;
    assume $i784 == 1;
    goto $bb35;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb2310:
    assume 1 == 1;
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __const_udelay(4295000);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    goto $bb2315;

  $bb2307:
    assume {:verifier.code 0} true;
    assume $i782 == 1;
    goto $bb35;

  $bb2305:
    assume {:verifier.code 0} true;
    assume $i780 == 1;
    goto $bb35;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb2298:
    assume 1 == 1;
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __const_udelay(4295000);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    goto $bb2303;

  $bb2295:
    assume {:verifier.code 0} true;
    assume $i778 == 1;
    goto $bb35;

  $bb2293:
    assume {:verifier.code 0} true;
    assume $i776 == 1;
    goto $bb35;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb2286:
    assume 1 == 1;
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __const_udelay(4295000);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    goto $bb2291;

  $bb2283:
    assume {:verifier.code 0} true;
    assume $i774 == 1;
    goto $bb35;

  $bb2281:
    assume {:verifier.code 0} true;
    assume $i772 == 1;
    goto $bb35;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb2274:
    assume 1 == 1;
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __const_udelay(4295000);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    goto $bb2279;

  $bb2271:
    assume {:verifier.code 0} true;
    assume $i770 == 1;
    goto $bb35;

  $bb2269:
    assume {:verifier.code 0} true;
    assume $i768 == 1;
    goto $bb35;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb2262:
    assume 1 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __const_udelay(4295000);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb2267;

  $bb2259:
    assume {:verifier.code 0} true;
    assume $i766 == 1;
    goto $bb35;

  $bb2257:
    assume {:verifier.code 0} true;
    assume $i764 == 1;
    goto $bb35;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb2250:
    assume 1 == 1;
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} __const_udelay(4295000);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb2255;

  $bb2247:
    assume {:verifier.code 0} true;
    assume $i762 == 1;
    goto $bb35;

  $bb2245:
    assume {:verifier.code 0} true;
    assume $i760 == 1;
    goto $bb35;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb2238:
    assume 1 == 1;
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __const_udelay(4295000);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb2243;

  $bb2235:
    assume {:verifier.code 0} true;
    assume $i758 == 1;
    goto $bb35;

  $bb2233:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb35;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb2226:
    assume 1 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} __const_udelay(4295000);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb2231;

  $bb2223:
    assume {:verifier.code 0} true;
    assume $i754 == 1;
    goto $bb35;

  $bb2221:
    assume {:verifier.code 0} true;
    assume $i752 == 1;
    goto $bb35;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb2214:
    assume 1 == 1;
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} __const_udelay(4295000);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    goto $bb2219;

  $bb2211:
    assume {:verifier.code 0} true;
    assume $i750 == 1;
    goto $bb35;

  $bb2209:
    assume {:verifier.code 0} true;
    assume $i748 == 1;
    goto $bb35;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb2202:
    assume 1 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} __const_udelay(4295000);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    goto $bb2207;

  $bb2199:
    assume {:verifier.code 0} true;
    assume $i746 == 1;
    goto $bb35;

  $bb2197:
    assume {:verifier.code 0} true;
    assume $i744 == 1;
    goto $bb35;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb2190:
    assume 1 == 1;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} __const_udelay(4295000);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb2195;

  $bb2187:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb35;

  $bb2185:
    assume {:verifier.code 0} true;
    assume $i740 == 1;
    goto $bb35;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb2178:
    assume 1 == 1;
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} __const_udelay(4295000);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    goto $bb2183;

  $bb2175:
    assume {:verifier.code 0} true;
    assume $i738 == 1;
    goto $bb35;

  $bb2173:
    assume {:verifier.code 0} true;
    assume $i736 == 1;
    goto $bb35;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb2166:
    assume 1 == 1;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __const_udelay(4295000);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    goto $bb2171;

  $bb2163:
    assume {:verifier.code 0} true;
    assume $i734 == 1;
    goto $bb35;

  $bb2161:
    assume {:verifier.code 0} true;
    assume $i732 == 1;
    goto $bb35;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb2154:
    assume 1 == 1;
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __const_udelay(4295000);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    goto $bb2159;

  $bb2151:
    assume {:verifier.code 0} true;
    assume $i730 == 1;
    goto $bb35;

  $bb2149:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb35;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb2142:
    assume 1 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} __const_udelay(4295000);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    goto $bb2147;

  $bb2139:
    assume {:verifier.code 0} true;
    assume $i726 == 1;
    goto $bb35;

  $bb2137:
    assume {:verifier.code 0} true;
    assume $i724 == 1;
    goto $bb35;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb2130:
    assume 1 == 1;
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} __const_udelay(4295000);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb2135;

  $bb2127:
    assume {:verifier.code 0} true;
    assume $i722 == 1;
    goto $bb35;

  $bb2125:
    assume {:verifier.code 0} true;
    assume $i720 == 1;
    goto $bb35;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb2118:
    assume 1 == 1;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} __const_udelay(4295000);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb2123;

  $bb2115:
    assume {:verifier.code 0} true;
    assume $i718 == 1;
    goto $bb35;

  $bb2113:
    assume {:verifier.code 0} true;
    assume $i716 == 1;
    goto $bb35;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb2106:
    assume 1 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __const_udelay(4295000);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    goto $bb2111;

  $bb2103:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb35;

  $bb2101:
    assume {:verifier.code 0} true;
    assume $i712 == 1;
    goto $bb35;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb2094:
    assume 1 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __const_udelay(4295000);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb2099;

  $bb2091:
    assume {:verifier.code 0} true;
    assume $i710 == 1;
    goto $bb35;

  $bb2089:
    assume {:verifier.code 0} true;
    assume $i708 == 1;
    goto $bb35;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb2082:
    assume 1 == 1;
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __const_udelay(4295000);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb2087;

  $bb2079:
    assume {:verifier.code 0} true;
    assume $i706 == 1;
    goto $bb35;

  $bb2077:
    assume {:verifier.code 0} true;
    assume $i704 == 1;
    goto $bb35;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb2070:
    assume 1 == 1;
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} __const_udelay(4295000);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    goto $bb2075;

  $bb2067:
    assume {:verifier.code 0} true;
    assume $i702 == 1;
    goto $bb35;

  $bb2065:
    assume {:verifier.code 0} true;
    assume $i700 == 1;
    goto $bb35;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb2058:
    assume 1 == 1;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __const_udelay(4295000);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto $bb2063;

  $bb2055:
    assume {:verifier.code 0} true;
    assume $i698 == 1;
    goto $bb35;

  $bb2053:
    assume {:verifier.code 0} true;
    assume $i696 == 1;
    goto $bb35;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb2046:
    assume 1 == 1;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} __const_udelay(4295000);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    goto $bb2051;

  $bb2043:
    assume {:verifier.code 0} true;
    assume $i694 == 1;
    goto $bb35;

  $bb2041:
    assume {:verifier.code 0} true;
    assume $i692 == 1;
    goto $bb35;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb2034:
    assume 1 == 1;
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __const_udelay(4295000);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb2039;

  $bb2031:
    assume {:verifier.code 0} true;
    assume $i690 == 1;
    goto $bb35;

  $bb2029:
    assume {:verifier.code 0} true;
    assume $i688 == 1;
    goto $bb35;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb2022:
    assume 1 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} __const_udelay(4295000);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    goto $bb2027;

  $bb2019:
    assume {:verifier.code 0} true;
    assume $i686 == 1;
    goto $bb35;

  $bb2017:
    assume {:verifier.code 0} true;
    assume $i684 == 1;
    goto $bb35;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb2010:
    assume 1 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __const_udelay(4295000);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    goto $bb2015;

  $bb2007:
    assume {:verifier.code 0} true;
    assume $i682 == 1;
    goto $bb35;

  $bb2005:
    assume {:verifier.code 0} true;
    assume $i680 == 1;
    goto $bb35;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb1998:
    assume 1 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} __const_udelay(4295000);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb2003;

  $bb1995:
    assume {:verifier.code 0} true;
    assume $i678 == 1;
    goto $bb35;

  $bb1993:
    assume {:verifier.code 0} true;
    assume $i676 == 1;
    goto $bb35;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb1986:
    assume 1 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} __const_udelay(4295000);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto $bb1991;

  $bb1983:
    assume {:verifier.code 0} true;
    assume $i674 == 1;
    goto $bb35;

  $bb1981:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb35;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb1974:
    assume 1 == 1;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} __const_udelay(4295000);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    goto $bb1979;

  $bb1971:
    assume {:verifier.code 0} true;
    assume $i670 == 1;
    goto $bb35;

  $bb1969:
    assume {:verifier.code 0} true;
    assume $i668 == 1;
    goto $bb35;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb1962:
    assume 1 == 1;
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} __const_udelay(4295000);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    goto $bb1967;

  $bb1959:
    assume {:verifier.code 0} true;
    assume $i666 == 1;
    goto $bb35;

  $bb1957:
    assume {:verifier.code 0} true;
    assume $i664 == 1;
    goto $bb35;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb1950:
    assume 1 == 1;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} __const_udelay(4295000);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    goto $bb1955;

  $bb1947:
    assume {:verifier.code 0} true;
    assume $i662 == 1;
    goto $bb35;

  $bb1945:
    assume {:verifier.code 0} true;
    assume $i660 == 1;
    goto $bb35;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb1938:
    assume 1 == 1;
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} __const_udelay(4295000);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    goto $bb1943;

  $bb1935:
    assume {:verifier.code 0} true;
    assume $i658 == 1;
    goto $bb35;

  $bb1933:
    assume {:verifier.code 0} true;
    assume $i656 == 1;
    goto $bb35;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb1926:
    assume 1 == 1;
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} __const_udelay(4295000);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    goto $bb1931;

  $bb1923:
    assume {:verifier.code 0} true;
    assume $i654 == 1;
    goto $bb35;

  $bb1921:
    assume {:verifier.code 0} true;
    assume $i652 == 1;
    goto $bb35;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb1914:
    assume 1 == 1;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} __const_udelay(4295000);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    goto $bb1919;

  $bb1911:
    assume {:verifier.code 0} true;
    assume $i650 == 1;
    goto $bb35;

  $bb1909:
    assume {:verifier.code 0} true;
    assume $i648 == 1;
    goto $bb35;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb1902:
    assume 1 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __const_udelay(4295000);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    goto $bb1907;

  $bb1899:
    assume {:verifier.code 0} true;
    assume $i646 == 1;
    goto $bb35;

  $bb1897:
    assume {:verifier.code 0} true;
    assume $i644 == 1;
    goto $bb35;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb1890:
    assume 1 == 1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} __const_udelay(4295000);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb1895;

  $bb1887:
    assume {:verifier.code 0} true;
    assume $i642 == 1;
    goto $bb35;

  $bb1885:
    assume {:verifier.code 0} true;
    assume $i640 == 1;
    goto $bb35;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb1878:
    assume 1 == 1;
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __const_udelay(4295000);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    goto $bb1883;

  $bb1875:
    assume {:verifier.code 0} true;
    assume $i638 == 1;
    goto $bb35;

  $bb1873:
    assume {:verifier.code 0} true;
    assume $i636 == 1;
    goto $bb35;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb1866:
    assume 1 == 1;
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} __const_udelay(4295000);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    goto $bb1871;

  $bb1863:
    assume {:verifier.code 0} true;
    assume $i634 == 1;
    goto $bb35;

  $bb1861:
    assume {:verifier.code 0} true;
    assume $i632 == 1;
    goto $bb35;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb1854:
    assume 1 == 1;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __const_udelay(4295000);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb1859;

  $bb1851:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb35;

  $bb1849:
    assume {:verifier.code 0} true;
    assume $i628 == 1;
    goto $bb35;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb1842:
    assume 1 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __const_udelay(4295000);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    goto $bb1847;

  $bb1839:
    assume {:verifier.code 0} true;
    assume $i626 == 1;
    goto $bb35;

  $bb1837:
    assume {:verifier.code 0} true;
    assume $i624 == 1;
    goto $bb35;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb1830:
    assume 1 == 1;
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __const_udelay(4295000);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    goto $bb1835;

  $bb1827:
    assume {:verifier.code 0} true;
    assume $i622 == 1;
    goto $bb35;

  $bb1825:
    assume {:verifier.code 0} true;
    assume $i620 == 1;
    goto $bb35;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb1818:
    assume 1 == 1;
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} __const_udelay(4295000);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto $bb1823;

  $bb1815:
    assume {:verifier.code 0} true;
    assume $i618 == 1;
    goto $bb35;

  $bb1813:
    assume {:verifier.code 0} true;
    assume $i616 == 1;
    goto $bb35;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb1806:
    assume 1 == 1;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __const_udelay(4295000);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb1811;

  $bb1803:
    assume {:verifier.code 0} true;
    assume $i614 == 1;
    goto $bb35;

  $bb1801:
    assume {:verifier.code 0} true;
    assume $i612 == 1;
    goto $bb35;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb1794:
    assume 1 == 1;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} __const_udelay(4295000);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb1799;

  $bb1791:
    assume {:verifier.code 0} true;
    assume $i610 == 1;
    goto $bb35;

  $bb1789:
    assume {:verifier.code 0} true;
    assume $i608 == 1;
    goto $bb35;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb1782:
    assume 1 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} __const_udelay(4295000);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb1787;

  $bb1779:
    assume {:verifier.code 0} true;
    assume $i606 == 1;
    goto $bb35;

  $bb1777:
    assume {:verifier.code 0} true;
    assume $i604 == 1;
    goto $bb35;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb1770:
    assume 1 == 1;
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb1775;

  $bb1767:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb35;

  $bb1765:
    assume {:verifier.code 0} true;
    assume $i600 == 1;
    goto $bb35;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb1758:
    assume 1 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __const_udelay(4295000);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb1763;

  $bb1755:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb35;

  $bb1753:
    assume {:verifier.code 0} true;
    assume $i596 == 1;
    goto $bb35;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb1746:
    assume 1 == 1;
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __const_udelay(4295000);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb1751;

  $bb1743:
    assume {:verifier.code 0} true;
    assume $i594 == 1;
    goto $bb35;

  $bb1741:
    assume {:verifier.code 0} true;
    assume $i592 == 1;
    goto $bb35;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb1734:
    assume 1 == 1;
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} __const_udelay(4295000);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb1739;

  $bb1731:
    assume {:verifier.code 0} true;
    assume $i590 == 1;
    goto $bb35;

  $bb1729:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb35;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb1722:
    assume 1 == 1;
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} __const_udelay(4295000);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb1727;

  $bb1719:
    assume {:verifier.code 0} true;
    assume $i586 == 1;
    goto $bb35;

  $bb1717:
    assume {:verifier.code 0} true;
    assume $i584 == 1;
    goto $bb35;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb1710:
    assume 1 == 1;
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} __const_udelay(4295000);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb1715;

  $bb1707:
    assume {:verifier.code 0} true;
    assume $i582 == 1;
    goto $bb35;

  $bb1705:
    assume {:verifier.code 0} true;
    assume $i580 == 1;
    goto $bb35;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb1698:
    assume 1 == 1;
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} __const_udelay(4295000);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb1703;

  $bb1695:
    assume {:verifier.code 0} true;
    assume $i578 == 1;
    goto $bb35;

  $bb1693:
    assume {:verifier.code 0} true;
    assume $i576 == 1;
    goto $bb35;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb1686:
    assume 1 == 1;
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} __const_udelay(4295000);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    goto $bb1691;

  $bb1683:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb35;

  $bb1681:
    assume {:verifier.code 0} true;
    assume $i572 == 1;
    goto $bb35;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb1674:
    assume 1 == 1;
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} __const_udelay(4295000);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    goto $bb1679;

  $bb1671:
    assume {:verifier.code 0} true;
    assume $i570 == 1;
    goto $bb35;

  $bb1669:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb35;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb1662:
    assume 1 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} __const_udelay(4295000);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    goto $bb1667;

  $bb1659:
    assume {:verifier.code 0} true;
    assume $i566 == 1;
    goto $bb35;

  $bb1657:
    assume {:verifier.code 0} true;
    assume $i564 == 1;
    goto $bb35;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb1650:
    assume 1 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} __const_udelay(4295000);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    goto $bb1655;

  $bb1647:
    assume {:verifier.code 0} true;
    assume $i562 == 1;
    goto $bb35;

  $bb1645:
    assume {:verifier.code 0} true;
    assume $i560 == 1;
    goto $bb35;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb1638:
    assume 1 == 1;
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} __const_udelay(4295000);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb1643;

  $bb1635:
    assume {:verifier.code 0} true;
    assume $i558 == 1;
    goto $bb35;

  $bb1633:
    assume {:verifier.code 0} true;
    assume $i556 == 1;
    goto $bb35;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb1626:
    assume 1 == 1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} __const_udelay(4295000);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb1631;

  $bb1623:
    assume {:verifier.code 0} true;
    assume $i554 == 1;
    goto $bb35;

  $bb1621:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb35;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb1614:
    assume 1 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} __const_udelay(4295000);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    goto $bb1619;

  $bb1611:
    assume {:verifier.code 0} true;
    assume $i550 == 1;
    goto $bb35;

  $bb1609:
    assume {:verifier.code 0} true;
    assume $i548 == 1;
    goto $bb35;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb1602:
    assume 1 == 1;
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} __const_udelay(4295000);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    goto $bb1607;

  $bb1599:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb35;

  $bb1597:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb35;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb1590:
    assume 1 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} __const_udelay(4295000);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    goto $bb1595;

  $bb1587:
    assume {:verifier.code 0} true;
    assume $i542 == 1;
    goto $bb35;

  $bb1585:
    assume {:verifier.code 0} true;
    assume $i540 == 1;
    goto $bb35;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb1578:
    assume 1 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __const_udelay(4295000);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    goto $bb1583;

  $bb1575:
    assume {:verifier.code 0} true;
    assume $i538 == 1;
    goto $bb35;

  $bb1573:
    assume {:verifier.code 0} true;
    assume $i536 == 1;
    goto $bb35;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb1566:
    assume 1 == 1;
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} __const_udelay(4295000);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb1571;

  $bb1563:
    assume {:verifier.code 0} true;
    assume $i534 == 1;
    goto $bb35;

  $bb1561:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb35;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb1554:
    assume 1 == 1;
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} __const_udelay(4295000);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    goto $bb1559;

  $bb1551:
    assume {:verifier.code 0} true;
    assume $i530 == 1;
    goto $bb35;

  $bb1549:
    assume {:verifier.code 0} true;
    assume $i528 == 1;
    goto $bb35;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb1542:
    assume 1 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} __const_udelay(4295000);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    goto $bb1547;

  $bb1539:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb35;

  $bb1537:
    assume {:verifier.code 0} true;
    assume $i524 == 1;
    goto $bb35;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb1530:
    assume 1 == 1;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} __const_udelay(4295000);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    goto $bb1535;

  $bb1527:
    assume {:verifier.code 0} true;
    assume $i522 == 1;
    goto $bb35;

  $bb1525:
    assume {:verifier.code 0} true;
    assume $i520 == 1;
    goto $bb35;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb1518:
    assume 1 == 1;
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} __const_udelay(4295000);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb1523;

  $bb1515:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb35;

  $bb1513:
    assume {:verifier.code 0} true;
    assume $i516 == 1;
    goto $bb35;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb1506:
    assume 1 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __const_udelay(4295000);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    goto $bb1511;

  $bb1503:
    assume {:verifier.code 0} true;
    assume $i514 == 1;
    goto $bb35;

  $bb1501:
    assume {:verifier.code 0} true;
    assume $i512 == 1;
    goto $bb35;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb1494:
    assume 1 == 1;
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __const_udelay(4295000);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb1499;

  $bb1491:
    assume {:verifier.code 0} true;
    assume $i510 == 1;
    goto $bb35;

  $bb1489:
    assume {:verifier.code 0} true;
    assume $i508 == 1;
    goto $bb35;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb1482:
    assume 1 == 1;
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} __const_udelay(4295000);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    goto $bb1487;

  $bb1479:
    assume {:verifier.code 0} true;
    assume $i506 == 1;
    goto $bb35;

  $bb1477:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb35;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb1470:
    assume 1 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} __const_udelay(4295000);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    goto $bb1475;

  $bb1467:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb35;

  $bb1465:
    assume {:verifier.code 0} true;
    assume $i500 == 1;
    goto $bb35;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb1458:
    assume 1 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} __const_udelay(4295000);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    goto $bb1463;

  $bb1455:
    assume {:verifier.code 0} true;
    assume $i498 == 1;
    goto $bb35;

  $bb1453:
    assume {:verifier.code 0} true;
    assume $i496 == 1;
    goto $bb35;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb1446:
    assume 1 == 1;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} __const_udelay(4295000);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    goto $bb1451;

  $bb1443:
    assume {:verifier.code 0} true;
    assume $i494 == 1;
    goto $bb35;

  $bb1441:
    assume {:verifier.code 0} true;
    assume $i492 == 1;
    goto $bb35;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb1434:
    assume 1 == 1;
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} __const_udelay(4295000);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    goto $bb1439;

  $bb1431:
    assume {:verifier.code 0} true;
    assume $i490 == 1;
    goto $bb35;

  $bb1429:
    assume {:verifier.code 0} true;
    assume $i488 == 1;
    goto $bb35;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb1422:
    assume 1 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} __const_udelay(4295000);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    goto $bb1427;

  $bb1419:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb35;

  $bb1417:
    assume {:verifier.code 0} true;
    assume $i484 == 1;
    goto $bb35;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb1410:
    assume 1 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} __const_udelay(4295000);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    goto $bb1415;

  $bb1407:
    assume {:verifier.code 0} true;
    assume $i482 == 1;
    goto $bb35;

  $bb1405:
    assume {:verifier.code 0} true;
    assume $i480 == 1;
    goto $bb35;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb1398:
    assume 1 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} __const_udelay(4295000);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb1403;

  $bb1395:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb35;

  $bb1393:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb35;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb1386:
    assume 1 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} __const_udelay(4295000);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    goto $bb1391;

  $bb1383:
    assume {:verifier.code 0} true;
    assume $i474 == 1;
    goto $bb35;

  $bb1381:
    assume {:verifier.code 0} true;
    assume $i472 == 1;
    goto $bb35;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb1374:
    assume 1 == 1;
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} __const_udelay(4295000);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    goto $bb1379;

  $bb1371:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb35;

  $bb1369:
    assume {:verifier.code 0} true;
    assume $i468 == 1;
    goto $bb35;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb1362:
    assume 1 == 1;
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} __const_udelay(4295000);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    goto $bb1367;

  $bb1359:
    assume {:verifier.code 0} true;
    assume $i466 == 1;
    goto $bb35;

  $bb1357:
    assume {:verifier.code 0} true;
    assume $i464 == 1;
    goto $bb35;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb1350:
    assume 1 == 1;
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} __const_udelay(4295000);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb1355;

  $bb1347:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb35;

  $bb1345:
    assume {:verifier.code 0} true;
    assume $i460 == 1;
    goto $bb35;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb1338:
    assume 1 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} __const_udelay(4295000);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    goto $bb1343;

  $bb1335:
    assume {:verifier.code 0} true;
    assume $i458 == 1;
    goto $bb35;

  $bb1333:
    assume {:verifier.code 0} true;
    assume $i456 == 1;
    goto $bb35;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb1326:
    assume 1 == 1;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} __const_udelay(4295000);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    goto $bb1331;

  $bb1323:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb35;

  $bb1321:
    assume {:verifier.code 0} true;
    assume $i452 == 1;
    goto $bb35;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb1314:
    assume 1 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} __const_udelay(4295000);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    goto $bb1319;

  $bb1311:
    assume {:verifier.code 0} true;
    assume $i450 == 1;
    goto $bb35;

  $bb1309:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb35;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb1302:
    assume 1 == 1;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} __const_udelay(4295000);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    goto $bb1307;

  $bb1299:
    assume {:verifier.code 0} true;
    assume $i446 == 1;
    goto $bb35;

  $bb1297:
    assume {:verifier.code 0} true;
    assume $i444 == 1;
    goto $bb35;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb1290:
    assume 1 == 1;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} __const_udelay(4295000);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    goto $bb1295;

  $bb1287:
    assume {:verifier.code 0} true;
    assume $i442 == 1;
    goto $bb35;

  $bb1285:
    assume {:verifier.code 0} true;
    assume $i440 == 1;
    goto $bb35;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb1278:
    assume 1 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} __const_udelay(4295000);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    goto $bb1283;

  $bb1275:
    assume {:verifier.code 0} true;
    assume $i438 == 1;
    goto $bb35;

  $bb1273:
    assume {:verifier.code 0} true;
    assume $i436 == 1;
    goto $bb35;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb1266:
    assume 1 == 1;
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} __const_udelay(4295000);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    goto $bb1271;

  $bb1263:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb35;

  $bb1261:
    assume {:verifier.code 0} true;
    assume $i432 == 1;
    goto $bb35;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb1254:
    assume 1 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} __const_udelay(4295000);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    goto $bb1259;

  $bb1251:
    assume {:verifier.code 0} true;
    assume $i430 == 1;
    goto $bb35;

  $bb1249:
    assume {:verifier.code 0} true;
    assume $i428 == 1;
    goto $bb35;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb1242:
    assume 1 == 1;
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} __const_udelay(4295000);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    goto $bb1247;

  $bb1239:
    assume {:verifier.code 0} true;
    assume $i426 == 1;
    goto $bb35;

  $bb1237:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb35;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb1230:
    assume 1 == 1;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} __const_udelay(4295000);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    goto $bb1235;

  $bb1227:
    assume {:verifier.code 0} true;
    assume $i422 == 1;
    goto $bb35;

  $bb1225:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb35;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb1218:
    assume 1 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __const_udelay(4295000);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    goto $bb1223;

  $bb1215:
    assume {:verifier.code 0} true;
    assume $i418 == 1;
    goto $bb35;

  $bb1213:
    assume {:verifier.code 0} true;
    assume $i416 == 1;
    goto $bb35;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb1206:
    assume 1 == 1;
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} __const_udelay(4295000);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    goto $bb1211;

  $bb1203:
    assume {:verifier.code 0} true;
    assume $i414 == 1;
    goto $bb35;

  $bb1201:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb35;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb1194:
    assume 1 == 1;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} __const_udelay(4295000);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb1199;

  $bb1191:
    assume {:verifier.code 0} true;
    assume $i410 == 1;
    goto $bb35;

  $bb1189:
    assume {:verifier.code 0} true;
    assume $i408 == 1;
    goto $bb35;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb1182:
    assume 1 == 1;
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} __const_udelay(4295000);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb1187;

  $bb1179:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb35;

  $bb1177:
    assume {:verifier.code 0} true;
    assume $i404 == 1;
    goto $bb35;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb1170:
    assume 1 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} __const_udelay(4295000);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto $bb1175;

  $bb1167:
    assume {:verifier.code 0} true;
    assume $i402 == 1;
    goto $bb35;

  $bb1165:
    assume {:verifier.code 0} true;
    assume $i400 == 1;
    goto $bb35;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb1158:
    assume 1 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} __const_udelay(4295000);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb1163;

  $bb1155:
    assume {:verifier.code 0} true;
    assume $i398 == 1;
    goto $bb35;

  $bb1153:
    assume {:verifier.code 0} true;
    assume $i396 == 1;
    goto $bb35;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb1146:
    assume 1 == 1;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} __const_udelay(4295000);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb1151;

  $bb1143:
    assume {:verifier.code 0} true;
    assume $i394 == 1;
    goto $bb35;

  $bb1141:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb35;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb1134:
    assume 1 == 1;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} __const_udelay(4295000);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    goto $bb1139;

  $bb1131:
    assume {:verifier.code 0} true;
    assume $i390 == 1;
    goto $bb35;

  $bb1129:
    assume {:verifier.code 0} true;
    assume $i388 == 1;
    goto $bb35;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb1122:
    assume 1 == 1;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} __const_udelay(4295000);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    goto $bb1127;

  $bb1119:
    assume {:verifier.code 0} true;
    assume $i386 == 1;
    goto $bb35;

  $bb1117:
    assume {:verifier.code 0} true;
    assume $i384 == 1;
    goto $bb35;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb1110:
    assume 1 == 1;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} __const_udelay(4295000);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto $bb1115;

  $bb1107:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb35;

  $bb1105:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb35;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb1098:
    assume 1 == 1;
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} __const_udelay(4295000);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    goto $bb1103;

  $bb1095:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb35;

  $bb1093:
    assume {:verifier.code 0} true;
    assume $i376 == 1;
    goto $bb35;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb1086:
    assume 1 == 1;
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} __const_udelay(4295000);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    goto $bb1091;

  $bb1083:
    assume {:verifier.code 0} true;
    assume $i374 == 1;
    goto $bb35;

  $bb1081:
    assume {:verifier.code 0} true;
    assume $i372 == 1;
    goto $bb35;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1074:
    assume 1 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} __const_udelay(4295000);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    goto $bb1079;

  $bb1071:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb35;

  $bb1069:
    assume {:verifier.code 0} true;
    assume $i368 == 1;
    goto $bb35;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb1062:
    assume 1 == 1;
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} __const_udelay(4295000);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    goto $bb1067;

  $bb1059:
    assume {:verifier.code 0} true;
    assume $i366 == 1;
    goto $bb35;

  $bb1057:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb35;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb1050:
    assume 1 == 1;
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} __const_udelay(4295000);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    goto $bb1055;

  $bb1047:
    assume {:verifier.code 0} true;
    assume $i362 == 1;
    goto $bb35;

  $bb1045:
    assume {:verifier.code 0} true;
    assume $i360 == 1;
    goto $bb35;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb1038:
    assume 1 == 1;
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} __const_udelay(4295000);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1035:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb35;

  $bb1033:
    assume {:verifier.code 0} true;
    assume $i356 == 1;
    goto $bb35;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb1026:
    assume 1 == 1;
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} __const_udelay(4295000);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    goto $bb1031;

  $bb1023:
    assume {:verifier.code 0} true;
    assume $i354 == 1;
    goto $bb35;

  $bb1021:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb35;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb1014:
    assume 1 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} __const_udelay(4295000);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    goto $bb1019;

  $bb1011:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb35;

  $bb1009:
    assume {:verifier.code 0} true;
    assume $i348 == 1;
    goto $bb35;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb1002:
    assume 1 == 1;
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} __const_udelay(4295000);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    goto $bb1007;

  $bb999:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb35;

  $bb997:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb35;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb990:
    assume 1 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __const_udelay(4295000);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    goto $bb995;

  $bb987:
    assume {:verifier.code 0} true;
    assume $i342 == 1;
    goto $bb35;

  $bb985:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb35;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb978:
    assume 1 == 1;
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __const_udelay(4295000);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    goto $bb983;

  $bb975:
    assume {:verifier.code 0} true;
    assume $i338 == 1;
    goto $bb35;

  $bb973:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb35;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb966:
    assume 1 == 1;
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __const_udelay(4295000);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    goto $bb971;

  $bb963:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb35;

  $bb961:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb35;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb954:
    assume 1 == 1;
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} __const_udelay(4295000);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb959;

  $bb951:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb35;

  $bb949:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb35;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb942:
    assume 1 == 1;
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} __const_udelay(4295000);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb939:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb35;

  $bb937:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb35;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb930:
    assume 1 == 1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} __const_udelay(4295000);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    goto $bb935;

  $bb927:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb35;

  $bb925:
    assume {:verifier.code 0} true;
    assume $i320 == 1;
    goto $bb35;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb918:
    assume 1 == 1;
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} __const_udelay(4295000);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    goto $bb923;

  $bb915:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb35;

  $bb913:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb35;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb906:
    assume 1 == 1;
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} __const_udelay(4295000);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb903:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb35;

  $bb901:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb35;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb894:
    assume 1 == 1;
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} __const_udelay(4295000);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb899;

  $bb891:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb35;

  $bb889:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb35;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb882:
    assume 1 == 1;
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} __const_udelay(4295000);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    goto $bb887;

  $bb879:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb35;

  $bb877:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb35;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb870:
    assume 1 == 1;
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} __const_udelay(4295000);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    goto $bb875;

  $bb867:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb35;

  $bb865:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb35;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb858:
    assume 1 == 1;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __const_udelay(4295000);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    goto $bb863;

  $bb855:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb35;

  $bb853:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb35;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb846:
    assume 1 == 1;
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} __const_udelay(4295000);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb843:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb35;

  $bb841:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb35;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb834:
    assume 1 == 1;
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} __const_udelay(4295000);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb831:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb35;

  $bb829:
    assume {:verifier.code 0} true;
    assume $i288 == 1;
    goto $bb35;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb822:
    assume 1 == 1;
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} __const_udelay(4295000);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb819:
    assume {:verifier.code 0} true;
    assume $i286 == 1;
    goto $bb35;

  $bb817:
    assume {:verifier.code 0} true;
    assume $i284 == 1;
    goto $bb35;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb810:
    assume 1 == 1;
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __const_udelay(4295000);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb807:
    assume {:verifier.code 0} true;
    assume $i282 == 1;
    goto $bb35;

  $bb805:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb35;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb798:
    assume 1 == 1;
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __const_udelay(4295000);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb795:
    assume {:verifier.code 0} true;
    assume $i278 == 1;
    goto $bb35;

  $bb793:
    assume {:verifier.code 0} true;
    assume $i276 == 1;
    goto $bb35;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb786:
    assume 1 == 1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __const_udelay(4295000);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb783:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb35;

  $bb781:
    assume {:verifier.code 0} true;
    assume $i272 == 1;
    goto $bb35;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb774:
    assume 1 == 1;
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __const_udelay(4295000);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb771:
    assume {:verifier.code 0} true;
    assume $i270 == 1;
    goto $bb35;

  $bb769:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb35;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb762:
    assume 1 == 1;
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} __const_udelay(4295000);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb35;

  $bb757:
    assume {:verifier.code 0} true;
    assume $i264 == 1;
    goto $bb35;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb750:
    assume 1 == 1;
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} __const_udelay(4295000);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb747:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb35;

  $bb745:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb35;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb738:
    assume 1 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __const_udelay(4295000);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb735:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb35;

  $bb733:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb35;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb726:
    assume 1 == 1;
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} __const_udelay(4295000);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb723:
    assume {:verifier.code 0} true;
    assume $i254 == 1;
    goto $bb35;

  $bb721:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb35;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb714:
    assume 1 == 1;
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} __const_udelay(4295000);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb711:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb35;

  $bb709:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb35;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb702:
    assume 1 == 1;
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} __const_udelay(4295000);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb699:
    assume {:verifier.code 0} true;
    assume $i246 == 1;
    goto $bb35;

  $bb697:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb35;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb690:
    assume 1 == 1;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} __const_udelay(4295000);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb687:
    assume {:verifier.code 0} true;
    assume $i242 == 1;
    goto $bb35;

  $bb685:
    assume {:verifier.code 0} true;
    assume $i240 == 1;
    goto $bb35;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb678:
    assume 1 == 1;
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __const_udelay(4295000);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb675:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb35;

  $bb673:
    assume {:verifier.code 0} true;
    assume $i236 == 1;
    goto $bb35;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb666:
    assume 1 == 1;
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} __const_udelay(4295000);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb663:
    assume {:verifier.code 0} true;
    assume $i234 == 1;
    goto $bb35;

  $bb661:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb35;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb654:
    assume 1 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __const_udelay(4295000);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb35;

  $bb649:
    assume {:verifier.code 0} true;
    assume $i228 == 1;
    goto $bb35;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb642:
    assume 1 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} __const_udelay(4295000);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb639:
    assume {:verifier.code 0} true;
    assume $i226 == 1;
    goto $bb35;

  $bb637:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb35;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb630:
    assume 1 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} __const_udelay(4295000);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb627:
    assume {:verifier.code 0} true;
    assume $i222 == 1;
    goto $bb35;

  $bb625:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb35;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb618:
    assume 1 == 1;
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __const_udelay(4295000);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb35;

  $bb613:
    assume {:verifier.code 0} true;
    assume $i216 == 1;
    goto $bb35;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb606:
    assume 1 == 1;
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} __const_udelay(4295000);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb603:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb35;

  $bb601:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb35;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb594:
    assume 1 == 1;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} __const_udelay(4295000);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb591:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb35;

  $bb589:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb35;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb582:
    assume 1 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __const_udelay(4295000);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb579:
    assume {:verifier.code 0} true;
    assume $i206 == 1;
    goto $bb35;

  $bb577:
    assume {:verifier.code 0} true;
    assume $i204 == 1;
    goto $bb35;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb570:
    assume 1 == 1;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} __const_udelay(4295000);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb567:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb35;

  $bb565:
    assume {:verifier.code 0} true;
    assume $i200 == 1;
    goto $bb35;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb558:
    assume 1 == 1;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} __const_udelay(4295000);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb555:
    assume {:verifier.code 0} true;
    assume $i198 == 1;
    goto $bb35;

  $bb553:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb35;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb546:
    assume 1 == 1;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} __const_udelay(4295000);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i194 == 1;
    goto $bb35;

  $bb541:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb35;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb534:
    assume 1 == 1;
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} __const_udelay(4295000);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb531:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb35;

  $bb529:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb35;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb522:
    assume 1 == 1;
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} __const_udelay(4295000);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i186 == 1;
    goto $bb35;

  $bb517:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb35;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb510:
    assume 1 == 1;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} __const_udelay(4295000);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb35;

  $bb505:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb35;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb498:
    assume 1 == 1;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} __const_udelay(4295000);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb35;

  $bb493:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb35;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb486:
    assume 1 == 1;
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __const_udelay(4295000);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb483:
    assume {:verifier.code 0} true;
    assume $i174 == 1;
    goto $bb35;

  $bb481:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb35;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb474:
    assume 1 == 1;
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __const_udelay(4295000);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb35;

  $bb469:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb35;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb462:
    assume 1 == 1;
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} __const_udelay(4295000);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb35;

  $bb457:
    assume {:verifier.code 0} true;
    assume $i164 == 1;
    goto $bb35;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb450:
    assume 1 == 1;
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} __const_udelay(4295000);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb447:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb35;

  $bb445:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb35;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb438:
    assume 1 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __const_udelay(4295000);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb35;

  $bb433:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb35;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb426:
    assume 1 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} __const_udelay(4295000);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb35;

  $bb421:
    assume {:verifier.code 0} true;
    assume $i152 == 1;
    goto $bb35;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb414:
    assume 1 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} __const_udelay(4295000);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb411:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb35;

  $bb409:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb35;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb402:
    assume 1 == 1;
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} __const_udelay(4295000);
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb35;

  $bb397:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb35;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb390:
    assume 1 == 1;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} __const_udelay(4295000);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb35;

  $bb385:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb35;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb378:
    assume 1 == 1;
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __const_udelay(4295000);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb35;

  $bb373:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb35;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb366:
    assume 1 == 1;
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} __const_udelay(4295000);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb35;

  $bb361:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb35;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb354:
    assume 1 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} __const_udelay(4295000);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb35;

  $bb349:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb35;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb342:
    assume 1 == 1;
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} __const_udelay(4295000);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb35;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb35;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb330:
    assume 1 == 1;
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __const_udelay(4295000);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i122 == 1;
    goto $bb35;

  $bb325:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb35;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb318:
    assume 1 == 1;
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __const_udelay(4295000);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb35;

  $bb313:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb35;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb306:
    assume 1 == 1;
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} __const_udelay(4295000);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb35;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb35;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb294:
    assume 1 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i110 == 1;
    goto $bb35;

  $bb289:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb35;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb282:
    assume 1 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb35;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb35;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb270:
    assume 1 == 1;
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb35;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb35;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb258:
    assume 1 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __const_udelay(4295000);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb35;

  $bb253:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb35;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb246:
    assume 1 == 1;
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(4295000);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb35;

  $bb241:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb35;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb234:
    assume 1 == 1;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __const_udelay(4295000);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb35;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb35;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb222:
    assume 1 == 1;
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb35;

  $bb217:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb35;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb210:
    assume 1 == 1;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(4295000);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb35;

  $bb205:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb35;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb198:
    assume 1 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} __const_udelay(4295000);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb35;

  $bb193:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb35;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb186:
    assume 1 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} __const_udelay(4295000);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb35;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb35;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb174:
    assume 1 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __const_udelay(4295000);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb35;

  $bb169:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb35;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb162:
    assume 1 == 1;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} __const_udelay(4295000);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb35;

  $bb157:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb35;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb150:
    assume 1 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} __const_udelay(4295000);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb35;

  $bb145:
    assume {:verifier.code 0} true;
    assume $i60 == 1;
    goto $bb35;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb138:
    assume 1 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} __const_udelay(4295000);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb35;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb35;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb126:
    assume 1 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __const_udelay(4295000);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb35;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb35;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb114:
    assume 1 == 1;
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} __const_udelay(4295000);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb35;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb35;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb102:
    assume 1 == 1;
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} __const_udelay(4295000);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb35;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb35;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb90:
    assume 1 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} __const_udelay(4295000);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb35;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb35;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb78:
    assume 1 == 1;
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} __const_udelay(4295000);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb35;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb35;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb66:
    assume 1 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} __const_udelay(4295000);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb35;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb35;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb54:
    assume 1 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} __const_udelay(4295000);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb35;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb35;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb41:
    assume 1 == 1;
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} __const_udelay(4295000);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb35;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i18 == 1;
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i16 == 1;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb10;

  $bb10:
    call $i11, $i12, $i13, $i14, $i10 := vx_toggle_pipe_loop_$bb10($p0, $p1, $i11, $i12, $i13, $i14, $i10);
    goto $bb10_last;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i11 := vx_pipe_can_start($p0, $p1);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb16, $bb17;

  $bb17:
    assume !(1 == 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, 1);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 249);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i13;
    goto $bb22_dummy;

  $bb16:
    assume 1 == 1;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(4295000);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 77);
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb22_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;
}



const vx_stop_stream: ref;

axiom vx_stop_stream == $sub.ref(0, 376863);

procedure vx_stop_stream($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_stop_stream($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} vx_init_rmh($p2, 21);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} vx_set_stream_cmd_params($p2, $i6, $i8);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i9 := vx_send_msg($p0, $p2);
    goto SeqInstr_937, SeqInstr_938;

  SeqInstr_938:
    assume assertsPassed;
    goto SeqInstr_939;

  SeqInstr_939:
    call {:si_unique_call 1180} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_937:
    assume !assertsPassed;
    return;
}



const vx_stop_pipe: ref;

axiom vx_stop_pipe == $sub.ref(0, 377895);

procedure vx_stop_pipe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_stop_pipe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vx_init_rmh($p2, 11);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} vx_set_pipe_cmd_params($p2, $i6, $i8, 0);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i9 := vx_send_msg($p0, $p2);
    goto SeqInstr_940, SeqInstr_941;

  SeqInstr_941:
    assume assertsPassed;
    goto SeqInstr_942;

  SeqInstr_942:
    call {:si_unique_call 1185} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_940:
    assume !assertsPassed;
    return;
}



const vx_get_pipe_state: ref;

axiom vx_get_pipe_state == $sub.ref(0, 378927);

procedure vx_get_pipe_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.60, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_get_pipe_state($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $p3 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} vx_init_rmh($p3, 12);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i6 := $and.i8($i5, 1);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} vx_set_pipe_cmd_params($p3, $i7, $i9, 0);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i10 := vx_send_msg($p0, $p3);
    goto SeqInstr_943, SeqInstr_944;

  SeqInstr_944:
    assume assertsPassed;
    goto SeqInstr_945;

  SeqInstr_945:
    call {:si_unique_call 1190} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32(1, $i16);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i14, $i17);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p2, $i20);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_943:
    assume !assertsPassed;
    return;
}



const vx_pipe_can_start: ref;

axiom vx_pipe_can_start == $sub.ref(0, 379959);

procedure vx_pipe_can_start($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_pipe_can_start($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} vx_init_rmh($p2, 14);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} vx_set_pipe_cmd_params($p2, $i6, $i8, 0);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 1);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i12);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i15 := vx_send_msg($p0, $p2);
    goto SeqInstr_946, SeqInstr_947;

  SeqInstr_947:
    assume assertsPassed;
    goto SeqInstr_948;

  SeqInstr_948:
    call {:si_unique_call 1195} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i15;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(0, 4));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $i15;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb5;

  SeqInstr_946:
    assume !assertsPassed;
    return;
}



const vx_conf_pipe: ref;

axiom vx_conf_pipe == $sub.ref(0, 380991);

procedure vx_conf_pipe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_conf_pipe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} vx_init_rmh($p2, 8);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p1);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i16 := $shl.i32(1, $i15);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i19 := vx_send_msg($p0, $p2);
    goto SeqInstr_949, SeqInstr_950;

  SeqInstr_950:
    assume assertsPassed;
    goto SeqInstr_951;

  SeqInstr_951:
    call {:si_unique_call 1199} {:cexpr "tmp"} boogie_si_record_i32($i19);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  SeqInstr_949:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 2048);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_send_irqa: ref;

axiom vx_send_irqa == $sub.ref(0, 382023);

procedure vx_send_irqa($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_send_irqa($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p1 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} vx_init_rmh($p1, 3);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i2 := vx_send_msg($p0, $p1);
    goto SeqInstr_952, SeqInstr_953;

  SeqInstr_953:
    assume assertsPassed;
    goto SeqInstr_954;

  SeqInstr_954:
    call {:si_unique_call 1203} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_952:
    assume !assertsPassed;
    return;
}



const vx_set_differed_time: ref;

axiom vx_set_differed_time == $sub.ref(0, 383055);

procedure vx_set_differed_time($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vx_set_differed_time($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $p53: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i11 := $or.i32($i10, 49152);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i11);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p16, $mul.ref(1, 4));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} vx_set_pcx_time($p0, $p14, $p17);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 2);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 8);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 16);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i50, 2);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $i52);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 8388608);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i45);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 1048576);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i35);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4194304);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(1, 4));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i25);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const vx_set_pcx_time: ref;

axiom vx_set_pcx_time == $sub.ref(0, 384087);

procedure vx_set_pcx_time($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vx_set_pcx_time($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p1);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i64($i3, 24);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1048575);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i6);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16777215);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    return;
}



const vx_set_clock: ref;

axiom vx_set_clock == $sub.ref(0, 385119);

procedure vx_set_clock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.15, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_set_clock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1205} {:cexpr "vx_set_clock:arg:freq"} boogie_si_record_i32($i1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32768);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} vslice_dummy_var_25 := vx_sync_audio_source($p0);
    goto SeqInstr_955, SeqInstr_956;

  SeqInstr_956:
    assume assertsPassed;
    goto SeqInstr_957;

  SeqInstr_957:
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(408, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i9 == 1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(408, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(408, 1));
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i21 == 1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(408, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, $i1);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i1);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} vslice_dummy_var_27 := vx_modify_board_clock($p0, 1);
    goto SeqInstr_970, SeqInstr_971;

  SeqInstr_971:
    assume assertsPassed;
    goto SeqInstr_972;

  SeqInstr_972:
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_970:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i39 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb24:
    assume $i24 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(400, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(412, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(416, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $i1);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vx_set_internal_clock($p0, $i1);
    goto SeqInstr_964, SeqInstr_965;

  SeqInstr_965:
    assume assertsPassed;
    goto SeqInstr_966;

  SeqInstr_966:
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i31, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i35 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_26 := vx_modify_board_inputs($p0);
    goto SeqInstr_967, SeqInstr_968;

  SeqInstr_968:
    assume assertsPassed;
    goto SeqInstr_969;

  SeqInstr_969:
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_967:
    assume !assertsPassed;
    return;

  SeqInstr_964:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i34 == 1;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} vx_change_clock_source($p0, 0);
    goto SeqInstr_961, SeqInstr_962;

  SeqInstr_962:
    assume assertsPassed;
    goto SeqInstr_963;

  SeqInstr_963:
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i31 := 1;
    goto $bb31;

  SeqInstr_961:
    assume !assertsPassed;
    return;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb22;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(400, 1));
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(412, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 1);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vx_change_clock_source($p0, 1);
    goto SeqInstr_958, SeqInstr_959;

  SeqInstr_959:
    assume assertsPassed;
    goto SeqInstr_960;

  SeqInstr_960:
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} __const_udelay(4295000);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __const_udelay(4295000);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} __const_udelay(4295000);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __const_udelay(4295000);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __const_udelay(4295000);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_958:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb6;

  SeqInstr_955:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vx_set_format: ref;

axiom vx_set_format == $sub.ref(0, 386151);

procedure vx_set_format($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_set_format($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i19: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i31: i32;
  var $i43: i32;
  var $i42: i32;
  var vslice_dummy_var_28: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(104, 1));
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19922944);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(92, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i10 := snd_pcm_format_little_endian($i9);
    call {:si_unique_call 1220} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i7;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(100, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 11026);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i17 := $ule.i32($i16, 20973);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(100, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i22 := $ule.i32($i21, 11025);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i24;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(92, 1));
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} $i27 := snd_pcm_format_physical_width($i26);
    call {:si_unique_call 1224} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 16);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i27, 24);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32(1, 0);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 1229} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32(1, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_28 := ldv__builtin_expect($i40, 0);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32(0, 22);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} warn_slowpath_fmt.ref.i32.ref(.str.62, 185, .str.116);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i19, 16384);
    call {:si_unique_call 1227} {:cexpr "header"} boogie_si_record_i32($i32);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i31 := $i32;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i43 := vx_set_stream_format($p0, $p1, $i31);
    goto SeqInstr_973, SeqInstr_974;

  SeqInstr_974:
    assume assertsPassed;
    goto SeqInstr_975;

  SeqInstr_975:
    call {:si_unique_call 1231} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i42 := $i43;
    goto $bb26;

  SeqInstr_973:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i19, 8192);
    call {:si_unique_call 1226} {:cexpr "header"} boogie_si_record_i32($i30);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb22;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i13, 512);
    call {:si_unique_call 1225} {:cexpr "header"} boogie_si_record_i32($i23);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i13, 256);
    call {:si_unique_call 1222} {:cexpr "header"} boogie_si_record_i32($i18);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb9;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i7, 32768);
    call {:si_unique_call 1221} {:cexpr "header"} boogie_si_record_i32($i12);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($sub.i32(0, 19922944), 192);
    call {:si_unique_call 1218} {:cexpr "header"} boogie_si_record_i32($i6);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const snd_pcm_format_little_endian: ref;

axiom snd_pcm_format_little_endian == $sub.ref(0, 387183);

procedure snd_pcm_format_little_endian($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_format_little_endian($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1234} {:cexpr "snd_pcm_format_little_endian:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1235} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1236} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const snd_pcm_format_physical_width: ref;

axiom snd_pcm_format_physical_width == $sub.ref(0, 388215);

procedure snd_pcm_format_physical_width($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_format_physical_width($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1237} {:cexpr "snd_pcm_format_physical_width:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1238} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1239} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const warn_slowpath_fmt: ref;

axiom warn_slowpath_fmt == $sub.ref(0, 389247);

procedure warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;



implementation warn_slowpath_fmt.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} {:cexpr "warn_slowpath_fmt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    return;
}



const vx_set_stream_format: ref;

axiom vx_set_stream_format == $sub.ref(0, 390279);

procedure vx_set_stream_format($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_set_stream_format($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $i42: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $p3 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 1242} {:cexpr "vx_set_stream_format:arg:data"} boogie_si_record_i32($i2);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(4, 1));
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i9 := (if $i8 == 1 then 23 else 22);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} vx_init_rmh($p3, $i9);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 5);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i12, $i15);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_29 := vx_set_differed_time($p0, $p3, $p1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i2, 8);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref($i24, 4));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i20);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i2, 255);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32($i27, 16);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref($i33, 4));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i28);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 2);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i42 := vx_send_msg($p0, $p3);
    goto SeqInstr_976, SeqInstr_977;

  SeqInstr_977:
    assume assertsPassed;
    goto SeqInstr_978;

  SeqInstr_978:
    call {:si_unique_call 1246} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  SeqInstr_976:
    assume !assertsPassed;
    return;
}



const vx_sync_audio_source: ref;

axiom vx_sync_audio_source == $sub.ref(0, 391311);

procedure vx_sync_audio_source($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, assertsPassed;



implementation vx_sync_audio_source($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(404, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(400, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, $i4);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(212, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(404, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vx_change_audio_source($p0, $i11);
    goto SeqInstr_979, SeqInstr_980;

  SeqInstr_980:
    assume assertsPassed;
    goto SeqInstr_981;

  SeqInstr_981:
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(404, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(400, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_979:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const vx_change_clock_source: ref;

axiom vx_change_clock_source == $sub.ref(0, 392343);

procedure vx_change_clock_source($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.15, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation vx_change_clock_source($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} {:cexpr "vx_change_clock_source:arg:source"} boogie_si_record_i32($i1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vx_toggle_dac_mute($p0, 1);
    goto SeqInstr_982, SeqInstr_983;

  SeqInstr_983:
    assume assertsPassed;
    goto SeqInstr_984;

  SeqInstr_984:
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} ldv_mutex_lock_93___0($p2);
    goto SeqInstr_985, SeqInstr_986;

  SeqInstr_986:
    assume assertsPassed;
    goto SeqInstr_987;

  SeqInstr_987:
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    call {:si_unique_call 1251} devirtbounce.7($p6, $p0, $i1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(412, 1));
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i1);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} ldv_mutex_unlock_94___0($p8);
    goto SeqInstr_988, SeqInstr_989;

  SeqInstr_989:
    assume assertsPassed;
    goto SeqInstr_990;

  SeqInstr_990:
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vx_toggle_dac_mute($p0, 0);
    goto SeqInstr_991, SeqInstr_992;

  SeqInstr_992:
    assume assertsPassed;
    goto SeqInstr_993;

  SeqInstr_993:
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_991:
    assume !assertsPassed;
    return;

  SeqInstr_988:
    assume !assertsPassed;
    return;

  SeqInstr_985:
    assume !assertsPassed;
    return;

  SeqInstr_982:
    assume !assertsPassed;
    return;
}



const vx_modify_board_inputs: ref;

axiom vx_modify_board_inputs == $sub.ref(0, 393375);

procedure vx_modify_board_inputs($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_modify_board_inputs($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p1 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} vx_init_rmh($p1, 44);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i5);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i8 := vx_send_msg($p0, $p1);
    goto SeqInstr_994, SeqInstr_995;

  SeqInstr_995:
    assume assertsPassed;
    goto SeqInstr_996;

  SeqInstr_996:
    call {:si_unique_call 1257} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_994:
    assume !assertsPassed;
    return;
}



const vx_modify_board_clock: ref;

axiom vx_modify_board_clock == $sub.ref(0, 394407);

procedure vx_modify_board_clock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_modify_board_clock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p9: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 1259} {:cexpr "vx_modify_board_clock:arg:sync"} boogie_si_record_i32($i1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vx_init_rmh($p2, 38);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i1, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i10 := vx_send_msg($p0, $p2);
    goto SeqInstr_997, SeqInstr_998;

  SeqInstr_998:
    assume assertsPassed;
    goto SeqInstr_999;

  SeqInstr_999:
    call {:si_unique_call 1262} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_997:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 4);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i7);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_93___0: ref;

axiom ldv_mutex_lock_93___0 == $sub.ref(0, 395439);

procedure ldv_mutex_lock_93___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_93___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_1000, SeqInstr_1001;

  SeqInstr_1001:
    assume assertsPassed;
    goto SeqInstr_1002;

  SeqInstr_1002:
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1000:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_94___0: ref;

axiom ldv_mutex_unlock_94___0 == $sub.ref(0, 396471);

procedure ldv_mutex_unlock_94___0($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_94___0($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_1003, SeqInstr_1004;

  SeqInstr_1004:
    assume assertsPassed;
    goto SeqInstr_1005;

  SeqInstr_1005:
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1003:
    assume !assertsPassed;
    return;
}



const vx_change_audio_source: ref;

axiom vx_change_audio_source == $sub.ref(0, 397503);

procedure vx_change_audio_source($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation vx_change_audio_source($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} {:cexpr "vx_change_audio_source:arg:src"} boogie_si_record_i32($i1);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 32768);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} ldv_mutex_lock_91($p6);
    goto SeqInstr_1006, SeqInstr_1007;

  SeqInstr_1007:
    assume assertsPassed;
    goto SeqInstr_1008;

  SeqInstr_1008:
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 136)), $mul.ref(72, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 1267} devirtbounce.7($p10, $p0, $i1);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(48, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} ldv_mutex_unlock_92($p11);
    goto SeqInstr_1009, SeqInstr_1010;

  SeqInstr_1010:
    assume assertsPassed;
    goto SeqInstr_1011;

  SeqInstr_1011:
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1009:
    assume !assertsPassed;
    return;

  SeqInstr_1006:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_mutex_lock_91: ref;

axiom ldv_mutex_lock_91 == $sub.ref(0, 398535);

procedure ldv_mutex_lock_91($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_lock_91($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} ldv_linux_kernel_locking_mutex_mutex_lock_lock_of_vx_core($p0);
    goto SeqInstr_1012, SeqInstr_1013;

  SeqInstr_1013:
    assume assertsPassed;
    goto SeqInstr_1014;

  SeqInstr_1014:
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1012:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_92: ref;

axiom ldv_mutex_unlock_92 == $sub.ref(0, 399567);

procedure ldv_mutex_unlock_92($p0: ref);
  free requires assertsPassed;
  modifies $M.14, assertsPassed;



implementation ldv_mutex_unlock_92($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} ldv_linux_kernel_locking_mutex_mutex_unlock_lock_of_vx_core($p0);
    goto SeqInstr_1015, SeqInstr_1016;

  SeqInstr_1016:
    assume assertsPassed;
    goto SeqInstr_1017;

  SeqInstr_1017:
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1015:
    assume !assertsPassed;
    return;
}



const snd_pcm_lib_free_vmalloc_buffer: ref;

axiom snd_pcm_lib_free_vmalloc_buffer == $sub.ref(0, 400599);

procedure snd_pcm_lib_free_vmalloc_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_free_vmalloc_buffer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1271} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1272} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const params_buffer_bytes: ref;

axiom params_buffer_bytes == $sub.ref(0, 401631);

procedure params_buffer_bytes($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation params_buffer_bytes($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p1 := hw_param_interval_c($p0, 18);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const snd_pcm_lib_alloc_vmalloc_32_buffer: ref;

axiom snd_pcm_lib_alloc_vmalloc_32_buffer == $sub.ref(0, 402663);

procedure snd_pcm_lib_alloc_vmalloc_32_buffer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_lib_alloc_vmalloc_32_buffer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} {:cexpr "snd_pcm_lib_alloc_vmalloc_32_buffer:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i2 := _snd_pcm_lib_alloc_vmalloc_buffer($p0, $i1, 32980);
    call {:si_unique_call 1276} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const _snd_pcm_lib_alloc_vmalloc_buffer: ref;

axiom _snd_pcm_lib_alloc_vmalloc_buffer == $sub.ref(0, 403695);

procedure _snd_pcm_lib_alloc_vmalloc_buffer($p0: ref, $i1: i64, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _snd_pcm_lib_alloc_vmalloc_buffer($p0: ref, $i1: i64, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1277} {:cexpr "_snd_pcm_lib_alloc_vmalloc_buffer:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1278} {:cexpr "_snd_pcm_lib_alloc_vmalloc_buffer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1279} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1280} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const hw_param_interval_c: ref;

axiom hw_param_interval_c == $sub.ref(0, 404727);

procedure hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation hw_param_interval_c($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} {:cexpr "hw_param_interval_c:arg:var"} boogie_si_record_i32($i1);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 608)), $mul.ref(260, 1));
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i1);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 8));
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p3, $mul.ref($i5, 12));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vx_free_pipe: ref;

axiom vx_free_pipe == $sub.ref(0, 405759);

procedure vx_free_pipe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_free_pipe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i8;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p10: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p2 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} vx_init_rmh($p2, 7);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i5 := $and.i8($i4, 1);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vx_set_pipe_cmd_params($p2, $i6, $i8, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_30 := vx_send_msg($p0, $p2);
    goto SeqInstr_1018, SeqInstr_1019;

  SeqInstr_1019:
    assume assertsPassed;
    goto SeqInstr_1020;

  SeqInstr_1020:
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} kfree($p10);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1018:
    assume !assertsPassed;
    return;
}



const vx_alloc_pipe: ref;

axiom vx_alloc_pipe == $sub.ref(0, 406791);

procedure vx_alloc_pipe($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_alloc_pipe($p0: ref, $i1: i32, $i2: i32, $i3: i32, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i8;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var $i32: i8;
  var $i33: i8;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $i39: i8;
  var $i40: i8;
  var $i41: i8;
  var $i42: i8;
  var $i43: i8;
  var $i21: i32;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p5 := $alloc($mul.ref(136, $zext.i32.i64(1)));
    call {:si_unique_call 1288} {:cexpr "vx_alloc_pipe:arg:capture"} boogie_si_record_i32($i1);
    call {:si_unique_call 1289} {:cexpr "vx_alloc_pipe:arg:audioid"} boogie_si_record_i32($i2);
    call {:si_unique_call 1290} {:cexpr "vx_alloc_pipe:arg:num_audio"} boogie_si_record_i32($i3);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p4, $0.ref);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} vx_init_rmh($p5, 6);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} vx_set_pipe_cmd_params($p5, $i1, $i2, $i3);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(428, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 2);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1293} {:cexpr "data_mode"} boogie_si_record_i32($i10);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i19 := vx_send_msg($p0, $p5);
    goto SeqInstr_1021, SeqInstr_1022;

  SeqInstr_1022:
    assume assertsPassed;
    goto SeqInstr_1023;

  SeqInstr_1023:
    call {:si_unique_call 1295} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p22 := kzalloc(88, 208);
    goto SeqInstr_1024, SeqInstr_1025;

  SeqInstr_1025:
    assume assertsPassed;
    goto SeqInstr_1026;

  SeqInstr_1026:
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i2);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i28, 1);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i32 := $and.i8($i30, $sub.i8(0, 2));
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i33 := $or.i8($i32, $i31);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i33);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(8, 1));
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i3);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(12, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(16, 1));
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p36, 0);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i10);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(4, 1));
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $i40 := $and.i8($i37, 1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i41 := $shl.i8($i40, 1);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i42 := $and.i8($i39, $sub.i8(0, 3));
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i43 := $or.i8($i42, $i41);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i43);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p4, $p22);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vx_init_rmh($p5, 7);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} vx_set_pipe_cmd_params($p5, $i1, $i2, 0);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_31 := vx_send_msg($p0, $p5);
    goto SeqInstr_1027, SeqInstr_1028;

  SeqInstr_1028:
    assume assertsPassed;
    goto SeqInstr_1029;

  SeqInstr_1029:
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_1027:
    assume !assertsPassed;
    return;

  SeqInstr_1024:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb9;

  SeqInstr_1021:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i10, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 16);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(0, 4));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i16);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const snd_pcm_hw_constraint_step: ref;

axiom snd_pcm_hw_constraint_step == $sub.ref(0, 407823);

procedure snd_pcm_hw_constraint_step($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation snd_pcm_hw_constraint_step($p0: ref, $i1: i32, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1300} {:cexpr "snd_pcm_hw_constraint_step:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1301} {:cexpr "snd_pcm_hw_constraint_step:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1302} {:cexpr "snd_pcm_hw_constraint_step:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1303} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1304} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vx_pcm_capture_open: ref;

axiom vx_pcm_capture_open == $sub.ref(0, 408855);

procedure vx_pcm_capture_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.14, $M.1, $M.52, $CurrAddr, assertsPassed;



implementation vx_pcm_capture_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $i71: i32;
  var $i72: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i64;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i64;
  var $p101: ref;
  var $p102: ref;
  var $p104: ref;
  var $i12: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p2, $0.ref);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(208, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 32768);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(0, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3792)), $mul.ref(24, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 2);
    call {:si_unique_call 1307} {:cexpr "audio"} boogie_si_record_i32($i17);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(372, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i20 := $uge.i32($i17, $i19);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 1308} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i21);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1310} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i21, 0);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1313} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i31} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i32 := vx_alloc_pipe($p7, 1, $i17, 2, $p1);
    goto SeqInstr_1030, SeqInstr_1031;

  SeqInstr_1031:
    assume assertsPassed;
    goto SeqInstr_1032;

  SeqInstr_1032:
    call {:si_unique_call 1315} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.53, $p1);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 88)), $mul.ref(24, 1));
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p0);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.53, $p1);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(392, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i39 := $zext.i32.i64($i17);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p38, $mul.ref($i39, 8));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p36);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i17);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(516, 1)), $mul.ref($i41, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.53, $p2);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.53, $p1);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p91);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 1168)), $mul.ref(480, 1));
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 1320} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p95, vx_pcm_capture_hw, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i99 := $sext.i32.i64($i98);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 1168)), $mul.ref(480, 1)), $mul.ref(48, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p101, $i99);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.53, $p1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p104, $p102);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_34 := snd_pcm_hw_constraint_step($p4, 0, 18, 4);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_35 := snd_pcm_hw_constraint_step($p4, 0, 14, 4);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i17);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 8));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $M.53 := $store.ref($M.53, $p2, $p51);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.53, $p2);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.53, $p2);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.53, $p2);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i65);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i17);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(500, 1)), $mul.ref($i68, 4));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i17);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(516, 1)), $mul.ref($i72, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_32 := vx_set_monitor_level($p7, $i17, $i71, $i76);
    goto SeqInstr_1036, SeqInstr_1037;

  SeqInstr_1037:
    assume assertsPassed;
    goto SeqInstr_1038;

  SeqInstr_1038:
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i78 := $add.i32($i17, 1);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i17, 1);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(500, 1)), $mul.ref($i80, 4));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i17, 1);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i85 := $zext.i32.i64($i84);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(516, 1)), $mul.ref($i85, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_33 := vx_set_monitor_level($p7, $i78, $i83, $i89);
    goto SeqInstr_1039, SeqInstr_1040;

  SeqInstr_1040:
    assume assertsPassed;
    goto SeqInstr_1041;

  SeqInstr_1041:
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_1039:
    assume !assertsPassed;
    return;

  SeqInstr_1036:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} $i55 := vx_alloc_pipe($p7, 0, $i17, 2, $p2);
    goto SeqInstr_1033, SeqInstr_1034;

  SeqInstr_1034:
    assume assertsPassed;
    goto SeqInstr_1035;

  SeqInstr_1035:
    call {:si_unique_call 1317} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i55, 0);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.53, $p2);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i17);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p59, $mul.ref($i60, 8));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p61, $p57);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i12 := $i55;
    goto $bb3;

  SeqInstr_1033:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i12 := $i32;
    goto $bb3;

  SeqInstr_1030:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} warn_slowpath_null(.str.62, 930);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;
}



const vx_pcm_capture_close: ref;

axiom vx_pcm_capture_close == $sub.ref(0, 409887);

procedure vx_pcm_capture_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_pcm_capture_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $i10: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(16, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 712)), $mul.ref(392, 1));
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p17, $mul.ref($i20, 8));
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $0.ref);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_37 := vx_free_pipe($p3, $p15);
    goto SeqInstr_1045, SeqInstr_1046;

  SeqInstr_1046:
    assume assertsPassed;
    goto SeqInstr_1047;

  SeqInstr_1047:
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_1045:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i25 == 1;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p23, $mul.ref(0, 88)), $mul.ref(72, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i32 == 1;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_36 := vx_free_pipe($p3, $p23);
    goto SeqInstr_1042, SeqInstr_1043;

  SeqInstr_1043:
    assume assertsPassed;
    goto SeqInstr_1044;

  SeqInstr_1044:
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 712)), $mul.ref(384, 1));
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p35, $mul.ref($i38, 8));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref(0, 88)), $mul.ref(80, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_1042:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const vx_pcm_capture_pointer: ref;

axiom vx_pcm_capture_pointer == $sub.ref(0, 410919);

procedure vx_pcm_capture_pointer($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vx_pcm_capture_pointer($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 872)), $mul.ref(408, 1));
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1168)), $mul.ref(464, 1));
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 88)), $mul.ref(44, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i9 := bytes_to_frames($p2, $i8);
    call {:si_unique_call 1326} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const bytes_to_frames: ref;

axiom bytes_to_frames == $sub.ref(0, 411951);

procedure bytes_to_frames($p0: ref, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation bytes_to_frames($p0: ref, $i1: i64) returns ($r: i64)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} {:cexpr "bytes_to_frames:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i2 := $mul.i64($i1, 8);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1168)), $mul.ref(152, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i6 := $sdiv.i64($i2, $i5);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vx_set_monitor_level: ref;

axiom vx_set_monitor_level == $sub.ref(0, 412983);

procedure vx_set_monitor_level($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.52, $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation vx_set_monitor_level($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i8;
  var $i9: i8;
  var $i10: i16;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i8;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $p25: ref;
  var $i26: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1329} {:cexpr "vx_set_monitor_level:arg:audio"} boogie_si_record_i32($i1);
    call {:si_unique_call 1330} {:cexpr "vx_set_monitor_level:arg:level"} boogie_si_record_i32($i2);
    call {:si_unique_call 1331} {:cexpr "vx_set_monitor_level:arg:active"} boogie_si_record_i32($i3);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.52;
    call {:si_unique_call 1332} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p5, 0, 16, $zext.i32.i64(4), 0 == 1);
    $M.52 := cmdloc_dummy_var_7;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p4);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.52, $p6);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, $sub.i8(0, 3));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i9 := $or.i8($i8, 2);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $M.52 := $store.i8($M.52, $p6, $i9);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i2);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(14, 1));
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $M.52 := $store.i16($M.52, $p11, $i10);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.52, $p12);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i14 := $and.i8($i13, $sub.i8(0, 9));
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i15 := $or.i8($i14, 8);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $M.52 := $store.i8($M.52, $p12, $i15);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i3, 0);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $M.52 := $store.i32($M.52, $p18, $i17);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(500, 1)), $mul.ref($i19, 4));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i2);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i3);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i1);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 712)), $mul.ref(516, 1)), $mul.ref($i23, 1));
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i22);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i26 := vx_adjust_audio_level($p0, $i1, 0, $p4);
    goto SeqInstr_1048, SeqInstr_1049;

  SeqInstr_1049:
    assume assertsPassed;
    goto SeqInstr_1050;

  SeqInstr_1050:
    call {:si_unique_call 1334} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  SeqInstr_1048:
    assume !assertsPassed;
    return;
}



const vx_output_level_info: ref;

axiom vx_output_level_info == $sub.ref(0, 414015);

procedure vx_output_level_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_output_level_get: ref;

axiom vx_output_level_get == $sub.ref(0, 415047);

procedure vx_output_level_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_output_level_put: ref;

axiom vx_output_level_put == $sub.ref(0, 416079);

procedure vx_output_level_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_95: ref;

axiom ldv_mutex_lock_95 == $sub.ref(0, 417111);

procedure ldv_mutex_lock_95($p0: ref);



const ldv_mutex_unlock_96: ref;

axiom ldv_mutex_unlock_96 == $sub.ref(0, 418143);

procedure ldv_mutex_unlock_96($p0: ref);



const ldv_mutex_unlock_97: ref;

axiom ldv_mutex_unlock_97 == $sub.ref(0, 419175);

procedure ldv_mutex_unlock_97($p0: ref);



const ldv_linux_kernel_locking_mutex_mutex_unlock_mixer_mutex_of_vx_core: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_unlock_mixer_mutex_of_vx_core == $sub.ref(0, 420207);

procedure ldv_linux_kernel_locking_mutex_mutex_unlock_mixer_mutex_of_vx_core($p0: ref);



const ldv_linux_kernel_locking_mutex_mutex_lock_mixer_mutex_of_vx_core: ref;

axiom ldv_linux_kernel_locking_mutex_mutex_lock_mixer_mutex_of_vx_core == $sub.ref(0, 421239);

procedure ldv_linux_kernel_locking_mutex_mutex_lock_mixer_mutex_of_vx_core($p0: ref);



const ldv_mutex_lock_93: ref;

axiom ldv_mutex_lock_93 == $sub.ref(0, 422271);

procedure ldv_mutex_lock_93($p0: ref);



const ldv_mutex_unlock_94: ref;

axiom ldv_mutex_unlock_94 == $sub.ref(0, 423303);

procedure ldv_mutex_unlock_94($p0: ref);



const vx_audio_gain_info: ref;

axiom vx_audio_gain_info == $sub.ref(0, 424335);

procedure vx_audio_gain_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_gain_get: ref;

axiom vx_audio_gain_get == $sub.ref(0, 425367);

procedure vx_audio_gain_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_gain_put: ref;

axiom vx_audio_gain_put == $sub.ref(0, 426399);

procedure vx_audio_gain_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_106: ref;

axiom ldv_mutex_lock_106 == $sub.ref(0, 427431);

procedure ldv_mutex_lock_106($p0: ref);



const vx_set_audio_gain: ref;

axiom vx_set_audio_gain == $sub.ref(0, 428463);

procedure vx_set_audio_gain($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);



const ldv_mutex_unlock_107: ref;

axiom ldv_mutex_unlock_107 == $sub.ref(0, 429495);

procedure ldv_mutex_unlock_107($p0: ref);



const ldv_mutex_unlock_108: ref;

axiom ldv_mutex_unlock_108 == $sub.ref(0, 430527);

procedure ldv_mutex_unlock_108($p0: ref);



const ldv_mutex_lock_104: ref;

axiom ldv_mutex_lock_104 == $sub.ref(0, 431559);

procedure ldv_mutex_lock_104($p0: ref);



const ldv_mutex_unlock_105: ref;

axiom ldv_mutex_unlock_105 == $sub.ref(0, 432591);

procedure ldv_mutex_unlock_105($p0: ref);



const snd_ctl_boolean_stereo_info: ref;

axiom snd_ctl_boolean_stereo_info == $sub.ref(0, 433623);

procedure snd_ctl_boolean_stereo_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_sw_get: ref;

axiom vx_audio_sw_get == $sub.ref(0, 434655);

procedure vx_audio_sw_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_sw_put: ref;

axiom vx_audio_sw_put == $sub.ref(0, 435687);

procedure vx_audio_sw_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_116: ref;

axiom ldv_mutex_lock_116 == $sub.ref(0, 436719);

procedure ldv_mutex_lock_116($p0: ref);



const vx_set_audio_switch: ref;

axiom vx_set_audio_switch == $sub.ref(0, 437751);

procedure vx_set_audio_switch($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const ldv_mutex_unlock_117: ref;

axiom ldv_mutex_unlock_117 == $sub.ref(0, 438783);

procedure ldv_mutex_unlock_117($p0: ref);



const ldv_mutex_unlock_118: ref;

axiom ldv_mutex_unlock_118 == $sub.ref(0, 439815);

procedure ldv_mutex_unlock_118($p0: ref);



const ldv_mutex_lock_114: ref;

axiom ldv_mutex_lock_114 == $sub.ref(0, 440847);

procedure ldv_mutex_lock_114($p0: ref);



const ldv_mutex_unlock_115: ref;

axiom ldv_mutex_unlock_115 == $sub.ref(0, 441879);

procedure ldv_mutex_unlock_115($p0: ref);



const vx_audio_monitor_get: ref;

axiom vx_audio_monitor_get == $sub.ref(0, 442911);

procedure vx_audio_monitor_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_monitor_put: ref;

axiom vx_audio_monitor_put == $sub.ref(0, 443943);

procedure vx_audio_monitor_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_111: ref;

axiom ldv_mutex_lock_111 == $sub.ref(0, 444975);

procedure ldv_mutex_lock_111($p0: ref);



const ldv_mutex_unlock_112: ref;

axiom ldv_mutex_unlock_112 == $sub.ref(0, 446007);

procedure ldv_mutex_unlock_112($p0: ref);



const ldv_mutex_unlock_113: ref;

axiom ldv_mutex_unlock_113 == $sub.ref(0, 447039);

procedure ldv_mutex_unlock_113($p0: ref);



const ldv_mutex_lock_109: ref;

axiom ldv_mutex_lock_109 == $sub.ref(0, 448071);

procedure ldv_mutex_lock_109($p0: ref);



const ldv_mutex_unlock_110: ref;

axiom ldv_mutex_unlock_110 == $sub.ref(0, 449103);

procedure ldv_mutex_unlock_110($p0: ref);



const vx_monitor_sw_get: ref;

axiom vx_monitor_sw_get == $sub.ref(0, 450135);

procedure vx_monitor_sw_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_monitor_sw_put: ref;

axiom vx_monitor_sw_put == $sub.ref(0, 451167);

procedure vx_monitor_sw_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_121: ref;

axiom ldv_mutex_lock_121 == $sub.ref(0, 452199);

procedure ldv_mutex_lock_121($p0: ref);



const ldv_mutex_unlock_122: ref;

axiom ldv_mutex_unlock_122 == $sub.ref(0, 453231);

procedure ldv_mutex_unlock_122($p0: ref);



const ldv_mutex_unlock_123: ref;

axiom ldv_mutex_unlock_123 == $sub.ref(0, 454263);

procedure ldv_mutex_unlock_123($p0: ref);



const ldv_mutex_lock_119: ref;

axiom ldv_mutex_lock_119 == $sub.ref(0, 455295);

procedure ldv_mutex_lock_119($p0: ref);



const ldv_mutex_unlock_120: ref;

axiom ldv_mutex_unlock_120 == $sub.ref(0, 456327);

procedure ldv_mutex_unlock_120($p0: ref);



const vx_audio_src_info: ref;

axiom vx_audio_src_info == $sub.ref(0, 457359);

procedure vx_audio_src_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_src_get: ref;

axiom vx_audio_src_get == $sub.ref(0, 458391);

procedure vx_audio_src_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_audio_src_put: ref;

axiom vx_audio_src_put == $sub.ref(0, 459423);

procedure vx_audio_src_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_98: ref;

axiom ldv_mutex_lock_98 == $sub.ref(0, 460455);

procedure ldv_mutex_lock_98($p0: ref);



const ldv_mutex_unlock_99: ref;

axiom ldv_mutex_unlock_99 == $sub.ref(0, 461487);

procedure ldv_mutex_unlock_99($p0: ref);



const ldv_mutex_unlock_100___0: ref;

axiom ldv_mutex_unlock_100___0 == $sub.ref(0, 462519);

procedure ldv_mutex_unlock_100___0($p0: ref);



const snd_ctl_enum_info: ref;

axiom snd_ctl_enum_info == $sub.ref(0, 463551);

procedure snd_ctl_enum_info($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const vx_clock_mode_info: ref;

axiom vx_clock_mode_info == $sub.ref(0, 464583);

procedure vx_clock_mode_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_clock_mode_get: ref;

axiom vx_clock_mode_get == $sub.ref(0, 465615);

procedure vx_clock_mode_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_clock_mode_put: ref;

axiom vx_clock_mode_put == $sub.ref(0, 466647);

procedure vx_clock_mode_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_101___0: ref;

axiom ldv_mutex_lock_101___0 == $sub.ref(0, 467679);

procedure ldv_mutex_lock_101___0($p0: ref);



const ldv_mutex_unlock_102___0: ref;

axiom ldv_mutex_unlock_102___0 == $sub.ref(0, 468711);

procedure ldv_mutex_unlock_102___0($p0: ref);



const ldv_mutex_unlock_103: ref;

axiom ldv_mutex_unlock_103 == $sub.ref(0, 469743);

procedure ldv_mutex_unlock_103($p0: ref);



const vx_iec958_info: ref;

axiom vx_iec958_info == $sub.ref(0, 470775);

procedure vx_iec958_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_iec958_mask_get: ref;

axiom vx_iec958_mask_get == $sub.ref(0, 471807);

procedure vx_iec958_mask_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_iec958_get: ref;

axiom vx_iec958_get == $sub.ref(0, 472839);

procedure vx_iec958_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_iec958_put: ref;

axiom vx_iec958_put == $sub.ref(0, 473871);

procedure vx_iec958_put($p0: ref, $p1: ref) returns ($r: i32);



const ldv_mutex_lock_126: ref;

axiom ldv_mutex_lock_126 == $sub.ref(0, 474903);

procedure ldv_mutex_lock_126($p0: ref);



const ldv_mutex_unlock_127: ref;

axiom ldv_mutex_unlock_127 == $sub.ref(0, 475935);

procedure ldv_mutex_unlock_127($p0: ref);



const ldv_mutex_unlock_128: ref;

axiom ldv_mutex_unlock_128 == $sub.ref(0, 476967);

procedure ldv_mutex_unlock_128($p0: ref);



const ldv_mutex_lock_124: ref;

axiom ldv_mutex_lock_124 == $sub.ref(0, 477999);

procedure ldv_mutex_lock_124($p0: ref);



const ldv_mutex_unlock_125: ref;

axiom ldv_mutex_unlock_125 == $sub.ref(0, 479031);

procedure ldv_mutex_unlock_125($p0: ref);



const vx_saturation_get: ref;

axiom vx_saturation_get == $sub.ref(0, 480063);

procedure vx_saturation_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_get_audio_vu_meter: ref;

axiom vx_get_audio_vu_meter == $sub.ref(0, 481095);

procedure vx_get_audio_vu_meter($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const vx_vu_meter_info: ref;

axiom vx_vu_meter_info == $sub.ref(0, 482127);

procedure vx_vu_meter_info($p0: ref, $p1: ref) returns ($r: i32);



const vx_vu_meter_get: ref;

axiom vx_vu_meter_get == $sub.ref(0, 483159);

procedure vx_vu_meter_get($p0: ref, $p1: ref) returns ($r: i32);



const vx_peak_meter_get: ref;

axiom vx_peak_meter_get == $sub.ref(0, 484191);

procedure vx_peak_meter_get($p0: ref, $p1: ref) returns ($r: i32);



const ldv_EMGentry_exit_alsa_vx_core_exit_2_2: ref;

axiom ldv_EMGentry_exit_alsa_vx_core_exit_2_2 == $sub.ref(0, 485223);

procedure ldv_EMGentry_exit_alsa_vx_core_exit_2_2($p0: ref);
  free requires assertsPassed;



implementation ldv_EMGentry_exit_alsa_vx_core_exit_2_2($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} alsa_vx_core_exit();
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    return;
}



const alsa_vx_core_exit: ref;

axiom alsa_vx_core_exit == $sub.ref(0, 486255);

procedure alsa_vx_core_exit();
  free requires assertsPassed;



implementation alsa_vx_core_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    return;
}



const ldv_EMGentry_init_alsa_vx_core_init_2_9: ref;

axiom ldv_EMGentry_init_alsa_vx_core_init_2_9 == $sub.ref(0, 487287);

procedure ldv_EMGentry_init_alsa_vx_core_init_2_9($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_EMGentry_init_alsa_vx_core_init_2_9($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i1 := alsa_vx_core_init();
    call {:si_unique_call 1337} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alsa_vx_core_init: ref;

axiom alsa_vx_core_init == $sub.ref(0, 488319);

procedure alsa_vx_core_init() returns ($r: i32);
  free requires assertsPassed;



implementation alsa_vx_core_init() returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const ldv_dispatch_deregister_io_instance_1_2_4: ref;

axiom ldv_dispatch_deregister_io_instance_1_2_4 == $sub.ref(0, 489351);

procedure ldv_dispatch_deregister_io_instance_1_2_4();
  free requires assertsPassed;



implementation ldv_dispatch_deregister_io_instance_1_2_4()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    return;
}



const ldv_dispatch_register_io_instance_1_2_5: ref;

axiom ldv_dispatch_register_io_instance_1_2_5 == $sub.ref(0, 490383);

procedure ldv_dispatch_register_io_instance_1_2_5();
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.14, $M.1, $M.52, $CurrAddr, $M.60, $M.15, assertsPassed;



implementation ldv_dispatch_register_io_instance_1_2_5()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $p0 := ldv_xmalloc(4);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} ldv_struct_snd_pcm_ops_io_instance_0($p2);
    goto SeqInstr_1051, SeqInstr_1052;

  SeqInstr_1052:
    assume assertsPassed;
    goto SeqInstr_1053;

  SeqInstr_1053:
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $p3 := ldv_xmalloc(4);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} ldv_struct_snd_pcm_ops_io_instance_1($p5);
    goto SeqInstr_1054, SeqInstr_1055;

  SeqInstr_1055:
    assume assertsPassed;
    goto SeqInstr_1056;

  SeqInstr_1056:
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1054:
    assume !assertsPassed;
    return;

  SeqInstr_1051:
    assume !assertsPassed;
    return;
}



const ldv_xmalloc: ref;

axiom ldv_xmalloc == $sub.ref(0, 491415);

procedure ldv_xmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_xmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} {:cexpr "ldv_xmalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $p1 := malloc($i0);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} ldv_assume($i4);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i5 := ldv_is_err($p1);
    call {:si_unique_call 1346} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} ldv_assume($i7);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_struct_snd_pcm_ops_io_instance_0: ref;

axiom ldv_struct_snd_pcm_ops_io_instance_0 == $sub.ref(0, 492447);

procedure ldv_struct_snd_pcm_ops_io_instance_0($p0: ref);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.14, $M.1, $M.52, $CurrAddr, $M.60, $M.15, assertsPassed;



implementation ldv_struct_snd_pcm_ops_io_instance_0($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} $p1 := ldv_xmalloc(608);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} $p3 := ldv_xmalloc(872);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} $i5 := ldv_undef_int();
    call {:si_unique_call 1351} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} ldv_free($p19);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} ldv_free($p20);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33 := ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb4($p2, $p4, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33);
    goto $bb4_last;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.142, $p7);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} $i9 := ldv_io_instance_probe_0_11($p8, $p4);
    goto SeqInstr_1057, SeqInstr_1058;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  SeqInstr_1059:
    call {:si_unique_call 1355} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i9);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} $i10 := ldv_filter_err_code($i9);
    call {:si_unique_call 1357} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} $i11 := ldv_undef_int();
    call {:si_unique_call 1359} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i10, 0);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_assume($i16);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i17 := ldv_undef_int();
    call {:si_unique_call 1365} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9_dummy;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 0);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_assume($i14);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31 := ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb7($p2, $p4, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31);
    goto $bb7_last;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, 2);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 3);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 4);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 5);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 6);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 7);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 8);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ldv_stop();
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb40:
    assume $i30 == 1;
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.143, $p32);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_io_instance_release_0_2($p33, $p4);
    goto SeqInstr_1066, SeqInstr_1067;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  SeqInstr_1068:
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1066:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i28 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_io_instance_callback_0_4($u3, $p4);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  $bb32:
    assume $i27 == 1;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_io_instance_callback_0_17($u8, $p4, $p2);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb28:
    assume $i26 == 1;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ldv_io_instance_callback_0_18($u7, $p4, $u0, $p31);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume $i25 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_io_instance_callback_0_21($u5, $p4, $u6);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_io_instance_callback_0_24($u4, $p4);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_io_instance_callback_0_25($u3, $p4);
    goto SeqInstr_1063, SeqInstr_1064;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  SeqInstr_1065:
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1063:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} ldv_io_instance_callback_0_26($u2, $p4, $u0);
    goto SeqInstr_1060, SeqInstr_1061;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  SeqInstr_1062:
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1060:
    assume !assertsPassed;
    return;

  SeqInstr_1057:
    assume !assertsPassed;
    return;

  $bb45_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $i21 := ldv_undef_int();
    call {:si_unique_call 1363} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_5703;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5686;
}



const ldv_struct_snd_pcm_ops_io_instance_1: ref;

axiom ldv_struct_snd_pcm_ops_io_instance_1 == $sub.ref(0, 493479);

procedure ldv_struct_snd_pcm_ops_io_instance_1($p0: ref);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $M.14, $CurrAddr, $M.60, $M.15, assertsPassed;



implementation ldv_struct_snd_pcm_ops_io_instance_1($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p1 := ldv_xmalloc(608);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p3 := ldv_xmalloc(872);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i5 := ldv_undef_int();
    call {:si_unique_call 1378} {:cexpr "tmp___2"} boogie_si_record_i32($i5);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} ldv_free($p19);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p4);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} ldv_free($p20);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33 := ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb4($p2, $p4, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $p31, $p32, $p33);
    goto $bb4_last;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.144, $p7);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i9 := ldv_io_instance_probe_1_11($p8, $p4);
    goto SeqInstr_1069, SeqInstr_1070;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  SeqInstr_1071:
    call {:si_unique_call 1382} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i9);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i10 := ldv_filter_err_code($i9);
    call {:si_unique_call 1384} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32($i10);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i11 := ldv_undef_int();
    call {:si_unique_call 1386} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i10, 0);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} ldv_assume($i16);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $i17 := ldv_undef_int();
    call {:si_unique_call 1392} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb9_dummy;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 0);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} ldv_assume($i14);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31 := ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb7($p2, $p4, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p31);
    goto $bb7_last;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i21, 2);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 3);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 4);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i21, 5);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i21, 6);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i21, 7);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 8);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_stop();
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb40:
    assume $i30 == 1;
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.145, $p32);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_io_instance_release_1_2($p33, $p4);
    goto SeqInstr_1078, SeqInstr_1079;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  SeqInstr_1080:
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1078:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i28 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_io_instance_callback_1_4($u3, $p4);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  $bb32:
    assume $i27 == 1;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ldv_io_instance_callback_1_17($u8, $p4, $p2);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb28:
    assume $i26 == 1;
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_io_instance_callback_1_18($u7, $p4, $u0, $p31);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume $i25 == 1;
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_io_instance_callback_1_21($u5, $p4, $u6);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} ldv_io_instance_callback_1_24($u4, $p4);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb16:
    assume $i23 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_io_instance_callback_1_25($u3, $p4);
    goto SeqInstr_1075, SeqInstr_1076;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  SeqInstr_1077:
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1075:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_io_instance_callback_1_26($u2, $p4, $u0);
    goto SeqInstr_1072, SeqInstr_1073;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  SeqInstr_1074:
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1072:
    assume !assertsPassed;
    return;

  SeqInstr_1069:
    assume !assertsPassed;
    return;

  $bb45_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i21 := ldv_undef_int();
    call {:si_unique_call 1390} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_5794;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5777;
}



const ldv_io_instance_probe_1_11: ref;

axiom ldv_io_instance_probe_1_11 == $sub.ref(0, 494511);

procedure ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $CurrAddr, $M.14, $M.1, assertsPassed;



implementation ldv_io_instance_probe_1_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $i2 := vx_pcm_playback_open($p1);
    goto SeqInstr_1081, SeqInstr_1082;

  SeqInstr_1082:
    assume assertsPassed;
    goto SeqInstr_1083;

  SeqInstr_1083:
    call {:si_unique_call 1403} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1081:
    assume !assertsPassed;
    return;
}



const ldv_filter_err_code: ref;

axiom ldv_filter_err_code == $sub.ref(0, 495543);

procedure ldv_filter_err_code($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_err_code($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} {:cexpr "ldv_filter_err_code:arg:ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1406} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_free: ref;

axiom ldv_free == $sub.ref(0, 496575);

procedure ldv_free($p0: ref);
  free requires assertsPassed;



implementation ldv_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} free_($p0);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_26: ref;

axiom ldv_io_instance_callback_1_26 == $sub.ref(0, 497607);

procedure ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $CurrAddr, $M.60, $M.14, assertsPassed;



implementation ldv_io_instance_callback_1_26($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} {:cexpr "ldv_io_instance_callback_1_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} vslice_dummy_var_38 := vx_pcm_trigger($p1, $i2);
    goto SeqInstr_1084, SeqInstr_1085;

  SeqInstr_1085:
    assume assertsPassed;
    goto SeqInstr_1086;

  SeqInstr_1086:
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1084:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_25: ref;

axiom ldv_io_instance_callback_1_25 == $sub.ref(0, 498639);

procedure ldv_io_instance_callback_1_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, $M.15, assertsPassed;



implementation ldv_io_instance_callback_1_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_39 := vx_pcm_prepare($p1);
    goto SeqInstr_1087, SeqInstr_1088;

  SeqInstr_1088:
    assume assertsPassed;
    goto SeqInstr_1089;

  SeqInstr_1089:
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1087:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_1_24: ref;

axiom ldv_io_instance_callback_1_24 == $sub.ref(0, 499671);

procedure ldv_io_instance_callback_1_24($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_40: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} vslice_dummy_var_40 := vx_pcm_playback_pointer($p1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_21: ref;

axiom ldv_io_instance_callback_1_21 == $sub.ref(0, 500703);

procedure ldv_io_instance_callback_1_21($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_21($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_41: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} {:cexpr "ldv_io_instance_callback_1_21:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} vslice_dummy_var_41 := snd_pcm_lib_get_vmalloc_page($p1, $i2);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_18: ref;

axiom ldv_io_instance_callback_1_18 == $sub.ref(0, 501735);

procedure ldv_io_instance_callback_1_18($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_18($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var vslice_dummy_var_42: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "ldv_io_instance_callback_1_18:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} vslice_dummy_var_42 := snd_pcm_lib_ioctl($p1, $i2, $p3);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_17: ref;

axiom ldv_io_instance_callback_1_17 == $sub.ref(0, 502767);

procedure ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_17($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_43 := vx_pcm_hw_params($p1, $p2);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_1_4: ref;

axiom ldv_io_instance_callback_1_4 == $sub.ref(0, 503799);

procedure ldv_io_instance_callback_1_4($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_1_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_44 := vx_pcm_hw_free($p1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_release_1_2: ref;

axiom ldv_io_instance_release_1_2 == $sub.ref(0, 504831);

procedure ldv_io_instance_release_1_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation ldv_io_instance_release_1_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_45 := vx_pcm_playback_close($p1);
    goto SeqInstr_1090, SeqInstr_1091;

  SeqInstr_1091:
    assume assertsPassed;
    goto SeqInstr_1092;

  SeqInstr_1092:
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1090:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 505863);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_filter_positive_int: ref;

axiom ldv_filter_positive_int == $sub.ref(0, 506895);

procedure ldv_filter_positive_int($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_filter_positive_int($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} {:cexpr "ldv_filter_positive_int:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i1 := $sle.i32($i0, 0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} ldv_assume($i2);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_io_instance_probe_0_11: ref;

axiom ldv_io_instance_probe_0_11 == $sub.ref(0, 507927);

procedure ldv_io_instance_probe_0_11($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.14, $M.1, $M.52, $CurrAddr, assertsPassed;



implementation ldv_io_instance_probe_0_11($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $i2 := vx_pcm_capture_open($p1);
    goto SeqInstr_1093, SeqInstr_1094;

  SeqInstr_1094:
    assume assertsPassed;
    goto SeqInstr_1095;

  SeqInstr_1095:
    call {:si_unique_call 1422} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_1093:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_26: ref;

axiom ldv_io_instance_callback_0_26 == $sub.ref(0, 508959);

procedure ldv_io_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $CurrAddr, $M.60, $M.14, assertsPassed;



implementation ldv_io_instance_callback_0_26($p0: ref, $p1: ref, $i2: i32)
{
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} {:cexpr "ldv_io_instance_callback_0_26:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} vslice_dummy_var_46 := vx_pcm_trigger($p1, $i2);
    goto SeqInstr_1096, SeqInstr_1097;

  SeqInstr_1097:
    assume assertsPassed;
    goto SeqInstr_1098;

  SeqInstr_1098:
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1096:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_25: ref;

axiom ldv_io_instance_callback_0_25 == $sub.ref(0, 509991);

procedure ldv_io_instance_callback_0_25($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, $M.15, assertsPassed;



implementation ldv_io_instance_callback_0_25($p0: ref, $p1: ref)
{
  var vslice_dummy_var_47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} vslice_dummy_var_47 := vx_pcm_prepare($p1);
    goto SeqInstr_1099, SeqInstr_1100;

  SeqInstr_1100:
    assume assertsPassed;
    goto SeqInstr_1101;

  SeqInstr_1101:
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1099:
    assume !assertsPassed;
    return;
}



const ldv_io_instance_callback_0_24: ref;

axiom ldv_io_instance_callback_0_24 == $sub.ref(0, 511023);

procedure ldv_io_instance_callback_0_24($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_24($p0: ref, $p1: ref)
{
  var vslice_dummy_var_48: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_48 := vx_pcm_capture_pointer($p1);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_21: ref;

axiom ldv_io_instance_callback_0_21 == $sub.ref(0, 512055);

procedure ldv_io_instance_callback_0_21($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_21($p0: ref, $p1: ref, $i2: i64)
{
  var vslice_dummy_var_49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} {:cexpr "ldv_io_instance_callback_0_21:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_49 := snd_pcm_lib_get_vmalloc_page($p1, $i2);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_18: ref;

axiom ldv_io_instance_callback_0_18 == $sub.ref(0, 513087);

procedure ldv_io_instance_callback_0_18($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_18($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} {:cexpr "ldv_io_instance_callback_0_18:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_50 := snd_pcm_lib_ioctl($p1, $i2, $p3);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_17: ref;

axiom ldv_io_instance_callback_0_17 == $sub.ref(0, 514119);

procedure ldv_io_instance_callback_0_17($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_17($p0: ref, $p1: ref, $p2: ref)
{
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} vslice_dummy_var_51 := vx_pcm_hw_params($p1, $p2);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_callback_0_4: ref;

axiom ldv_io_instance_callback_0_4 == $sub.ref(0, 515151);

procedure ldv_io_instance_callback_0_4($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ldv_io_instance_callback_0_4($p0: ref, $p1: ref)
{
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_52 := vx_pcm_hw_free($p1);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    return;
}



const ldv_io_instance_release_0_2: ref;

axiom ldv_io_instance_release_0_2 == $sub.ref(0, 516183);

procedure ldv_io_instance_release_0_2($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation ldv_io_instance_release_0_2($p0: ref, $p1: ref)
{
  var vslice_dummy_var_53: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_53 := vx_pcm_capture_close($p1);
    goto SeqInstr_1102, SeqInstr_1103;

  SeqInstr_1103:
    assume assertsPassed;
    goto SeqInstr_1104;

  SeqInstr_1104:
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1102:
    assume !assertsPassed;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 517215);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1434} $r := $malloc($i0);
    return;
}



const ldv_entry_EMGentry_2: ref;

axiom ldv_entry_EMGentry_2 == $sub.ref(0, 518247);

procedure ldv_entry_EMGentry_2($p0: ref);
  free requires assertsPassed;
  modifies $M.53, $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.14, $M.1, $M.52, assertsPassed, $CurrAddr, $M.60, $M.15;



implementation ldv_entry_EMGentry_2($p0: ref)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} $i1 := ldv_EMGentry_init_alsa_vx_core_init_2_9($u9);
    call {:si_unique_call 1436} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i1);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i2 := ldv_ldv_post_init_103($i1);
    call {:si_unique_call 1438} {:cexpr "ldv_2_ret_default"} boogie_si_record_i32($i2);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i3 := ldv_undef_int();
    call {:si_unique_call 1440} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} ldv_assume($i8);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i9 := ldv_undef_int();
    call {:si_unique_call 1446} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} ldv_EMGentry_exit_alsa_vx_core_exit_2_2($u10);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} ldv_ldv_check_final_state_105();
    goto SeqInstr_1111, SeqInstr_1112;

  SeqInstr_1112:
    assume assertsPassed;
    goto SeqInstr_1113;

  SeqInstr_1113:
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} ldv_stop();
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1111:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} ldv_dispatch_register_io_instance_1_2_5();
    goto SeqInstr_1108, SeqInstr_1109;

  SeqInstr_1109:
    assume assertsPassed;
    goto SeqInstr_1110;

  SeqInstr_1110:
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} ldv_dispatch_deregister_io_instance_1_2_4();
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_1108:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} ldv_assume($i6);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} ldv_ldv_check_final_state_104();
    goto SeqInstr_1105, SeqInstr_1106;

  SeqInstr_1106:
    assume assertsPassed;
    goto SeqInstr_1107;

  SeqInstr_1107:
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} ldv_stop();
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1105:
    assume !assertsPassed;
    return;
}



const ldv_ldv_post_init_103: ref;

axiom ldv_ldv_post_init_103 == $sub.ref(0, 519279);

procedure ldv_ldv_post_init_103($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ldv_post_init_103($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} {:cexpr "ldv_ldv_post_init_103:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} ldv_linux_net_register_reset_error_counter();
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} ldv_linux_usb_register_reset_error_counter();
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i1 := ldv_post_init($i0);
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_ldv_check_final_state_104: ref;

axiom ldv_ldv_check_final_state_104 == $sub.ref(0, 520311);

procedure ldv_ldv_check_final_state_104();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_104()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1114, SeqInstr_1115;

  SeqInstr_1115:
    assume assertsPassed;
    goto SeqInstr_1116;

  SeqInstr_1116:
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1117, SeqInstr_1118;

  SeqInstr_1118:
    assume assertsPassed;
    goto SeqInstr_1119;

  SeqInstr_1119:
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1120, SeqInstr_1121;

  SeqInstr_1121:
    assume assertsPassed;
    goto SeqInstr_1122;

  SeqInstr_1122:
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1123, SeqInstr_1124;

  SeqInstr_1124:
    assume assertsPassed;
    goto SeqInstr_1125;

  SeqInstr_1125:
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1126, SeqInstr_1127;

  SeqInstr_1127:
    assume assertsPassed;
    goto SeqInstr_1128;

  SeqInstr_1128:
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1129, SeqInstr_1130;

  SeqInstr_1130:
    assume assertsPassed;
    goto SeqInstr_1131;

  SeqInstr_1131:
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1132, SeqInstr_1133;

  SeqInstr_1133:
    assume assertsPassed;
    goto SeqInstr_1134;

  SeqInstr_1134:
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1135, SeqInstr_1136;

  SeqInstr_1136:
    assume assertsPassed;
    goto SeqInstr_1137;

  SeqInstr_1137:
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1138, SeqInstr_1139;

  SeqInstr_1139:
    assume assertsPassed;
    goto SeqInstr_1140;

  SeqInstr_1140:
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1141, SeqInstr_1142;

  SeqInstr_1142:
    assume assertsPassed;
    goto SeqInstr_1143;

  SeqInstr_1143:
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1144, SeqInstr_1145;

  SeqInstr_1145:
    assume assertsPassed;
    goto SeqInstr_1146;

  SeqInstr_1146:
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1147, SeqInstr_1148;

  SeqInstr_1148:
    assume assertsPassed;
    goto SeqInstr_1149;

  SeqInstr_1149:
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1150, SeqInstr_1151;

  SeqInstr_1151:
    assume assertsPassed;
    goto SeqInstr_1152;

  SeqInstr_1152:
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1153, SeqInstr_1154;

  SeqInstr_1154:
    assume assertsPassed;
    goto SeqInstr_1155;

  SeqInstr_1155:
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1156, SeqInstr_1157;

  SeqInstr_1157:
    assume assertsPassed;
    goto SeqInstr_1158;

  SeqInstr_1158:
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1159, SeqInstr_1160;

  SeqInstr_1160:
    assume assertsPassed;
    goto SeqInstr_1161;

  SeqInstr_1161:
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1162, SeqInstr_1163;

  SeqInstr_1163:
    assume assertsPassed;
    goto SeqInstr_1164;

  SeqInstr_1164:
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1165, SeqInstr_1166;

  SeqInstr_1166:
    assume assertsPassed;
    goto SeqInstr_1167;

  SeqInstr_1167:
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1168, SeqInstr_1169;

  SeqInstr_1169:
    assume assertsPassed;
    goto SeqInstr_1170;

  SeqInstr_1170:
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1171, SeqInstr_1172;

  SeqInstr_1172:
    assume assertsPassed;
    goto SeqInstr_1173;

  SeqInstr_1173:
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1171:
    assume !assertsPassed;
    return;

  SeqInstr_1168:
    assume !assertsPassed;
    return;

  SeqInstr_1165:
    assume !assertsPassed;
    return;

  SeqInstr_1162:
    assume !assertsPassed;
    return;

  SeqInstr_1159:
    assume !assertsPassed;
    return;

  SeqInstr_1156:
    assume !assertsPassed;
    return;

  SeqInstr_1153:
    assume !assertsPassed;
    return;

  SeqInstr_1150:
    assume !assertsPassed;
    return;

  SeqInstr_1147:
    assume !assertsPassed;
    return;

  SeqInstr_1144:
    assume !assertsPassed;
    return;

  SeqInstr_1141:
    assume !assertsPassed;
    return;

  SeqInstr_1138:
    assume !assertsPassed;
    return;

  SeqInstr_1135:
    assume !assertsPassed;
    return;

  SeqInstr_1132:
    assume !assertsPassed;
    return;

  SeqInstr_1129:
    assume !assertsPassed;
    return;

  SeqInstr_1126:
    assume !assertsPassed;
    return;

  SeqInstr_1123:
    assume !assertsPassed;
    return;

  SeqInstr_1120:
    assume !assertsPassed;
    return;

  SeqInstr_1117:
    assume !assertsPassed;
    return;

  SeqInstr_1114:
    assume !assertsPassed;
    return;
}



const ldv_ldv_check_final_state_105: ref;

axiom ldv_ldv_check_final_state_105 == $sub.ref(0, 521343);

procedure ldv_ldv_check_final_state_105();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_ldv_check_final_state_105()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} ldv_linux_arch_io_check_final_state();
    goto SeqInstr_1174, SeqInstr_1175;

  SeqInstr_1175:
    assume assertsPassed;
    goto SeqInstr_1176;

  SeqInstr_1176:
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} ldv_linux_block_genhd_check_final_state();
    goto SeqInstr_1177, SeqInstr_1178;

  SeqInstr_1178:
    assume assertsPassed;
    goto SeqInstr_1179;

  SeqInstr_1179:
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} ldv_linux_block_queue_check_final_state();
    goto SeqInstr_1180, SeqInstr_1181;

  SeqInstr_1181:
    assume assertsPassed;
    goto SeqInstr_1182;

  SeqInstr_1182:
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} ldv_linux_block_request_check_final_state();
    goto SeqInstr_1183, SeqInstr_1184;

  SeqInstr_1184:
    assume assertsPassed;
    goto SeqInstr_1185;

  SeqInstr_1185:
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} ldv_linux_drivers_base_class_check_final_state();
    goto SeqInstr_1186, SeqInstr_1187;

  SeqInstr_1187:
    assume assertsPassed;
    goto SeqInstr_1188;

  SeqInstr_1188:
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} ldv_linux_fs_char_dev_check_final_state();
    goto SeqInstr_1189, SeqInstr_1190;

  SeqInstr_1190:
    assume assertsPassed;
    goto SeqInstr_1191;

  SeqInstr_1191:
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} ldv_linux_fs_sysfs_check_final_state();
    goto SeqInstr_1192, SeqInstr_1193;

  SeqInstr_1193:
    assume assertsPassed;
    goto SeqInstr_1194;

  SeqInstr_1194:
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} ldv_linux_kernel_locking_rwlock_check_final_state();
    goto SeqInstr_1195, SeqInstr_1196;

  SeqInstr_1196:
    assume assertsPassed;
    goto SeqInstr_1197;

  SeqInstr_1197:
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} ldv_linux_kernel_module_check_final_state();
    goto SeqInstr_1198, SeqInstr_1199;

  SeqInstr_1199:
    assume assertsPassed;
    goto SeqInstr_1200;

  SeqInstr_1200:
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
    goto SeqInstr_1201, SeqInstr_1202;

  SeqInstr_1202:
    assume assertsPassed;
    goto SeqInstr_1203;

  SeqInstr_1203:
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
    goto SeqInstr_1204, SeqInstr_1205;

  SeqInstr_1205:
    assume assertsPassed;
    goto SeqInstr_1206;

  SeqInstr_1206:
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} ldv_linux_kernel_rcu_update_lock_check_final_state();
    goto SeqInstr_1207, SeqInstr_1208;

  SeqInstr_1208:
    assume assertsPassed;
    goto SeqInstr_1209;

  SeqInstr_1209:
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} ldv_linux_kernel_rcu_srcu_check_final_state();
    goto SeqInstr_1210, SeqInstr_1211;

  SeqInstr_1211:
    assume assertsPassed;
    goto SeqInstr_1212;

  SeqInstr_1212:
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} ldv_linux_lib_idr_check_final_state();
    goto SeqInstr_1213, SeqInstr_1214;

  SeqInstr_1214:
    assume assertsPassed;
    goto SeqInstr_1215;

  SeqInstr_1215:
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_linux_mmc_sdio_func_check_final_state();
    goto SeqInstr_1216, SeqInstr_1217;

  SeqInstr_1217:
    assume assertsPassed;
    goto SeqInstr_1218;

  SeqInstr_1218:
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} ldv_linux_net_rtnetlink_check_final_state();
    goto SeqInstr_1219, SeqInstr_1220;

  SeqInstr_1220:
    assume assertsPassed;
    goto SeqInstr_1221;

  SeqInstr_1221:
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_linux_net_sock_check_final_state();
    goto SeqInstr_1222, SeqInstr_1223;

  SeqInstr_1223:
    assume assertsPassed;
    goto SeqInstr_1224;

  SeqInstr_1224:
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_linux_usb_coherent_check_final_state();
    goto SeqInstr_1225, SeqInstr_1226;

  SeqInstr_1226:
    assume assertsPassed;
    goto SeqInstr_1227;

  SeqInstr_1227:
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_linux_usb_gadget_check_final_state();
    goto SeqInstr_1228, SeqInstr_1229;

  SeqInstr_1229:
    assume assertsPassed;
    goto SeqInstr_1230;

  SeqInstr_1230:
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_linux_usb_urb_check_final_state();
    goto SeqInstr_1231, SeqInstr_1232;

  SeqInstr_1232:
    assume assertsPassed;
    goto SeqInstr_1233;

  SeqInstr_1233:
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1231:
    assume !assertsPassed;
    return;

  SeqInstr_1228:
    assume !assertsPassed;
    return;

  SeqInstr_1225:
    assume !assertsPassed;
    return;

  SeqInstr_1222:
    assume !assertsPassed;
    return;

  SeqInstr_1219:
    assume !assertsPassed;
    return;

  SeqInstr_1216:
    assume !assertsPassed;
    return;

  SeqInstr_1213:
    assume !assertsPassed;
    return;

  SeqInstr_1210:
    assume !assertsPassed;
    return;

  SeqInstr_1207:
    assume !assertsPassed;
    return;

  SeqInstr_1204:
    assume !assertsPassed;
    return;

  SeqInstr_1201:
    assume !assertsPassed;
    return;

  SeqInstr_1198:
    assume !assertsPassed;
    return;

  SeqInstr_1195:
    assume !assertsPassed;
    return;

  SeqInstr_1192:
    assume !assertsPassed;
    return;

  SeqInstr_1189:
    assume !assertsPassed;
    return;

  SeqInstr_1186:
    assume !assertsPassed;
    return;

  SeqInstr_1183:
    assume !assertsPassed;
    return;

  SeqInstr_1180:
    assume !assertsPassed;
    return;

  SeqInstr_1177:
    assume !assertsPassed;
    return;

  SeqInstr_1174:
    assume !assertsPassed;
    return;
}



const ldv_linux_arch_io_check_final_state: ref;

axiom ldv_linux_arch_io_check_final_state == $sub.ref(0, 522375);

procedure ldv_linux_arch_io_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_arch_io_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i0 := $M.146;
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_assert_linux_arch_io__more_initial_at_exit($i2);
    goto SeqInstr_1234, SeqInstr_1235;

  SeqInstr_1235:
    assume assertsPassed;
    goto SeqInstr_1236;

  SeqInstr_1236:
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1234:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_genhd_check_final_state: ref;

axiom ldv_linux_block_genhd_check_final_state == $sub.ref(0, 523407);

procedure ldv_linux_block_genhd_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_genhd_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i0 := $M.147;
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_assert_linux_block_genhd__more_initial_at_exit($i2);
    goto SeqInstr_1237, SeqInstr_1238;

  SeqInstr_1238:
    assume assertsPassed;
    goto SeqInstr_1239;

  SeqInstr_1239:
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1237:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_queue_check_final_state: ref;

axiom ldv_linux_block_queue_check_final_state == $sub.ref(0, 524439);

procedure ldv_linux_block_queue_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_queue_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i0 := $M.148;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} ldv_assert_linux_block_queue__more_initial_at_exit($i2);
    goto SeqInstr_1240, SeqInstr_1241;

  SeqInstr_1241:
    assume assertsPassed;
    goto SeqInstr_1242;

  SeqInstr_1242:
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1240:
    assume !assertsPassed;
    return;
}



const ldv_linux_block_request_check_final_state: ref;

axiom ldv_linux_block_request_check_final_state == $sub.ref(0, 525471);

procedure ldv_linux_block_request_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_block_request_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i0 := $M.149;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} ldv_assert_linux_block_request__get_at_exit($i2);
    goto SeqInstr_1243, SeqInstr_1244;

  SeqInstr_1244:
    assume assertsPassed;
    goto SeqInstr_1245;

  SeqInstr_1245:
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1243:
    assume !assertsPassed;
    return;
}



const ldv_linux_drivers_base_class_check_final_state: ref;

axiom ldv_linux_drivers_base_class_check_final_state == $sub.ref(0, 526503);

procedure ldv_linux_drivers_base_class_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_drivers_base_class_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i0 := $M.150;
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} ldv_assert_linux_drivers_base_class__registered_at_exit($i2);
    goto SeqInstr_1246, SeqInstr_1247;

  SeqInstr_1247:
    assume assertsPassed;
    goto SeqInstr_1248;

  SeqInstr_1248:
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1246:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_char_dev_check_final_state: ref;

axiom ldv_linux_fs_char_dev_check_final_state == $sub.ref(0, 527535);

procedure ldv_linux_fs_char_dev_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_char_dev_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i0 := $M.151;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} ldv_assert_linux_fs_char_dev__registered_at_exit($i2);
    goto SeqInstr_1249, SeqInstr_1250;

  SeqInstr_1250:
    assume assertsPassed;
    goto SeqInstr_1251;

  SeqInstr_1251:
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1249:
    assume !assertsPassed;
    return;
}



const ldv_linux_fs_sysfs_check_final_state: ref;

axiom ldv_linux_fs_sysfs_check_final_state == $sub.ref(0, 528567);

procedure ldv_linux_fs_sysfs_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_fs_sysfs_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i0 := $M.152;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} ldv_assert_linux_fs_sysfs__more_initial_at_exit($i2);
    goto SeqInstr_1252, SeqInstr_1253;

  SeqInstr_1253:
    assume assertsPassed;
    goto SeqInstr_1254;

  SeqInstr_1254:
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1252:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_locking_rwlock_check_final_state: ref;

axiom ldv_linux_kernel_locking_rwlock_check_final_state == $sub.ref(0, 529599);

procedure ldv_linux_kernel_locking_rwlock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_locking_rwlock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i0 := $M.153;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i2);
    goto SeqInstr_1255, SeqInstr_1256;

  SeqInstr_1256:
    assume assertsPassed;
    goto SeqInstr_1257;

  SeqInstr_1257:
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $i3 := $M.154;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i5);
    goto SeqInstr_1258, SeqInstr_1259;

  SeqInstr_1259:
    assume assertsPassed;
    goto SeqInstr_1260;

  SeqInstr_1260:
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1258:
    assume !assertsPassed;
    return;

  SeqInstr_1255:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_module_check_final_state: ref;

axiom ldv_linux_kernel_module_check_final_state == $sub.ref(0, 530631);

procedure ldv_linux_kernel_module_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_module_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i0 := $M.155;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} ldv_assert_linux_kernel_module__more_initial_at_exit($i2);
    goto SeqInstr_1261, SeqInstr_1262;

  SeqInstr_1262:
    assume assertsPassed;
    goto SeqInstr_1263;

  SeqInstr_1263:
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1261:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_bh_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_bh_check_final_state == $sub.ref(0, 531663);

procedure ldv_linux_kernel_rcu_update_lock_bh_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_bh_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i0 := $M.156;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i2);
    goto SeqInstr_1264, SeqInstr_1265;

  SeqInstr_1265:
    assume assertsPassed;
    goto SeqInstr_1266;

  SeqInstr_1266:
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1264:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_sched_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_sched_check_final_state == $sub.ref(0, 532695);

procedure ldv_linux_kernel_rcu_update_lock_sched_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_sched_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i0 := $M.157;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i2);
    goto SeqInstr_1267, SeqInstr_1268;

  SeqInstr_1268:
    assume assertsPassed;
    goto SeqInstr_1269;

  SeqInstr_1269:
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1267:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_update_lock_check_final_state: ref;

axiom ldv_linux_kernel_rcu_update_lock_check_final_state == $sub.ref(0, 533727);

procedure ldv_linux_kernel_rcu_update_lock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_update_lock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i0 := $M.158;
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i2);
    goto SeqInstr_1270, SeqInstr_1271;

  SeqInstr_1271:
    assume assertsPassed;
    goto SeqInstr_1272;

  SeqInstr_1272:
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1270:
    assume !assertsPassed;
    return;
}



const ldv_linux_kernel_rcu_srcu_check_final_state: ref;

axiom ldv_linux_kernel_rcu_srcu_check_final_state == $sub.ref(0, 534759);

procedure ldv_linux_kernel_rcu_srcu_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_kernel_rcu_srcu_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i0 := $M.159;
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i2);
    goto SeqInstr_1273, SeqInstr_1274;

  SeqInstr_1274:
    assume assertsPassed;
    goto SeqInstr_1275;

  SeqInstr_1275:
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1273:
    assume !assertsPassed;
    return;
}



const ldv_linux_lib_idr_check_final_state: ref;

axiom ldv_linux_lib_idr_check_final_state == $sub.ref(0, 535791);

procedure ldv_linux_lib_idr_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_lib_idr_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i32;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i0 := $M.160;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i3 := $M.160;
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 3);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} ldv_assert_linux_lib_idr__more_at_exit($i5);
    goto SeqInstr_1276, SeqInstr_1277;

  SeqInstr_1277:
    assume assertsPassed;
    goto SeqInstr_1278;

  SeqInstr_1278:
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1276:
    assume !assertsPassed;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const ldv_linux_mmc_sdio_func_check_final_state: ref;

axiom ldv_linux_mmc_sdio_func_check_final_state == $sub.ref(0, 536823);

procedure ldv_linux_mmc_sdio_func_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_mmc_sdio_func_check_final_state()
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i0 := $M.161;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i3);
    goto SeqInstr_1279, SeqInstr_1280;

  SeqInstr_1280:
    assume assertsPassed;
    goto SeqInstr_1281;

  SeqInstr_1281:
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1279:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_rtnetlink_check_final_state: ref;

axiom ldv_linux_net_rtnetlink_check_final_state == $sub.ref(0, 537855);

procedure ldv_linux_net_rtnetlink_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_rtnetlink_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i0 := $M.162;
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} ldv_assert_linux_net_rtnetlink__lock_on_exit($i2);
    goto SeqInstr_1282, SeqInstr_1283;

  SeqInstr_1283:
    assume assertsPassed;
    goto SeqInstr_1284;

  SeqInstr_1284:
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1282:
    assume !assertsPassed;
    return;
}



const ldv_linux_net_sock_check_final_state: ref;

axiom ldv_linux_net_sock_check_final_state == $sub.ref(0, 538887);

procedure ldv_linux_net_sock_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_net_sock_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i0 := $M.163;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i2);
    goto SeqInstr_1285, SeqInstr_1286;

  SeqInstr_1286:
    assume assertsPassed;
    goto SeqInstr_1287;

  SeqInstr_1287:
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1285:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_coherent_check_final_state: ref;

axiom ldv_linux_usb_coherent_check_final_state == $sub.ref(0, 539919);

procedure ldv_linux_usb_coherent_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_coherent_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i0 := $M.164;
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} ldv_assert_linux_usb_coherent__more_initial_at_exit($i2);
    goto SeqInstr_1288, SeqInstr_1289;

  SeqInstr_1289:
    assume assertsPassed;
    goto SeqInstr_1290;

  SeqInstr_1290:
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1288:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_gadget_check_final_state: ref;

axiom ldv_linux_usb_gadget_check_final_state == $sub.ref(0, 540951);

procedure ldv_linux_usb_gadget_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_gadget_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i0 := $M.165;
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i2);
    goto SeqInstr_1291, SeqInstr_1292;

  SeqInstr_1292:
    assume assertsPassed;
    goto SeqInstr_1293;

  SeqInstr_1293:
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1291:
    assume !assertsPassed;
    return;
}



const ldv_linux_usb_urb_check_final_state: ref;

axiom ldv_linux_usb_urb_check_final_state == $sub.ref(0, 541983);

procedure ldv_linux_usb_urb_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_linux_usb_urb_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i0 := $M.166;
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} ldv_assert_linux_usb_urb__more_initial_at_exit($i2);
    goto SeqInstr_1294, SeqInstr_1295;

  SeqInstr_1295:
    assume assertsPassed;
    goto SeqInstr_1296;

  SeqInstr_1296:
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1294:
    assume !assertsPassed;
    return;
}



const ldv_assert_linux_usb_urb__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_urb__more_initial_at_exit == $sub.ref(0, 543015);

procedure ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_urb__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} {:cexpr "ldv_assert_linux_usb_urb__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1519} __VERIFIER_error();
    goto SeqInstr_1297, SeqInstr_1298;

  SeqInstr_1298:
    assume assertsPassed;
    goto SeqInstr_1299;

  SeqInstr_1299:
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1297:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit: ref;

axiom ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit == $sub.ref(0, 544047);

procedure ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} {:cexpr "ldv_assert_linux_usb_gadget__usb_gadget_registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1521} __VERIFIER_error();
    goto SeqInstr_1300, SeqInstr_1301;

  SeqInstr_1301:
    assume assertsPassed;
    goto SeqInstr_1302;

  SeqInstr_1302:
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1300:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_usb_coherent__more_initial_at_exit: ref;

axiom ldv_assert_linux_usb_coherent__more_initial_at_exit == $sub.ref(0, 545079);

procedure ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_usb_coherent__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} {:cexpr "ldv_assert_linux_usb_coherent__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} __VERIFIER_error();
    goto SeqInstr_1303, SeqInstr_1304;

  SeqInstr_1304:
    assume assertsPassed;
    goto SeqInstr_1305;

  SeqInstr_1305:
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1303:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_sock__all_locked_sockets_must_be_released: ref;

axiom ldv_assert_linux_net_sock__all_locked_sockets_must_be_released == $sub.ref(0, 546111);

procedure ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_sock__all_locked_sockets_must_be_released($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} {:cexpr "ldv_assert_linux_net_sock__all_locked_sockets_must_be_released:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1525} __VERIFIER_error();
    goto SeqInstr_1306, SeqInstr_1307;

  SeqInstr_1307:
    assume assertsPassed;
    goto SeqInstr_1308;

  SeqInstr_1308:
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1306:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_net_rtnetlink__lock_on_exit: ref;

axiom ldv_assert_linux_net_rtnetlink__lock_on_exit == $sub.ref(0, 547143);

procedure ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_net_rtnetlink__lock_on_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} {:cexpr "ldv_assert_linux_net_rtnetlink__lock_on_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1527} __VERIFIER_error();
    goto SeqInstr_1309, SeqInstr_1310;

  SeqInstr_1310:
    assume assertsPassed;
    goto SeqInstr_1311;

  SeqInstr_1311:
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1309:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_mmc_sdio_func__unreleased_at_exit: ref;

axiom ldv_assert_linux_mmc_sdio_func__unreleased_at_exit == $sub.ref(0, 548175);

procedure ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_mmc_sdio_func__unreleased_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} {:cexpr "ldv_assert_linux_mmc_sdio_func__unreleased_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1529} __VERIFIER_error();
    goto SeqInstr_1312, SeqInstr_1313;

  SeqInstr_1313:
    assume assertsPassed;
    goto SeqInstr_1314;

  SeqInstr_1314:
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1312:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_lib_idr__more_at_exit: ref;

axiom ldv_assert_linux_lib_idr__more_at_exit == $sub.ref(0, 549207);

procedure ldv_assert_linux_lib_idr__more_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_lib_idr__more_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} {:cexpr "ldv_assert_linux_lib_idr__more_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1531} __VERIFIER_error();
    goto SeqInstr_1315, SeqInstr_1316;

  SeqInstr_1316:
    assume assertsPassed;
    goto SeqInstr_1317;

  SeqInstr_1317:
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1315:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_srcu__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_srcu__locked_at_exit == $sub.ref(0, 550239);

procedure ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_srcu__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} {:cexpr "ldv_assert_linux_kernel_rcu_srcu__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1533} __VERIFIER_error();
    goto SeqInstr_1318, SeqInstr_1319;

  SeqInstr_1319:
    assume assertsPassed;
    goto SeqInstr_1320;

  SeqInstr_1320:
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1318:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit == $sub.ref(0, 551271);

procedure ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} __VERIFIER_error();
    goto SeqInstr_1321, SeqInstr_1322;

  SeqInstr_1322:
    assume assertsPassed;
    goto SeqInstr_1323;

  SeqInstr_1323:
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1321:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit == $sub.ref(0, 552303);

procedure ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_sched__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1537} __VERIFIER_error();
    goto SeqInstr_1324, SeqInstr_1325;

  SeqInstr_1325:
    assume assertsPassed;
    goto SeqInstr_1326;

  SeqInstr_1326:
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1324:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit: ref;

axiom ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit == $sub.ref(0, 553335);

procedure ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} {:cexpr "ldv_assert_linux_kernel_rcu_update_lock_bh__locked_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1539} __VERIFIER_error();
    goto SeqInstr_1327, SeqInstr_1328;

  SeqInstr_1328:
    assume assertsPassed;
    goto SeqInstr_1329;

  SeqInstr_1329:
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1327:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_module__more_initial_at_exit: ref;

axiom ldv_assert_linux_kernel_module__more_initial_at_exit == $sub.ref(0, 554367);

procedure ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_module__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} {:cexpr "ldv_assert_linux_kernel_module__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} __VERIFIER_error();
    goto SeqInstr_1330, SeqInstr_1331;

  SeqInstr_1331:
    assume assertsPassed;
    goto SeqInstr_1332;

  SeqInstr_1332:
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1330:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit == $sub.ref(0, 555399);

procedure ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__read_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1543} __VERIFIER_error();
    goto SeqInstr_1333, SeqInstr_1334;

  SeqInstr_1334:
    assume assertsPassed;
    goto SeqInstr_1335;

  SeqInstr_1335:
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1333:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit: ref;

axiom ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit == $sub.ref(0, 556431);

procedure ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} {:cexpr "ldv_assert_linux_kernel_locking_rwlock__write_lock_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} __VERIFIER_error();
    goto SeqInstr_1336, SeqInstr_1337;

  SeqInstr_1337:
    assume assertsPassed;
    goto SeqInstr_1338;

  SeqInstr_1338:
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1336:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_sysfs__more_initial_at_exit: ref;

axiom ldv_assert_linux_fs_sysfs__more_initial_at_exit == $sub.ref(0, 557463);

procedure ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_sysfs__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} {:cexpr "ldv_assert_linux_fs_sysfs__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1547} __VERIFIER_error();
    goto SeqInstr_1339, SeqInstr_1340;

  SeqInstr_1340:
    assume assertsPassed;
    goto SeqInstr_1341;

  SeqInstr_1341:
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1339:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_fs_char_dev__registered_at_exit: ref;

axiom ldv_assert_linux_fs_char_dev__registered_at_exit == $sub.ref(0, 558495);

procedure ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_fs_char_dev__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} {:cexpr "ldv_assert_linux_fs_char_dev__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} __VERIFIER_error();
    goto SeqInstr_1342, SeqInstr_1343;

  SeqInstr_1343:
    assume assertsPassed;
    goto SeqInstr_1344;

  SeqInstr_1344:
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1342:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_drivers_base_class__registered_at_exit: ref;

axiom ldv_assert_linux_drivers_base_class__registered_at_exit == $sub.ref(0, 559527);

procedure ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_drivers_base_class__registered_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} {:cexpr "ldv_assert_linux_drivers_base_class__registered_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1551} __VERIFIER_error();
    goto SeqInstr_1345, SeqInstr_1346;

  SeqInstr_1346:
    assume assertsPassed;
    goto SeqInstr_1347;

  SeqInstr_1347:
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1345:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_request__get_at_exit: ref;

axiom ldv_assert_linux_block_request__get_at_exit == $sub.ref(0, 560559);

procedure ldv_assert_linux_block_request__get_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_request__get_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} {:cexpr "ldv_assert_linux_block_request__get_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} __VERIFIER_error();
    goto SeqInstr_1348, SeqInstr_1349;

  SeqInstr_1349:
    assume assertsPassed;
    goto SeqInstr_1350;

  SeqInstr_1350:
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1348:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_queue__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_queue__more_initial_at_exit == $sub.ref(0, 561591);

procedure ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_queue__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} {:cexpr "ldv_assert_linux_block_queue__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1555} __VERIFIER_error();
    goto SeqInstr_1351, SeqInstr_1352;

  SeqInstr_1352:
    assume assertsPassed;
    goto SeqInstr_1353;

  SeqInstr_1353:
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1351:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_block_genhd__more_initial_at_exit: ref;

axiom ldv_assert_linux_block_genhd__more_initial_at_exit == $sub.ref(0, 562623);

procedure ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_block_genhd__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} {:cexpr "ldv_assert_linux_block_genhd__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1557} __VERIFIER_error();
    goto SeqInstr_1354, SeqInstr_1355;

  SeqInstr_1355:
    assume assertsPassed;
    goto SeqInstr_1356;

  SeqInstr_1356:
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1354:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_assert_linux_arch_io__more_initial_at_exit: ref;

axiom ldv_assert_linux_arch_io__more_initial_at_exit == $sub.ref(0, 563655);

procedure ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_assert_linux_arch_io__more_initial_at_exit($i0: i32)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} {:cexpr "ldv_assert_linux_arch_io__more_initial_at_exit:arg:expr"} boogie_si_record_i32($i0);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} __VERIFIER_error();
    goto SeqInstr_1357, SeqInstr_1358;

  SeqInstr_1358:
    assume assertsPassed;
    goto SeqInstr_1359;

  SeqInstr_1359:
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1357:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_linux_net_register_reset_error_counter: ref;

axiom ldv_linux_net_register_reset_error_counter == $sub.ref(0, 564687);

procedure ldv_linux_net_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_net_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_usb_register_reset_error_counter: ref;

axiom ldv_linux_usb_register_reset_error_counter == $sub.ref(0, 565719);

procedure ldv_linux_usb_register_reset_error_counter();
  free requires assertsPassed;



implementation ldv_linux_usb_register_reset_error_counter()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    return;
}



const ldv_post_init: ref;

axiom ldv_post_init == $sub.ref(0, 566751);

procedure ldv_post_init($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_post_init($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} {:cexpr "ldv_post_init:arg:init_ret_val"} boogie_si_record_i32($i0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1563} $i1 := ldv_filter_positive_int($i0);
    call {:si_unique_call 1564} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 567783);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.171, $M.160, $M.46, $M.148, $M.147, $M.9, $M.6, $M.8, $M.7, $M.50, $M.0, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.14, $M.166, $M.165, $M.164, $M.163, $M.162, $M.161, $M.158, $M.157, $M.156, $M.159, $M.155, $M.154, $M.153, $M.152, $M.151, $M.150, $M.149, $M.146, $M.45, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $CurrAddr, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $M.52, assertsPassed, $M.60, $M.15;



implementation main() returns ($r: i32)
{

  $bb0:
    call {:si_unique_call 1565} $initialize();
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} ldv_ldv_initialize_106();
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} ldv_entry_EMGentry_2($0.ref);
    goto SeqInstr_1360, SeqInstr_1361;

  SeqInstr_1361:
    assume assertsPassed;
    goto SeqInstr_1362;

  SeqInstr_1362:
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_1360:
    assume !assertsPassed;
    return;
}



const ldv_ldv_initialize_106: ref;

axiom ldv_ldv_initialize_106 == $sub.ref(0, 568815);

procedure ldv_ldv_initialize_106();
  free requires assertsPassed;



implementation ldv_ldv_initialize_106()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} ldv_linux_lib_find_bit_initialize();
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    return;
}



const ldv_linux_lib_find_bit_initialize: ref;

axiom ldv_linux_lib_find_bit_initialize == $sub.ref(0, 569847);

procedure ldv_linux_lib_find_bit_initialize();
  free requires assertsPassed;



implementation ldv_linux_lib_find_bit_initialize()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i0 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} ldv_assume($i2);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 570879);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 1} true;
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 571911);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 572943);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 573975);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_1363, SeqInstr_1364;

  SeqInstr_1364:
    assume assertsPassed;
    goto SeqInstr_1365;

  SeqInstr_1365:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1363:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 575007);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 576039);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 577071);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 578103);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 579135);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 580167);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 581199);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 582231);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 583263);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 584295);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1572} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1573} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1574} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} __VERIFIER_assume($i4);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 585327);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 586359);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 587391);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 588423);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 589455);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 590487);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 591519);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 592551);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 593583);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 594615);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 595647);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 596679);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 597711);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 598743);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 599775);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 600807);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 601839);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1576} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1577} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 602871);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 603903);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1578} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1579} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 604935);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 605967);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 606999);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1580} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1581} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1582} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} $p6 := malloc($i5);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 1585} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 608031);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 609063);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.171, $M.160, $M.46, $M.148, $M.147, $M.9, $M.6, $M.8, $M.7, $M.50, $M.0, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.14, $M.166, $M.165, $M.164, $M.163, $M.162, $M.161, $M.158, $M.157, $M.156, $M.159, $M.155, $M.154, $M.153, $M.152, $M.151, $M.150, $M.149, $M.146, $M.45, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241;



implementation __SMACK_static_init()
{

  $bb0:
    $M.171 := $store.i8($M.171, __kstrtab_snd_vx_check_reg_bit, 115);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(1, 1)), 110);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(5, 1)), 120);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(7, 1)), 99);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(8, 1)), 104);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(10, 1)), 99);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(11, 1)), 107);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(13, 1)), 114);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(15, 1)), 103);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(16, 1)), 95);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(17, 1)), 98);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.171 := $store.i8($M.171, $add.ref($add.ref(__kstrtab_snd_vx_check_reg_bit, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.160 := 0;
    call {:si_unique_call 1586} {:cexpr "ldv_linux_lib_idr_idr"} boogie_si_record_i32(0);
    call {:si_unique_call 1587} {:cexpr "ldv_linux_kernel_sched_completion_completion"} boogie_si_record_i32(0);
    call {:si_unique_call 1588} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_siglock_of_sighand_struct"} boogie_si_record_i32(1);
    call {:si_unique_call 1589} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_ptl"} boogie_si_record_i32(1);
    call {:si_unique_call 1590} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_node_size_lock_of_pglist_data"} boogie_si_record_i32(1);
    call {:si_unique_call 1591} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock_of_NOT_ARG_SIGN"} boogie_si_record_i32(1);
    call {:si_unique_call 1592} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_lock"} boogie_si_record_i32(1);
    call {:si_unique_call 1593} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_i_lock_of_inode"} boogie_si_record_i32(1);
    call {:si_unique_call 1594} {:cexpr "ldv_linux_kernel_locking_spinlock_spin_alloc_lock_of_task_struct"} boogie_si_record_i32(1);
    $M.46 := 0;
    call {:si_unique_call 1595} {:cexpr "__ldv_in_interrupt_context"} boogie_si_record_i8(0);
    $M.148 := 0;
    call {:si_unique_call 1596} {:cexpr "ldv_linux_block_queue_queue_state"} boogie_si_record_i32(0);
    $M.147 := 0;
    call {:si_unique_call 1597} {:cexpr "ldv_linux_block_genhd_disk_state"} boogie_si_record_i32(0);
    $M.9 := $store.i32($M.9, vx_dsp_cmds, 65536);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(0, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(0, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(0, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(1, 16)), $mul.ref(0, 1)), 131072);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(1, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(1, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(1, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(2, 16)), $mul.ref(0, 1)), 262144);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(2, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(2, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(2, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(3, 16)), $mul.ref(0, 1)), 458753);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(3, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(3, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(3, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(4, 16)), $mul.ref(0, 1)), 524288);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(4, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(4, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(4, 16)), $mul.ref(12, 1)), 4);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(5, 16)), $mul.ref(0, 1)), 655360);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(5, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(5, 16)), $mul.ref(8, 1)), 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(5, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(6, 16)), $mul.ref(0, 1)), 4194304);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(6, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(6, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(6, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(7, 16)), $mul.ref(0, 1)), 4259840);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(7, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(7, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(7, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(8, 16)), $mul.ref(0, 1)), 4366593);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(8, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(8, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(8, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(9, 16)), $mul.ref(0, 1)), 4366592);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(9, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(9, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(9, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(10, 16)), $mul.ref(0, 1)), 4431872);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(10, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(10, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(10, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(11, 16)), $mul.ref(0, 1)), 4653060);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(11, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(11, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(11, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(12, 16)), $mul.ref(0, 1)), 4718592);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(12, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(12, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(12, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(13, 16)), $mul.ref(0, 1)), 4825088);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(13, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(13, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(13, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(14, 16)), $mul.ref(0, 1)), 4915200);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(14, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(14, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(14, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(15, 16)), $mul.ref(0, 1)), 4980736);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(15, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(15, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(15, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(16, 16)), $mul.ref(0, 1)), 8429568);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(16, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(16, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(16, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(17, 16)), $mul.ref(0, 1)), 8388608);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(17, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(17, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(17, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(18, 16)), $mul.ref(0, 1)), 8495104);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(18, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(18, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(18, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(19, 16)), $mul.ref(0, 1)), 8454144);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(19, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(19, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(19, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(20, 16)), $mul.ref(0, 1)), 8552448);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(20, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(20, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(20, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(21, 16)), $mul.ref(0, 1)), 8585216);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(21, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(21, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(21, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(22, 16)), $mul.ref(0, 1)), 8814592);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(22, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(22, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(22, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(23, 16)), $mul.ref(0, 1)), 8882176);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(23, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(23, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(23, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(24, 16)), $mul.ref(0, 1)), 8978433);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(24, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(24, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(24, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(25, 16)), $mul.ref(0, 1)), 9076736);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(25, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(25, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(25, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(26, 16)), $mul.ref(0, 1)), 9242624);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(26, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(26, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(26, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(27, 16)), $mul.ref(0, 1)), 12648448);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(27, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(27, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(27, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(28, 16)), $mul.ref(0, 1)), 12754944);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(28, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(28, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(28, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(29, 16)), $mul.ref(0, 1)), 12820483);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(29, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(29, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(29, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(30, 16)), $mul.ref(0, 1)), 12886016);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(30, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(30, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(30, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(31, 16)), $mul.ref(0, 1)), 5046272);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(31, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(31, 16)), $mul.ref(8, 1)), 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(31, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(32, 16)), $mul.ref(0, 1)), 720896);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(32, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(32, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(32, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(33, 16)), $mul.ref(0, 1)), 622592);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(33, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(33, 16)), $mul.ref(8, 1)), 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(33, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(34, 16)), $mul.ref(0, 1)), 4456448);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(34, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(34, 16)), $mul.ref(8, 1)), 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(34, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(35, 16)), $mul.ref(0, 1)), 8683520);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(35, 16)), $mul.ref(4, 1)), 4);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(35, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(35, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(36, 16)), $mul.ref(0, 1)), 819200);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(36, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(36, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(36, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(37, 16)), $mul.ref(0, 1)), 4554752);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(37, 16)), $mul.ref(4, 1)), 0);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(37, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(37, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(38, 16)), $mul.ref(0, 1)), 851968);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(38, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(38, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(38, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(39, 16)), $mul.ref(0, 1)), 8749056);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(39, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(39, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(39, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(40, 16)), $mul.ref(0, 1)), 9142272);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(40, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(40, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(40, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(41, 16)), $mul.ref(0, 1)), 5111808);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(41, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(41, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(41, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(42, 16)), $mul.ref(0, 1)), 819200);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(42, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(42, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(42, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(43, 16)), $mul.ref(0, 1)), 9308160);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(43, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(43, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(43, 16)), $mul.ref(12, 1)), 1);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(44, 16)), $mul.ref(0, 1)), 917504);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(44, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(44, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(44, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(45, 16)), $mul.ref(0, 1)), 9371648);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(45, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(45, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(45, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(46, 16)), $mul.ref(0, 1)), 9437184);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(46, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(46, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(46, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(47, 16)), $mul.ref(0, 1)), 327680);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(47, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(47, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(47, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(48, 16)), $mul.ref(0, 1)), 393216);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(48, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(48, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(48, 16)), $mul.ref(12, 1)), 5);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(49, 16)), $mul.ref(0, 1)), 983040);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(49, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(49, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(49, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(50, 16)), $mul.ref(0, 1)), 9543680);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(50, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(50, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(50, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(51, 16)), $mul.ref(0, 1)), 196608);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(51, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(51, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(51, 16)), $mul.ref(12, 1)), 2);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(52, 16)), $mul.ref(0, 1)), 9175040);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(52, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(52, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(52, 16)), $mul.ref(12, 1)), 3);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(53, 16)), $mul.ref(0, 1)), 5210112);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(53, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(53, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(53, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(54, 16)), $mul.ref(0, 1)), 12582912);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(54, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(54, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(54, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(55, 16)), $mul.ref(0, 1)), 9666560);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(55, 16)), $mul.ref(4, 1)), 3);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(55, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(55, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(56, 16)), $mul.ref(0, 1)), 9732096);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(56, 16)), $mul.ref(4, 1)), 4);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(56, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(56, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(57, 16)), $mul.ref(0, 1)), 9764864);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(57, 16)), $mul.ref(4, 1)), 1);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(57, 16)), $mul.ref(8, 1)), 0);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(57, 16)), $mul.ref(12, 1)), 0);
    $M.9 := $store.i32($M.9, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(58, 16)), $mul.ref(0, 1)), 9805824);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(58, 16)), $mul.ref(4, 1)), 2);
    $M.8 := $store.i32($M.8, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(58, 16)), $mul.ref(8, 1)), 1);
    $M.7 := $store.i32($M.7, $add.ref($add.ref($add.ref(vx_dsp_cmds, $mul.ref(0, 944)), $mul.ref(58, 16)), $mul.ref(12, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_peak_meter, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(28, 1)), 5);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_vu_meter_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_peak_meter_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_peak_meter, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_vu_meter, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(28, 1)), 5);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_vu_meter_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_vu_meter_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_vu_meter, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_saturation, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.132);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(28, 1)), 5);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_saturation_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_saturation, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_iec958, 3);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.131);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_iec958_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_iec958_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_iec958_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_iec958, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_iec958_mask, 3);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.130);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(28, 1)), 1);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_iec958_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_iec958_mask_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(56, 1)), $0.ref);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_iec958_mask, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_clock_mode, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.129);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_clock_mode_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_clock_mode_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_clock_mode_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_clock_mode, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_audio_src, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.128);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_audio_src_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_audio_src_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_audio_src_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_audio_src, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_monitor_switch, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.127);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_monitor_sw_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_monitor_sw_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_monitor_switch, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_monitor_gain, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.125);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(28, 1)), 19);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_audio_gain_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_audio_monitor_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_audio_monitor_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_audio_gain);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_monitor_gain, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_output_switch, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.124);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(28, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(40, 1)), snd_ctl_boolean_stereo_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_audio_sw_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_audio_sw_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_output_switch, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, db_scale_audio_gain, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(db_scale_audio_gain, $mul.ref(0, 16)), $mul.ref(1, 4)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(db_scale_audio_gain, $mul.ref(0, 16)), $mul.ref(2, 4)), $sub.i32(0, 10975));
    $M.0 := $store.i32($M.0, $add.ref($add.ref(db_scale_audio_gain, $mul.ref(0, 16)), $mul.ref(3, 4)), 25);
    $M.50 := $store.i32($M.50, vx_control_audio_gain, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(16, 1)), $0.ref);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(28, 1)), 19);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_audio_gain_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_audio_gain_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_audio_gain_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), db_scale_audio_gain);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_audio_gain, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.50 := $store.i32($M.50, vx_control_output_level, 2);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(4, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(8, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(16, 1)), .str.122);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(24, 1)), 0);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(28, 1)), 19);
    $M.50 := $store.i32($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(32, 1)), 0);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(40, 1)), vx_output_level_info);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(48, 1)), vx_output_level_get);
    $M.50 := $store.ref($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(56, 1)), vx_output_level_put);
    $M.50 := $store.ref($M.50, $add.ref($add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(64, 1)), $mul.ref(0, 1)), $0.ref);
    $M.50 := $store.i64($M.50, $add.ref($add.ref(vx_control_output_level, $mul.ref(0, 80)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i32($M.0, vx_pcm_playback_hw, 524547);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(8, 1)), 4294967300);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(16, 1)), 1073742078);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(20, 1)), 5000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(28, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(40, 1)), 131072);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(48, 1)), 126);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(56, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(64, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(68, 1)), 32);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_playback_hw, $mul.ref(0, 80)), $mul.ref(72, 1)), 126);
    $M.0 := $store.i32($M.0, vx_pcm_capture_hw, 524547);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(8, 1)), 4294967300);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(16, 1)), 1073742078);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(20, 1)), 5000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(24, 1)), 48000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(28, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(32, 1)), 2);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(40, 1)), 131072);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(48, 1)), 126);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(56, 1)), 131072);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(64, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(68, 1)), 32);
    $M.0 := $store.i64($M.0, $add.ref($add.ref(vx_pcm_capture_hw, $mul.ref(0, 80)), $mul.ref(72, 1)), 126);
    $M.180 := $store.ref($M.180, vx_pcm_capture_ops, vx_pcm_capture_open);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), vx_pcm_capture_close);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), vx_pcm_hw_params);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), vx_pcm_hw_free);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), vx_pcm_prepare);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), vx_pcm_trigger);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), vx_pcm_capture_pointer);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.189 := $store.ref($M.189, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.190 := $store.ref($M.190, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.191 := $store.ref($M.191, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), snd_pcm_lib_get_vmalloc_page);
    $M.192 := $store.ref($M.192, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.193 := $store.ref($M.193, $add.ref($add.ref(vx_pcm_capture_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.180 := $store.ref($M.180, vx_pcm_playback_ops, vx_pcm_playback_open);
    $M.181 := $store.ref($M.181, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(8, 1)), vx_pcm_playback_close);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(16, 1)), snd_pcm_lib_ioctl);
    $M.183 := $store.ref($M.183, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(24, 1)), vx_pcm_hw_params);
    $M.184 := $store.ref($M.184, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(32, 1)), vx_pcm_hw_free);
    $M.185 := $store.ref($M.185, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(40, 1)), vx_pcm_prepare);
    $M.186 := $store.ref($M.186, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(48, 1)), vx_pcm_trigger);
    $M.187 := $store.ref($M.187, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(56, 1)), vx_pcm_playback_pointer);
    $M.188 := $store.ref($M.188, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(64, 1)), $0.ref);
    $M.189 := $store.ref($M.189, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(72, 1)), $0.ref);
    $M.190 := $store.ref($M.190, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(80, 1)), $0.ref);
    $M.191 := $store.ref($M.191, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(88, 1)), snd_pcm_lib_get_vmalloc_page);
    $M.192 := $store.ref($M.192, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(96, 1)), $0.ref);
    $M.193 := $store.ref($M.193, $add.ref($add.ref(vx_pcm_playback_ops, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.194 := $store.i8($M.194, __kstrtab_snd_vx_free_firmware, 115);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(1, 1)), 110);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(2, 1)), 100);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(3, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(4, 1)), 118);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(5, 1)), 120);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(7, 1)), 102);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(9, 1)), 101);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(10, 1)), 101);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(12, 1)), 102);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(16, 1)), 119);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.194 := $store.i8($M.194, $add.ref($add.ref(__kstrtab_snd_vx_free_firmware, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.195 := $store.i8($M.195, __kstrtab_snd_vx_setup_firmware, 115);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(1, 1)), 110);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(2, 1)), 100);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(4, 1)), 118);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(5, 1)), 120);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(7, 1)), 115);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(10, 1)), 117);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(11, 1)), 112);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(13, 1)), 102);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(14, 1)), 105);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(16, 1)), 109);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(17, 1)), 119);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(19, 1)), 114);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.195 := $store.i8($M.195, $add.ref($add.ref(__kstrtab_snd_vx_setup_firmware, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.196 := $store.i8($M.196, __kstrtab_snd_vx_create, 115);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(4, 1)), 118);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(5, 1)), 120);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(7, 1)), 99);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(8, 1)), 114);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(10, 1)), 97);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.196 := $store.i8($M.196, $add.ref($add.ref(__kstrtab_snd_vx_create, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.197 := $store.i8($M.197, __kstrtab_snd_vx_resume, 115);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(1, 1)), 110);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(2, 1)), 100);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(4, 1)), 118);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(5, 1)), 120);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(6, 1)), 95);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(8, 1)), 101);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(9, 1)), 115);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(11, 1)), 109);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.197 := $store.i8($M.197, $add.ref($add.ref(__kstrtab_snd_vx_resume, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.198 := $store.i8($M.198, __kstrtab_snd_vx_suspend, 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(1, 1)), 110);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(2, 1)), 100);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(3, 1)), 95);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(4, 1)), 118);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(5, 1)), 120);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(7, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(8, 1)), 117);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(9, 1)), 115);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(10, 1)), 112);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(11, 1)), 101);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(12, 1)), 110);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(13, 1)), 100);
    $M.198 := $store.i8($M.198, $add.ref($add.ref(__kstrtab_snd_vx_suspend, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.199 := $store.i8($M.199, __kstrtab_snd_vx_dsp_load, 115);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(4, 1)), 118);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(5, 1)), 120);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(7, 1)), 100);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(13, 1)), 97);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.199 := $store.i8($M.199, $add.ref($add.ref(__kstrtab_snd_vx_dsp_load, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.200 := $store.i8($M.200, __kstrtab_snd_vx_dsp_boot, 115);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(1, 1)), 110);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(2, 1)), 100);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(4, 1)), 118);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(5, 1)), 120);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(6, 1)), 95);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(7, 1)), 100);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(11, 1)), 98);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(14, 1)), 116);
    $M.200 := $store.i8($M.200, $add.ref($add.ref(__kstrtab_snd_vx_dsp_boot, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.201 := $store.i8($M.201, __kstrtab_snd_vx_irq_handler, 115);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(1, 1)), 110);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(2, 1)), 100);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(4, 1)), 118);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(5, 1)), 120);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(7, 1)), 105);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(8, 1)), 114);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(9, 1)), 113);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(10, 1)), 95);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(11, 1)), 104);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(12, 1)), 97);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(13, 1)), 110);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(14, 1)), 100);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(15, 1)), 108);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(16, 1)), 101);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(17, 1)), 114);
    $M.201 := $store.i8($M.201, $add.ref($add.ref(__kstrtab_snd_vx_irq_handler, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.202 := $store.i8($M.202, __kstrtab_snd_vx_threaded_irq_handler, 115);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(1, 1)), 110);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(2, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(3, 1)), 95);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(4, 1)), 118);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(5, 1)), 120);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(6, 1)), 95);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(7, 1)), 116);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(8, 1)), 104);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(9, 1)), 114);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(10, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(11, 1)), 97);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(12, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(13, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(14, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(15, 1)), 95);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(16, 1)), 105);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(17, 1)), 114);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(18, 1)), 113);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(19, 1)), 95);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(20, 1)), 104);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(21, 1)), 97);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(22, 1)), 110);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(23, 1)), 100);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(24, 1)), 108);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(25, 1)), 101);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(26, 1)), 114);
    $M.202 := $store.i8($M.202, $add.ref($add.ref(__kstrtab_snd_vx_threaded_irq_handler, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.203 := $store.i8($M.203, __kstrtab_snd_vx_load_boot_image, 115);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(1, 1)), 110);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(4, 1)), 118);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(5, 1)), 120);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(7, 1)), 108);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(8, 1)), 111);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(10, 1)), 100);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(11, 1)), 95);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(12, 1)), 98);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(13, 1)), 111);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(14, 1)), 111);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(15, 1)), 116);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(18, 1)), 109);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(19, 1)), 97);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(20, 1)), 103);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.203 := $store.i8($M.203, $add.ref($add.ref(__kstrtab_snd_vx_load_boot_image, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    call {:si_unique_call 1598} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_power_lock_of_snd_card"} boogie_si_record_i8(0);
    call {:si_unique_call 1599} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mutex_of_device"} boogie_si_record_i8(0);
    call {:si_unique_call 1600} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_mixer_mutex_of_vx_core"} boogie_si_record_i8(0);
    $M.14 := 0;
    call {:si_unique_call 1601} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock_of_vx_core"} boogie_si_record_i8(0);
    call {:si_unique_call 1602} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_lock"} boogie_si_record_i8(0);
    call {:si_unique_call 1603} {:cexpr "LDV_LINUX_KERNEL_LOCKING_MUTEX_MUTEXES_i_mutex_of_inode"} boogie_si_record_i8(0);
    call {:si_unique_call 1604} {:cexpr "LDV_LINUX_USB_DEV_USB_DEV_REF_COUNTS"} boogie_si_record_i32(0);
    $M.166 := 0;
    call {:si_unique_call 1605} {:cexpr "ldv_linux_usb_urb_urb_state"} boogie_si_record_i32(0);
    call {:si_unique_call 1606} {:cexpr "ldv_linux_usb_register_probe_state"} boogie_si_record_i32(0);
    $M.165 := 0;
    call {:si_unique_call 1607} {:cexpr "ldv_linux_usb_gadget_usb_gadget"} boogie_si_record_i32(0);
    $M.164 := 0;
    call {:si_unique_call 1608} {:cexpr "ldv_linux_usb_coherent_coherent_state"} boogie_si_record_i32(0);
    $M.163 := 0;
    call {:si_unique_call 1609} {:cexpr "locksocknumber"} boogie_si_record_i32(0);
    $M.162 := 0;
    call {:si_unique_call 1610} {:cexpr "rtnllocknumber"} boogie_si_record_i32(0);
    call {:si_unique_call 1611} {:cexpr "ldv_linux_net_register_probe_state"} boogie_si_record_i32(0);
    $M.161 := 0;
    call {:si_unique_call 1612} {:cexpr "ldv_linux_mmc_sdio_func_sdio_element"} boogie_si_record_i16(0);
    $M.158 := 0;
    call {:si_unique_call 1613} {:cexpr "ldv_linux_kernel_rcu_update_lock_rcu_nested"} boogie_si_record_i32(0);
    $M.157 := 0;
    call {:si_unique_call 1614} {:cexpr "ldv_linux_kernel_rcu_update_lock_sched_rcu_nested_sched"} boogie_si_record_i32(0);
    $M.156 := 0;
    call {:si_unique_call 1615} {:cexpr "ldv_linux_kernel_rcu_update_lock_bh_rcu_nested_bh"} boogie_si_record_i32(0);
    $M.159 := 0;
    call {:si_unique_call 1616} {:cexpr "ldv_linux_kernel_rcu_srcu_srcu_nested"} boogie_si_record_i32(0);
    $M.155 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_linux_kernel_module_module_refcounter"} boogie_si_record_i32(1);
    $M.154 := 1;
    call {:si_unique_call 1618} {:cexpr "ldv_linux_kernel_locking_rwlock_wlock"} boogie_si_record_i32(1);
    $M.153 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_linux_kernel_locking_rwlock_rlock"} boogie_si_record_i32(1);
    $M.152 := 0;
    call {:si_unique_call 1620} {:cexpr "ldv_linux_fs_sysfs_sysfs"} boogie_si_record_i32(0);
    $M.151 := 0;
    call {:si_unique_call 1621} {:cexpr "ldv_linux_fs_char_dev_usb_gadget_chrdev"} boogie_si_record_i32(0);
    $M.150 := 0;
    call {:si_unique_call 1622} {:cexpr "ldv_linux_drivers_base_class_usb_gadget_class"} boogie_si_record_i32(0);
    $M.149 := 0;
    call {:si_unique_call 1623} {:cexpr "ldv_linux_block_request_blk_rq"} boogie_si_record_i32(0);
    $M.146 := 0;
    call {:si_unique_call 1624} {:cexpr "ldv_linux_arch_io_iomem"} boogie_si_record_i32(0);
    $M.45 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_linux_alloc_usb_lock_lock"} boogie_si_record_i32(1);
    $M.235 := $store.i8($M.235, .str.45, 68);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(1, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(2, 1)), 103);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(3, 1)), 105);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(4, 1)), 103);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(5, 1)), 114);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(6, 1)), 97);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(7, 1)), 109);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(8, 1)), 32);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(9, 1)), 37);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.235 := $store.i8($M.235, $add.ref($add.ref(.str.45, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.236 := $store.i8($M.236, .str.46, 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(1, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(6, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(7, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(9, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.46, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.47, 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(2, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(3, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(4, 1)), 48);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(5, 1)), 48);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(6, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(8, 1)), 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.47, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.48, 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(1, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(4, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(5, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(6, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(9, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(10, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.48, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.236 := $store.i8($M.236, .str.49, 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(1, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(3, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(6, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(7, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(9, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.49, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.50, 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(2, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(3, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(4, 1)), 51);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(6, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(8, 1)), 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.50, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.51, 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(1, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(4, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(5, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(6, 1)), 50);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(9, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(10, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.51, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.236 := $store.i8($M.236, .str.52, 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(1, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(6, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(10, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(11, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.52, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.53, 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(1, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(6, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(7, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(9, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.53, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.54, 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(2, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(3, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(4, 1)), 51);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(5, 1)), 115);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(6, 1)), 51);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(8, 1)), 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(9, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(10, 1)), 111);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.54, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.55, 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(1, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(4, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(5, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(6, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(9, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(10, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.55, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.236 := $store.i8($M.236, .str.56, 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(1, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(7, 1)), 52);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(9, 1)), 98);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(10, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(11, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.56, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.57, 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(1, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(2, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(3, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(5, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(6, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(7, 1)), 52);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(8, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(9, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(10, 1)), 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(11, 1)), 120);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.57, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.236 := $store.i8($M.236, .str.58, 108);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(1, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(2, 1)), 49);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(3, 1)), 95);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(4, 1)), 118);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(5, 1)), 112);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(6, 1)), 52);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(7, 1)), 46);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(8, 1)), 100);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(9, 1)), 53);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(10, 1)), 54);
    $M.236 := $store.i8($M.236, $add.ref($add.ref(.str.58, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.237 := $store.i8($M.237, .str.59, 118);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(1, 1)), 120);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(2, 1)), 47);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(3, 1)), 37);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(4, 1)), 115);
    $M.237 := $store.i8($M.237, $add.ref($add.ref(.str.59, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.238 := $store.i8($M.238, .str.65, 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(1, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(2, 1)), 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(3, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(4, 1)), 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(6, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(7, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(8, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(11, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(13, 1)), 86);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(14, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(15, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(16, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(17, 1)), 109);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(18, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.65, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.238 := $store.i8($M.238, .str.66, 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(1, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(2, 1)), 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(3, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(4, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(5, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(6, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(7, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(9, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(10, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(11, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(12, 1)), 86);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(15, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(16, 1)), 109);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(17, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.66, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.239 := $store.i8($M.239, .str.67, 79);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(1, 1)), 117);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(2, 1)), 116);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(3, 1)), 112);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(4, 1)), 117);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(5, 1)), 116);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.67, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.239 := $store.i8($M.239, .str.68, 73);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.68, $mul.ref(0, 6)), $mul.ref(1, 1)), 110);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.68, $mul.ref(0, 6)), $mul.ref(2, 1)), 112);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.68, $mul.ref(0, 6)), $mul.ref(3, 1)), 117);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.68, $mul.ref(0, 6)), $mul.ref(4, 1)), 116);
    $M.239 := $store.i8($M.239, $add.ref($add.ref(.str.68, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.240 := $store.i8($M.240, .str.69, 37);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(1, 1)), 115);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(2, 1)), 32);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(3, 1)), 86);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(4, 1)), 85);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(5, 1)), 32);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(6, 1)), 77);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(7, 1)), 101);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(8, 1)), 116);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(10, 1)), 114);
    $M.240 := $store.i8($M.240, $add.ref($add.ref(.str.69, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.241 := $store.i8($M.241, .str.70, 37);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(1, 1)), 115);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(2, 1)), 32);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(3, 1)), 80);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(5, 1)), 97);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(6, 1)), 107);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(7, 1)), 32);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(8, 1)), 77);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(9, 1)), 101);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(10, 1)), 116);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(11, 1)), 101);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(12, 1)), 114);
    $M.241 := $store.i8($M.241, $add.ref($add.ref(.str.70, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.238 := $store.i8($M.238, .str.122, 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(1, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(2, 1)), 115);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(3, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(4, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(5, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(6, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(7, 1)), 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(8, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(10, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(11, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(12, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(13, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(14, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(15, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(16, 1)), 86);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(17, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(19, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(20, 1)), 109);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(21, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.122, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.238 := $store.i8($M.238, .str.124, 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(1, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(2, 1)), 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(3, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(4, 1)), 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(5, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(6, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(7, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(8, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(9, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(10, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(11, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(12, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(13, 1)), 83);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(14, 1)), 119);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(15, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(17, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(18, 1)), 104);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.124, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.238 := $store.i8($M.238, .str.125, 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(1, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(2, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(4, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(5, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(9, 1)), 103);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(11, 1)), 86);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(12, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(13, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(14, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(15, 1)), 109);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(16, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.125, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.238 := $store.i8($M.238, .str.127, 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(1, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(2, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(3, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(4, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(5, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(7, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(8, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(9, 1)), 103);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(10, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(11, 1)), 83);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(12, 1)), 119);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(14, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(15, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(16, 1)), 104);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.127, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.238 := $store.i8($M.238, .str.128, 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(1, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(2, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(3, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(4, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(5, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(6, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(7, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(8, 1)), 83);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(9, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(11, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(12, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(13, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.128, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.238 := $store.i8($M.238, .str.129, 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(1, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(2, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(3, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(4, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(5, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(6, 1)), 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(8, 1)), 100);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.129, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.238 := $store.i8($M.238, .str.130, 73);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(1, 1)), 69);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(2, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(3, 1)), 57);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(4, 1)), 53);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(5, 1)), 56);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(6, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(7, 1)), 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(8, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(9, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(10, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(11, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(12, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(13, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(14, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(15, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(16, 1)), 77);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(18, 1)), 115);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(19, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.130, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.238 := $store.i8($M.238, .str.131, 73);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(1, 1)), 69);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(2, 1)), 67);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(3, 1)), 57);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(4, 1)), 53);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(5, 1)), 56);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(6, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(7, 1)), 80);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(8, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(9, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(10, 1)), 121);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(11, 1)), 98);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(12, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(13, 1)), 99);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(14, 1)), 107);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(15, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(16, 1)), 68);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(18, 1)), 102);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(19, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(20, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(21, 1)), 108);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(22, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.131, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.238 := $store.i8($M.238, .str.132, 73);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(1, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(2, 1)), 112);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(3, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(4, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(5, 1)), 32);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(6, 1)), 83);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(7, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(8, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(9, 1)), 117);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(10, 1)), 114);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(12, 1)), 116);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(15, 1)), 110);
    $M.238 := $store.i8($M.238, $add.ref($add.ref(.str.132, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    call {:si_unique_call 1626} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 610095);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i8);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 611127);

procedure devirtbounce.1(funcPtr: ref, arg: ref);



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 612159);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i8);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i8)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 613191);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 614223);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i32) returns ($r: i32);



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 615255);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i32, arg2: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 616287);

procedure devirtbounce.6(funcPtr: ref, arg: ref) returns ($r: i32);



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 617319);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref, arg1: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 618351);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

const $u1: ref;

const $u10: ref;

const $u2: ref;

const $u3: ref;

const $u4: ref;

const $u5: ref;

const $u6: i64;

const $u7: ref;

const $u8: ref;

const $u9: ref;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.171, $M.160, $M.46, $M.148, $M.147, $M.9, $M.6, $M.8, $M.7, $M.50, $M.0, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.14, $M.166, $M.165, $M.164, $M.163, $M.162, $M.161, $M.158, $M.157, $M.156, $M.159, $M.155, $M.154, $M.153, $M.152, $M.151, $M.150, $M.149, $M.146, $M.45, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1627} __SMACK_static_init();
    call {:si_unique_call 1628} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.171, $M.160, $M.46, $M.148, $M.147, $M.9, $M.6, $M.8, $M.7, $M.50, $M.0, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.14, $M.166, $M.165, $M.164, $M.163, $M.162, $M.161, $M.158, $M.157, $M.156, $M.159, $M.155, $M.154, $M.153, $M.152, $M.151, $M.150, $M.149, $M.146, $M.45, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $CurrAddr, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $M.52, $M.60, $M.15;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation snd_vx_check_reg_bit_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i11: i64, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i64, in_$i49: i64, in_$i50: i1) returns (out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i64, out_$i49: i64, out_$i50: i1)
{

  entry:
    out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50 := in_$i43, in_$i44, in_$i45, in_$i46, in_$i48, in_$i49, in_$i50;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb7_dummy;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    out_$i46 := $eq.i32(out_$i45, in_$i3);
    goto corral_source_split_73;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    out_$i45 := $and.i32(out_$i44, in_$i2);
    goto corral_source_split_72;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i8.i32(out_$i43);
    goto corral_source_split_71;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} out_$i43 := snd_vx_inb(in_$p0, in_$i1);
    call {:si_unique_call 9} {:cexpr "tmp"} boogie_si_record_i8(out_$i43);
    goto corral_source_split_70;

  $bb5:
    assume out_$i50 == 1;
    goto corral_source_split_69;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    out_$i50 := $sge.i64(out_$i49, 0);
    goto corral_source_split_81;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    out_$i49 := $sub.i64(in_$i11, out_$i48);
    goto corral_source_split_80;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i64($M.0, jiffies);
    goto corral_source_split_79;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50 := snd_vx_check_reg_bit_loop_$bb4(in_$p0, in_$i1, in_$i2, in_$i3, in_$i11, out_$i43, out_$i44, out_$i45, out_$i46, out_$i48, out_$i49, out_$i50);
    return;

  exit:
    return;
}



procedure snd_vx_check_reg_bit_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i3: i32, in_$i11: i64, in_$i43: i8, in_$i44: i32, in_$i45: i32, in_$i46: i1, in_$i48: i64, in_$i49: i64, in_$i50: i1) returns (out_$i43: i8, out_$i44: i32, out_$i45: i32, out_$i46: i1, out_$i48: i64, out_$i49: i64, out_$i50: i1);



implementation vx_pcm_playback_transfer_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i16: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i16: i32)
{

  entry:
    out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i16 := in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i16;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  $bb16:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i22;
    goto $bb16_dummy;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, in_$i3);
    goto corral_source_split_198;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i16, 1);
    call {:si_unique_call 45} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_197;

  $bb14:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i20, 0);
    goto corral_source_split_193;

  SeqInstr_9:
    call {:si_unique_call 44} {:cexpr "err"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_192;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} out_$i20 := vx_pcm_playback_transfer_chunk(in_$p0, in_$p5, in_$p2, out_$i19);
    goto SeqInstr_8;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_191;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 712)), $mul.ref(432, 1)), $mul.ref(0, 1));
    goto corral_source_split_190;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i16 := vx_pcm_playback_transfer_loop_$bb11(in_$p0, in_$p2, in_$i3, in_$p5, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i16);
    return;

  exit:
    return;
}



procedure vx_pcm_playback_transfer_loop_$bb11(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$p5: ref, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i1, in_$i16: i32) returns (out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i1, out_$i16: i32);
  modifies $M.0, $M.1, $M.14, $CurrAddr, assertsPassed;



implementation vx_send_msg_nolock_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p73: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i8, in_$i87: i32, in_$i88: i8, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$i109: i32, in_$i110: i1, in_$i77: i32) returns (out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i8, out_$i87: i32, out_$i88: i8, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$i109: i32, out_$i110: i1, out_$i77: i32)
{

  entry:
    out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i77 := in_$i78, in_$i79, in_$i80, in_$i81, in_$p83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i77;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  $bb39:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i77 := out_$i107;
    goto $bb39_dummy;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i107, out_$i109);
    goto corral_source_split_617;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    goto corral_source_split_616;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, in_$p73);
    goto corral_source_split_615;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i32(out_$i77, 1);
    call {:si_unique_call 166} {:cexpr "i"} boogie_si_record_i32(out_$i107);
    goto corral_source_split_614;

  $bb37:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i104;
    assume true;
    goto $bb37;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, 0);
    goto corral_source_split_609;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} out_$i104 := vx_send_irq_dsp(in_$p0, 52);
    call {:si_unique_call 164} {:cexpr "err"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_608;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} snd_vx_outb(in_$p0, 6, out_$i103);
    goto corral_source_split_607;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i8(out_$i102);
    goto corral_source_split_606;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i8.i32(out_$i101);
    goto corral_source_split_605;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    out_$i101 := $trunc.i32.i8(out_$i100);
    goto corral_source_split_604;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_603;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(out_$i97, 4));
    goto corral_source_split_602;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i77);
    goto corral_source_split_601;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} snd_vx_outb(in_$p0, 5, out_$i96);
    goto corral_source_split_600;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    out_$i96 := $trunc.i32.i8(out_$i95);
    goto corral_source_split_599;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_598;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    out_$i94 := $trunc.i32.i8(out_$i93);
    goto corral_source_split_597;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    out_$i93 := $lshr.i32(out_$i92, 8);
    goto corral_source_split_596;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.0, out_$p91);
    goto corral_source_split_595;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(out_$i89, 4));
    goto corral_source_split_594;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i77);
    goto corral_source_split_593;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} snd_vx_outb(in_$p0, 4, out_$i88);
    goto corral_source_split_592;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i8(out_$i87);
    goto corral_source_split_591;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i86);
    goto corral_source_split_590;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    out_$i86 := $trunc.i32.i8(out_$i85);
    goto corral_source_split_589;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    out_$i85 := $lshr.i32(out_$i84, 16);
    goto corral_source_split_588;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.0, out_$p83);
    goto corral_source_split_587;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(4, 1)), $mul.ref(out_$i81, 4));
    goto corral_source_split_586;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i81 := $sext.i32.i64(out_$i77);
    goto corral_source_split_585;

  $bb34:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i78;
    assume true;
    goto $bb34;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i32(out_$i78, 0);
    goto corral_source_split_580;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} out_$i78 := snd_vx_check_reg_bit(in_$p0, 2, 4, 4, 200);
    call {:si_unique_call 158} {:cexpr "err"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i77 := vx_send_msg_nolock_loop_$bb31(in_$p0, in_$p1, in_$p73, out_$i78, out_$i79, out_$i80, out_$i81, out_$p83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i77);
    return;

  exit:
    return;
}



procedure vx_send_msg_nolock_loop_$bb31(in_$p0: ref, in_$p1: ref, in_$p73: ref, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i64, in_$p83: ref, in_$i84: i32, in_$i85: i32, in_$i86: i8, in_$i87: i32, in_$i88: i8, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i8, in_$i95: i32, in_$i96: i8, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$i101: i8, in_$i102: i32, in_$i103: i8, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$i109: i32, in_$i110: i1, in_$i77: i32) returns (out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i64, out_$p83: ref, out_$i84: i32, out_$i85: i32, out_$i86: i8, out_$i87: i32, out_$i88: i8, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i8, out_$i95: i32, out_$i96: i8, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$i101: i8, out_$i102: i32, out_$i103: i8, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$i109: i32, out_$i110: i1, out_$i77: i32);
  modifies $M.1, $CurrAddr;



implementation vx_read_status_loop_$bb45(in_$p0: ref, in_$p1: ref, in_$i40: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i8, in_$i87: i32, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$i92: i8, in_$i93: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$i103: i8, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i79: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i8, out_$i87: i32, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$i92: i8, out_$i93: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$i103: i8, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i79: i32)
{

  entry:
    out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i79 := in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$p95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$p102, in_$i103, in_$i104, in_$p106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p112, in_$i113, in_$i114, in_$i79;
    goto $bb45, exit;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  $bb53:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i79 := out_$i113;
    goto $bb53_dummy;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$i114 := $sle.i32(out_$i113, in_$i40);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i79, 1);
    call {:si_unique_call 229} {:cexpr "i"} boogie_si_record_i32(out_$i113);
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p112, out_$i109);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(out_$i110, 4));
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i110 := $sext.i32.i64(out_$i79);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$i109 := $or.i32(out_$i107, out_$i108);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i103);
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i32($M.0, out_$p106);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(out_$i104, 4));
    goto corral_source_split_826;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i79);
    goto corral_source_split_825;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} out_$i103 := snd_vx_inb(in_$p0, 6);
    call {:si_unique_call 228} {:cexpr "tmp___6"} boogie_si_record_i8(out_$i103);
    goto corral_source_split_824;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p102, out_$i99);
    goto corral_source_split_823;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(out_$i100, 4));
    goto corral_source_split_822;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    out_$i100 := $sext.i32.i64(out_$i79);
    goto corral_source_split_821;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    out_$i99 := $or.i32(out_$i96, out_$i98);
    goto corral_source_split_820;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i98 := $shl.i32(out_$i97, 8);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i97 := $zext.i8.i32(out_$i92);
    goto corral_source_split_818;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    out_$i96 := $load.i32($M.0, out_$p95);
    goto corral_source_split_817;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(out_$i93, 4));
    goto corral_source_split_816;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    out_$i93 := $sext.i32.i64(out_$i79);
    goto corral_source_split_815;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} out_$i92 := snd_vx_inb(in_$p0, 5);
    call {:si_unique_call 226} {:cexpr "tmp___5"} boogie_si_record_i8(out_$i92);
    goto corral_source_split_814;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p91, out_$i88);
    goto corral_source_split_813;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 136)), $mul.ref(68, 1)), $mul.ref(out_$i89, 4));
    goto corral_source_split_812;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i79);
    goto corral_source_split_811;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i88 := $shl.i32(out_$i87, 16);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i8.i32(out_$i86);
    goto corral_source_split_809;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} out_$i86 := snd_vx_inb(in_$p0, 4);
    call {:si_unique_call 224} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i86);
    goto corral_source_split_808;

  $bb51:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i83;
    assume true;
    goto $bb51;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    out_$i84 := $slt.i32(out_$i83, 0);
    goto corral_source_split_804;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} out_$i83 := snd_vx_check_reg_bit(in_$p0, 2, 1, 1, 200);
    call {:si_unique_call 222} {:cexpr "err"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_803;

  $bb48:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i80;
    assume true;
    goto $bb48;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    out_$i81 := $slt.i32(out_$i80, 0);
    goto corral_source_split_799;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} out_$i80 := vx_send_irq_dsp(in_$p0, 50);
    call {:si_unique_call 220} {:cexpr "err"} boogie_si_record_i32(out_$i80);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i79 := vx_read_status_loop_$bb45(in_$p0, in_$p1, in_$i40, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$p102, out_$i103, out_$i104, out_$p106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p112, out_$i113, out_$i114, out_$i79);
    return;

  exit:
    return;
}



procedure vx_read_status_loop_$bb45(in_$p0: ref, in_$p1: ref, in_$i40: i32, in_$i80: i32, in_$i81: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i8, in_$i87: i32, in_$i88: i32, in_$i89: i64, in_$p91: ref, in_$i92: i8, in_$i93: i64, in_$p95: ref, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$i99: i32, in_$i100: i64, in_$p102: ref, in_$i103: i8, in_$i104: i64, in_$p106: ref, in_$i107: i32, in_$i108: i32, in_$i109: i32, in_$i110: i64, in_$p112: ref, in_$i113: i32, in_$i114: i1, in_$i79: i32) returns (out_$i80: i32, out_$i81: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i8, out_$i87: i32, out_$i88: i32, out_$i89: i64, out_$p91: ref, out_$i92: i8, out_$i93: i64, out_$p95: ref, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$i99: i32, out_$i100: i64, out_$p102: ref, out_$i103: i8, out_$i104: i64, out_$p106: ref, out_$i107: i32, out_$i108: i32, out_$i109: i32, out_$i110: i64, out_$p112: ref, out_$i113: i32, out_$i114: i1, out_$i79: i32);
  modifies $M.0, $M.1, $CurrAddr;



implementation vx_read_status_loop_$bb24(in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32, in_$i46: i32, in_$i53: i32) returns (out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32, out_$i46: i32, out_$i53: i32)
{

  entry:
    out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i46, out_$i53 := in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i45, in_$i46, in_$i53;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_750;

  $bb29:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i45, out_$i46 := out_$i50, out_$i51;
    goto $bb29_dummy;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i50;
    assume true;
    goto $bb29;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_760;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    out_$i51 := $ashr.i32(out_$i46, 1);
    call {:si_unique_call 212} {:cexpr "val"} boogie_si_record_i32(out_$i51);
    goto corral_source_split_759;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_758;

  $bb27:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i45;
    goto $bb28;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb28;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i45, 1);
    call {:si_unique_call 211} {:cexpr "size"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_756;

  $bb26:
    assume out_$i48 == 1;
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i32(out_$i47, 0);
    goto corral_source_split_753;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i32(out_$i46, 1);
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i46, out_$i53 := vx_read_status_loop_$bb24(out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i45, out_$i46, out_$i53);
    return;

  exit:
    return;
}



procedure vx_read_status_loop_$bb24(in_$i47: i32, in_$i48: i1, in_$i49: i32, in_$i50: i32, in_$i51: i32, in_$i52: i1, in_$i45: i32, in_$i46: i32, in_$i53: i32) returns (out_$i47: i32, out_$i48: i1, out_$i49: i32, out_$i50: i32, out_$i51: i32, out_$i52: i1, out_$i45: i32, out_$i46: i32, out_$i53: i32);



implementation vx_toggle_dac_mute_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i7 := in_$p8, in_$p9, in_$p10, in_$p11, in_$i12, in_$i13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1084;

  $bb9:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    out_$i24 := $ult.i32(out_$i20, out_$i23);
    goto corral_source_split_1107;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p2);
    goto corral_source_split_1104;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i7, 1);
    call {:si_unique_call 292} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_1103;

  SeqInstr_96:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    call {:si_unique_call 290} devirtbounce.5(out_$p17, in_$p0, 2, in_$i1);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1094;

  $bb6:
    assume out_$i13 == 1;
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    out_$i13 := $ne.i64(out_$i12, 0);
    goto corral_source_split_1091;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(out_$p11);
    goto corral_source_split_1090;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1089;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_1088;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1087;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 712)), $mul.ref(40, 1));
    goto corral_source_split_1086;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} vx_set_codec_reg(in_$p0, out_$i7, 2, out_$i19);
    goto SeqInstr_95;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i19 := (if out_$i18 == 1 then 56 else 8);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(in_$i1, 0);
    goto corral_source_split_1100;

  $bb7:
    assume !(out_$i13 == 1);
    goto corral_source_split_1099;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i7 := vx_toggle_dac_mute_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$p8, out_$p9, out_$p10, out_$p11, out_$i12, out_$i13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i7);
    return;

  exit:
    return;
}



procedure vx_toggle_dac_mute_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$i13: i1, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i1, in_$i19: i32, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$i7: i32) returns (out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$i13: i1, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i1, out_$i19: i32, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$i7: i32);
  modifies $M.15, $CurrAddr, $M.14, assertsPassed;



implementation ldv_assume_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ldv_assume_loop_$bb3();
    return;

  exit:
    return;
}



procedure ldv_assume_loop_$bb3();



implementation vx_toggle_pipe_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i10: i32)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i14, out_$i10 := in_$i11, in_$i12, in_$i13, in_$i14, in_$i10;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1807;

  $bb22:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i13;
    goto $bb22_dummy;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$i14 := $sle.i32(out_$i13, 249);
    goto corral_source_split_1820;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, 1);
    call {:si_unique_call 419} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_1819;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} __const_udelay(4295000);
    goto corral_source_split_1815;

  $bb16:
    assume 1 == 1;
    goto corral_source_split_1814;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb16, $bb17;

  $bb13:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i11, 0);
    goto corral_source_split_1810;

  SeqInstr_180:
    call {:si_unique_call 417} {:cexpr "err"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1809;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} out_$i11 := vx_pipe_can_start(in_$p0, in_$p1);
    goto SeqInstr_179;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume !(1 == 1);
    goto corral_source_split_1817;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i14, out_$i10 := vx_toggle_pipe_loop_$bb10(in_$p0, in_$p1, out_$i11, out_$i12, out_$i13, out_$i14, out_$i10);
    return;

  exit:
    return;
}



procedure vx_toggle_pipe_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i11: i32, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i10: i32) returns (out_$i11: i32, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i10: i32);
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed;



implementation ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$p31: ref) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$p31: ref)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p31;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1363} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5703;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1062:
    goto corral_source_split_5713;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} ldv_io_instance_callback_0_26($u2, in_$p4, $u0);
    goto SeqInstr_1061;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_5711;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_5704;

  SeqInstr_1065:
    goto corral_source_split_5719;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_io_instance_callback_0_25($u3, in_$p4);
    goto SeqInstr_1064;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_5717;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, 2);
    goto corral_source_split_5715;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_io_instance_callback_0_24($u4, in_$p4);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    goto corral_source_split_5721;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_io_instance_callback_0_21($u5, in_$p4, $u6);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i25 == 1;
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 4);
    goto corral_source_split_5727;

  $bb21:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ldv_io_instance_callback_0_18($u7, in_$p4, $u0, out_$p31);
    goto corral_source_split_5738;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i26 == 1;
    goto corral_source_split_5735;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 5);
    goto corral_source_split_5733;

  $bb25:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_io_instance_callback_0_17($u8, in_$p4, in_$p2);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i27 == 1;
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i21, 6);
    goto corral_source_split_5740;

  $bb29:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_io_instance_callback_0_4($u3, in_$p4);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i28 == 1;
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i21, 7);
    goto corral_source_split_5746;

  $bb33:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb7(in_$p2, in_$p4, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31);
    return;

  exit:
    return;
}



procedure ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$p31: ref) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$p31: ref);
  modifies $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $CurrAddr, $M.60, $M.14, assertsPassed, $M.15;



implementation ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5686;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb9_dummy;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_5707;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_$i17 := ldv_undef_int();
    call {:si_unique_call 1365} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5706;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1068:
    goto corral_source_split_5758;

  SeqInstr_1067:
    assume assertsPassed;
    goto SeqInstr_1068;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} ldv_io_instance_release_0_2(out_$p33, in_$p4);
    goto SeqInstr_1067;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.143, out_$p32);
    goto corral_source_split_5757;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_5756;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i30 == 1;
    goto corral_source_split_5754;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 8);
    goto corral_source_split_5752;

  $bb37:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i21, 7);
    goto corral_source_split_5746;

  $bb33:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i21, 6);
    goto corral_source_split_5740;

  $bb29:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 5);
    goto corral_source_split_5733;

  $bb25:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 4);
    goto corral_source_split_5727;

  $bb21:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    goto corral_source_split_5721;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, 2);
    goto corral_source_split_5715;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_5704;

  $bb7:
    call out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb7(in_$p2, in_$p4, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31);
    goto $bb7_last;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1363} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5703;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb45:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1062:
    goto corral_source_split_5713;

  SeqInstr_1061:
    assume assertsPassed;
    goto SeqInstr_1062;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} ldv_io_instance_callback_0_26($u2, in_$p4, $u0);
    goto SeqInstr_1061;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_5711;

  SeqInstr_1065:
    goto corral_source_split_5719;

  SeqInstr_1064:
    assume assertsPassed;
    goto SeqInstr_1065;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_io_instance_callback_0_25($u3, in_$p4);
    goto SeqInstr_1064;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_5717;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} ldv_io_instance_callback_0_24($u4, in_$p4);
    goto corral_source_split_5725;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_5723;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} ldv_io_instance_callback_0_21($u5, in_$p4, $u6);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i25 == 1;
    goto corral_source_split_5729;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} ldv_io_instance_callback_0_18($u7, in_$p4, $u0, out_$p31);
    goto corral_source_split_5738;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5737;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i26 == 1;
    goto corral_source_split_5735;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} ldv_io_instance_callback_0_17($u8, in_$p4, in_$p2);
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i27 == 1;
    goto corral_source_split_5742;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} ldv_io_instance_callback_0_4($u3, in_$p4);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i28 == 1;
    goto corral_source_split_5748;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} ldv_assume(out_$i14);
    goto corral_source_split_5696;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i32(out_$i13);
    goto corral_source_split_5695;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 0);
    goto corral_source_split_5694;

  $bb5:
    assume out_$i12 == 1;
    goto corral_source_split_5693;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5691;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1359} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5690;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} out_$i10 := ldv_filter_err_code(out_$i9);
    call {:si_unique_call 1357} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5689;

  SeqInstr_1059:
    call {:si_unique_call 1355} {:cexpr "ldv_0_ret_default"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_5688;

  SeqInstr_1058:
    assume assertsPassed;
    goto SeqInstr_1059;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} out_$i9 := ldv_io_instance_probe_0_11(out_$p8, in_$p4);
    goto SeqInstr_1058;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.142, out_$p7);
    goto corral_source_split_5687;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} ldv_assume(out_$i16);
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5699;

  $bb6:
    assume !(out_$i12 == 1);
    goto corral_source_split_5698;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33 := ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb4(in_$p2, in_$p4, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33);
    return;

  exit:
    return;
}



procedure ldv_struct_snd_pcm_ops_io_instance_0_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref);
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.15, $M.53, $M.52;



implementation ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$p31: ref) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$p31: ref)
{

  entry:
    out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p31;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5794;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb45_dummy;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1074:
    goto corral_source_split_5804;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_io_instance_callback_1_26($u2, in_$p4, $u0);
    goto SeqInstr_1073;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_5802;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_5795;

  SeqInstr_1077:
    goto corral_source_split_5810;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_io_instance_callback_1_25($u3, in_$p4);
    goto SeqInstr_1076;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, 2);
    goto corral_source_split_5806;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} ldv_io_instance_callback_1_24($u4, in_$p4);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_5814;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    goto corral_source_split_5812;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_io_instance_callback_1_21($u5, in_$p4, $u6);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i25 == 1;
    goto corral_source_split_5820;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 4);
    goto corral_source_split_5818;

  $bb21:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_io_instance_callback_1_18($u7, in_$p4, $u0, out_$p31);
    goto corral_source_split_5829;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i26 == 1;
    goto corral_source_split_5826;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 5);
    goto corral_source_split_5824;

  $bb25:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ldv_io_instance_callback_1_17($u8, in_$p4, in_$p2);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i27 == 1;
    goto corral_source_split_5833;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i21, 6);
    goto corral_source_split_5831;

  $bb29:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_io_instance_callback_1_4($u3, in_$p4);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i28 == 1;
    goto corral_source_split_5839;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i21, 7);
    goto corral_source_split_5837;

  $bb33:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb45_dummy:
    call {:si_unique_call 1} out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb7(in_$p2, in_$p4, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31);
    return;

  exit:
    return;
}



procedure ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb7(in_$p2: ref, in_$p4: ref, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$p31: ref) returns (out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$p31: ref);
  modifies $M.0, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.1, $CurrAddr, $M.60, $M.14, assertsPassed, $M.15;



implementation ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref)
{

  entry:
    out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33 := in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_5777;

  $bb9:
    assume {:verifier.code 0} true;
    assume out_$i18 == 1;
    goto $bb9_dummy;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i32(out_$i17, 0);
    goto corral_source_split_5798;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} out_$i17 := ldv_undef_int();
    call {:si_unique_call 1392} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5797;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_1080:
    goto corral_source_split_5849;

  SeqInstr_1079:
    assume assertsPassed;
    goto SeqInstr_1080;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} ldv_io_instance_release_1_2(out_$p33, in_$p4);
    goto SeqInstr_1079;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.145, out_$p32);
    goto corral_source_split_5848;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($u1, $mul.ref(0, 112)), $mul.ref(8, 1));
    goto corral_source_split_5847;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i30 == 1;
    goto corral_source_split_5845;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 8);
    goto corral_source_split_5843;

  $bb37:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb36, $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i28 := $eq.i32(out_$i21, 7);
    goto corral_source_split_5837;

  $bb33:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i21, 6);
    goto corral_source_split_5831;

  $bb29:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i21, 5);
    goto corral_source_split_5824;

  $bb25:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i21, 4);
    goto corral_source_split_5818;

  $bb21:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i24 := $eq.i32(out_$i21, 3);
    goto corral_source_split_5812;

  $bb17:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i21, 2);
    goto corral_source_split_5806;

  $bb13:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 1);
    goto corral_source_split_5795;

  $bb7:
    call out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31 := ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb7(in_$p2, in_$p4, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p31);
    goto $bb7_last;

  $bb7_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_$i21 := ldv_undef_int();
    call {:si_unique_call 1390} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5794;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb45:
    assume {:verifier.code 0} true;
    assume false;
    return;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_1074:
    goto corral_source_split_5804;

  SeqInstr_1073:
    assume assertsPassed;
    goto SeqInstr_1074;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} ldv_io_instance_callback_1_26($u2, in_$p4, $u0);
    goto SeqInstr_1073;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume out_$i22 == 1;
    goto corral_source_split_5802;

  SeqInstr_1077:
    goto corral_source_split_5810;

  SeqInstr_1076:
    assume assertsPassed;
    goto SeqInstr_1077;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} ldv_io_instance_callback_1_25($u3, in_$p4);
    goto SeqInstr_1076;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i23 == 1;
    goto corral_source_split_5808;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} ldv_io_instance_callback_1_24($u4, in_$p4);
    goto corral_source_split_5816;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_5814;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} ldv_io_instance_callback_1_21($u5, in_$p4, $u6);
    goto corral_source_split_5822;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb24:
    assume out_$i25 == 1;
    goto corral_source_split_5820;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ldv_io_instance_callback_1_18($u7, in_$p4, $u0, out_$p31);
    goto corral_source_split_5829;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_5828;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i26 == 1;
    goto corral_source_split_5826;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} ldv_io_instance_callback_1_17($u8, in_$p4, in_$p2);
    goto corral_source_split_5835;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume out_$i27 == 1;
    goto corral_source_split_5833;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} ldv_io_instance_callback_1_4($u3, in_$p4);
    goto corral_source_split_5841;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume out_$i28 == 1;
    goto corral_source_split_5839;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} ldv_assume(out_$i14);
    goto corral_source_split_5787;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i32(out_$i13);
    goto corral_source_split_5786;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i10, 0);
    goto corral_source_split_5785;

  $bb5:
    assume out_$i12 == 1;
    goto corral_source_split_5784;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i32(out_$i11, 0);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} out_$i11 := ldv_undef_int();
    call {:si_unique_call 1386} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_5781;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} out_$i10 := ldv_filter_err_code(out_$i9);
    call {:si_unique_call 1384} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_5780;

  SeqInstr_1071:
    call {:si_unique_call 1382} {:cexpr "ldv_1_ret_default"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_5779;

  SeqInstr_1070:
    assume assertsPassed;
    goto SeqInstr_1071;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} out_$i9 := ldv_io_instance_probe_1_11(out_$p8, in_$p4);
    goto SeqInstr_1070;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.144, out_$p7);
    goto corral_source_split_5778;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} ldv_assume(out_$i16);
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_5791;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i32(out_$i10, 0);
    goto corral_source_split_5790;

  $bb6:
    assume !(out_$i12 == 1);
    goto corral_source_split_5789;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33 := ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb4(in_$p2, in_$p4, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33);
    return;

  exit:
    return;
}



procedure ldv_struct_snd_pcm_ops_io_instance_1_loop_$bb4(in_$p2: ref, in_$p4: ref, in_$p7: ref, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i13: i1, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i21: i32, in_$i22: i1, in_$i23: i1, in_$i24: i1, in_$i25: i1, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref) returns (out_$p7: ref, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i13: i1, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i21: i32, out_$i22: i1, out_$i23: i1, out_$i24: i1, out_$i25: i1, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref);
  modifies $M.0, $M.14, $M.1, $CurrAddr, assertsPassed, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.15, $M.53;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


